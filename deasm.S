
target/build/Clang-18-x86_64-pc-linux-gnu/kernel_main:     file format elf64-x86-64


Disassembly of section .text:

00000000000021c0 <interrupt_common>:

    // Clear the direction flag.  Without this, uses of string
    // instructions, e.g. REP MOVS in memcpy() or inlined by the compiler,
    // can go wrong and copy in the wrong direction, since this code may
    // assume that the direction flag is unset.
    cld
    21c0:	fc                   	cld
    // Later on we're going to calculate the percpu pointer using dead reckoning
    // from %rsp so keep track of what all has been pushed onto the stack.
    //
    // At this point the stack contains 7 qwords.  5 or 6 pushed by the interrupt
    // and 2 or 1 pushed by the stub.
    save_general_registers
    21c1:	41 57                	push   %r15
    21c3:	41 56                	push   %r14
    21c5:	41 55                	push   %r13
    21c7:	41 54                	push   %r12
    21c9:	41 53                	push   %r11
    21cb:	41 52                	push   %r10
    21cd:	41 51                	push   %r9
    21cf:	41 50                	push   %r8
    21d1:	50                   	push   %rax
    21d2:	51                   	push   %rcx
    21d3:	52                   	push   %rdx
    21d4:	53                   	push   %rbx
    21d5:	55                   	push   %rbp
    21d6:	56                   	push   %rsi
    21d7:	57                   	push   %rdi
    // Zero general-purpose registers to constrain speculative execution with
    // potentially-hostile register values; the values may have come from user
    // mode and could be consumed by in-kernel speculative execution.
    // Zeroing of ebp is delayed till we check precisely if this was a user fault
    // so that kernel faults can have correct stack frames for backtraces.
    zero_general_registers
    21d8:	31 c0                	xor    %eax,%eax
    21da:	31 db                	xor    %ebx,%ebx
    21dc:	31 c9                	xor    %ecx,%ecx
    21de:	31 d2                	xor    %edx,%edx
    21e0:	31 f6                	xor    %esi,%esi
    21e2:	31 ff                	xor    %edi,%edi
    21e4:	4d 31 c0             	xor    %r8,%r8
    21e7:	4d 31 c9             	xor    %r9,%r9
    21ea:	4d 31 d2             	xor    %r10,%r10
    21ed:	4d 31 db             	xor    %r11,%r11
    21f0:	4d 31 e4             	xor    %r12,%r12
    21f3:	4d 31 ed             	xor    %r13,%r13
    21f6:	4d 31 f6             	xor    %r14,%r14
    21f9:	4d 31 ff             	xor    %r15,%r15

    // At this point the stack contains a complete Iframe.

    // Pass the Iframe in %rdi.
    movq %rsp, %rdi
    21fc:	48 89 e7             	mov    %rsp,%rdi

    // Check to see if we came from user space by testing the CPL in the
    // %cs selector that was saved on the stack automatically.  Check for != 0.
    testb $3, X86_IRQFRAME_OFFSET_CS(%rsp)
    21ff:	f6 84 24 90 00 00 00 	testb  $0x3,0x90(%rsp)
    2206:	03 
    jz 1f
    2207:	74 05                	je     220e <interrupt_common+0x4e>

    // Perform the last zero from the previous block now that we know this is a
    // user fault and we do not need the stack frame.
    xorl %ebp, %ebp
    2209:	31 ed                	xor    %ebp,%ebp
    // Swap %gs.base to kernel space.
    swapgs
    220b:	0f 01 f8             	swapgs
1:
    // Mitigates the swapgs bug. See <arch/code-patches/case-id.h>.
    // .code_patching.start CASE_ID_SWAPGS_MITIGATION
    lfence
    220e:	0f ae e8             	lfence
    // .code_patching.end

    call arch_handle_exception
    2211:	e8 aa 1f 00 00       	call   41c0 <arch_handle_exception>

    // Check if we're returning to user space as per before.
    testb $3, X86_IRQFRAME_OFFSET_CS(%rsp)
    2216:	f6 84 24 90 00 00 00 	testb  $0x3,0x90(%rsp)
    221d:	03 
    jz    1f
    221e:	74 03                	je     2223 <interrupt_common+0x63>

    // Swap gs_base back to user space.
    swapgs
    2220:	0f 01 f8             	swapgs
1:
    lfence
    2223:	0f ae e8             	lfence

.Lcommon_return:
    // Restore general purpose registers.
    restore_general_registers
    2226:	5f                   	pop    %rdi
    2227:	5e                   	pop    %rsi
    2228:	5d                   	pop    %rbp
    2229:	5b                   	pop    %rbx
    222a:	5a                   	pop    %rdx
    222b:	59                   	pop    %rcx
    222c:	58                   	pop    %rax
    222d:	41 58                	pop    %r8
    222f:	41 59                	pop    %r9
    2231:	41 5a                	pop    %r10
    2233:	41 5b                	pop    %r11
    2235:	41 5c                	pop    %r12
    2237:	41 5d                	pop    %r13
    2239:	41 5e                	pop    %r14
    223b:	41 5f                	pop    %r15

    // Drop vector number and error code.
    add_to_sp 16
    223d:	48 83 c4 10          	add    $0x10,%rsp

    iretq
    2241:	48 cf                	iretq
    2243:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    224a:	00 00 00 
    224d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    2254:	00 00 00 
    2257:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    225e:	00 00 00 
    2261:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    2268:	00 00 00 
    226b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    2272:	00 00 00 
    2275:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    227c:	00 00 00 
    227f:	90                   	nop

0000000000002280 <isr.dispatch.2.is.not.the.isr.number>:

.section .data.rel.ro.idt, "aw", %progbits
.balign PAGE_SIZE
.label g_idt, global, object
    isr.current = 0
    .rept 256
    2280:	0f 01 ca             	clac
    2283:	6a 00                	push   $0x0
    2285:	6a 00                	push   $0x0
    2287:	e9 34 ff ff ff       	jmp    21c0 <interrupt_common>
    228c:	cc                   	int3

000000000000228d <isr.dispatch.17.is.not.the.isr.number>:
    228d:	0f 01 ca             	clac
    2290:	6a 00                	push   $0x0
    2292:	6a 01                	push   $0x1
    2294:	e9 27 ff ff ff       	jmp    21c0 <interrupt_common>
    2299:	cc                   	int3

000000000000229a <isr.dispatch.32.is.not.the.isr.number>:
    229a:	0f 01 ca             	clac
    229d:	6a 00                	push   $0x0
    229f:	6a 02                	push   $0x2
    22a1:	e9 1a ff ff ff       	jmp    21c0 <interrupt_common>
    22a6:	cc                   	int3

00000000000022a7 <isr.dispatch.47.is.not.the.isr.number>:
    22a7:	0f 01 ca             	clac
    22aa:	6a 00                	push   $0x0
    22ac:	6a 03                	push   $0x3
    22ae:	e9 0d ff ff ff       	jmp    21c0 <interrupt_common>
    22b3:	cc                   	int3

00000000000022b4 <isr.dispatch.62.is.not.the.isr.number>:
    22b4:	0f 01 ca             	clac
    22b7:	6a 00                	push   $0x0
    22b9:	6a 04                	push   $0x4
    22bb:	e9 00 ff ff ff       	jmp    21c0 <interrupt_common>
    22c0:	cc                   	int3

00000000000022c1 <isr.dispatch.77.is.not.the.isr.number>:
    22c1:	0f 01 ca             	clac
    22c4:	6a 00                	push   $0x0
    22c6:	6a 05                	push   $0x5
    22c8:	e9 f3 fe ff ff       	jmp    21c0 <interrupt_common>
    22cd:	cc                   	int3

00000000000022ce <isr.dispatch.92.is.not.the.isr.number>:
    22ce:	0f 01 ca             	clac
    22d1:	6a 00                	push   $0x0
    22d3:	6a 06                	push   $0x6
    22d5:	e9 e6 fe ff ff       	jmp    21c0 <interrupt_common>
    22da:	cc                   	int3

00000000000022db <isr.dispatch.107.is.not.the.isr.number>:
    22db:	0f 01 ca             	clac
    22de:	6a 00                	push   $0x0
    22e0:	6a 07                	push   $0x7
    22e2:	e9 d9 fe ff ff       	jmp    21c0 <interrupt_common>
    22e7:	cc                   	int3

00000000000022e8 <isr.dispatch.122.is.not.the.isr.number>:
    22e8:	0f 01 ca             	clac
    22eb:	6a 08                	push   $0x8
    22ed:	e9 ce fe ff ff       	jmp    21c0 <interrupt_common>
    22f2:	cc                   	int3

00000000000022f3 <isr.dispatch.136.is.not.the.isr.number>:
    22f3:	0f 01 ca             	clac
    22f6:	6a 00                	push   $0x0
    22f8:	6a 09                	push   $0x9
    22fa:	e9 c1 fe ff ff       	jmp    21c0 <interrupt_common>
    22ff:	cc                   	int3

0000000000002300 <isr.dispatch.151.is.not.the.isr.number>:
    2300:	0f 01 ca             	clac
    2303:	6a 0a                	push   $0xa
    2305:	e9 b6 fe ff ff       	jmp    21c0 <interrupt_common>
    230a:	cc                   	int3

000000000000230b <isr.dispatch.165.is.not.the.isr.number>:
    230b:	0f 01 ca             	clac
    230e:	6a 0b                	push   $0xb
    2310:	e9 ab fe ff ff       	jmp    21c0 <interrupt_common>
    2315:	cc                   	int3

0000000000002316 <isr.dispatch.179.is.not.the.isr.number>:
    2316:	0f 01 ca             	clac
    2319:	6a 0c                	push   $0xc
    231b:	e9 a0 fe ff ff       	jmp    21c0 <interrupt_common>
    2320:	cc                   	int3

0000000000002321 <isr.dispatch.193.is.not.the.isr.number>:
    2321:	0f 01 ca             	clac
    2324:	6a 0d                	push   $0xd
    2326:	e9 95 fe ff ff       	jmp    21c0 <interrupt_common>
    232b:	cc                   	int3

000000000000232c <isr.dispatch.207.is.not.the.isr.number>:
    232c:	0f 01 ca             	clac
    232f:	6a 0e                	push   $0xe
    2331:	e9 8a fe ff ff       	jmp    21c0 <interrupt_common>
    2336:	cc                   	int3

0000000000002337 <isr.dispatch.221.is.not.the.isr.number>:
    2337:	0f 01 ca             	clac
    233a:	6a 00                	push   $0x0
    233c:	6a 0f                	push   $0xf
    233e:	e9 7d fe ff ff       	jmp    21c0 <interrupt_common>
    2343:	cc                   	int3

0000000000002344 <isr.dispatch.236.is.not.the.isr.number>:
    2344:	0f 01 ca             	clac
    2347:	6a 00                	push   $0x0
    2349:	6a 10                	push   $0x10
    234b:	e9 70 fe ff ff       	jmp    21c0 <interrupt_common>
    2350:	cc                   	int3

0000000000002351 <isr.dispatch.251.is.not.the.isr.number>:
    2351:	0f 01 ca             	clac
    2354:	6a 11                	push   $0x11
    2356:	e9 65 fe ff ff       	jmp    21c0 <interrupt_common>
    235b:	cc                   	int3

000000000000235c <isr.dispatch.265.is.not.the.isr.number>:
    235c:	0f 01 ca             	clac
    235f:	6a 00                	push   $0x0
    2361:	6a 12                	push   $0x12
    2363:	e9 58 fe ff ff       	jmp    21c0 <interrupt_common>
    2368:	cc                   	int3

0000000000002369 <isr.dispatch.280.is.not.the.isr.number>:
    2369:	0f 01 ca             	clac
    236c:	6a 00                	push   $0x0
    236e:	6a 13                	push   $0x13
    2370:	e9 4b fe ff ff       	jmp    21c0 <interrupt_common>
    2375:	cc                   	int3

0000000000002376 <isr.dispatch.295.is.not.the.isr.number>:
    2376:	0f 01 ca             	clac
    2379:	6a 00                	push   $0x0
    237b:	6a 14                	push   $0x14
    237d:	e9 3e fe ff ff       	jmp    21c0 <interrupt_common>
    2382:	cc                   	int3

0000000000002383 <isr.dispatch.310.is.not.the.isr.number>:
    2383:	0f 01 ca             	clac
    2386:	6a 00                	push   $0x0
    2388:	6a 15                	push   $0x15
    238a:	e9 31 fe ff ff       	jmp    21c0 <interrupt_common>
    238f:	cc                   	int3

0000000000002390 <isr.dispatch.325.is.not.the.isr.number>:
    2390:	0f 01 ca             	clac
    2393:	6a 00                	push   $0x0
    2395:	6a 16                	push   $0x16
    2397:	e9 24 fe ff ff       	jmp    21c0 <interrupt_common>
    239c:	cc                   	int3

000000000000239d <isr.dispatch.340.is.not.the.isr.number>:
    239d:	0f 01 ca             	clac
    23a0:	6a 00                	push   $0x0
    23a2:	6a 17                	push   $0x17
    23a4:	e9 17 fe ff ff       	jmp    21c0 <interrupt_common>
    23a9:	cc                   	int3

00000000000023aa <isr.dispatch.355.is.not.the.isr.number>:
    23aa:	0f 01 ca             	clac
    23ad:	6a 00                	push   $0x0
    23af:	6a 18                	push   $0x18
    23b1:	e9 0a fe ff ff       	jmp    21c0 <interrupt_common>
    23b6:	cc                   	int3

00000000000023b7 <isr.dispatch.370.is.not.the.isr.number>:
    23b7:	0f 01 ca             	clac
    23ba:	6a 00                	push   $0x0
    23bc:	6a 19                	push   $0x19
    23be:	e9 fd fd ff ff       	jmp    21c0 <interrupt_common>
    23c3:	cc                   	int3

00000000000023c4 <isr.dispatch.385.is.not.the.isr.number>:
    23c4:	0f 01 ca             	clac
    23c7:	6a 00                	push   $0x0
    23c9:	6a 1a                	push   $0x1a
    23cb:	e9 f0 fd ff ff       	jmp    21c0 <interrupt_common>
    23d0:	cc                   	int3

00000000000023d1 <isr.dispatch.400.is.not.the.isr.number>:
    23d1:	0f 01 ca             	clac
    23d4:	6a 00                	push   $0x0
    23d6:	6a 1b                	push   $0x1b
    23d8:	e9 e3 fd ff ff       	jmp    21c0 <interrupt_common>
    23dd:	cc                   	int3

00000000000023de <isr.dispatch.415.is.not.the.isr.number>:
    23de:	0f 01 ca             	clac
    23e1:	6a 00                	push   $0x0
    23e3:	6a 1c                	push   $0x1c
    23e5:	e9 d6 fd ff ff       	jmp    21c0 <interrupt_common>
    23ea:	cc                   	int3

00000000000023eb <isr.dispatch.430.is.not.the.isr.number>:
    23eb:	0f 01 ca             	clac
    23ee:	6a 00                	push   $0x0
    23f0:	6a 1d                	push   $0x1d
    23f2:	e9 c9 fd ff ff       	jmp    21c0 <interrupt_common>
    23f7:	cc                   	int3

00000000000023f8 <isr.dispatch.445.is.not.the.isr.number>:
    23f8:	0f 01 ca             	clac
    23fb:	6a 00                	push   $0x0
    23fd:	6a 1e                	push   $0x1e
    23ff:	e9 bc fd ff ff       	jmp    21c0 <interrupt_common>
    2404:	cc                   	int3

0000000000002405 <isr.dispatch.460.is.not.the.isr.number>:
    2405:	0f 01 ca             	clac
    2408:	6a 00                	push   $0x0
    240a:	6a 1f                	push   $0x1f
    240c:	e9 af fd ff ff       	jmp    21c0 <interrupt_common>
    2411:	cc                   	int3

0000000000002412 <isr.dispatch.475.is.not.the.isr.number>:
    2412:	0f 01 ca             	clac
    2415:	6a 00                	push   $0x0
    2417:	6a 20                	push   $0x20
    2419:	e9 a2 fd ff ff       	jmp    21c0 <interrupt_common>
    241e:	cc                   	int3

000000000000241f <isr.dispatch.490.is.not.the.isr.number>:
    241f:	0f 01 ca             	clac
    2422:	6a 00                	push   $0x0
    2424:	6a 21                	push   $0x21
    2426:	e9 95 fd ff ff       	jmp    21c0 <interrupt_common>
    242b:	cc                   	int3

000000000000242c <isr.dispatch.505.is.not.the.isr.number>:
    242c:	0f 01 ca             	clac
    242f:	6a 00                	push   $0x0
    2431:	6a 22                	push   $0x22
    2433:	e9 88 fd ff ff       	jmp    21c0 <interrupt_common>
    2438:	cc                   	int3

0000000000002439 <isr.dispatch.520.is.not.the.isr.number>:
    2439:	0f 01 ca             	clac
    243c:	6a 00                	push   $0x0
    243e:	6a 23                	push   $0x23
    2440:	e9 7b fd ff ff       	jmp    21c0 <interrupt_common>
    2445:	cc                   	int3

0000000000002446 <isr.dispatch.535.is.not.the.isr.number>:
    2446:	0f 01 ca             	clac
    2449:	6a 00                	push   $0x0
    244b:	6a 24                	push   $0x24
    244d:	e9 6e fd ff ff       	jmp    21c0 <interrupt_common>
    2452:	cc                   	int3

0000000000002453 <isr.dispatch.550.is.not.the.isr.number>:
    2453:	0f 01 ca             	clac
    2456:	6a 00                	push   $0x0
    2458:	6a 25                	push   $0x25
    245a:	e9 61 fd ff ff       	jmp    21c0 <interrupt_common>
    245f:	cc                   	int3

0000000000002460 <isr.dispatch.565.is.not.the.isr.number>:
    2460:	0f 01 ca             	clac
    2463:	6a 00                	push   $0x0
    2465:	6a 26                	push   $0x26
    2467:	e9 54 fd ff ff       	jmp    21c0 <interrupt_common>
    246c:	cc                   	int3

000000000000246d <isr.dispatch.580.is.not.the.isr.number>:
    246d:	0f 01 ca             	clac
    2470:	6a 00                	push   $0x0
    2472:	6a 27                	push   $0x27
    2474:	e9 47 fd ff ff       	jmp    21c0 <interrupt_common>
    2479:	cc                   	int3

000000000000247a <isr.dispatch.595.is.not.the.isr.number>:
    247a:	0f 01 ca             	clac
    247d:	6a 00                	push   $0x0
    247f:	6a 28                	push   $0x28
    2481:	e9 3a fd ff ff       	jmp    21c0 <interrupt_common>
    2486:	cc                   	int3

0000000000002487 <isr.dispatch.610.is.not.the.isr.number>:
    2487:	0f 01 ca             	clac
    248a:	6a 00                	push   $0x0
    248c:	6a 29                	push   $0x29
    248e:	e9 2d fd ff ff       	jmp    21c0 <interrupt_common>
    2493:	cc                   	int3

0000000000002494 <isr.dispatch.625.is.not.the.isr.number>:
    2494:	0f 01 ca             	clac
    2497:	6a 00                	push   $0x0
    2499:	6a 2a                	push   $0x2a
    249b:	e9 20 fd ff ff       	jmp    21c0 <interrupt_common>
    24a0:	cc                   	int3

00000000000024a1 <isr.dispatch.640.is.not.the.isr.number>:
    24a1:	0f 01 ca             	clac
    24a4:	6a 00                	push   $0x0
    24a6:	6a 2b                	push   $0x2b
    24a8:	e9 13 fd ff ff       	jmp    21c0 <interrupt_common>
    24ad:	cc                   	int3

00000000000024ae <isr.dispatch.655.is.not.the.isr.number>:
    24ae:	0f 01 ca             	clac
    24b1:	6a 00                	push   $0x0
    24b3:	6a 2c                	push   $0x2c
    24b5:	e9 06 fd ff ff       	jmp    21c0 <interrupt_common>
    24ba:	cc                   	int3

00000000000024bb <isr.dispatch.670.is.not.the.isr.number>:
    24bb:	0f 01 ca             	clac
    24be:	6a 00                	push   $0x0
    24c0:	6a 2d                	push   $0x2d
    24c2:	e9 f9 fc ff ff       	jmp    21c0 <interrupt_common>
    24c7:	cc                   	int3

00000000000024c8 <isr.dispatch.685.is.not.the.isr.number>:
    24c8:	0f 01 ca             	clac
    24cb:	6a 00                	push   $0x0
    24cd:	6a 2e                	push   $0x2e
    24cf:	e9 ec fc ff ff       	jmp    21c0 <interrupt_common>
    24d4:	cc                   	int3

00000000000024d5 <isr.dispatch.700.is.not.the.isr.number>:
    24d5:	0f 01 ca             	clac
    24d8:	6a 00                	push   $0x0
    24da:	6a 2f                	push   $0x2f
    24dc:	e9 df fc ff ff       	jmp    21c0 <interrupt_common>
    24e1:	cc                   	int3

00000000000024e2 <isr.dispatch.715.is.not.the.isr.number>:
    24e2:	0f 01 ca             	clac
    24e5:	6a 00                	push   $0x0
    24e7:	6a 30                	push   $0x30
    24e9:	e9 d2 fc ff ff       	jmp    21c0 <interrupt_common>
    24ee:	cc                   	int3

00000000000024ef <isr.dispatch.730.is.not.the.isr.number>:
    24ef:	0f 01 ca             	clac
    24f2:	6a 00                	push   $0x0
    24f4:	6a 31                	push   $0x31
    24f6:	e9 c5 fc ff ff       	jmp    21c0 <interrupt_common>
    24fb:	cc                   	int3

00000000000024fc <isr.dispatch.745.is.not.the.isr.number>:
    24fc:	0f 01 ca             	clac
    24ff:	6a 00                	push   $0x0
    2501:	6a 32                	push   $0x32
    2503:	e9 b8 fc ff ff       	jmp    21c0 <interrupt_common>
    2508:	cc                   	int3

0000000000002509 <isr.dispatch.760.is.not.the.isr.number>:
    2509:	0f 01 ca             	clac
    250c:	6a 00                	push   $0x0
    250e:	6a 33                	push   $0x33
    2510:	e9 ab fc ff ff       	jmp    21c0 <interrupt_common>
    2515:	cc                   	int3

0000000000002516 <isr.dispatch.775.is.not.the.isr.number>:
    2516:	0f 01 ca             	clac
    2519:	6a 00                	push   $0x0
    251b:	6a 34                	push   $0x34
    251d:	e9 9e fc ff ff       	jmp    21c0 <interrupt_common>
    2522:	cc                   	int3

0000000000002523 <isr.dispatch.790.is.not.the.isr.number>:
    2523:	0f 01 ca             	clac
    2526:	6a 00                	push   $0x0
    2528:	6a 35                	push   $0x35
    252a:	e9 91 fc ff ff       	jmp    21c0 <interrupt_common>
    252f:	cc                   	int3

0000000000002530 <isr.dispatch.805.is.not.the.isr.number>:
    2530:	0f 01 ca             	clac
    2533:	6a 00                	push   $0x0
    2535:	6a 36                	push   $0x36
    2537:	e9 84 fc ff ff       	jmp    21c0 <interrupt_common>
    253c:	cc                   	int3

000000000000253d <isr.dispatch.820.is.not.the.isr.number>:
    253d:	0f 01 ca             	clac
    2540:	6a 00                	push   $0x0
    2542:	6a 37                	push   $0x37
    2544:	e9 77 fc ff ff       	jmp    21c0 <interrupt_common>
    2549:	cc                   	int3

000000000000254a <isr.dispatch.835.is.not.the.isr.number>:
    254a:	0f 01 ca             	clac
    254d:	6a 00                	push   $0x0
    254f:	6a 38                	push   $0x38
    2551:	e9 6a fc ff ff       	jmp    21c0 <interrupt_common>
    2556:	cc                   	int3

0000000000002557 <isr.dispatch.850.is.not.the.isr.number>:
    2557:	0f 01 ca             	clac
    255a:	6a 00                	push   $0x0
    255c:	6a 39                	push   $0x39
    255e:	e9 5d fc ff ff       	jmp    21c0 <interrupt_common>
    2563:	cc                   	int3

0000000000002564 <isr.dispatch.865.is.not.the.isr.number>:
    2564:	0f 01 ca             	clac
    2567:	6a 00                	push   $0x0
    2569:	6a 3a                	push   $0x3a
    256b:	e9 50 fc ff ff       	jmp    21c0 <interrupt_common>
    2570:	cc                   	int3

0000000000002571 <isr.dispatch.880.is.not.the.isr.number>:
    2571:	0f 01 ca             	clac
    2574:	6a 00                	push   $0x0
    2576:	6a 3b                	push   $0x3b
    2578:	e9 43 fc ff ff       	jmp    21c0 <interrupt_common>
    257d:	cc                   	int3

000000000000257e <isr.dispatch.895.is.not.the.isr.number>:
    257e:	0f 01 ca             	clac
    2581:	6a 00                	push   $0x0
    2583:	6a 3c                	push   $0x3c
    2585:	e9 36 fc ff ff       	jmp    21c0 <interrupt_common>
    258a:	cc                   	int3

000000000000258b <isr.dispatch.910.is.not.the.isr.number>:
    258b:	0f 01 ca             	clac
    258e:	6a 00                	push   $0x0
    2590:	6a 3d                	push   $0x3d
    2592:	e9 29 fc ff ff       	jmp    21c0 <interrupt_common>
    2597:	cc                   	int3

0000000000002598 <isr.dispatch.925.is.not.the.isr.number>:
    2598:	0f 01 ca             	clac
    259b:	6a 00                	push   $0x0
    259d:	6a 3e                	push   $0x3e
    259f:	e9 1c fc ff ff       	jmp    21c0 <interrupt_common>
    25a4:	cc                   	int3

00000000000025a5 <isr.dispatch.940.is.not.the.isr.number>:
    25a5:	0f 01 ca             	clac
    25a8:	6a 00                	push   $0x0
    25aa:	6a 3f                	push   $0x3f
    25ac:	e9 0f fc ff ff       	jmp    21c0 <interrupt_common>
    25b1:	cc                   	int3

00000000000025b2 <isr.dispatch.955.is.not.the.isr.number>:
    25b2:	0f 01 ca             	clac
    25b5:	6a 00                	push   $0x0
    25b7:	6a 40                	push   $0x40
    25b9:	e9 02 fc ff ff       	jmp    21c0 <interrupt_common>
    25be:	cc                   	int3

00000000000025bf <isr.dispatch.970.is.not.the.isr.number>:
    25bf:	0f 01 ca             	clac
    25c2:	6a 00                	push   $0x0
    25c4:	6a 41                	push   $0x41
    25c6:	e9 f5 fb ff ff       	jmp    21c0 <interrupt_common>
    25cb:	cc                   	int3

00000000000025cc <isr.dispatch.985.is.not.the.isr.number>:
    25cc:	0f 01 ca             	clac
    25cf:	6a 00                	push   $0x0
    25d1:	6a 42                	push   $0x42
    25d3:	e9 e8 fb ff ff       	jmp    21c0 <interrupt_common>
    25d8:	cc                   	int3

00000000000025d9 <isr.dispatch.1000.is.not.the.isr.number>:
    25d9:	0f 01 ca             	clac
    25dc:	6a 00                	push   $0x0
    25de:	6a 43                	push   $0x43
    25e0:	e9 db fb ff ff       	jmp    21c0 <interrupt_common>
    25e5:	cc                   	int3

00000000000025e6 <isr.dispatch.1015.is.not.the.isr.number>:
    25e6:	0f 01 ca             	clac
    25e9:	6a 00                	push   $0x0
    25eb:	6a 44                	push   $0x44
    25ed:	e9 ce fb ff ff       	jmp    21c0 <interrupt_common>
    25f2:	cc                   	int3

00000000000025f3 <isr.dispatch.1030.is.not.the.isr.number>:
    25f3:	0f 01 ca             	clac
    25f6:	6a 00                	push   $0x0
    25f8:	6a 45                	push   $0x45
    25fa:	e9 c1 fb ff ff       	jmp    21c0 <interrupt_common>
    25ff:	cc                   	int3

0000000000002600 <isr.dispatch.1045.is.not.the.isr.number>:
    2600:	0f 01 ca             	clac
    2603:	6a 00                	push   $0x0
    2605:	6a 46                	push   $0x46
    2607:	e9 b4 fb ff ff       	jmp    21c0 <interrupt_common>
    260c:	cc                   	int3

000000000000260d <isr.dispatch.1060.is.not.the.isr.number>:
    260d:	0f 01 ca             	clac
    2610:	6a 00                	push   $0x0
    2612:	6a 47                	push   $0x47
    2614:	e9 a7 fb ff ff       	jmp    21c0 <interrupt_common>
    2619:	cc                   	int3

000000000000261a <isr.dispatch.1075.is.not.the.isr.number>:
    261a:	0f 01 ca             	clac
    261d:	6a 00                	push   $0x0
    261f:	6a 48                	push   $0x48
    2621:	e9 9a fb ff ff       	jmp    21c0 <interrupt_common>
    2626:	cc                   	int3

0000000000002627 <isr.dispatch.1090.is.not.the.isr.number>:
    2627:	0f 01 ca             	clac
    262a:	6a 00                	push   $0x0
    262c:	6a 49                	push   $0x49
    262e:	e9 8d fb ff ff       	jmp    21c0 <interrupt_common>
    2633:	cc                   	int3

0000000000002634 <isr.dispatch.1105.is.not.the.isr.number>:
    2634:	0f 01 ca             	clac
    2637:	6a 00                	push   $0x0
    2639:	6a 4a                	push   $0x4a
    263b:	e9 80 fb ff ff       	jmp    21c0 <interrupt_common>
    2640:	cc                   	int3

0000000000002641 <isr.dispatch.1120.is.not.the.isr.number>:
    2641:	0f 01 ca             	clac
    2644:	6a 00                	push   $0x0
    2646:	6a 4b                	push   $0x4b
    2648:	e9 73 fb ff ff       	jmp    21c0 <interrupt_common>
    264d:	cc                   	int3

000000000000264e <isr.dispatch.1135.is.not.the.isr.number>:
    264e:	0f 01 ca             	clac
    2651:	6a 00                	push   $0x0
    2653:	6a 4c                	push   $0x4c
    2655:	e9 66 fb ff ff       	jmp    21c0 <interrupt_common>
    265a:	cc                   	int3

000000000000265b <isr.dispatch.1150.is.not.the.isr.number>:
    265b:	0f 01 ca             	clac
    265e:	6a 00                	push   $0x0
    2660:	6a 4d                	push   $0x4d
    2662:	e9 59 fb ff ff       	jmp    21c0 <interrupt_common>
    2667:	cc                   	int3

0000000000002668 <isr.dispatch.1165.is.not.the.isr.number>:
    2668:	0f 01 ca             	clac
    266b:	6a 00                	push   $0x0
    266d:	6a 4e                	push   $0x4e
    266f:	e9 4c fb ff ff       	jmp    21c0 <interrupt_common>
    2674:	cc                   	int3

0000000000002675 <isr.dispatch.1180.is.not.the.isr.number>:
    2675:	0f 01 ca             	clac
    2678:	6a 00                	push   $0x0
    267a:	6a 4f                	push   $0x4f
    267c:	e9 3f fb ff ff       	jmp    21c0 <interrupt_common>
    2681:	cc                   	int3

0000000000002682 <isr.dispatch.1195.is.not.the.isr.number>:
    2682:	0f 01 ca             	clac
    2685:	6a 00                	push   $0x0
    2687:	6a 50                	push   $0x50
    2689:	e9 32 fb ff ff       	jmp    21c0 <interrupt_common>
    268e:	cc                   	int3

000000000000268f <isr.dispatch.1210.is.not.the.isr.number>:
    268f:	0f 01 ca             	clac
    2692:	6a 00                	push   $0x0
    2694:	6a 51                	push   $0x51
    2696:	e9 25 fb ff ff       	jmp    21c0 <interrupt_common>
    269b:	cc                   	int3

000000000000269c <isr.dispatch.1225.is.not.the.isr.number>:
    269c:	0f 01 ca             	clac
    269f:	6a 00                	push   $0x0
    26a1:	6a 52                	push   $0x52
    26a3:	e9 18 fb ff ff       	jmp    21c0 <interrupt_common>
    26a8:	cc                   	int3

00000000000026a9 <isr.dispatch.1240.is.not.the.isr.number>:
    26a9:	0f 01 ca             	clac
    26ac:	6a 00                	push   $0x0
    26ae:	6a 53                	push   $0x53
    26b0:	e9 0b fb ff ff       	jmp    21c0 <interrupt_common>
    26b5:	cc                   	int3

00000000000026b6 <isr.dispatch.1255.is.not.the.isr.number>:
    26b6:	0f 01 ca             	clac
    26b9:	6a 00                	push   $0x0
    26bb:	6a 54                	push   $0x54
    26bd:	e9 fe fa ff ff       	jmp    21c0 <interrupt_common>
    26c2:	cc                   	int3

00000000000026c3 <isr.dispatch.1270.is.not.the.isr.number>:
    26c3:	0f 01 ca             	clac
    26c6:	6a 00                	push   $0x0
    26c8:	6a 55                	push   $0x55
    26ca:	e9 f1 fa ff ff       	jmp    21c0 <interrupt_common>
    26cf:	cc                   	int3

00000000000026d0 <isr.dispatch.1285.is.not.the.isr.number>:
    26d0:	0f 01 ca             	clac
    26d3:	6a 00                	push   $0x0
    26d5:	6a 56                	push   $0x56
    26d7:	e9 e4 fa ff ff       	jmp    21c0 <interrupt_common>
    26dc:	cc                   	int3

00000000000026dd <isr.dispatch.1300.is.not.the.isr.number>:
    26dd:	0f 01 ca             	clac
    26e0:	6a 00                	push   $0x0
    26e2:	6a 57                	push   $0x57
    26e4:	e9 d7 fa ff ff       	jmp    21c0 <interrupt_common>
    26e9:	cc                   	int3

00000000000026ea <isr.dispatch.1315.is.not.the.isr.number>:
    26ea:	0f 01 ca             	clac
    26ed:	6a 00                	push   $0x0
    26ef:	6a 58                	push   $0x58
    26f1:	e9 ca fa ff ff       	jmp    21c0 <interrupt_common>
    26f6:	cc                   	int3

00000000000026f7 <isr.dispatch.1330.is.not.the.isr.number>:
    26f7:	0f 01 ca             	clac
    26fa:	6a 00                	push   $0x0
    26fc:	6a 59                	push   $0x59
    26fe:	e9 bd fa ff ff       	jmp    21c0 <interrupt_common>
    2703:	cc                   	int3

0000000000002704 <isr.dispatch.1345.is.not.the.isr.number>:
    2704:	0f 01 ca             	clac
    2707:	6a 00                	push   $0x0
    2709:	6a 5a                	push   $0x5a
    270b:	e9 b0 fa ff ff       	jmp    21c0 <interrupt_common>
    2710:	cc                   	int3

0000000000002711 <isr.dispatch.1360.is.not.the.isr.number>:
    2711:	0f 01 ca             	clac
    2714:	6a 00                	push   $0x0
    2716:	6a 5b                	push   $0x5b
    2718:	e9 a3 fa ff ff       	jmp    21c0 <interrupt_common>
    271d:	cc                   	int3

000000000000271e <isr.dispatch.1375.is.not.the.isr.number>:
    271e:	0f 01 ca             	clac
    2721:	6a 00                	push   $0x0
    2723:	6a 5c                	push   $0x5c
    2725:	e9 96 fa ff ff       	jmp    21c0 <interrupt_common>
    272a:	cc                   	int3

000000000000272b <isr.dispatch.1390.is.not.the.isr.number>:
    272b:	0f 01 ca             	clac
    272e:	6a 00                	push   $0x0
    2730:	6a 5d                	push   $0x5d
    2732:	e9 89 fa ff ff       	jmp    21c0 <interrupt_common>
    2737:	cc                   	int3

0000000000002738 <isr.dispatch.1405.is.not.the.isr.number>:
    2738:	0f 01 ca             	clac
    273b:	6a 00                	push   $0x0
    273d:	6a 5e                	push   $0x5e
    273f:	e9 7c fa ff ff       	jmp    21c0 <interrupt_common>
    2744:	cc                   	int3

0000000000002745 <isr.dispatch.1420.is.not.the.isr.number>:
    2745:	0f 01 ca             	clac
    2748:	6a 00                	push   $0x0
    274a:	6a 5f                	push   $0x5f
    274c:	e9 6f fa ff ff       	jmp    21c0 <interrupt_common>
    2751:	cc                   	int3

0000000000002752 <isr.dispatch.1435.is.not.the.isr.number>:
    2752:	0f 01 ca             	clac
    2755:	6a 00                	push   $0x0
    2757:	6a 60                	push   $0x60
    2759:	e9 62 fa ff ff       	jmp    21c0 <interrupt_common>
    275e:	cc                   	int3

000000000000275f <isr.dispatch.1450.is.not.the.isr.number>:
    275f:	0f 01 ca             	clac
    2762:	6a 00                	push   $0x0
    2764:	6a 61                	push   $0x61
    2766:	e9 55 fa ff ff       	jmp    21c0 <interrupt_common>
    276b:	cc                   	int3

000000000000276c <isr.dispatch.1465.is.not.the.isr.number>:
    276c:	0f 01 ca             	clac
    276f:	6a 00                	push   $0x0
    2771:	6a 62                	push   $0x62
    2773:	e9 48 fa ff ff       	jmp    21c0 <interrupt_common>
    2778:	cc                   	int3

0000000000002779 <isr.dispatch.1480.is.not.the.isr.number>:
    2779:	0f 01 ca             	clac
    277c:	6a 00                	push   $0x0
    277e:	6a 63                	push   $0x63
    2780:	e9 3b fa ff ff       	jmp    21c0 <interrupt_common>
    2785:	cc                   	int3

0000000000002786 <isr.dispatch.1495.is.not.the.isr.number>:
    2786:	0f 01 ca             	clac
    2789:	6a 00                	push   $0x0
    278b:	6a 64                	push   $0x64
    278d:	e9 2e fa ff ff       	jmp    21c0 <interrupt_common>
    2792:	cc                   	int3

0000000000002793 <isr.dispatch.1510.is.not.the.isr.number>:
    2793:	0f 01 ca             	clac
    2796:	6a 00                	push   $0x0
    2798:	6a 65                	push   $0x65
    279a:	e9 21 fa ff ff       	jmp    21c0 <interrupt_common>
    279f:	cc                   	int3

00000000000027a0 <isr.dispatch.1525.is.not.the.isr.number>:
    27a0:	0f 01 ca             	clac
    27a3:	6a 00                	push   $0x0
    27a5:	6a 66                	push   $0x66
    27a7:	e9 14 fa ff ff       	jmp    21c0 <interrupt_common>
    27ac:	cc                   	int3

00000000000027ad <isr.dispatch.1540.is.not.the.isr.number>:
    27ad:	0f 01 ca             	clac
    27b0:	6a 00                	push   $0x0
    27b2:	6a 67                	push   $0x67
    27b4:	e9 07 fa ff ff       	jmp    21c0 <interrupt_common>
    27b9:	cc                   	int3

00000000000027ba <isr.dispatch.1555.is.not.the.isr.number>:
    27ba:	0f 01 ca             	clac
    27bd:	6a 00                	push   $0x0
    27bf:	6a 68                	push   $0x68
    27c1:	e9 fa f9 ff ff       	jmp    21c0 <interrupt_common>
    27c6:	cc                   	int3

00000000000027c7 <isr.dispatch.1570.is.not.the.isr.number>:
    27c7:	0f 01 ca             	clac
    27ca:	6a 00                	push   $0x0
    27cc:	6a 69                	push   $0x69
    27ce:	e9 ed f9 ff ff       	jmp    21c0 <interrupt_common>
    27d3:	cc                   	int3

00000000000027d4 <isr.dispatch.1585.is.not.the.isr.number>:
    27d4:	0f 01 ca             	clac
    27d7:	6a 00                	push   $0x0
    27d9:	6a 6a                	push   $0x6a
    27db:	e9 e0 f9 ff ff       	jmp    21c0 <interrupt_common>
    27e0:	cc                   	int3

00000000000027e1 <isr.dispatch.1600.is.not.the.isr.number>:
    27e1:	0f 01 ca             	clac
    27e4:	6a 00                	push   $0x0
    27e6:	6a 6b                	push   $0x6b
    27e8:	e9 d3 f9 ff ff       	jmp    21c0 <interrupt_common>
    27ed:	cc                   	int3

00000000000027ee <isr.dispatch.1615.is.not.the.isr.number>:
    27ee:	0f 01 ca             	clac
    27f1:	6a 00                	push   $0x0
    27f3:	6a 6c                	push   $0x6c
    27f5:	e9 c6 f9 ff ff       	jmp    21c0 <interrupt_common>
    27fa:	cc                   	int3

00000000000027fb <isr.dispatch.1630.is.not.the.isr.number>:
    27fb:	0f 01 ca             	clac
    27fe:	6a 00                	push   $0x0
    2800:	6a 6d                	push   $0x6d
    2802:	e9 b9 f9 ff ff       	jmp    21c0 <interrupt_common>
    2807:	cc                   	int3

0000000000002808 <isr.dispatch.1645.is.not.the.isr.number>:
    2808:	0f 01 ca             	clac
    280b:	6a 00                	push   $0x0
    280d:	6a 6e                	push   $0x6e
    280f:	e9 ac f9 ff ff       	jmp    21c0 <interrupt_common>
    2814:	cc                   	int3

0000000000002815 <isr.dispatch.1660.is.not.the.isr.number>:
    2815:	0f 01 ca             	clac
    2818:	6a 00                	push   $0x0
    281a:	6a 6f                	push   $0x6f
    281c:	e9 9f f9 ff ff       	jmp    21c0 <interrupt_common>
    2821:	cc                   	int3

0000000000002822 <isr.dispatch.1675.is.not.the.isr.number>:
    2822:	0f 01 ca             	clac
    2825:	6a 00                	push   $0x0
    2827:	6a 70                	push   $0x70
    2829:	e9 92 f9 ff ff       	jmp    21c0 <interrupt_common>
    282e:	cc                   	int3

000000000000282f <isr.dispatch.1690.is.not.the.isr.number>:
    282f:	0f 01 ca             	clac
    2832:	6a 00                	push   $0x0
    2834:	6a 71                	push   $0x71
    2836:	e9 85 f9 ff ff       	jmp    21c0 <interrupt_common>
    283b:	cc                   	int3

000000000000283c <isr.dispatch.1705.is.not.the.isr.number>:
    283c:	0f 01 ca             	clac
    283f:	6a 00                	push   $0x0
    2841:	6a 72                	push   $0x72
    2843:	e9 78 f9 ff ff       	jmp    21c0 <interrupt_common>
    2848:	cc                   	int3

0000000000002849 <isr.dispatch.1720.is.not.the.isr.number>:
    2849:	0f 01 ca             	clac
    284c:	6a 00                	push   $0x0
    284e:	6a 73                	push   $0x73
    2850:	e9 6b f9 ff ff       	jmp    21c0 <interrupt_common>
    2855:	cc                   	int3

0000000000002856 <isr.dispatch.1735.is.not.the.isr.number>:
    2856:	0f 01 ca             	clac
    2859:	6a 00                	push   $0x0
    285b:	6a 74                	push   $0x74
    285d:	e9 5e f9 ff ff       	jmp    21c0 <interrupt_common>
    2862:	cc                   	int3

0000000000002863 <isr.dispatch.1750.is.not.the.isr.number>:
    2863:	0f 01 ca             	clac
    2866:	6a 00                	push   $0x0
    2868:	6a 75                	push   $0x75
    286a:	e9 51 f9 ff ff       	jmp    21c0 <interrupt_common>
    286f:	cc                   	int3

0000000000002870 <isr.dispatch.1765.is.not.the.isr.number>:
    2870:	0f 01 ca             	clac
    2873:	6a 00                	push   $0x0
    2875:	6a 76                	push   $0x76
    2877:	e9 44 f9 ff ff       	jmp    21c0 <interrupt_common>
    287c:	cc                   	int3

000000000000287d <isr.dispatch.1780.is.not.the.isr.number>:
    287d:	0f 01 ca             	clac
    2880:	6a 00                	push   $0x0
    2882:	6a 77                	push   $0x77
    2884:	e9 37 f9 ff ff       	jmp    21c0 <interrupt_common>
    2889:	cc                   	int3

000000000000288a <isr.dispatch.1795.is.not.the.isr.number>:
    288a:	0f 01 ca             	clac
    288d:	6a 00                	push   $0x0
    288f:	6a 78                	push   $0x78
    2891:	e9 2a f9 ff ff       	jmp    21c0 <interrupt_common>
    2896:	cc                   	int3

0000000000002897 <isr.dispatch.1810.is.not.the.isr.number>:
    2897:	0f 01 ca             	clac
    289a:	6a 00                	push   $0x0
    289c:	6a 79                	push   $0x79
    289e:	e9 1d f9 ff ff       	jmp    21c0 <interrupt_common>
    28a3:	cc                   	int3

00000000000028a4 <isr.dispatch.1825.is.not.the.isr.number>:
    28a4:	0f 01 ca             	clac
    28a7:	6a 00                	push   $0x0
    28a9:	6a 7a                	push   $0x7a
    28ab:	e9 10 f9 ff ff       	jmp    21c0 <interrupt_common>
    28b0:	cc                   	int3

00000000000028b1 <isr.dispatch.1840.is.not.the.isr.number>:
    28b1:	0f 01 ca             	clac
    28b4:	6a 00                	push   $0x0
    28b6:	6a 7b                	push   $0x7b
    28b8:	e9 03 f9 ff ff       	jmp    21c0 <interrupt_common>
    28bd:	cc                   	int3

00000000000028be <isr.dispatch.1855.is.not.the.isr.number>:
    28be:	0f 01 ca             	clac
    28c1:	6a 00                	push   $0x0
    28c3:	6a 7c                	push   $0x7c
    28c5:	e9 f6 f8 ff ff       	jmp    21c0 <interrupt_common>
    28ca:	cc                   	int3

00000000000028cb <isr.dispatch.1870.is.not.the.isr.number>:
    28cb:	0f 01 ca             	clac
    28ce:	6a 00                	push   $0x0
    28d0:	6a 7d                	push   $0x7d
    28d2:	e9 e9 f8 ff ff       	jmp    21c0 <interrupt_common>
    28d7:	cc                   	int3

00000000000028d8 <isr.dispatch.1885.is.not.the.isr.number>:
    28d8:	0f 01 ca             	clac
    28db:	6a 00                	push   $0x0
    28dd:	6a 7e                	push   $0x7e
    28df:	e9 dc f8 ff ff       	jmp    21c0 <interrupt_common>
    28e4:	cc                   	int3

00000000000028e5 <isr.dispatch.1900.is.not.the.isr.number>:
    28e5:	0f 01 ca             	clac
    28e8:	6a 00                	push   $0x0
    28ea:	6a 7f                	push   $0x7f
    28ec:	e9 cf f8 ff ff       	jmp    21c0 <interrupt_common>
    28f1:	cc                   	int3

00000000000028f2 <isr.dispatch.1915.is.not.the.isr.number>:
    28f2:	0f 01 ca             	clac
    28f5:	6a 00                	push   $0x0
    28f7:	68 80 00 00 00       	push   $0x80
    28fc:	e9 bf f8 ff ff       	jmp    21c0 <interrupt_common>
    2901:	cc                   	int3

0000000000002902 <isr.dispatch.1930.is.not.the.isr.number>:
    2902:	0f 01 ca             	clac
    2905:	6a 00                	push   $0x0
    2907:	68 81 00 00 00       	push   $0x81
    290c:	e9 af f8 ff ff       	jmp    21c0 <interrupt_common>
    2911:	cc                   	int3

0000000000002912 <isr.dispatch.1945.is.not.the.isr.number>:
    2912:	0f 01 ca             	clac
    2915:	6a 00                	push   $0x0
    2917:	68 82 00 00 00       	push   $0x82
    291c:	e9 9f f8 ff ff       	jmp    21c0 <interrupt_common>
    2921:	cc                   	int3

0000000000002922 <isr.dispatch.1960.is.not.the.isr.number>:
    2922:	0f 01 ca             	clac
    2925:	6a 00                	push   $0x0
    2927:	68 83 00 00 00       	push   $0x83
    292c:	e9 8f f8 ff ff       	jmp    21c0 <interrupt_common>
    2931:	cc                   	int3

0000000000002932 <isr.dispatch.1975.is.not.the.isr.number>:
    2932:	0f 01 ca             	clac
    2935:	6a 00                	push   $0x0
    2937:	68 84 00 00 00       	push   $0x84
    293c:	e9 7f f8 ff ff       	jmp    21c0 <interrupt_common>
    2941:	cc                   	int3

0000000000002942 <isr.dispatch.1990.is.not.the.isr.number>:
    2942:	0f 01 ca             	clac
    2945:	6a 00                	push   $0x0
    2947:	68 85 00 00 00       	push   $0x85
    294c:	e9 6f f8 ff ff       	jmp    21c0 <interrupt_common>
    2951:	cc                   	int3

0000000000002952 <isr.dispatch.2005.is.not.the.isr.number>:
    2952:	0f 01 ca             	clac
    2955:	6a 00                	push   $0x0
    2957:	68 86 00 00 00       	push   $0x86
    295c:	e9 5f f8 ff ff       	jmp    21c0 <interrupt_common>
    2961:	cc                   	int3

0000000000002962 <isr.dispatch.2020.is.not.the.isr.number>:
    2962:	0f 01 ca             	clac
    2965:	6a 00                	push   $0x0
    2967:	68 87 00 00 00       	push   $0x87
    296c:	e9 4f f8 ff ff       	jmp    21c0 <interrupt_common>
    2971:	cc                   	int3

0000000000002972 <isr.dispatch.2035.is.not.the.isr.number>:
    2972:	0f 01 ca             	clac
    2975:	6a 00                	push   $0x0
    2977:	68 88 00 00 00       	push   $0x88
    297c:	e9 3f f8 ff ff       	jmp    21c0 <interrupt_common>
    2981:	cc                   	int3

0000000000002982 <isr.dispatch.2050.is.not.the.isr.number>:
    2982:	0f 01 ca             	clac
    2985:	6a 00                	push   $0x0
    2987:	68 89 00 00 00       	push   $0x89
    298c:	e9 2f f8 ff ff       	jmp    21c0 <interrupt_common>
    2991:	cc                   	int3

0000000000002992 <isr.dispatch.2065.is.not.the.isr.number>:
    2992:	0f 01 ca             	clac
    2995:	6a 00                	push   $0x0
    2997:	68 8a 00 00 00       	push   $0x8a
    299c:	e9 1f f8 ff ff       	jmp    21c0 <interrupt_common>
    29a1:	cc                   	int3

00000000000029a2 <isr.dispatch.2080.is.not.the.isr.number>:
    29a2:	0f 01 ca             	clac
    29a5:	6a 00                	push   $0x0
    29a7:	68 8b 00 00 00       	push   $0x8b
    29ac:	e9 0f f8 ff ff       	jmp    21c0 <interrupt_common>
    29b1:	cc                   	int3

00000000000029b2 <isr.dispatch.2095.is.not.the.isr.number>:
    29b2:	0f 01 ca             	clac
    29b5:	6a 00                	push   $0x0
    29b7:	68 8c 00 00 00       	push   $0x8c
    29bc:	e9 ff f7 ff ff       	jmp    21c0 <interrupt_common>
    29c1:	cc                   	int3

00000000000029c2 <isr.dispatch.2110.is.not.the.isr.number>:
    29c2:	0f 01 ca             	clac
    29c5:	6a 00                	push   $0x0
    29c7:	68 8d 00 00 00       	push   $0x8d
    29cc:	e9 ef f7 ff ff       	jmp    21c0 <interrupt_common>
    29d1:	cc                   	int3

00000000000029d2 <isr.dispatch.2125.is.not.the.isr.number>:
    29d2:	0f 01 ca             	clac
    29d5:	6a 00                	push   $0x0
    29d7:	68 8e 00 00 00       	push   $0x8e
    29dc:	e9 df f7 ff ff       	jmp    21c0 <interrupt_common>
    29e1:	cc                   	int3

00000000000029e2 <isr.dispatch.2140.is.not.the.isr.number>:
    29e2:	0f 01 ca             	clac
    29e5:	6a 00                	push   $0x0
    29e7:	68 8f 00 00 00       	push   $0x8f
    29ec:	e9 cf f7 ff ff       	jmp    21c0 <interrupt_common>
    29f1:	cc                   	int3

00000000000029f2 <isr.dispatch.2155.is.not.the.isr.number>:
    29f2:	0f 01 ca             	clac
    29f5:	6a 00                	push   $0x0
    29f7:	68 90 00 00 00       	push   $0x90
    29fc:	e9 bf f7 ff ff       	jmp    21c0 <interrupt_common>
    2a01:	cc                   	int3

0000000000002a02 <isr.dispatch.2170.is.not.the.isr.number>:
    2a02:	0f 01 ca             	clac
    2a05:	6a 00                	push   $0x0
    2a07:	68 91 00 00 00       	push   $0x91
    2a0c:	e9 af f7 ff ff       	jmp    21c0 <interrupt_common>
    2a11:	cc                   	int3

0000000000002a12 <isr.dispatch.2185.is.not.the.isr.number>:
    2a12:	0f 01 ca             	clac
    2a15:	6a 00                	push   $0x0
    2a17:	68 92 00 00 00       	push   $0x92
    2a1c:	e9 9f f7 ff ff       	jmp    21c0 <interrupt_common>
    2a21:	cc                   	int3

0000000000002a22 <isr.dispatch.2200.is.not.the.isr.number>:
    2a22:	0f 01 ca             	clac
    2a25:	6a 00                	push   $0x0
    2a27:	68 93 00 00 00       	push   $0x93
    2a2c:	e9 8f f7 ff ff       	jmp    21c0 <interrupt_common>
    2a31:	cc                   	int3

0000000000002a32 <isr.dispatch.2215.is.not.the.isr.number>:
    2a32:	0f 01 ca             	clac
    2a35:	6a 00                	push   $0x0
    2a37:	68 94 00 00 00       	push   $0x94
    2a3c:	e9 7f f7 ff ff       	jmp    21c0 <interrupt_common>
    2a41:	cc                   	int3

0000000000002a42 <isr.dispatch.2230.is.not.the.isr.number>:
    2a42:	0f 01 ca             	clac
    2a45:	6a 00                	push   $0x0
    2a47:	68 95 00 00 00       	push   $0x95
    2a4c:	e9 6f f7 ff ff       	jmp    21c0 <interrupt_common>
    2a51:	cc                   	int3

0000000000002a52 <isr.dispatch.2245.is.not.the.isr.number>:
    2a52:	0f 01 ca             	clac
    2a55:	6a 00                	push   $0x0
    2a57:	68 96 00 00 00       	push   $0x96
    2a5c:	e9 5f f7 ff ff       	jmp    21c0 <interrupt_common>
    2a61:	cc                   	int3

0000000000002a62 <isr.dispatch.2260.is.not.the.isr.number>:
    2a62:	0f 01 ca             	clac
    2a65:	6a 00                	push   $0x0
    2a67:	68 97 00 00 00       	push   $0x97
    2a6c:	e9 4f f7 ff ff       	jmp    21c0 <interrupt_common>
    2a71:	cc                   	int3

0000000000002a72 <isr.dispatch.2275.is.not.the.isr.number>:
    2a72:	0f 01 ca             	clac
    2a75:	6a 00                	push   $0x0
    2a77:	68 98 00 00 00       	push   $0x98
    2a7c:	e9 3f f7 ff ff       	jmp    21c0 <interrupt_common>
    2a81:	cc                   	int3

0000000000002a82 <isr.dispatch.2290.is.not.the.isr.number>:
    2a82:	0f 01 ca             	clac
    2a85:	6a 00                	push   $0x0
    2a87:	68 99 00 00 00       	push   $0x99
    2a8c:	e9 2f f7 ff ff       	jmp    21c0 <interrupt_common>
    2a91:	cc                   	int3

0000000000002a92 <isr.dispatch.2305.is.not.the.isr.number>:
    2a92:	0f 01 ca             	clac
    2a95:	6a 00                	push   $0x0
    2a97:	68 9a 00 00 00       	push   $0x9a
    2a9c:	e9 1f f7 ff ff       	jmp    21c0 <interrupt_common>
    2aa1:	cc                   	int3

0000000000002aa2 <isr.dispatch.2320.is.not.the.isr.number>:
    2aa2:	0f 01 ca             	clac
    2aa5:	6a 00                	push   $0x0
    2aa7:	68 9b 00 00 00       	push   $0x9b
    2aac:	e9 0f f7 ff ff       	jmp    21c0 <interrupt_common>
    2ab1:	cc                   	int3

0000000000002ab2 <isr.dispatch.2335.is.not.the.isr.number>:
    2ab2:	0f 01 ca             	clac
    2ab5:	6a 00                	push   $0x0
    2ab7:	68 9c 00 00 00       	push   $0x9c
    2abc:	e9 ff f6 ff ff       	jmp    21c0 <interrupt_common>
    2ac1:	cc                   	int3

0000000000002ac2 <isr.dispatch.2350.is.not.the.isr.number>:
    2ac2:	0f 01 ca             	clac
    2ac5:	6a 00                	push   $0x0
    2ac7:	68 9d 00 00 00       	push   $0x9d
    2acc:	e9 ef f6 ff ff       	jmp    21c0 <interrupt_common>
    2ad1:	cc                   	int3

0000000000002ad2 <isr.dispatch.2365.is.not.the.isr.number>:
    2ad2:	0f 01 ca             	clac
    2ad5:	6a 00                	push   $0x0
    2ad7:	68 9e 00 00 00       	push   $0x9e
    2adc:	e9 df f6 ff ff       	jmp    21c0 <interrupt_common>
    2ae1:	cc                   	int3

0000000000002ae2 <isr.dispatch.2380.is.not.the.isr.number>:
    2ae2:	0f 01 ca             	clac
    2ae5:	6a 00                	push   $0x0
    2ae7:	68 9f 00 00 00       	push   $0x9f
    2aec:	e9 cf f6 ff ff       	jmp    21c0 <interrupt_common>
    2af1:	cc                   	int3

0000000000002af2 <isr.dispatch.2395.is.not.the.isr.number>:
    2af2:	0f 01 ca             	clac
    2af5:	6a 00                	push   $0x0
    2af7:	68 a0 00 00 00       	push   $0xa0
    2afc:	e9 bf f6 ff ff       	jmp    21c0 <interrupt_common>
    2b01:	cc                   	int3

0000000000002b02 <isr.dispatch.2410.is.not.the.isr.number>:
    2b02:	0f 01 ca             	clac
    2b05:	6a 00                	push   $0x0
    2b07:	68 a1 00 00 00       	push   $0xa1
    2b0c:	e9 af f6 ff ff       	jmp    21c0 <interrupt_common>
    2b11:	cc                   	int3

0000000000002b12 <isr.dispatch.2425.is.not.the.isr.number>:
    2b12:	0f 01 ca             	clac
    2b15:	6a 00                	push   $0x0
    2b17:	68 a2 00 00 00       	push   $0xa2
    2b1c:	e9 9f f6 ff ff       	jmp    21c0 <interrupt_common>
    2b21:	cc                   	int3

0000000000002b22 <isr.dispatch.2440.is.not.the.isr.number>:
    2b22:	0f 01 ca             	clac
    2b25:	6a 00                	push   $0x0
    2b27:	68 a3 00 00 00       	push   $0xa3
    2b2c:	e9 8f f6 ff ff       	jmp    21c0 <interrupt_common>
    2b31:	cc                   	int3

0000000000002b32 <isr.dispatch.2455.is.not.the.isr.number>:
    2b32:	0f 01 ca             	clac
    2b35:	6a 00                	push   $0x0
    2b37:	68 a4 00 00 00       	push   $0xa4
    2b3c:	e9 7f f6 ff ff       	jmp    21c0 <interrupt_common>
    2b41:	cc                   	int3

0000000000002b42 <isr.dispatch.2470.is.not.the.isr.number>:
    2b42:	0f 01 ca             	clac
    2b45:	6a 00                	push   $0x0
    2b47:	68 a5 00 00 00       	push   $0xa5
    2b4c:	e9 6f f6 ff ff       	jmp    21c0 <interrupt_common>
    2b51:	cc                   	int3

0000000000002b52 <isr.dispatch.2485.is.not.the.isr.number>:
    2b52:	0f 01 ca             	clac
    2b55:	6a 00                	push   $0x0
    2b57:	68 a6 00 00 00       	push   $0xa6
    2b5c:	e9 5f f6 ff ff       	jmp    21c0 <interrupt_common>
    2b61:	cc                   	int3

0000000000002b62 <isr.dispatch.2500.is.not.the.isr.number>:
    2b62:	0f 01 ca             	clac
    2b65:	6a 00                	push   $0x0
    2b67:	68 a7 00 00 00       	push   $0xa7
    2b6c:	e9 4f f6 ff ff       	jmp    21c0 <interrupt_common>
    2b71:	cc                   	int3

0000000000002b72 <isr.dispatch.2515.is.not.the.isr.number>:
    2b72:	0f 01 ca             	clac
    2b75:	6a 00                	push   $0x0
    2b77:	68 a8 00 00 00       	push   $0xa8
    2b7c:	e9 3f f6 ff ff       	jmp    21c0 <interrupt_common>
    2b81:	cc                   	int3

0000000000002b82 <isr.dispatch.2530.is.not.the.isr.number>:
    2b82:	0f 01 ca             	clac
    2b85:	6a 00                	push   $0x0
    2b87:	68 a9 00 00 00       	push   $0xa9
    2b8c:	e9 2f f6 ff ff       	jmp    21c0 <interrupt_common>
    2b91:	cc                   	int3

0000000000002b92 <isr.dispatch.2545.is.not.the.isr.number>:
    2b92:	0f 01 ca             	clac
    2b95:	6a 00                	push   $0x0
    2b97:	68 aa 00 00 00       	push   $0xaa
    2b9c:	e9 1f f6 ff ff       	jmp    21c0 <interrupt_common>
    2ba1:	cc                   	int3

0000000000002ba2 <isr.dispatch.2560.is.not.the.isr.number>:
    2ba2:	0f 01 ca             	clac
    2ba5:	6a 00                	push   $0x0
    2ba7:	68 ab 00 00 00       	push   $0xab
    2bac:	e9 0f f6 ff ff       	jmp    21c0 <interrupt_common>
    2bb1:	cc                   	int3

0000000000002bb2 <isr.dispatch.2575.is.not.the.isr.number>:
    2bb2:	0f 01 ca             	clac
    2bb5:	6a 00                	push   $0x0
    2bb7:	68 ac 00 00 00       	push   $0xac
    2bbc:	e9 ff f5 ff ff       	jmp    21c0 <interrupt_common>
    2bc1:	cc                   	int3

0000000000002bc2 <isr.dispatch.2590.is.not.the.isr.number>:
    2bc2:	0f 01 ca             	clac
    2bc5:	6a 00                	push   $0x0
    2bc7:	68 ad 00 00 00       	push   $0xad
    2bcc:	e9 ef f5 ff ff       	jmp    21c0 <interrupt_common>
    2bd1:	cc                   	int3

0000000000002bd2 <isr.dispatch.2605.is.not.the.isr.number>:
    2bd2:	0f 01 ca             	clac
    2bd5:	6a 00                	push   $0x0
    2bd7:	68 ae 00 00 00       	push   $0xae
    2bdc:	e9 df f5 ff ff       	jmp    21c0 <interrupt_common>
    2be1:	cc                   	int3

0000000000002be2 <isr.dispatch.2620.is.not.the.isr.number>:
    2be2:	0f 01 ca             	clac
    2be5:	6a 00                	push   $0x0
    2be7:	68 af 00 00 00       	push   $0xaf
    2bec:	e9 cf f5 ff ff       	jmp    21c0 <interrupt_common>
    2bf1:	cc                   	int3

0000000000002bf2 <isr.dispatch.2635.is.not.the.isr.number>:
    2bf2:	0f 01 ca             	clac
    2bf5:	6a 00                	push   $0x0
    2bf7:	68 b0 00 00 00       	push   $0xb0
    2bfc:	e9 bf f5 ff ff       	jmp    21c0 <interrupt_common>
    2c01:	cc                   	int3

0000000000002c02 <isr.dispatch.2650.is.not.the.isr.number>:
    2c02:	0f 01 ca             	clac
    2c05:	6a 00                	push   $0x0
    2c07:	68 b1 00 00 00       	push   $0xb1
    2c0c:	e9 af f5 ff ff       	jmp    21c0 <interrupt_common>
    2c11:	cc                   	int3

0000000000002c12 <isr.dispatch.2665.is.not.the.isr.number>:
    2c12:	0f 01 ca             	clac
    2c15:	6a 00                	push   $0x0
    2c17:	68 b2 00 00 00       	push   $0xb2
    2c1c:	e9 9f f5 ff ff       	jmp    21c0 <interrupt_common>
    2c21:	cc                   	int3

0000000000002c22 <isr.dispatch.2680.is.not.the.isr.number>:
    2c22:	0f 01 ca             	clac
    2c25:	6a 00                	push   $0x0
    2c27:	68 b3 00 00 00       	push   $0xb3
    2c2c:	e9 8f f5 ff ff       	jmp    21c0 <interrupt_common>
    2c31:	cc                   	int3

0000000000002c32 <isr.dispatch.2695.is.not.the.isr.number>:
    2c32:	0f 01 ca             	clac
    2c35:	6a 00                	push   $0x0
    2c37:	68 b4 00 00 00       	push   $0xb4
    2c3c:	e9 7f f5 ff ff       	jmp    21c0 <interrupt_common>
    2c41:	cc                   	int3

0000000000002c42 <isr.dispatch.2710.is.not.the.isr.number>:
    2c42:	0f 01 ca             	clac
    2c45:	6a 00                	push   $0x0
    2c47:	68 b5 00 00 00       	push   $0xb5
    2c4c:	e9 6f f5 ff ff       	jmp    21c0 <interrupt_common>
    2c51:	cc                   	int3

0000000000002c52 <isr.dispatch.2725.is.not.the.isr.number>:
    2c52:	0f 01 ca             	clac
    2c55:	6a 00                	push   $0x0
    2c57:	68 b6 00 00 00       	push   $0xb6
    2c5c:	e9 5f f5 ff ff       	jmp    21c0 <interrupt_common>
    2c61:	cc                   	int3

0000000000002c62 <isr.dispatch.2740.is.not.the.isr.number>:
    2c62:	0f 01 ca             	clac
    2c65:	6a 00                	push   $0x0
    2c67:	68 b7 00 00 00       	push   $0xb7
    2c6c:	e9 4f f5 ff ff       	jmp    21c0 <interrupt_common>
    2c71:	cc                   	int3

0000000000002c72 <isr.dispatch.2755.is.not.the.isr.number>:
    2c72:	0f 01 ca             	clac
    2c75:	6a 00                	push   $0x0
    2c77:	68 b8 00 00 00       	push   $0xb8
    2c7c:	e9 3f f5 ff ff       	jmp    21c0 <interrupt_common>
    2c81:	cc                   	int3

0000000000002c82 <isr.dispatch.2770.is.not.the.isr.number>:
    2c82:	0f 01 ca             	clac
    2c85:	6a 00                	push   $0x0
    2c87:	68 b9 00 00 00       	push   $0xb9
    2c8c:	e9 2f f5 ff ff       	jmp    21c0 <interrupt_common>
    2c91:	cc                   	int3

0000000000002c92 <isr.dispatch.2785.is.not.the.isr.number>:
    2c92:	0f 01 ca             	clac
    2c95:	6a 00                	push   $0x0
    2c97:	68 ba 00 00 00       	push   $0xba
    2c9c:	e9 1f f5 ff ff       	jmp    21c0 <interrupt_common>
    2ca1:	cc                   	int3

0000000000002ca2 <isr.dispatch.2800.is.not.the.isr.number>:
    2ca2:	0f 01 ca             	clac
    2ca5:	6a 00                	push   $0x0
    2ca7:	68 bb 00 00 00       	push   $0xbb
    2cac:	e9 0f f5 ff ff       	jmp    21c0 <interrupt_common>
    2cb1:	cc                   	int3

0000000000002cb2 <isr.dispatch.2815.is.not.the.isr.number>:
    2cb2:	0f 01 ca             	clac
    2cb5:	6a 00                	push   $0x0
    2cb7:	68 bc 00 00 00       	push   $0xbc
    2cbc:	e9 ff f4 ff ff       	jmp    21c0 <interrupt_common>
    2cc1:	cc                   	int3

0000000000002cc2 <isr.dispatch.2830.is.not.the.isr.number>:
    2cc2:	0f 01 ca             	clac
    2cc5:	6a 00                	push   $0x0
    2cc7:	68 bd 00 00 00       	push   $0xbd
    2ccc:	e9 ef f4 ff ff       	jmp    21c0 <interrupt_common>
    2cd1:	cc                   	int3

0000000000002cd2 <isr.dispatch.2845.is.not.the.isr.number>:
    2cd2:	0f 01 ca             	clac
    2cd5:	6a 00                	push   $0x0
    2cd7:	68 be 00 00 00       	push   $0xbe
    2cdc:	e9 df f4 ff ff       	jmp    21c0 <interrupt_common>
    2ce1:	cc                   	int3

0000000000002ce2 <isr.dispatch.2860.is.not.the.isr.number>:
    2ce2:	0f 01 ca             	clac
    2ce5:	6a 00                	push   $0x0
    2ce7:	68 bf 00 00 00       	push   $0xbf
    2cec:	e9 cf f4 ff ff       	jmp    21c0 <interrupt_common>
    2cf1:	cc                   	int3

0000000000002cf2 <isr.dispatch.2875.is.not.the.isr.number>:
    2cf2:	0f 01 ca             	clac
    2cf5:	6a 00                	push   $0x0
    2cf7:	68 c0 00 00 00       	push   $0xc0
    2cfc:	e9 bf f4 ff ff       	jmp    21c0 <interrupt_common>
    2d01:	cc                   	int3

0000000000002d02 <isr.dispatch.2890.is.not.the.isr.number>:
    2d02:	0f 01 ca             	clac
    2d05:	6a 00                	push   $0x0
    2d07:	68 c1 00 00 00       	push   $0xc1
    2d0c:	e9 af f4 ff ff       	jmp    21c0 <interrupt_common>
    2d11:	cc                   	int3

0000000000002d12 <isr.dispatch.2905.is.not.the.isr.number>:
    2d12:	0f 01 ca             	clac
    2d15:	6a 00                	push   $0x0
    2d17:	68 c2 00 00 00       	push   $0xc2
    2d1c:	e9 9f f4 ff ff       	jmp    21c0 <interrupt_common>
    2d21:	cc                   	int3

0000000000002d22 <isr.dispatch.2920.is.not.the.isr.number>:
    2d22:	0f 01 ca             	clac
    2d25:	6a 00                	push   $0x0
    2d27:	68 c3 00 00 00       	push   $0xc3
    2d2c:	e9 8f f4 ff ff       	jmp    21c0 <interrupt_common>
    2d31:	cc                   	int3

0000000000002d32 <isr.dispatch.2935.is.not.the.isr.number>:
    2d32:	0f 01 ca             	clac
    2d35:	6a 00                	push   $0x0
    2d37:	68 c4 00 00 00       	push   $0xc4
    2d3c:	e9 7f f4 ff ff       	jmp    21c0 <interrupt_common>
    2d41:	cc                   	int3

0000000000002d42 <isr.dispatch.2950.is.not.the.isr.number>:
    2d42:	0f 01 ca             	clac
    2d45:	6a 00                	push   $0x0
    2d47:	68 c5 00 00 00       	push   $0xc5
    2d4c:	e9 6f f4 ff ff       	jmp    21c0 <interrupt_common>
    2d51:	cc                   	int3

0000000000002d52 <isr.dispatch.2965.is.not.the.isr.number>:
    2d52:	0f 01 ca             	clac
    2d55:	6a 00                	push   $0x0
    2d57:	68 c6 00 00 00       	push   $0xc6
    2d5c:	e9 5f f4 ff ff       	jmp    21c0 <interrupt_common>
    2d61:	cc                   	int3

0000000000002d62 <isr.dispatch.2980.is.not.the.isr.number>:
    2d62:	0f 01 ca             	clac
    2d65:	6a 00                	push   $0x0
    2d67:	68 c7 00 00 00       	push   $0xc7
    2d6c:	e9 4f f4 ff ff       	jmp    21c0 <interrupt_common>
    2d71:	cc                   	int3

0000000000002d72 <isr.dispatch.2995.is.not.the.isr.number>:
    2d72:	0f 01 ca             	clac
    2d75:	6a 00                	push   $0x0
    2d77:	68 c8 00 00 00       	push   $0xc8
    2d7c:	e9 3f f4 ff ff       	jmp    21c0 <interrupt_common>
    2d81:	cc                   	int3

0000000000002d82 <isr.dispatch.3010.is.not.the.isr.number>:
    2d82:	0f 01 ca             	clac
    2d85:	6a 00                	push   $0x0
    2d87:	68 c9 00 00 00       	push   $0xc9
    2d8c:	e9 2f f4 ff ff       	jmp    21c0 <interrupt_common>
    2d91:	cc                   	int3

0000000000002d92 <isr.dispatch.3025.is.not.the.isr.number>:
    2d92:	0f 01 ca             	clac
    2d95:	6a 00                	push   $0x0
    2d97:	68 ca 00 00 00       	push   $0xca
    2d9c:	e9 1f f4 ff ff       	jmp    21c0 <interrupt_common>
    2da1:	cc                   	int3

0000000000002da2 <isr.dispatch.3040.is.not.the.isr.number>:
    2da2:	0f 01 ca             	clac
    2da5:	6a 00                	push   $0x0
    2da7:	68 cb 00 00 00       	push   $0xcb
    2dac:	e9 0f f4 ff ff       	jmp    21c0 <interrupt_common>
    2db1:	cc                   	int3

0000000000002db2 <isr.dispatch.3055.is.not.the.isr.number>:
    2db2:	0f 01 ca             	clac
    2db5:	6a 00                	push   $0x0
    2db7:	68 cc 00 00 00       	push   $0xcc
    2dbc:	e9 ff f3 ff ff       	jmp    21c0 <interrupt_common>
    2dc1:	cc                   	int3

0000000000002dc2 <isr.dispatch.3070.is.not.the.isr.number>:
    2dc2:	0f 01 ca             	clac
    2dc5:	6a 00                	push   $0x0
    2dc7:	68 cd 00 00 00       	push   $0xcd
    2dcc:	e9 ef f3 ff ff       	jmp    21c0 <interrupt_common>
    2dd1:	cc                   	int3

0000000000002dd2 <isr.dispatch.3085.is.not.the.isr.number>:
    2dd2:	0f 01 ca             	clac
    2dd5:	6a 00                	push   $0x0
    2dd7:	68 ce 00 00 00       	push   $0xce
    2ddc:	e9 df f3 ff ff       	jmp    21c0 <interrupt_common>
    2de1:	cc                   	int3

0000000000002de2 <isr.dispatch.3100.is.not.the.isr.number>:
    2de2:	0f 01 ca             	clac
    2de5:	6a 00                	push   $0x0
    2de7:	68 cf 00 00 00       	push   $0xcf
    2dec:	e9 cf f3 ff ff       	jmp    21c0 <interrupt_common>
    2df1:	cc                   	int3

0000000000002df2 <isr.dispatch.3115.is.not.the.isr.number>:
    2df2:	0f 01 ca             	clac
    2df5:	6a 00                	push   $0x0
    2df7:	68 d0 00 00 00       	push   $0xd0
    2dfc:	e9 bf f3 ff ff       	jmp    21c0 <interrupt_common>
    2e01:	cc                   	int3

0000000000002e02 <isr.dispatch.3130.is.not.the.isr.number>:
    2e02:	0f 01 ca             	clac
    2e05:	6a 00                	push   $0x0
    2e07:	68 d1 00 00 00       	push   $0xd1
    2e0c:	e9 af f3 ff ff       	jmp    21c0 <interrupt_common>
    2e11:	cc                   	int3

0000000000002e12 <isr.dispatch.3145.is.not.the.isr.number>:
    2e12:	0f 01 ca             	clac
    2e15:	6a 00                	push   $0x0
    2e17:	68 d2 00 00 00       	push   $0xd2
    2e1c:	e9 9f f3 ff ff       	jmp    21c0 <interrupt_common>
    2e21:	cc                   	int3

0000000000002e22 <isr.dispatch.3160.is.not.the.isr.number>:
    2e22:	0f 01 ca             	clac
    2e25:	6a 00                	push   $0x0
    2e27:	68 d3 00 00 00       	push   $0xd3
    2e2c:	e9 8f f3 ff ff       	jmp    21c0 <interrupt_common>
    2e31:	cc                   	int3

0000000000002e32 <isr.dispatch.3175.is.not.the.isr.number>:
    2e32:	0f 01 ca             	clac
    2e35:	6a 00                	push   $0x0
    2e37:	68 d4 00 00 00       	push   $0xd4
    2e3c:	e9 7f f3 ff ff       	jmp    21c0 <interrupt_common>
    2e41:	cc                   	int3

0000000000002e42 <isr.dispatch.3190.is.not.the.isr.number>:
    2e42:	0f 01 ca             	clac
    2e45:	6a 00                	push   $0x0
    2e47:	68 d5 00 00 00       	push   $0xd5
    2e4c:	e9 6f f3 ff ff       	jmp    21c0 <interrupt_common>
    2e51:	cc                   	int3

0000000000002e52 <isr.dispatch.3205.is.not.the.isr.number>:
    2e52:	0f 01 ca             	clac
    2e55:	6a 00                	push   $0x0
    2e57:	68 d6 00 00 00       	push   $0xd6
    2e5c:	e9 5f f3 ff ff       	jmp    21c0 <interrupt_common>
    2e61:	cc                   	int3

0000000000002e62 <isr.dispatch.3220.is.not.the.isr.number>:
    2e62:	0f 01 ca             	clac
    2e65:	6a 00                	push   $0x0
    2e67:	68 d7 00 00 00       	push   $0xd7
    2e6c:	e9 4f f3 ff ff       	jmp    21c0 <interrupt_common>
    2e71:	cc                   	int3

0000000000002e72 <isr.dispatch.3235.is.not.the.isr.number>:
    2e72:	0f 01 ca             	clac
    2e75:	6a 00                	push   $0x0
    2e77:	68 d8 00 00 00       	push   $0xd8
    2e7c:	e9 3f f3 ff ff       	jmp    21c0 <interrupt_common>
    2e81:	cc                   	int3

0000000000002e82 <isr.dispatch.3250.is.not.the.isr.number>:
    2e82:	0f 01 ca             	clac
    2e85:	6a 00                	push   $0x0
    2e87:	68 d9 00 00 00       	push   $0xd9
    2e8c:	e9 2f f3 ff ff       	jmp    21c0 <interrupt_common>
    2e91:	cc                   	int3

0000000000002e92 <isr.dispatch.3265.is.not.the.isr.number>:
    2e92:	0f 01 ca             	clac
    2e95:	6a 00                	push   $0x0
    2e97:	68 da 00 00 00       	push   $0xda
    2e9c:	e9 1f f3 ff ff       	jmp    21c0 <interrupt_common>
    2ea1:	cc                   	int3

0000000000002ea2 <isr.dispatch.3280.is.not.the.isr.number>:
    2ea2:	0f 01 ca             	clac
    2ea5:	6a 00                	push   $0x0
    2ea7:	68 db 00 00 00       	push   $0xdb
    2eac:	e9 0f f3 ff ff       	jmp    21c0 <interrupt_common>
    2eb1:	cc                   	int3

0000000000002eb2 <isr.dispatch.3295.is.not.the.isr.number>:
    2eb2:	0f 01 ca             	clac
    2eb5:	6a 00                	push   $0x0
    2eb7:	68 dc 00 00 00       	push   $0xdc
    2ebc:	e9 ff f2 ff ff       	jmp    21c0 <interrupt_common>
    2ec1:	cc                   	int3

0000000000002ec2 <isr.dispatch.3310.is.not.the.isr.number>:
    2ec2:	0f 01 ca             	clac
    2ec5:	6a 00                	push   $0x0
    2ec7:	68 dd 00 00 00       	push   $0xdd
    2ecc:	e9 ef f2 ff ff       	jmp    21c0 <interrupt_common>
    2ed1:	cc                   	int3

0000000000002ed2 <isr.dispatch.3325.is.not.the.isr.number>:
    2ed2:	0f 01 ca             	clac
    2ed5:	6a 00                	push   $0x0
    2ed7:	68 de 00 00 00       	push   $0xde
    2edc:	e9 df f2 ff ff       	jmp    21c0 <interrupt_common>
    2ee1:	cc                   	int3

0000000000002ee2 <isr.dispatch.3340.is.not.the.isr.number>:
    2ee2:	0f 01 ca             	clac
    2ee5:	6a 00                	push   $0x0
    2ee7:	68 df 00 00 00       	push   $0xdf
    2eec:	e9 cf f2 ff ff       	jmp    21c0 <interrupt_common>
    2ef1:	cc                   	int3

0000000000002ef2 <isr.dispatch.3355.is.not.the.isr.number>:
    2ef2:	0f 01 ca             	clac
    2ef5:	6a 00                	push   $0x0
    2ef7:	68 e0 00 00 00       	push   $0xe0
    2efc:	e9 bf f2 ff ff       	jmp    21c0 <interrupt_common>
    2f01:	cc                   	int3

0000000000002f02 <isr.dispatch.3370.is.not.the.isr.number>:
    2f02:	0f 01 ca             	clac
    2f05:	6a 00                	push   $0x0
    2f07:	68 e1 00 00 00       	push   $0xe1
    2f0c:	e9 af f2 ff ff       	jmp    21c0 <interrupt_common>
    2f11:	cc                   	int3

0000000000002f12 <isr.dispatch.3385.is.not.the.isr.number>:
    2f12:	0f 01 ca             	clac
    2f15:	6a 00                	push   $0x0
    2f17:	68 e2 00 00 00       	push   $0xe2
    2f1c:	e9 9f f2 ff ff       	jmp    21c0 <interrupt_common>
    2f21:	cc                   	int3

0000000000002f22 <isr.dispatch.3400.is.not.the.isr.number>:
    2f22:	0f 01 ca             	clac
    2f25:	6a 00                	push   $0x0
    2f27:	68 e3 00 00 00       	push   $0xe3
    2f2c:	e9 8f f2 ff ff       	jmp    21c0 <interrupt_common>
    2f31:	cc                   	int3

0000000000002f32 <isr.dispatch.3415.is.not.the.isr.number>:
    2f32:	0f 01 ca             	clac
    2f35:	6a 00                	push   $0x0
    2f37:	68 e4 00 00 00       	push   $0xe4
    2f3c:	e9 7f f2 ff ff       	jmp    21c0 <interrupt_common>
    2f41:	cc                   	int3

0000000000002f42 <isr.dispatch.3430.is.not.the.isr.number>:
    2f42:	0f 01 ca             	clac
    2f45:	6a 00                	push   $0x0
    2f47:	68 e5 00 00 00       	push   $0xe5
    2f4c:	e9 6f f2 ff ff       	jmp    21c0 <interrupt_common>
    2f51:	cc                   	int3

0000000000002f52 <isr.dispatch.3445.is.not.the.isr.number>:
    2f52:	0f 01 ca             	clac
    2f55:	6a 00                	push   $0x0
    2f57:	68 e6 00 00 00       	push   $0xe6
    2f5c:	e9 5f f2 ff ff       	jmp    21c0 <interrupt_common>
    2f61:	cc                   	int3

0000000000002f62 <isr.dispatch.3460.is.not.the.isr.number>:
    2f62:	0f 01 ca             	clac
    2f65:	6a 00                	push   $0x0
    2f67:	68 e7 00 00 00       	push   $0xe7
    2f6c:	e9 4f f2 ff ff       	jmp    21c0 <interrupt_common>
    2f71:	cc                   	int3

0000000000002f72 <isr.dispatch.3475.is.not.the.isr.number>:
    2f72:	0f 01 ca             	clac
    2f75:	6a 00                	push   $0x0
    2f77:	68 e8 00 00 00       	push   $0xe8
    2f7c:	e9 3f f2 ff ff       	jmp    21c0 <interrupt_common>
    2f81:	cc                   	int3

0000000000002f82 <isr.dispatch.3490.is.not.the.isr.number>:
    2f82:	0f 01 ca             	clac
    2f85:	6a 00                	push   $0x0
    2f87:	68 e9 00 00 00       	push   $0xe9
    2f8c:	e9 2f f2 ff ff       	jmp    21c0 <interrupt_common>
    2f91:	cc                   	int3

0000000000002f92 <isr.dispatch.3505.is.not.the.isr.number>:
    2f92:	0f 01 ca             	clac
    2f95:	6a 00                	push   $0x0
    2f97:	68 ea 00 00 00       	push   $0xea
    2f9c:	e9 1f f2 ff ff       	jmp    21c0 <interrupt_common>
    2fa1:	cc                   	int3

0000000000002fa2 <isr.dispatch.3520.is.not.the.isr.number>:
    2fa2:	0f 01 ca             	clac
    2fa5:	6a 00                	push   $0x0
    2fa7:	68 eb 00 00 00       	push   $0xeb
    2fac:	e9 0f f2 ff ff       	jmp    21c0 <interrupt_common>
    2fb1:	cc                   	int3

0000000000002fb2 <isr.dispatch.3535.is.not.the.isr.number>:
    2fb2:	0f 01 ca             	clac
    2fb5:	6a 00                	push   $0x0
    2fb7:	68 ec 00 00 00       	push   $0xec
    2fbc:	e9 ff f1 ff ff       	jmp    21c0 <interrupt_common>
    2fc1:	cc                   	int3

0000000000002fc2 <isr.dispatch.3550.is.not.the.isr.number>:
    2fc2:	0f 01 ca             	clac
    2fc5:	6a 00                	push   $0x0
    2fc7:	68 ed 00 00 00       	push   $0xed
    2fcc:	e9 ef f1 ff ff       	jmp    21c0 <interrupt_common>
    2fd1:	cc                   	int3

0000000000002fd2 <isr.dispatch.3565.is.not.the.isr.number>:
    2fd2:	0f 01 ca             	clac
    2fd5:	6a 00                	push   $0x0
    2fd7:	68 ee 00 00 00       	push   $0xee
    2fdc:	e9 df f1 ff ff       	jmp    21c0 <interrupt_common>
    2fe1:	cc                   	int3

0000000000002fe2 <isr.dispatch.3580.is.not.the.isr.number>:
    2fe2:	0f 01 ca             	clac
    2fe5:	6a 00                	push   $0x0
    2fe7:	68 ef 00 00 00       	push   $0xef
    2fec:	e9 cf f1 ff ff       	jmp    21c0 <interrupt_common>
    2ff1:	cc                   	int3

0000000000002ff2 <isr.dispatch.3595.is.not.the.isr.number>:
    2ff2:	0f 01 ca             	clac
    2ff5:	6a 00                	push   $0x0
    2ff7:	68 f0 00 00 00       	push   $0xf0
    2ffc:	e9 bf f1 ff ff       	jmp    21c0 <interrupt_common>
    3001:	cc                   	int3

0000000000003002 <isr.dispatch.3610.is.not.the.isr.number>:
    3002:	0f 01 ca             	clac
    3005:	6a 00                	push   $0x0
    3007:	68 f1 00 00 00       	push   $0xf1
    300c:	e9 af f1 ff ff       	jmp    21c0 <interrupt_common>
    3011:	cc                   	int3

0000000000003012 <isr.dispatch.3625.is.not.the.isr.number>:
    3012:	0f 01 ca             	clac
    3015:	6a 00                	push   $0x0
    3017:	68 f2 00 00 00       	push   $0xf2
    301c:	e9 9f f1 ff ff       	jmp    21c0 <interrupt_common>
    3021:	cc                   	int3

0000000000003022 <isr.dispatch.3640.is.not.the.isr.number>:
    3022:	0f 01 ca             	clac
    3025:	6a 00                	push   $0x0
    3027:	68 f3 00 00 00       	push   $0xf3
    302c:	e9 8f f1 ff ff       	jmp    21c0 <interrupt_common>
    3031:	cc                   	int3

0000000000003032 <isr.dispatch.3655.is.not.the.isr.number>:
    3032:	0f 01 ca             	clac
    3035:	6a 00                	push   $0x0
    3037:	68 f4 00 00 00       	push   $0xf4
    303c:	e9 7f f1 ff ff       	jmp    21c0 <interrupt_common>
    3041:	cc                   	int3

0000000000003042 <isr.dispatch.3670.is.not.the.isr.number>:
    3042:	0f 01 ca             	clac
    3045:	6a 00                	push   $0x0
    3047:	68 f5 00 00 00       	push   $0xf5
    304c:	e9 6f f1 ff ff       	jmp    21c0 <interrupt_common>
    3051:	cc                   	int3

0000000000003052 <isr.dispatch.3685.is.not.the.isr.number>:
    3052:	0f 01 ca             	clac
    3055:	6a 00                	push   $0x0
    3057:	68 f6 00 00 00       	push   $0xf6
    305c:	e9 5f f1 ff ff       	jmp    21c0 <interrupt_common>
    3061:	cc                   	int3

0000000000003062 <isr.dispatch.3700.is.not.the.isr.number>:
    3062:	0f 01 ca             	clac
    3065:	6a 00                	push   $0x0
    3067:	68 f7 00 00 00       	push   $0xf7
    306c:	e9 4f f1 ff ff       	jmp    21c0 <interrupt_common>
    3071:	cc                   	int3

0000000000003072 <isr.dispatch.3715.is.not.the.isr.number>:
    3072:	0f 01 ca             	clac
    3075:	6a 00                	push   $0x0
    3077:	68 f8 00 00 00       	push   $0xf8
    307c:	e9 3f f1 ff ff       	jmp    21c0 <interrupt_common>
    3081:	cc                   	int3

0000000000003082 <isr.dispatch.3730.is.not.the.isr.number>:
    3082:	0f 01 ca             	clac
    3085:	6a 00                	push   $0x0
    3087:	68 f9 00 00 00       	push   $0xf9
    308c:	e9 2f f1 ff ff       	jmp    21c0 <interrupt_common>
    3091:	cc                   	int3

0000000000003092 <isr.dispatch.3745.is.not.the.isr.number>:
    3092:	0f 01 ca             	clac
    3095:	6a 00                	push   $0x0
    3097:	68 fa 00 00 00       	push   $0xfa
    309c:	e9 1f f1 ff ff       	jmp    21c0 <interrupt_common>
    30a1:	cc                   	int3

00000000000030a2 <isr.dispatch.3760.is.not.the.isr.number>:
    30a2:	0f 01 ca             	clac
    30a5:	6a 00                	push   $0x0
    30a7:	68 fb 00 00 00       	push   $0xfb
    30ac:	e9 0f f1 ff ff       	jmp    21c0 <interrupt_common>
    30b1:	cc                   	int3

00000000000030b2 <isr.dispatch.3775.is.not.the.isr.number>:
    30b2:	0f 01 ca             	clac
    30b5:	6a 00                	push   $0x0
    30b7:	68 fc 00 00 00       	push   $0xfc
    30bc:	e9 ff f0 ff ff       	jmp    21c0 <interrupt_common>
    30c1:	cc                   	int3

00000000000030c2 <isr.dispatch.3790.is.not.the.isr.number>:
    30c2:	0f 01 ca             	clac
    30c5:	6a 00                	push   $0x0
    30c7:	68 fd 00 00 00       	push   $0xfd
    30cc:	e9 ef f0 ff ff       	jmp    21c0 <interrupt_common>
    30d1:	cc                   	int3

00000000000030d2 <isr.dispatch.3805.is.not.the.isr.number>:
    30d2:	0f 01 ca             	clac
    30d5:	6a 00                	push   $0x0
    30d7:	68 fe 00 00 00       	push   $0xfe
    30dc:	e9 df f0 ff ff       	jmp    21c0 <interrupt_common>
    30e1:	cc                   	int3

00000000000030e2 <isr.dispatch.3820.is.not.the.isr.number>:
    30e2:	0f 01 ca             	clac
    30e5:	6a 00                	push   $0x0
    30e7:	68 ff 00 00 00       	push   $0xff
    30ec:	e9 cf f0 ff ff       	jmp    21c0 <interrupt_common>
    30f1:	cc                   	int3
    30f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30f9:	00 00 00 
    30fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003100 <_ZN4ours5panicEv>:
#include <ours/panic.hpp>

namespace ours {
    NO_RETURN
    auto panic() -> void { 
    3100:	55                   	push   %rbp
    3101:	48 89 e5             	mov    %rsp,%rbp
        while (1); 
    3104:	eb 00                	jmp    3106 <_ZN4ours5panicEv+0x6>
    3106:	eb fe                	jmp    3106 <_ZN4ours5panicEv+0x6>
    3108:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    310f:	00 

0000000000003110 <_ZN4ours8do_panicENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEERKNS0_17basic_format_argsINS0_20basic_format_contextINS0_20back_insert_iteratorINS0_8__format15__output_bufferIcEEEEcEEEE>:
    }

    NO_RETURN
    auto do_panic(ustl::views::StringView fmt, ustl::fmt::FormatArgs const &args) -> void { 
    3110:	55                   	push   %rbp
    3111:	48 89 e5             	mov    %rsp,%rbp
    3114:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    3118:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    311c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        while (1); 
    3120:	eb fe                	jmp    3120 <_ZN4ours8do_panicENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEERKNS0_17basic_format_argsINS0_20basic_format_contextINS0_20back_insert_iteratorINS0_8__format15__output_bufferIcEEEEcEEEE+0x10>
    3122:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3129:	00 00 00 
    312c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003130 <_ZN4ours7CpuMaskCI2NSt3__16bitsetILm32EEEEy>:
        : public ustl::BitSet<MAX_CPU_NUM>
    {
        typedef CpuMask                     Self;
        typedef ustl::BitSet<MAX_CPU_NUM>   Base;

        using Base::Base;
    3130:	55                   	push   %rbp
    3131:	48 89 e5             	mov    %rsp,%rbp
    3134:	48 83 ec 10          	sub    $0x10,%rsp
    3138:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    313c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3140:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3144:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    3148:	e8 23 00 00 00       	call   3170 <_ZNSt3__16bitsetILm32EEC2B8nn210000Ey>
    314d:	48 83 c4 10          	add    $0x10,%rsp
    3151:	5d                   	pop    %rbp
    3152:	c3                   	ret
    3153:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    315a:	00 00 00 
    315d:	0f 1f 00             	nopl   (%rax)

0000000000003160 <_ZN4ours4task6Thread7Current4idleEv>:
      public:
        static auto aspace() -> mem::VmAspace * {
            return 0;
        }

        static auto idle() -> void {
    3160:	55                   	push   %rbp
    3161:	48 89 e5             	mov    %rsp,%rbp
        }
    3164:	5d                   	pop    %rbp
    3165:	c3                   	ret
    3166:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    316d:	00 00 00 

0000000000003170 <_ZNSt3__16bitsetILm32EEC2B8nn210000Ey>:
  typedef typename __base::reference reference;
  typedef typename __base::__const_reference __const_reference;

  // 23.3.5.1 constructors:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bitset() _NOEXCEPT {}
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bitset(unsigned long long __v) _NOEXCEPT : __base(__v) {}
    3170:	55                   	push   %rbp
    3171:	48 89 e5             	mov    %rsp,%rbp
    3174:	48 83 ec 10          	sub    $0x10,%rsp
    3178:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    317c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3180:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3184:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    3188:	e8 13 00 00 00       	call   31a0 <_ZNSt3__18__bitsetILm1ELm32EEC2Ey>
    318d:	48 83 c4 10          	add    $0x10,%rsp
    3191:	5d                   	pop    %rbp
    3192:	c3                   	ret
    3193:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    319a:	00 00 00 
    319d:	0f 1f 00             	nopl   (%rax)

00000000000031a0 <_ZNSt3__18__bitsetILm1ELm32EEC2Ey>:
                                        : static_cast<__storage_type>(__v) & ((__storage_type(1) << _Size) - 1)) {}
    31a0:	55                   	push   %rbp
    31a1:	48 89 e5             	mov    %rsp,%rbp
    31a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    31a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    31ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    31b0:	48 b9 ff ff ff ff 00 	movabs $0xffffffff,%rcx
    31b7:	00 00 00 
    31ba:	48 23 4d f0          	and    -0x10(%rbp),%rcx
    : __first_(_Size == __bits_per_word ? static_cast<__storage_type>(__v)
    31be:	48 89 08             	mov    %rcx,(%rax)
                                        : static_cast<__storage_type>(__v) & ((__storage_type(1) << _Size) - 1)) {}
    31c1:	5d                   	pop    %rbp
    31c2:	c3                   	ret
    31c3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31ca:	00 00 00 
    31cd:	0f 1f 00             	nopl   (%rax)

00000000000031d0 <_ZNSt3__15arrayIlLm32EEixB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR size_type size() const _NOEXCEPT { return _Size; }
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR size_type max_size() const _NOEXCEPT { return _Size; }
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bool empty() const _NOEXCEPT { return _Size == 0; }

  // element access:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reference operator[](size_type __n) _NOEXCEPT {
    31d0:	55                   	push   %rbp
    31d1:	48 89 e5             	mov    %rsp,%rbp
    31d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    31d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    31dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < _Size, "out-of-bounds access in std::array<T, N>");
    return __elems_[__n];
    31e0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    31e4:	48 c1 e1 03          	shl    $0x3,%rcx
    31e8:	48 01 c8             	add    %rcx,%rax
    31eb:	5d                   	pop    %rbp
    31ec:	c3                   	ret
    31ed:	0f 1f 00             	nopl   (%rax)

00000000000031f0 <_ZN4arch5MsrIo5writeImEEvNS_10MsrRegAddrET_>:
        MSRC001_102D = 0xc001'102d,
    };

    struct MsrIo {
        template <typename Int>
        static auto write(MsrRegAddr addr, Int value) -> void {
    31f0:	55                   	push   %rbp
    31f1:	48 89 e5             	mov    %rsp,%rbp
    31f4:	89 7d fc             	mov    %edi,-0x4(%rbp)
    31f7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
            // static_assert(internal::IsSupportedInt<Int>::value, "unsupported register access width");
            u64 v = reinterpret_cast<u64>(value);
    31fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    31ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            // The high-order 32 bits of each register are ignored so they need not be
            // cleared. u32 is 32 bits on x86-32 so that values will match the
            // register size, but 64 bits on x86-64 so that the compiler doesn't think
            // it needs to add an instruction to clear the high bits.
            u32 lo = static_cast<u32>(v);
    3203:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3207:	89 45 e4             	mov    %eax,-0x1c(%rbp)
            u32 hi = static_cast<u32>(v >> 32);
    320a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    320e:	48 c1 e8 20          	shr    $0x20,%rax
    3212:	89 45 e0             	mov    %eax,-0x20(%rbp)
            asm volatile("wrmsr" : : "c"(addr), "a"(lo), "d"(hi));
    3215:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    3218:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    321b:	8b 55 e0             	mov    -0x20(%rbp),%edx
    321e:	0f 30                	wrmsr
        }
    3220:	5d                   	pop    %rbp
    3221:	c3                   	ret
    3222:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3229:	00 00 00 
    322c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>:
    auto do_panic(ustl::views::StringView fmt, ustl::fmt::FormatArgs const &args) -> void;

    template <typename... Args>
    NO_RETURN
    auto panic(ustl::views::StringView fmt, Args&&... args) -> void
    {  do_panic(fmt, ustl::fmt::make_format_args(args...));  }
    3230:	55                   	push   %rbp
    3231:	48 89 e5             	mov    %rsp,%rbp
    3234:	48 83 ec 40          	sub    $0x40,%rsp
    3238:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    323c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    3240:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3244:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    3248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    324c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3250:	e8 6b 00 00 00       	call   32c0 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSA_>
    3255:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    3259:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    325d:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    3261:	e8 7a 00 00 00       	call   32e0 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJEEERKNS_18__format_arg_storeIS7_JDpT_EEE>
    3266:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    326a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    326e:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    3272:	e8 99 fe ff ff       	call   3110 <_ZN4ours8do_panicENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEERKNS0_17basic_format_argsINS0_20basic_format_contextINS0_20back_insert_iteratorINS0_8__format15__output_bufferIcEEEEcEEEE>
    3277:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    327e:	00 00 

0000000000003280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>:
  constexpr explicit _LIBCPP_HIDE_FROM_ABI basic_string_view(_Range&& __r)
      : __data_(ranges::data(__r)), __size_(ranges::size(__r)) {}
#  endif // _LIBCPP_STD_VER >= 23

  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI basic_string_view(const _CharT* __s)
      : __data_(__s), __size_(std::__char_traits_length_checked<_Traits>(__s)) {}
    3280:	55                   	push   %rbp
    3281:	48 89 e5             	mov    %rsp,%rbp
    3284:	48 83 ec 20          	sub    $0x20,%rsp
    3288:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    328c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3294:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3298:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    329c:	48 89 08             	mov    %rcx,(%rax)
    329f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    32a3:	e8 98 00 00 00       	call   3340 <_ZNSt3__128__char_traits_length_checkedB8nn210000INS_11char_traitsIcEEEEmPKNT_9char_typeE>
    32a8:	48 89 c1             	mov    %rax,%rcx
    32ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    32af:	48 89 48 08          	mov    %rcx,0x8(%rax)
    32b3:	48 83 c4 20          	add    $0x20,%rsp
    32b7:	5d                   	pop    %rbp
    32b8:	c3                   	ret
    32b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000032c0 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSA_>:
#  if _LIBCPP_HAS_WIDE_CHARACTERS
using wformat_args = basic_format_args<wformat_context>;
#  endif

template <class _Context = format_context, class... _Args>
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI __format_arg_store<_Context, _Args...> make_format_args(_Args&... __args) {
    32c0:	55                   	push   %rbp
    32c1:	48 89 e5             	mov    %rsp,%rbp
    32c4:	48 83 ec 10          	sub    $0x10,%rsp
    32c8:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return std::__format_arg_store<_Context, _Args...>(__args...);
    32cc:	e8 2f 00 00 00       	call   3300 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJEEC2B8nn210000Ev>
    32d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    32d5:	48 83 c4 10          	add    $0x10,%rsp
    32d9:	5d                   	pop    %rbp
    32da:	c3                   	ret
    32db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000032e0 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJEEERKNS_18__format_arg_storeIS7_JDpT_EEE>:
template <class _Context>
class _LIBCPP_TEMPLATE_VIS basic_format_args {
public:
  template <class... _Args>
  _LIBCPP_HIDE_FROM_ABI basic_format_args(const __format_arg_store<_Context, _Args...>& __store) noexcept
      : __size_(sizeof...(_Args)) {
    32e0:	55                   	push   %rbp
    32e1:	48 89 e5             	mov    %rsp,%rbp
    32e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    32e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    32ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    32f0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        __values_ = __store.__storage.__values_;
        __types_  = __store.__storage.__types_;
      } else
        __args_ = __store.__storage.__args_;
    }
  }
    32f7:	5d                   	pop    %rbp
    32f8:	c3                   	ret
    32f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003300 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJEEC2B8nn210000Ev>:

} // namespace __format

template <class _Context, class... _Args>
struct _LIBCPP_TEMPLATE_VIS __format_arg_store {
  _LIBCPP_HIDE_FROM_ABI __format_arg_store(_Args&... __args) noexcept {
    3300:	55                   	push   %rbp
    3301:	48 89 e5             	mov    %rsp,%rbp
    3304:	48 83 ec 10          	sub    $0x10,%rsp
    3308:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    330c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3310:	e8 0b 00 00 00       	call   3320 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm0EEC2Ev>
      if constexpr (__format::__use_packed_format_arg_store(sizeof...(_Args)))
        __format::__create_packed_storage(__storage.__types_, __storage.__values_, __args...);
      else
        __format::__store_basic_format_arg<_Context>(__storage.__args_, __args...);
    }
  }
    3315:	48 83 c4 10          	add    $0x10,%rsp
    3319:	5d                   	pop    %rbp
    331a:	c3                   	ret
    331b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003320 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm0EEC2Ev>:
struct __packed_format_arg_store<_Context, 0> {
    3320:	55                   	push   %rbp
    3321:	48 89 e5             	mov    %rsp,%rbp
    3324:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3328:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  uint64_t __types_ = 0;
    332c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
struct __packed_format_arg_store<_Context, 0> {
    3333:	5d                   	pop    %rbp
    3334:	c3                   	ret
    3335:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    333c:	00 00 00 
    333f:	90                   	nop

0000000000003340 <_ZNSt3__128__char_traits_length_checkedB8nn210000INS_11char_traitsIcEEEEmPKNT_9char_typeE>:
__char_traits_length_checked(const typename _Traits::char_type* __s) _NOEXCEPT {
    3340:	55                   	push   %rbp
    3341:	48 89 e5             	mov    %rsp,%rbp
    3344:	48 83 ec 10          	sub    $0x10,%rsp
    3348:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
         _Traits::length(__s);
    334c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3350:	e8 0b 00 00 00       	call   3360 <_ZNSt3__111char_traitsIcE6lengthB8nn210000EPKc>
  return _LIBCPP_ASSERT_NON_NULL(
    3355:	48 83 c4 10          	add    $0x10,%rsp
    3359:	5d                   	pop    %rbp
    335a:	c3                   	ret
    335b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003360 <_ZNSt3__111char_traitsIcE6lengthB8nn210000EPKc>:
    } else {
      return __builtin_memcmp(__lhs, __rhs, __count);
    }
  }

  static inline _LIBCPP_HIDE_FROM_ABI size_t _LIBCPP_CONSTEXPR_SINCE_CXX17 length(const char_type* __s) _NOEXCEPT {
    3360:	55                   	push   %rbp
    3361:	48 89 e5             	mov    %rsp,%rbp
    3364:	48 83 ec 10          	sub    $0x10,%rsp
    3368:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::__constexpr_strlen(__s);
    336c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3370:	e8 0b 00 00 00       	call   3380 <_ZNSt3__118__constexpr_strlenB8nn210000IcEEmPKT_>
    3375:	48 83 c4 10          	add    $0x10,%rsp
    3379:	5d                   	pop    %rbp
    337a:	c3                   	ret
    337b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003380 <_ZNSt3__118__constexpr_strlenB8nn210000IcEEmPKT_>:
template <>
inline const bool __is_char_type<char8_t> = true;
#endif

template <class _Tp>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 size_t __constexpr_strlen(const _Tp* __str) _NOEXCEPT {
    3380:	55                   	push   %rbp
    3381:	48 89 e5             	mov    %rsp,%rbp
    3384:	48 83 ec 10          	sub    $0x10,%rsp
    3388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    size_t __i = 0;
    for (; __str[__i] != '\0'; ++__i)
      ;
    return __i;
  }
  return __builtin_strlen(reinterpret_cast<const char*>(__str));
    338c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3390:	e8 eb 43 01 00       	call   17780 <strlen>
    3395:	48 83 c4 10          	add    $0x10,%rsp
    3399:	5d                   	pop    %rbp
    339a:	c3                   	ret
    339b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000033a0 <_ZN4ours12for_each_cpuIZNS_8CpuLocal4initERKNS_7CpuMaskEE3$_0Qsr4ustl6traitsE9InvocableIT_jEEEvS4_OS6_>:
        return CpuStates::s_cpu_states;
    }

    template <typename F>
        requires ustl::traits::Invocable<F, CpuNum>
    auto for_each_cpu(CpuMask const &cpu_mask, F &&functor) -> void {
    33a0:	55                   	push   %rbp
    33a1:	48 89 e5             	mov    %rsp,%rbp
    33a4:	48 83 ec 20          	sub    $0x20,%rsp
    33a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    33ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        for (auto i = 0; i < cpu_mask.size(); ++i) {
    33b0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    33b7:	48 63 45 ec          	movslq -0x14(%rbp),%rax
    33bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    33bf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    33c3:	e8 98 03 00 00       	call   3760 <_ZNKSt3__16bitsetILm32EE4sizeB8nn210000Ev>
    33c8:	48 89 c1             	mov    %rax,%rcx
    33cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    33cf:	48 39 c8             	cmp    %rcx,%rax
    33d2:	73 33                	jae    3407 <_ZN4ours12for_each_cpuIZNS_8CpuLocal4initERKNS_7CpuMaskEE3$_0Qsr4ustl6traitsE9InvocableIT_jEEEvS4_OS6_+0x67>
            if (cpu_mask.test(i)) {
    33d4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    33d8:	48 63 75 ec          	movslq -0x14(%rbp),%rsi
    33dc:	e8 8f 03 00 00       	call   3770 <_ZNKSt3__16bitsetILm32EE4testB8nn210000Em>
    33e1:	a8 01                	test   $0x1,%al
    33e3:	75 02                	jne    33e7 <_ZN4ours12for_each_cpuIZNS_8CpuLocal4initERKNS_7CpuMaskEE3$_0Qsr4ustl6traitsE9InvocableIT_jEEEvS4_OS6_+0x47>
    33e5:	eb 13                	jmp    33fa <_ZN4ours12for_each_cpuIZNS_8CpuLocal4initERKNS_7CpuMaskEE3$_0Qsr4ustl6traitsE9InvocableIT_jEEEvS4_OS6_+0x5a>
                ustl::function::invoke(functor, CpuNum(i));
    33e7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    33eb:	8b 45 ec             	mov    -0x14(%rbp),%eax
    33ee:	89 45 e8             	mov    %eax,-0x18(%rbp)
    33f1:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
    33f5:	e8 16 00 00 00       	call   3410 <_ZNSt3__16invokeB8nn210000IRZN4ours8CpuLocal4initERKNS1_7CpuMaskEE3$_0JjEEENS_13invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
            }
        }
    33fa:	eb 00                	jmp    33fc <_ZN4ours12for_each_cpuIZNS_8CpuLocal4initERKNS_7CpuMaskEE3$_0Qsr4ustl6traitsE9InvocableIT_jEEEvS4_OS6_+0x5c>
        for (auto i = 0; i < cpu_mask.size(); ++i) {
    33fc:	8b 45 ec             	mov    -0x14(%rbp),%eax
    33ff:	83 c0 01             	add    $0x1,%eax
    3402:	89 45 ec             	mov    %eax,-0x14(%rbp)
    3405:	eb b0                	jmp    33b7 <_ZN4ours12for_each_cpuIZNS_8CpuLocal4initERKNS_7CpuMaskEE3$_0Qsr4ustl6traitsE9InvocableIT_jEEEvS4_OS6_+0x17>
    }
    3407:	48 83 c4 20          	add    $0x20,%rsp
    340b:	5d                   	pop    %rbp
    340c:	c3                   	ret
    340d:	0f 1f 00             	nopl   (%rax)

0000000000003410 <_ZNSt3__16invokeB8nn210000IRZN4ours8CpuLocal4initERKNS1_7CpuMaskEE3$_0JjEEENS_13invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:

#if _LIBCPP_STD_VER >= 17

template <class _Fn, class... _Args>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 invoke_result_t<_Fn, _Args...>
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
    3410:	55                   	push   %rbp
    3411:	48 89 e5             	mov    %rsp,%rbp
    3414:	48 83 ec 20          	sub    $0x20,%rsp
    3418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    341c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
    3420:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3424:	e8 57 00 00 00       	call   3480 <_ZNSt3__17forwardB8nn210000IRZN4ours8CpuLocal4initERKNS1_7CpuMaskEE3$_0EEOT_Ru20__remove_reference_tIS8_E>
    3429:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    342d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3431:	e8 9a 04 00 00       	call   38d0 <_ZNSt3__17forwardB8nn210000IjEEOT_Ru20__remove_reference_tIS1_E>
    3436:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    343a:	48 89 c6             	mov    %rax,%rsi
    343d:	e8 0e 00 00 00       	call   3450 <_ZNSt3__18__invokeB8nn210000IRZN4ours8CpuLocal4initERKNS1_7CpuMaskEE3$_0JjEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS8_DpOS9_>
    3442:	48 83 c4 20          	add    $0x20,%rsp
    3446:	5d                   	pop    %rbp
    3447:	c3                   	ret
    3448:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    344f:	00 

0000000000003450 <_ZNSt3__18__invokeB8nn210000IRZN4ours8CpuLocal4initERKNS1_7CpuMaskEE3$_0JjEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS8_DpOS9_>:
template <class _Fp, class... _Args>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR
decltype(std::declval<_Fp>()(std::declval<_Args>()...))
__invoke(_Fp&& __f, _Args&&... __args)
    _NOEXCEPT_(noexcept(static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...)))
               { return static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...); }
    3450:	55                   	push   %rbp
    3451:	48 89 e5             	mov    %rsp,%rbp
    3454:	48 83 ec 10          	sub    $0x10,%rsp
    3458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    345c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3460:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3464:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3468:	8b 30                	mov    (%rax),%esi
    346a:	e8 21 00 00 00       	call   3490 <_ZZN4ours8CpuLocal4initERKNS_7CpuMaskEENK3$_0clEj>
    346f:	48 83 c4 10          	add    $0x10,%rsp
    3473:	5d                   	pop    %rbp
    3474:	c3                   	ret
    3475:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    347c:	00 00 00 00 

0000000000003480 <_ZNSt3__17forwardB8nn210000IRZN4ours8CpuLocal4initERKNS1_7CpuMaskEE3$_0EEOT_Ru20__remove_reference_tIS8_E>:

_LIBCPP_BEGIN_NAMESPACE_STD

template <class _Tp>
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp&&
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    3480:	55                   	push   %rbp
    3481:	48 89 e5             	mov    %rsp,%rbp
    3484:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    3488:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    348c:	5d                   	pop    %rbp
    348d:	c3                   	ret
    348e:	66 90                	xchg   %ax,%ax

0000000000003490 <_ZZN4ours8CpuLocal4initERKNS_7CpuMaskEENK3$_0clEj>:
        return Status::Ok;
    }

    auto CpuLocal::init(CpuMask const &cpus) -> Status {
        mem::NodeMask groups;
        for_each_cpu(cpus, [] (CpuNum cpunum) {
    3490:	55                   	push   %rbp
    3491:	48 89 e5             	mov    %rsp,%rbp
    3494:	48 83 ec 20          	sub    $0x20,%rsp
    3498:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    349c:	89 75 f4             	mov    %esi,-0xc(%rbp)
            auto const status = init_cpu_local_area_for(cpunum);
    349f:	8b 7d f4             	mov    -0xc(%rbp),%edi
    34a2:	e8 39 00 00 00       	call   34e0 <_ZN4oursL23init_cpu_local_area_forEj>
    34a7:	89 45 f0             	mov    %eax,-0x10(%rbp)
            DEBUG_ASSERT(Status::Ok == status, "");
    34aa:	31 c0                	xor    %eax,%eax
    34ac:	3b 45 f0             	cmp    -0x10(%rbp),%eax
    34af:	74 1d                	je     34ce <_ZZN4ours8CpuLocal4initERKNS_7CpuMaskEENK3$_0clEj+0x3e>
    34b1:	48 8d 35 93 bc 02 00 	lea    0x2bc93(%rip),%rsi        # 2f14b <.L.str>
    34b8:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    34bc:	e8 bf fd ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    34c1:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    34c5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    34c9:	e8 62 fd ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
        });
    34ce:	48 83 c4 20          	add    $0x20,%rsp
    34d2:	5d                   	pop    %rbp
    34d3:	c3                   	ret
    34d4:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
    34db:	00 00 00 00 00 

00000000000034e0 <_ZN4oursL23init_cpu_local_area_forEj>:
    static auto init_cpu_local_area_for(CpuNum cpunum) -> Status {
    34e0:	55                   	push   %rbp
    34e1:	48 89 e5             	mov    %rsp,%rbp
    34e4:	48 83 ec 50          	sub    $0x50,%rsp
    34e8:	89 7d e8             	mov    %edi,-0x18(%rbp)
        auto const total_size = static_cpu_local_area_size() + kMaxCpuDynamicAreaSizePerCpu;
    34eb:	48 8d 0d 8e 03 03 00 	lea    0x3038e(%rip),%rcx        # 33880 <_ZN4ours8CpuLocal20s_current_cpu_offsetE>
    34f2:	48 8d 05 f7 03 03 00 	lea    0x303f7(%rip),%rax        # 338f0 <_ZN4ours3memL15ZONE_LOWEST_PFNE>
    34f9:	48 29 c8             	sub    %rcx,%rax
    34fc:	48 05 00 40 00 00    	add    $0x4000,%rax
    3502:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        auto const nr_frames = ustl::mem::align_up(total_size, PAGE_SIZE);
    3506:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    350a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    350e:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
    3515:	00 
    auto align_down(usize n, usize a) USTL_NOEXCEPT -> usize 
    { return n & ~(a - 1); }

    USTL_FORCEINLINE USTL_CONSTEXPR 
    auto align_up(usize n, usize a) USTL_NOEXCEPT -> usize
    { return (n + a - 1) & ~(a - 1); }
    3516:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    351a:	48 03 45 f0          	add    -0x10(%rbp),%rax
    351e:	48 83 e8 01          	sub    $0x1,%rax
    3522:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3526:	48 83 e9 01          	sub    $0x1,%rcx
    352a:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
    352e:	48 21 c8             	and    %rcx,%rax
    3531:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    3535:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
        mem::FrameList<> frame_list;
    3539:	e8 a2 03 00 00       	call   38e0 <_ZN4ustl11collections9intrusive4ListIN4ours3mem7PmFrameEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEEC2Ev>
        auto status = mem::alloc_frames(mem::GAF_KERNEL, &frame_list, nr_frames);
    353e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    3542:	bf 48 00 00 00       	mov    $0x48,%edi
    3547:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    354b:	e8 40 8e 00 00       	call   c390 <_ZN4ours3mem12alloc_framesENS0_5gafns3GafEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS7_NS9_16list_member_hookIJEEEXadL_ZNS7_13managed_hook_EEEEEEEEm>
    3550:	89 45 bc             	mov    %eax,-0x44(%rbp)
        if (Status::Ok != status) {
    3553:	31 c0                	xor    %eax,%eax
    3555:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    3558:	74 0f                	je     3569 <_ZN4oursL23init_cpu_local_area_forEj+0x89>
            return status;
    355a:	8b 45 bc             	mov    -0x44(%rbp),%eax
    355d:	89 45 ec             	mov    %eax,-0x14(%rbp)
    3560:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%rbp)
    3567:	eb 0e                	jmp    3577 <_ZN4oursL23init_cpu_local_area_forEj+0x97>
        return Status::Ok;
    3569:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    3570:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%rbp)
    3577:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    }
    357b:	e8 90 03 00 00       	call   3910 <_ZN4ustl11collections9intrusive4ListIN4ours3mem7PmFrameEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEED2Ev>
    3580:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3583:	48 83 c4 50          	add    $0x50,%rsp
    3587:	5d                   	pop    %rbp
    3588:	c3                   	ret
    3589:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003590 <_ZNSt3__14fillB8nn210000IPliEEvT_S2_RKT0_>:
  std::fill_n(__first, __last - __first, __value);
}

template <class _ForwardIterator, class _Tp>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
    3590:	55                   	push   %rbp
    3591:	48 89 e5             	mov    %rsp,%rbp
    3594:	48 83 ec 20          	sub    $0x20,%rsp
    3598:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    359c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    35a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  std::__fill(__first, __last, __value, typename iterator_traits<_ForwardIterator>::iterator_category());
    35a4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    35a8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    35ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    35b0:	e8 7b 00 00 00       	call   3630 <_ZNSt3__16__fillB8nn210000IPliEEvT_S2_RKT0_NS_26random_access_iterator_tagE>
}
    35b5:	48 83 c4 20          	add    $0x20,%rsp
    35b9:	5d                   	pop    %rbp
    35ba:	c3                   	ret
    35bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000035c0 <_ZNSt3__15arrayIlLm32EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
    35c0:	55                   	push   %rbp
    35c1:	48 89 e5             	mov    %rsp,%rbp
    35c4:	48 83 ec 10          	sub    $0x10,%rsp
    35c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    35cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
    35d0:	e8 3b 01 00 00       	call   3710 <_ZNSt3__15arrayIlLm32EE4dataB8nn210000Ev>
    35d5:	48 83 c4 10          	add    $0x10,%rsp
    35d9:	5d                   	pop    %rbp
    35da:	c3                   	ret
    35db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000035e0 <_ZNSt3__15arrayIlLm32EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
    35e0:	55                   	push   %rbp
    35e1:	48 89 e5             	mov    %rsp,%rbp
    35e4:	48 83 ec 10          	sub    $0x10,%rsp
    35e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    35ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
    35f0:	e8 1b 01 00 00       	call   3710 <_ZNSt3__15arrayIlLm32EE4dataB8nn210000Ev>
    35f5:	48 05 00 01 00 00    	add    $0x100,%rax
    35fb:	48 83 c4 10          	add    $0x10,%rsp
    35ff:	5d                   	pop    %rbp
    3600:	c3                   	ret
    3601:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3608:	00 00 00 
    360b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003610 <_ZN4ours3mem8NodeMaskC2Ev>:
#include <ustl/bitset.hpp>
#include <ustl/function/invoke.hpp>
#include <ustl/traits/is_invocable.hpp>

namespace ours::mem {
    struct NodeMask
    3610:	55                   	push   %rbp
    3611:	48 89 e5             	mov    %rsp,%rbp
    3614:	48 83 ec 10          	sub    $0x10,%rsp
    3618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    361c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3620:	e8 fb 00 00 00       	call   3720 <_ZNSt3__16bitsetILm32EEC2B8nn210000Ev>
    3625:	48 83 c4 10          	add    $0x10,%rsp
    3629:	5d                   	pop    %rbp
    362a:	c3                   	ret
    362b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003630 <_ZNSt3__16__fillB8nn210000IPliEEvT_S2_RKT0_NS_26random_access_iterator_tagE>:
__fill(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp& __value, random_access_iterator_tag) {
    3630:	55                   	push   %rbp
    3631:	48 89 e5             	mov    %rsp,%rbp
    3634:	48 83 ec 20          	sub    $0x20,%rsp
    3638:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    363c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    3640:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  std::fill_n(__first, __last - __first, __value);
    3644:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3648:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    364c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3650:	48 29 c6             	sub    %rax,%rsi
    3653:	48 c1 fe 03          	sar    $0x3,%rsi
    3657:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    365b:	e8 10 00 00 00       	call   3670 <_ZNSt3__16fill_nB8nn210000IPlliEET_S2_T0_RKT1_>
}
    3660:	48 83 c4 20          	add    $0x20,%rsp
    3664:	5d                   	pop    %rbp
    3665:	c3                   	ret
    3666:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    366d:	00 00 00 

0000000000003670 <_ZNSt3__16fill_nB8nn210000IPlliEET_S2_T0_RKT1_>:
  return __first;
}

template <class _OutputIterator, class _Size, class _Tp>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _OutputIterator
fill_n(_OutputIterator __first, _Size __n, const _Tp& __value) {
    3670:	55                   	push   %rbp
    3671:	48 89 e5             	mov    %rsp,%rbp
    3674:	48 83 ec 20          	sub    $0x20,%rsp
    3678:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    367c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3680:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  return std::__fill_n(__first, std::__convert_to_integral(__n), __value);
    3684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3688:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    368c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3690:	e8 6b 00 00 00       	call   3700 <_ZNSt3__121__convert_to_integralB8nn210000El>
    3695:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    3699:	48 89 c6             	mov    %rax,%rsi
    369c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    36a0:	e8 0b 00 00 00       	call   36b0 <_ZNSt3__18__fill_nB8nn210000IPlliEET_S2_T0_RKT1_>
    36a5:	48 83 c4 20          	add    $0x20,%rsp
    36a9:	5d                   	pop    %rbp
    36aa:	c3                   	ret
    36ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000036b0 <_ZNSt3__18__fill_nB8nn210000IPlliEET_S2_T0_RKT1_>:
__fill_n(_OutputIterator __first, _Size __n, const _Tp& __value) {
    36b0:	55                   	push   %rbp
    36b1:	48 89 e5             	mov    %rsp,%rbp
    36b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    36b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    36bc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  for (; __n > 0; ++__first, (void)--__n)
    36c0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    36c5:	7e 28                	jle    36ef <_ZNSt3__18__fill_nB8nn210000IPlliEET_S2_T0_RKT1_+0x3f>
    *__first = __value;
    36c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    36cb:	48 63 08             	movslq (%rax),%rcx
    36ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    36d2:	48 89 08             	mov    %rcx,(%rax)
  for (; __n > 0; ++__first, (void)--__n)
    36d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    36d9:	48 83 c0 08          	add    $0x8,%rax
    36dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    36e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    36e5:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
    36e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    36ed:	eb d1                	jmp    36c0 <_ZNSt3__18__fill_nB8nn210000IPlliEET_S2_T0_RKT1_+0x10>
  return __first;
    36ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    36f3:	5d                   	pop    %rbp
    36f4:	c3                   	ret
    36f5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36fc:	00 00 00 
    36ff:	90                   	nop

0000000000003700 <_ZNSt3__121__convert_to_integralB8nn210000El>:

inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR int __convert_to_integral(int __val) { return __val; }

inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR unsigned __convert_to_integral(unsigned __val) { return __val; }

inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR long __convert_to_integral(long __val) { return __val; }
    3700:	55                   	push   %rbp
    3701:	48 89 e5             	mov    %rsp,%rbp
    3704:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3708:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    370c:	5d                   	pop    %rbp
    370d:	c3                   	ret
    370e:	66 90                	xchg   %ax,%ax

0000000000003710 <_ZNSt3__15arrayIlLm32EE4dataB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reference back() _NOEXCEPT { return (*this)[_Size - 1]; }
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 const_reference back() const _NOEXCEPT {
    return (*this)[_Size - 1];
  }

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 value_type* data() _NOEXCEPT { return __elems_; }
    3710:	55                   	push   %rbp
    3711:	48 89 e5             	mov    %rsp,%rbp
    3714:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3718:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    371c:	5d                   	pop    %rbp
    371d:	c3                   	ret
    371e:	66 90                	xchg   %ax,%ax

0000000000003720 <_ZNSt3__16bitsetILm32EEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bitset() _NOEXCEPT {}
    3720:	55                   	push   %rbp
    3721:	48 89 e5             	mov    %rsp,%rbp
    3724:	48 83 ec 10          	sub    $0x10,%rsp
    3728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    372c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3730:	e8 0b 00 00 00       	call   3740 <_ZNSt3__18__bitsetILm1ELm32EEC2Ev>
    3735:	48 83 c4 10          	add    $0x10,%rsp
    3739:	5d                   	pop    %rbp
    373a:	c3                   	ret
    373b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003740 <_ZNSt3__18__bitsetILm1ELm32EEC2Ev>:
inline _LIBCPP_CONSTEXPR __bitset<1, _Size>::__bitset() _NOEXCEPT : __first_(0) {}
    3740:	55                   	push   %rbp
    3741:	48 89 e5             	mov    %rsp,%rbp
    3744:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3748:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    374c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3753:	5d                   	pop    %rbp
    3754:	c3                   	ret
    3755:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    375c:	00 00 00 
    375f:	90                   	nop

0000000000003760 <_ZNKSt3__16bitsetILm32EE4sizeB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> >
  to_string(_CharT __zero = _CharT('0'), _CharT __one = _CharT('1')) const;
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 basic_string<char, char_traits<char>, allocator<char> >
  to_string(char __zero = '0', char __one = '1') const;
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 size_t count() const _NOEXCEPT;
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR size_t size() const _NOEXCEPT { return _Size; }
    3760:	55                   	push   %rbp
    3761:	48 89 e5             	mov    %rsp,%rbp
    3764:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3768:	b8 20 00 00 00       	mov    $0x20,%eax
    376d:	5d                   	pop    %rbp
    376e:	c3                   	ret
    376f:	90                   	nop

0000000000003770 <_ZNKSt3__16bitsetILm32EE4testB8nn210000Em>:
}

#  endif

template <size_t _Size>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool bitset<_Size>::test(size_t __pos) const {
    3770:	55                   	push   %rbp
    3771:	48 89 e5             	mov    %rsp,%rbp
    3774:	48 83 ec 30          	sub    $0x30,%rsp
    3778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    377c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3784:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  if (__pos >= _Size)
    3788:	48 83 7d f0 20       	cmpq   $0x20,-0x10(%rbp)
    378d:	72 0c                	jb     379b <_ZNKSt3__16bitsetILm32EE4testB8nn210000Em+0x2b>
    std::__throw_out_of_range("bitset test argument out of range");
    378f:	48 8d 3d 86 b6 02 00 	lea    0x2b686(%rip),%rdi        # 2ee1c <.L.str.1>
    3796:	e8 35 00 00 00       	call   37d0 <_ZNSt3__120__throw_out_of_rangeB8nn210000EPKc>
    379b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi

  return (*this)[__pos];
    379f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    37a3:	e8 48 00 00 00       	call   37f0 <_ZNKSt3__16bitsetILm32EEixB8nn210000Em>
    37a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    37ac:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    37b0:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    37b4:	e8 77 00 00 00       	call   3830 <_ZNKSt3__121__bit_const_referenceINS_8__bitsetILm1ELm32EEEEcvbB8nn210000Ev>
    37b9:	24 01                	and    $0x1,%al
    37bb:	48 83 c4 30          	add    $0x30,%rsp
    37bf:	5d                   	pop    %rbp
    37c0:	c3                   	ret
    37c1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37c8:	00 00 00 
    37cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000037d0 <_ZNSt3__120__throw_out_of_rangeB8nn210000EPKc>:
#  else
  _LIBCPP_VERBOSE_ABORT("length_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);
#  endif
}

[[__noreturn__]] inline _LIBCPP_HIDE_FROM_ABI void __throw_out_of_range(const char* __msg) {
    37d0:	55                   	push   %rbp
    37d1:	48 89 e5             	mov    %rsp,%rbp
    37d4:	48 83 ec 10          	sub    $0x10,%rsp
    37d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
#  if _LIBCPP_HAS_EXCEPTIONS
  throw out_of_range(__msg);
#  else
  _LIBCPP_VERBOSE_ABORT("out_of_range was thrown in -fno-exceptions mode with message \"%s\"", __msg);
    37dc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    37e0:	48 8d 3d 57 b6 02 00 	lea    0x2b657(%rip),%rdi        # 2ee3e <.L.str.2>
    37e7:	31 c0                	xor    %eax,%eax
    37e9:	e8 e2 43 01 00       	call   17bd0 <_ZNSt3__122__libcpp_verbose_abortEPKcz>
    37ee:	66 90                	xchg   %ax,%ax

00000000000037f0 <_ZNKSt3__16bitsetILm32EEixB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __const_reference operator[](size_t __p) const {
    37f0:	55                   	push   %rbp
    37f1:	48 89 e5             	mov    %rsp,%rbp
    37f4:	48 83 ec 20          	sub    $0x20,%rsp
    37f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    37fc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    3800:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    return __base::__make_ref(__p);
    3804:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    3808:	e8 53 00 00 00       	call   3860 <_ZNKSt3__18__bitsetILm1ELm32EE10__make_refB8nn210000Em>
    380d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    3811:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    3815:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3819:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    381d:	48 83 c4 20          	add    $0x20,%rsp
    3821:	5d                   	pop    %rbp
    3822:	c3                   	ret
    3823:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    382a:	00 00 00 
    382d:	0f 1f 00             	nopl   (%rax)

0000000000003830 <_ZNKSt3__121__bit_const_referenceINS_8__bitsetILm1ELm32EEEEcvbB8nn210000Ev>:

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 __bit_const_reference(const __bit_reference<_Cp>& __x) _NOEXCEPT
      : __seg_(__x.__seg_),
        __mask_(__x.__mask_) {}

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR operator bool() const _NOEXCEPT {
    3830:	55                   	push   %rbp
    3831:	48 89 e5             	mov    %rsp,%rbp
    3834:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3838:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    return static_cast<bool>(*__seg_ & __mask_);
    383c:	48 8b 01             	mov    (%rcx),%rax
    383f:	48 8b 00             	mov    (%rax),%rax
    3842:	48 23 41 08          	and    0x8(%rcx),%rax
    3846:	48 83 f8 00          	cmp    $0x0,%rax
    384a:	0f 95 c0             	setne  %al
    384d:	24 01                	and    $0x1,%al
    384f:	5d                   	pop    %rbp
    3850:	c3                   	ret
    3851:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3858:	00 00 00 
    385b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003860 <_ZNKSt3__18__bitsetILm1ELm32EE10__make_refB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __const_reference __make_ref(size_t __pos) const _NOEXCEPT {
    3860:	55                   	push   %rbp
    3861:	48 89 e5             	mov    %rsp,%rbp
    3864:	48 83 ec 20          	sub    $0x20,%rsp
    3868:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    386c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    3870:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    return __const_reference(&__first_, __storage_type(1) << __pos);
    3874:	8a 4d e0             	mov    -0x20(%rbp),%cl
    3877:	ba 01 00 00 00       	mov    $0x1,%edx
    387c:	48 d3 e2             	shl    %cl,%rdx
    387f:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    3883:	e8 18 00 00 00       	call   38a0 <_ZNSt3__121__bit_const_referenceINS_8__bitsetILm1ELm32EEEEC2B8nn210000EPKmm>
    3888:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    388c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3890:	48 83 c4 20          	add    $0x20,%rsp
    3894:	5d                   	pop    %rbp
    3895:	c3                   	ret
    3896:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    389d:	00 00 00 

00000000000038a0 <_ZNSt3__121__bit_const_referenceINS_8__bitsetILm1ELm32EEEEC2B8nn210000EPKmm>:

private:
  _LIBCPP_HIDE_FROM_ABI
  _LIBCPP_CONSTEXPR explicit __bit_const_reference(__storage_pointer __s, __storage_type __m) _NOEXCEPT
      : __seg_(__s),
        __mask_(__m) {}
    38a0:	55                   	push   %rbp
    38a1:	48 89 e5             	mov    %rsp,%rbp
    38a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    38a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    38ac:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    38b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      : __seg_(__s),
    38b4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    38b8:	48 89 08             	mov    %rcx,(%rax)
        __mask_(__m) {}
    38bb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    38bf:	48 89 48 08          	mov    %rcx,0x8(%rax)
    38c3:	5d                   	pop    %rbp
    38c4:	c3                   	ret
    38c5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38cc:	00 00 00 
    38cf:	90                   	nop

00000000000038d0 <_ZNSt3__17forwardB8nn210000IjEEOT_Ru20__remove_reference_tIS1_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    38d0:	55                   	push   %rbp
    38d1:	48 89 e5             	mov    %rsp,%rbp
    38d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    38d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    38dc:	5d                   	pop    %rbp
    38dd:	c3                   	ret
    38de:	66 90                	xchg   %ax,%ax

00000000000038e0 <_ZN4ustl11collections9intrusive4ListIN4ours3mem7PmFrameEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEEC2Ev>:

namespace ustl::collections::intrusive {
    using namespace boost::intrusive;

    template<class T, class ...Options>
    class List
    38e0:	55                   	push   %rbp
    38e1:	48 89 e5             	mov    %rsp,%rbp
    38e4:	48 83 ec 10          	sub    $0x10,%rsp
    38e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    38ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    38f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    38f4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   typedef typename Base::value_traits          value_traits;
   typedef typename Base::iterator              iterator;
   typedef typename Base::const_iterator        const_iterator;

   BOOST_INTRUSIVE_FORCEINLINE list()
      :  Base()
    38f8:	e8 33 00 00 00       	call   3930 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvEC2Ev>
    38fd:	48 83 c4 10          	add    $0x10,%rsp
    3901:	5d                   	pop    %rbp
    3902:	c3                   	ret
    3903:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    390a:	00 00 00 
    390d:	0f 1f 00             	nopl   (%rax)

0000000000003910 <_ZN4ustl11collections9intrusive4ListIN4ours3mem7PmFrameEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEED2Ev>:
    3910:	55                   	push   %rbp
    3911:	48 89 e5             	mov    %rsp,%rbp
    3914:	48 83 ec 10          	sub    $0x10,%rsp
    3918:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    391c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3920:	e8 1b 01 00 00       	call   3a40 <_ZN5boost9intrusive4listIN4ours3mem7PmFrameEJNS0_11member_hookIS4_NS0_16list_member_hookIJEEEXadL_ZNS4_13managed_hook_EEEEEEED2Ev>
    3925:	48 83 c4 10          	add    $0x10,%rsp
    3929:	5d                   	pop    %rbp
    392a:	c3                   	ret
    392b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003930 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvEC2Ev>:
   {
    3930:	55                   	push   %rbp
    3931:	48 89 e5             	mov    %rsp,%rbp
    3934:	48 83 ec 60          	sub    $0x60,%rsp
    3938:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
    393c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    3940:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    3944:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    3948:	48 8d 45 af          	lea    -0x51(%rbp),%rax
    394c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    3950:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      BOOST_INTRUSIVE_FORCEINLINE explicit data_t(const value_traits &val_traits)
    3954:	e8 a7 00 00 00       	call   3a00 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE14root_plus_sizeC2Ev>
    3959:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    395d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    3961:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    3965:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    3969:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    3970:	00 
    3971:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx

   BOOST_INTRUSIVE_FORCEINLINE SizeType get_size() const
   {  return size_;  }

   BOOST_INTRUSIVE_FORCEINLINE void set_size(SizeType size)
   {  size_ = size; }
    3975:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    3979:	48 89 11             	mov    %rdx,(%rcx)
    397c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    3980:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
    3984:	48 83 c0 08          	add    $0x8,%rax
    3988:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    398c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3990:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   {  typedef U* type;  };

   //! <b>Returns</b>: addressof(r)
   //!
   BOOST_INTRUSIVE_FORCEINLINE static pointer pointer_to(reference r) BOOST_NOEXCEPT
   { return boost::intrusive::detail::addressof(r); }
    3994:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3998:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#ifdef BOOST_MOVE_HAS_BUILTIN_ADDRESSOF

template<class T>
BOOST_MOVE_FORCEINLINE T *addressof( T & v ) BOOST_NOEXCEPT
{
   return __builtin_addressof(v);
    399c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      node_algorithms::init_header(this->get_root_node());
    39a0:	e8 0b 00 00 00       	call   39b0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE11init_headerEPNS0_9list_nodeIS3_EE>
   }
    39a5:	48 83 c4 60          	add    $0x60,%rsp
    39a9:	5d                   	pop    %rbp
    39aa:	c3                   	ret
    39ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000039b0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE11init_headerEPNS0_9list_nodeIS3_EE>:
   //!
   //! <b>Complexity</b>: Constant
   //!
   //! <b>Throws</b>: Nothing.
   static void init_header(node_ptr this_node) BOOST_NOEXCEPT
   {
    39b0:	55                   	push   %rbp
    39b1:	48 89 e5             	mov    %rsp,%rbp
    39b4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      NodeTraits::set_next(this_node, this_node);
    39b8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    39bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    39c0:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    39c4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_next(node_ptr n)
   {  return n->next_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_next(node_ptr n, node_ptr next)
   {  n->next_ = next;  }
    39c8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    39cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39d0:	48 89 08             	mov    %rcx,(%rax)
      NodeTraits::set_previous(this_node, this_node);
    39d3:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    39d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    39db:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    39df:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   {  n->prev_ = prev;  }
    39e3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    39e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    39eb:	48 89 48 08          	mov    %rcx,0x8(%rax)
   }
    39ef:	5d                   	pop    %rbp
    39f0:	c3                   	ret
    39f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39f8:	00 00 00 
    39fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003a00 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE14root_plus_sizeC2Ev>:
   struct root_plus_size : public size_traits
    3a00:	55                   	push   %rbp
    3a01:	48 89 e5             	mov    %rsp,%rbp
    3a04:	48 83 ec 10          	sub    $0x10,%rsp
    3a08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3a0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3a10:	48 83 c7 08          	add    $0x8,%rdi
    3a14:	e8 07 00 00 00       	call   3a20 <_ZN5boost9intrusive6detail21default_header_holderINS0_16list_node_traitsIPvEEEC2Ev>
    3a19:	48 83 c4 10          	add    $0x10,%rsp
    3a1d:	5d                   	pop    %rbp
    3a1e:	c3                   	ret
    3a1f:	90                   	nop

0000000000003a20 <_ZN5boost9intrusive6detail21default_header_holderINS0_16list_node_traitsIPvEEEC2Ev>:
   typedef NodeTraits node_traits;
   typedef typename node_traits::node node;
   typedef typename node_traits::node_ptr node_ptr;
   typedef typename node_traits::const_node_ptr const_node_ptr;

   default_header_holder() : node() {}
    3a20:	55                   	push   %rbp
    3a21:	48 89 e5             	mov    %rsp,%rbp
    3a24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3a28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a2c:	31 c9                	xor    %ecx,%ecx
    3a2e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    3a35:	00 
    3a36:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3a3d:	5d                   	pop    %rbp
    3a3e:	c3                   	ret
    3a3f:	90                   	nop

0000000000003a40 <_ZN5boost9intrusive4listIN4ours3mem7PmFrameEJNS0_11member_hookIS4_NS0_16list_member_hookIJEEEXadL_ZNS4_13managed_hook_EEEEEEED2Ev>:
class list
    3a40:	55                   	push   %rbp
    3a41:	48 89 e5             	mov    %rsp,%rbp
    3a44:	48 83 ec 10          	sub    $0x10,%rsp
    3a48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3a4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    3a50:	e8 0b 00 00 00       	call   3a60 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvED2Ev>
    3a55:	48 83 c4 10          	add    $0x10,%rsp
    3a59:	5d                   	pop    %rbp
    3a5a:	c3                   	ret
    3a5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003a60 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvED2Ev>:
   {
    3a60:	55                   	push   %rbp
    3a61:	48 89 e5             	mov    %rsp,%rbp
    3a64:	48 83 ec 30          	sub    $0x30,%rsp
    3a68:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3a6c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    3a70:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
         this->clear();
    3a74:	e8 37 00 00 00       	call   3ab0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE5clearEv>
    3a79:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3a7d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    3a81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
    3a85:	48 83 c0 08          	add    $0x8,%rax
    3a89:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3a8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a91:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    3a95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3a99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3a9d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
         node_algorithms::init(this->get_root_node());
    3aa1:	e8 2a 00 00 00       	call   3ad0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE4initEPNS0_9list_nodeIS3_EE>
   }
    3aa6:	48 83 c4 30          	add    $0x30,%rsp
    3aaa:	5d                   	pop    %rbp
    3aab:	c3                   	ret
    3aac:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003ab0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE5clearEv>:
   {
    3ab0:	55                   	push   %rbp
    3ab1:	48 89 e5             	mov    %rsp,%rbp
    3ab4:	48 83 ec 10          	sub    $0x10,%rsp
    3ab8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3abc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
         this->clear_and_dispose(detail::null_disposer());
    3ac0:	e8 5b 00 00 00       	call   3b20 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_>
   }
    3ac5:	48 83 c4 10          	add    $0x10,%rsp
    3ac9:	5d                   	pop    %rbp
    3aca:	c3                   	ret
    3acb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003ad0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE4initEPNS0_9list_nodeIS3_EE>:
   {
    3ad0:	55                   	push   %rbp
    3ad1:	48 89 e5             	mov    %rsp,%rbp
    3ad4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      const node_ptr null_node = node_ptr();
    3ad8:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    3adf:	00 
      NodeTraits::set_next(this_node, null_node);
    3ae0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ae4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3ae8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    3aef:	00 
   {  n->next_ = next;  }
    3af0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    3af4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3af8:	48 89 08             	mov    %rcx,(%rax)
      NodeTraits::set_previous(this_node, null_node);
    3afb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3aff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3b03:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    3b0a:	00 
   {  n->prev_ = prev;  }
    3b0b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3b0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3b13:	48 89 48 08          	mov    %rcx,0x8(%rax)
   }
    3b17:	5d                   	pop    %rbp
    3b18:	c3                   	ret
    3b19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003b20 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_>:
   {
    3b20:	55                   	push   %rbp
    3b21:	48 89 e5             	mov    %rsp,%rbp
    3b24:	48 81 ec c0 02 00 00 	sub    $0x2c0,%rsp
    3b2b:	48 89 bd 70 fd ff ff 	mov    %rdi,-0x290(%rbp)
    3b32:	48 8b 85 70 fd ff ff 	mov    -0x290(%rbp),%rax
    3b39:	48 89 85 40 fd ff ff 	mov    %rax,-0x2c0(%rbp)
    3b40:	48 8d 8d 60 fd ff ff 	lea    -0x2a0(%rbp),%rcx
    3b47:	48 89 8d c0 fd ff ff 	mov    %rcx,-0x240(%rbp)
    3b4e:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
    3b55:	48 8b 8d b8 fd ff ff 	mov    -0x248(%rbp),%rcx
    3b5c:	48 89 8d c8 fd ff ff 	mov    %rcx,-0x238(%rbp)
    3b63:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
   { return data_.root_plus_size_.m_header.get_node(); }
    3b6a:	48 83 c2 08          	add    $0x8,%rdx
    3b6e:	48 89 95 d0 fd ff ff 	mov    %rdx,-0x230(%rbp)
    3b75:	48 8b 95 d0 fd ff ff 	mov    -0x230(%rbp),%rdx
    3b7c:	48 89 95 d8 fd ff ff 	mov    %rdx,-0x228(%rbp)
    3b83:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
    3b8a:	48 89 95 e0 fd ff ff 	mov    %rdx,-0x220(%rbp)
    3b91:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
    3b98:	48 89 95 98 fe ff ff 	mov    %rdx,-0x168(%rbp)
   {  return n->next_;  }
    3b9f:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
    3ba6:	48 8b 12             	mov    (%rdx),%rdx
    3ba9:	48 89 8d a8 fe ff ff 	mov    %rcx,-0x158(%rbp)
    3bb0:	48 8b 8d a8 fe ff ff 	mov    -0x158(%rbp),%rcx
    3bb7:	48 89 8d f0 fe ff ff 	mov    %rcx,-0x110(%rbp)
    3bbe:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
    3bc5:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    3bcc:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
    3bd3:	48 89 8d 08 ff ff ff 	mov    %rcx,-0xf8(%rbp)
    3bda:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
    3be1:	48 8d b5 60 fd ff ff 	lea    -0x2a0(%rbp),%rsi
    3be8:	48 89 b5 d8 fe ff ff 	mov    %rsi,-0x128(%rbp)
    3bef:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
    3bf6:	48 89 8d c8 fe ff ff 	mov    %rcx,-0x138(%rbp)
    3bfd:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
    3c04:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3c0b:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    3c12:	48 89 8d 18 ff ff ff 	mov    %rcx,-0xe8(%rbp)
    3c19:	48 8d 8d c8 fe ff ff 	lea    -0x138(%rbp),%rcx
    3c20:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
    3c27:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
   BOOST_INTRUSIVE_FORCEINLINE iiterator_members()
      : nodeptr_()//Value initialization to achieve "null iterators" (N3644)
   {}

   BOOST_INTRUSIVE_FORCEINLINE iiterator_members(const NodePtr &n_ptr, const StoredPointer &)
      : nodeptr_(n_ptr)
    3c2e:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
    3c35:	48 8b 12             	mov    (%rdx),%rdx
    3c38:	48 89 11             	mov    %rdx,(%rcx)
    3c3b:	48 8d 8d 68 fd ff ff 	lea    -0x298(%rbp),%rcx
    3c42:	48 89 8d 00 fe ff ff 	mov    %rcx,-0x200(%rbp)
    3c49:	48 8d 8d 60 fd ff ff 	lea    -0x2a0(%rbp),%rcx
    3c50:	48 89 8d f8 fd ff ff 	mov    %rcx,-0x208(%rbp)
    3c57:	48 8b 8d 00 fe ff ff 	mov    -0x200(%rbp),%rcx
   BOOST_INTRUSIVE_FORCEINLINE list_iterator(const list_iterator &other)
      :  members_(other.pointed_node(), other.get_value_traits())
   {}

   BOOST_INTRUSIVE_FORCEINLINE list_iterator(const nonconst_iterator &other)
      :  members_(other.pointed_node(), other.get_value_traits())
    3c5e:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
    3c65:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    3c6c:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx

   BOOST_INTRUSIVE_FORCEINLINE list_iterator &operator=(const list_iterator &other)
   {  members_.nodeptr_ = other.members_.nodeptr_;  return *this;  }

   BOOST_INTRUSIVE_FORCEINLINE node_ptr pointed_node() const
   { return members_.nodeptr_; }
    3c73:	48 8b 12             	mov    (%rdx),%rdx
      :  members_(other.pointed_node(), other.get_value_traits())
    3c76:	48 89 95 f0 fd ff ff 	mov    %rdx,-0x210(%rbp)
    3c7d:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
    3c84:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
    3c88:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    3c8c:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
    3c90:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
    3c97:	00 00 00 00 
    3c9b:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
    3ca2:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
    3ca9:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
    3cb0:	48 8d 8d e8 fd ff ff 	lea    -0x218(%rbp),%rcx
    3cb7:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
    3cbe:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
    3cc5:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    3ccc:	48 8b 12             	mov    (%rdx),%rdx
    3ccf:	48 89 11             	mov    %rdx,(%rcx)
    3cd2:	48 8d 8d 50 fd ff ff 	lea    -0x2b0(%rbp),%rcx
    3cd9:	48 89 8d 30 fe ff ff 	mov    %rcx,-0x1d0(%rbp)
    3ce0:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
    3ce7:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    3cee:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
    3cf5:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
    3cfc:	48 83 c1 08          	add    $0x8,%rcx
    3d00:	48 89 8d 40 fe ff ff 	mov    %rcx,-0x1c0(%rbp)
    3d07:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    3d0e:	48 89 8d 48 fe ff ff 	mov    %rcx,-0x1b8(%rbp)
    3d15:	48 8b 8d 48 fe ff ff 	mov    -0x1b8(%rbp),%rcx
    3d1c:	48 89 8d 50 fe ff ff 	mov    %rcx,-0x1b0(%rbp)
    3d23:	48 8b 8d 50 fe ff ff 	mov    -0x1b0(%rbp),%rcx
    3d2a:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
    3d31:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    3d38:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    3d3f:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    3d46:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    3d4d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    3d54:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    3d5b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    3d62:	48 8d 95 50 fd ff ff 	lea    -0x2b0(%rbp),%rdx
    3d69:	48 89 95 c0 fe ff ff 	mov    %rdx,-0x140(%rbp)
    3d70:	48 89 8d b8 fe ff ff 	mov    %rcx,-0x148(%rbp)
    3d77:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
    3d7e:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
    3d85:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    3d8c:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
    3d93:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    3d9a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3da1:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    3da8:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3daf:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
    3db6:	48 8b 09             	mov    (%rcx),%rcx
    3db9:	48 89 08             	mov    %rcx,(%rax)
    3dbc:	48 8d 85 58 fd ff ff 	lea    -0x2a8(%rbp),%rax
    3dc3:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
    3dca:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    3dd1:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
    3dd8:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
    3ddf:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
    3de6:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
    3ded:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
   { return members_.nodeptr_; }
    3df4:	48 8b 09             	mov    (%rcx),%rcx
      :  members_(other.pointed_node(), other.get_value_traits())
    3df7:	48 89 8d 10 fe ff ff 	mov    %rcx,-0x1f0(%rbp)
    3dfe:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
    3e05:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    3e09:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    3e0d:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    3e11:	48 c7 85 08 fe ff ff 	movq   $0x0,-0x1f8(%rbp)
    3e18:	00 00 00 00 
    3e1c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    3e23:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    3e2a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    3e31:	48 8d 85 08 fe ff ff 	lea    -0x1f8(%rbp),%rax
    3e38:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    3e3f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    3e46:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
    3e4d:	48 8b 09             	mov    (%rcx),%rcx
    3e50:	48 89 08             	mov    %rcx,(%rax)
    3e53:	48 8d 85 68 fd ff ff 	lea    -0x298(%rbp),%rax
    3e5a:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
    3e61:	48 8d 85 58 fd ff ff 	lea    -0x2a8(%rbp),%rax
    3e68:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)

   BOOST_INTRUSIVE_FORCEINLINE friend bool operator== (const list_iterator& l, const list_iterator& r)
   {  return l.pointed_node() == r.pointed_node();   }

   BOOST_INTRUSIVE_FORCEINLINE friend bool operator!= (const list_iterator& l, const list_iterator& r)
   {  return !(l == r); }
    3e6f:	48 8b 8d 60 fe ff ff 	mov    -0x1a0(%rbp),%rcx
    3e76:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
    3e7d:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    3e81:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   {  return l.pointed_node() == r.pointed_node();   }
    3e85:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    3e89:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    3e8d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   { return members_.nodeptr_; }
    3e91:	48 8b 00             	mov    (%rax),%rax
   {  return l.pointed_node() == r.pointed_node();   }
    3e94:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    3e98:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    3e9c:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    3ea0:	48 3b 01             	cmp    (%rcx),%rax
    3ea3:	0f 94 c0             	sete   %al
   {  return !(l == r); }
    3ea6:	34 ff                	xor    $0xff,%al
      while(it != itend){
    3ea8:	a8 01                	test   $0x1,%al
    3eaa:	75 05                	jne    3eb1 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_+0x391>
    3eac:	e9 e7 00 00 00       	jmp    3f98 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_+0x478>
    3eb1:	48 8d 85 68 fd ff ff 	lea    -0x298(%rbp),%rax
    3eb8:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
    3ebf:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
   { return members_.nodeptr_; }
    3ec6:	48 8b 00             	mov    (%rax),%rax
         node_ptr to_erase(it.pointed_node());
    3ec9:	48 89 85 48 fd ff ff 	mov    %rax,-0x2b8(%rbp)
    3ed0:	48 8d 85 68 fd ff ff 	lea    -0x298(%rbp),%rax
    3ed7:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    3ede:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
      node_ptr p = node_traits::get_next(members_.nodeptr_);
    3ee5:	48 8b 08             	mov    (%rax),%rcx
    3ee8:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
    3eef:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
    3ef6:	48 8b 09             	mov    (%rcx),%rcx
    3ef9:	48 89 8d 70 fe ff ff 	mov    %rcx,-0x190(%rbp)
      members_.nodeptr_ = p;
    3f00:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
    3f07:	48 89 08             	mov    %rcx,(%rax)
            node_algorithms::init(to_erase);
    3f0a:	48 8b bd 48 fd ff ff 	mov    -0x2b8(%rbp),%rdi
    3f11:	e8 ba fb ff ff       	call   3ad0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE4initEPNS0_9list_nodeIS3_EE>
    3f16:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
    3f1d:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
         disposer(priv_value_traits().to_value_ptr(to_erase));
    3f24:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
    3f2b:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)

   BOOST_INTRUSIVE_FORCEINLINE static pointer to_value_ptr(node_ptr n)
   {
      return pointer_traits<pointer>::pointer_to
         (*detail::parent_from_member<T, Hook>
            (static_cast<Hook*>(boost::movelib::to_raw_pointer(n)), P));
    3f32:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
    3f39:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
namespace boost {
namespace movelib {

template <class T>
BOOST_MOVE_FORCEINLINE T* to_raw_pointer(T* p)
{  return p; }
    3f3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f41:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3f45:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    3f4c:	00 
{
   return static_cast<Parent*>
      (
         static_cast<void*>
         (
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
    3f4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f51:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    3f55:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   const Parent * const parent = 0;
    3f59:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    3f60:	00 
   const char *const member = static_cast<const char*>(static_cast<const void*>(&(parent->*ptr_to_member)));
    3f61:	31 c9                	xor    %ecx,%ecx
    3f63:	48 03 4d f8          	add    -0x8(%rbp),%rcx
    3f67:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   return std::ptrdiff_t(member - static_cast<const char*>(static_cast<const void*>(parent)));
    3f6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
    3f6f:	31 c9                	xor    %ecx,%ecx
    3f71:	48 29 d1             	sub    %rdx,%rcx
    3f74:	48 01 c8             	add    %rcx,%rax
    3f77:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    3f7b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    3f7f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    3f83:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    3f87:	48 8d bd 7f fd ff ff 	lea    -0x281(%rbp),%rdi
    3f8e:	e8 9d 00 00 00       	call   4030 <_ZN5boost9intrusive6detail13null_disposerclIPN4ours3mem7PmFrameEEEvT_>
      while(it != itend){
    3f93:	e9 bb fe ff ff       	jmp    3e53 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_+0x333>
    3f98:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
    3f9f:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
    3fa6:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
    3fad:	48 83 c0 08          	add    $0x8,%rax
    3fb1:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
    3fb8:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
    3fbf:	48 89 85 a8 fd ff ff 	mov    %rax,-0x258(%rbp)
    3fc6:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
    3fcd:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    3fd4:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
      node_algorithms::init_header(this->get_root_node());
    3fdb:	e8 d0 f9 ff ff       	call   39b0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE11init_headerEPNS0_9list_nodeIS3_EE>
    3fe0:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
    3fe7:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
    3fee:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
    3ff5:	48 89 85 90 fd ff ff 	mov    %rax,-0x270(%rbp)
    3ffc:	48 c7 85 88 fd ff ff 	movq   $0x0,-0x278(%rbp)
    4003:	00 00 00 00 
    4007:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
    400e:	48 8b 8d 88 fd ff ff 	mov    -0x278(%rbp),%rcx
    4015:	48 89 08             	mov    %rcx,(%rax)
   }
    4018:	48 81 c4 c0 02 00 00 	add    $0x2c0,%rsp
    401f:	5d                   	pop    %rbp
    4020:	c3                   	ret
    4021:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    4028:	00 00 00 
    402b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004030 <_ZN5boost9intrusive6detail13null_disposerclIPN4ours3mem7PmFrameEEEvT_>:
class null_disposer
{
   public:
   template <class Pointer>
   void operator()(Pointer)
   {}
    4030:	55                   	push   %rbp
    4031:	48 89 e5             	mov    %rsp,%rbp
    4034:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4038:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    403c:	5d                   	pop    %rbp
    403d:	c3                   	ret
    403e:	66 90                	xchg   %ax,%ax

0000000000004040 <_ZN4ours19x86_setup_idt_earlyEv>:

    /// Defined in arch/x86/main/idt.S, default value per entry is 
    /// the hanler.
    NO_MANGLE Idt g_idt;

    auto x86_setup_idt_early() -> void {
    4040:	55                   	push   %rbp
    4041:	48 89 e5             	mov    %rsp,%rbp
    4044:	48 83 ec 30          	sub    $0x30,%rsp
        for (auto &entry: g_idt) {
    4048:	48 8d 05 b1 bf 02 00 	lea    0x2bfb1(%rip),%rax        # 30000 <g_idt>
    404f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    4053:	48 8d 3d a6 bf 02 00 	lea    0x2bfa6(%rip),%rdi        # 30000 <g_idt>
    405a:	e8 71 00 00 00       	call   40d0 <_ZN4ours3Idt5beginEv>
    405f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4063:	48 8d 3d 96 bf 02 00 	lea    0x2bf96(%rip),%rdi        # 30000 <g_idt>
    406a:	e8 81 00 00 00       	call   40f0 <_ZN4ours3Idt3endEv>
    406f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    4073:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4077:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    407b:	74 2e                	je     40ab <_ZN4ours19x86_setup_idt_earlyEv+0x6b>
    407d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4081:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            rectify_idt(entry);
    4085:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4089:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        entry.set(*reinterpret_cast<usize *>(&entry));
    408d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    4091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4095:	48 8b 30             	mov    (%rax),%rsi
    4098:	e8 c3 00 00 00       	call   4160 <_ZN4ours8IdtEntry3setEm>
        for (auto &entry: g_idt) {
    409d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    40a1:	48 83 c0 10          	add    $0x10,%rax
    40a5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    40a9:	eb c8                	jmp    4073 <_ZN4ours19x86_setup_idt_earlyEv+0x33>
        }

        g_idt.load();
    40ab:	48 8d 3d 4e bf 02 00 	lea    0x2bf4e(%rip),%rdi        # 30000 <g_idt>
    40b2:	e8 59 00 00 00       	call   4110 <_ZNK4ours3Idt4loadEv>
    }
    40b7:	48 83 c4 30          	add    $0x30,%rsp
    40bb:	5d                   	pop    %rbp
    40bc:	c3                   	ret
    40bd:	0f 1f 00             	nopl   (%rax)

00000000000040c0 <_ZN4ours13x86_setup_idtEv>:

    auto x86_setup_idt() -> void {
    40c0:	55                   	push   %rbp
    40c1:	48 89 e5             	mov    %rsp,%rbp
        
    }
    40c4:	5d                   	pop    %rbp
    40c5:	c3                   	ret
    40c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    40cd:	00 00 00 

00000000000040d0 <_ZN4ours3Idt5beginEv>:
        auto begin() {
    40d0:	55                   	push   %rbp
    40d1:	48 89 e5             	mov    %rsp,%rbp
    40d4:	48 83 ec 10          	sub    $0x10,%rsp
    40d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    40dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            return std::begin(entries_);
    40e0:	e8 4b 00 00 00       	call   4130 <_ZNSt3__15beginB8nn210000IN4ours8IdtEntryELm256EEEPT_RAT0__S3_>
    40e5:	48 83 c4 10          	add    $0x10,%rsp
    40e9:	5d                   	pop    %rbp
    40ea:	c3                   	ret
    40eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000040f0 <_ZN4ours3Idt3endEv>:
        auto end() {
    40f0:	55                   	push   %rbp
    40f1:	48 89 e5             	mov    %rsp,%rbp
    40f4:	48 83 ec 10          	sub    $0x10,%rsp
    40f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    40fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            return std::end(entries_);
    4100:	e8 3b 00 00 00       	call   4140 <_ZNSt3__13endB8nn210000IN4ours8IdtEntryELm256EEEPT_RAT0__S3_>
    4105:	48 83 c4 10          	add    $0x10,%rsp
    4109:	5d                   	pop    %rbp
    410a:	c3                   	ret
    410b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004110 <_ZNK4ours3Idt4loadEv>:
        auto load() const -> void {
    4110:	55                   	push   %rbp
    4111:	48 89 e5             	mov    %rsp,%rbp
    4114:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4118:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            } desc { sizeof(*this), reinterpret_cast<usize>(this) };
    411c:	66 c7 45 ee 00 10    	movw   $0x1000,-0x12(%rbp)
    4122:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
            asm volatile("lidt %0" :: "m"(desc));
    4126:	0f 01 5d ee          	lidt   -0x12(%rbp)
        }
    412a:	5d                   	pop    %rbp
    412b:	c3                   	ret
    412c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004130 <_ZNSt3__15beginB8nn210000IN4ours8IdtEntryELm256EEEPT_RAT0__S3_>:
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

template <class _Tp, size_t _Np>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp* begin(_Tp (&__array)[_Np]) _NOEXCEPT {
    4130:	55                   	push   %rbp
    4131:	48 89 e5             	mov    %rsp,%rbp
    4134:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __array;
    4138:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    413c:	5d                   	pop    %rbp
    413d:	c3                   	ret
    413e:	66 90                	xchg   %ax,%ax

0000000000004140 <_ZNSt3__13endB8nn210000IN4ours8IdtEntryELm256EEEPT_RAT0__S3_>:
}

template <class _Tp, size_t _Np>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp* end(_Tp (&__array)[_Np]) _NOEXCEPT {
    4140:	55                   	push   %rbp
    4141:	48 89 e5             	mov    %rsp,%rbp
    4144:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __array + _Np;
    4148:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    414c:	48 05 00 10 00 00    	add    $0x1000,%rax
    4152:	5d                   	pop    %rbp
    4153:	c3                   	ret
    4154:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    415b:	00 00 00 
    415e:	66 90                	xchg   %ax,%ax

0000000000004160 <_ZN4ours8IdtEntry3setEm>:
        auto set(usize handler) -> void {
    4160:	55                   	push   %rbp
    4161:	48 89 e5             	mov    %rsp,%rbp
    4164:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4168:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    416c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            offset_low  = handler & 0xFFFF;
    4170:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4174:	48 81 e1 ff ff 00 00 	and    $0xffff,%rcx
    417b:	66 89 08             	mov    %cx,(%rax)
            selector    = 0x08;
    417e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
            ist         = 0;
    4184:	c6 40 04 00          	movb   $0x0,0x4(%rax)
            type_attr   = 0x8E;
    4188:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
            offset_mid  = (handler >> 16) & 0xFFFF;
    418c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4190:	48 c1 e9 10          	shr    $0x10,%rcx
    4194:	48 81 e1 ff ff 00 00 	and    $0xffff,%rcx
    419b:	66 89 48 06          	mov    %cx,0x6(%rax)
            offset_high = (handler >> 32) & 0xFFFFFFFF;
    419f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    41a3:	48 c1 e9 20          	shr    $0x20,%rcx
    41a7:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
    41ae:	00 00 00 
    41b1:	48 21 d1             	and    %rdx,%rcx
    41b4:	89 48 08             	mov    %ecx,0x8(%rax)
            zero        = 0;
    41b7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
        }
    41be:	5d                   	pop    %rbp
    41bf:	c3                   	ret

00000000000041c0 <arch_handle_exception>:
        }
    }

    NO_MANGLE
    auto arch_handle_exception(arch::IrqVector vector, arch::IrqFrame *frame) -> void
    {}
    41c0:	55                   	push   %rbp
    41c1:	48 89 e5             	mov    %rsp,%rbp
    41c4:	89 7d fc             	mov    %edi,-0x4(%rbp)
    41c7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    41cb:	5d                   	pop    %rbp
    41cc:	c3                   	ret
    41cd:	0f 1f 00             	nopl   (%rax)

00000000000041d0 <_ZN4ours15x86_has_featureEN4arch14CpuFeatureTypeE>:

namespace ours {
    CPU_LOCAL
    static arch::X86CpuInfo g_x86_cpu_info;

    auto x86_has_feature(CpuFeatureType type) -> bool {
    41d0:	55                   	push   %rbp
    41d1:	48 89 e5             	mov    %rsp,%rbp
    41d4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    41db:	89 7d 84             	mov    %edi,-0x7c(%rbp)
    41de:	48 8d 05 a3 f6 02 00 	lea    0x2f6a3(%rip),%rax        # 33888 <_ZN4oursL14g_x86_cpu_infoE>
    41e5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
        // The `arch-custom` object should be accessed by this interface.
        template <typename T>
        FORCE_INLINE
        static auto access(T *object) -> T * {
            auto const ptr = reinterpret_cast<T *>(
                reinterpret_cast<u8 *>(object) + read(s_current_cpu_offset)
    41e9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    41ed:	48 8d 0d 8c f6 02 00 	lea    0x2f68c(%rip),%rcx        # 33880 <_ZN4ours8CpuLocal20s_current_cpu_offsetE>
    41f4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
            return arch_cpu_local_read<Integral>(reinterpret_cast<usize>(&integer));
    41f8:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    41fc:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    }

    template <typename Integer>
    FORCE_INLINE
    static auto arch_cpu_local_read(usize offset) -> Integer {
        return arch::read_gs_offset<Integer>(offset);
    4200:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    4204:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
namespace arch {
    template <typename Integer>
    FORCE_INLINE
    static auto read_gs_offset(usize offset) -> Integer {
        Integer ret;
        asm volatile("mov %%gs:%1, %0" : "=r"(ret) : "m"(*(Integer *)offset) : "memory");
    4208:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    420c:	65 48 8b 09          	mov    %gs:(%rcx),%rcx
    4210:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
                reinterpret_cast<u8 *>(object) + read(s_current_cpu_offset)
    4214:	48 03 45 e0          	add    -0x20(%rbp),%rax
            auto const ptr = reinterpret_cast<T *>(
    4218:	48 89 45 98          	mov    %rax,-0x68(%rbp)
            );
            DEBUG_ASSERT(ustl::mem::is_aligned(ptr, alignof(T)), "Invalid cpu local data pointer");
    421c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    4220:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    4224:	48 c7 45 c8 08 00 00 	movq   $0x8,-0x38(%rbp)
    422b:	00 
    auto is_aligned(usize n, usize a) USTL_NOEXCEPT -> bool 
    { return (n & (a - 1)) == 0; }

    USTL_FORCEINLINE USTL_CONSTEXPR 
    auto is_aligned(void *n, usize a) USTL_NOEXCEPT -> bool 
    {  return is_aligned(usize(n), a);}
    422c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    4230:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4234:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    4238:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    { return (n & (a - 1)) == 0; }
    423c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4240:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4244:	48 83 e9 01          	sub    $0x1,%rcx
    4248:	48 21 c8             	and    %rcx,%rax
    424b:	48 83 f8 00          	cmp    $0x0,%rax
    424f:	74 1d                	je     426e <_ZN4ours15x86_has_featureEN4arch14CpuFeatureTypeE+0x9e>
    4251:	48 8d 35 90 ab 02 00 	lea    0x2ab90(%rip),%rsi        # 2ede8 <.L.str>
    4258:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
    425c:	e8 1f f0 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    4261:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
    4265:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    4269:	e8 c2 ef ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>

            return ptr;
    426e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
        auto cpuinfo = CpuLocal::access(&g_x86_cpu_info);
    4272:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
        DEBUG_ASSERT(cpuinfo, "Failed to read CpuInfo");
    4279:	48 83 bd 78 ff ff ff 	cmpq   $0x0,-0x88(%rbp)
    4280:	00 
    4281:	75 26                	jne    42a9 <_ZN4ours15x86_has_featureEN4arch14CpuFeatureTypeE+0xd9>
    4283:	48 8d 35 f6 ab 02 00 	lea    0x2abf6(%rip),%rsi        # 2ee80 <.L.str>
    428a:	48 8d bd 68 ff ff ff 	lea    -0x98(%rbp),%rdi
    4291:	e8 ea ef ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    4296:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    429d:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    42a4:	e8 87 ef ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>

        return cpuinfo->feature().has_feature(type);
    42a9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    42b0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    42b4:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    struct X86CpuInfo {
        auto init() -> void;

        FORCE_INLINE CXX11_CONSTEXPR
        auto feature() -> X86CpuFeature & {
            return features_;
    42b8:	48 83 c1 38          	add    $0x38,%rcx
    42bc:	8b 45 84             	mov    -0x7c(%rbp),%eax
    42bf:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    42c3:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    42c6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    42ca:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
            : features_()
        {}

        FORCE_INLINE CXX11_CONSTEXPR
        auto has_feature(CpuFeatureType feature) -> bool {
            DEBUG_ASSERT(usize(feature) < kMaxNumFeatures);
    42d1:	48 63 45 b4          	movslq -0x4c(%rbp),%rax
    42d5:	48 3d bb 00 00 00    	cmp    $0xbb,%rax
    42db:	72 05                	jb     42e2 <_ZN4ours15x86_has_featureEN4arch14CpuFeatureTypeE+0x112>
    42dd:	e8 1e ee ff ff       	call   3100 <_ZN4ours5panicEv>
    42e2:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
            return features_.test(usize(feature));
    42e9:	48 63 75 b4          	movslq -0x4c(%rbp),%rsi
    42ed:	e8 6e 01 00 00       	call   4460 <_ZNKSt3__16bitsetILm187EE4testB8nn210000Em>
    42f2:	24 01                	and    $0x1,%al
    42f4:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    42fb:	5d                   	pop    %rbp
    42fc:	c3                   	ret
    42fd:	0f 1f 00             	nopl   (%rax)

0000000000004300 <_ZN4ours22x86_init_feature_earlyEv>:
    }

    auto x86_init_feature_early() -> void {
    4300:	55                   	push   %rbp
    4301:	48 89 e5             	mov    %rsp,%rbp
    4304:	48 83 ec 70          	sub    $0x70,%rsp
    4308:	48 8d 05 79 f5 02 00 	lea    0x2f579(%rip),%rax        # 33888 <_ZN4oursL14g_x86_cpu_infoE>
    430f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
                reinterpret_cast<u8 *>(object) + read(s_current_cpu_offset)
    4313:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    4317:	48 8d 0d 62 f5 02 00 	lea    0x2f562(%rip),%rcx        # 33880 <_ZN4ours8CpuLocal20s_current_cpu_offsetE>
    431e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
            return arch_cpu_local_read<Integral>(reinterpret_cast<usize>(&integer));
    4322:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    4326:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    432a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    432e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    4332:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4336:	65 48 8b 09          	mov    %gs:(%rcx),%rcx
    433a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
                reinterpret_cast<u8 *>(object) + read(s_current_cpu_offset)
    433e:	48 03 45 e0          	add    -0x20(%rbp),%rax
            auto const ptr = reinterpret_cast<T *>(
    4342:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
            DEBUG_ASSERT(ustl::mem::is_aligned(ptr, alignof(T)), "Invalid cpu local data pointer");
    4346:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    434a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    434e:	48 c7 45 c8 08 00 00 	movq   $0x8,-0x38(%rbp)
    4355:	00 
    {  return is_aligned(usize(n), a);}
    4356:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    435a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    435e:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    4362:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    { return (n & (a - 1)) == 0; }
    4366:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    436a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    436e:	48 83 e9 01          	sub    $0x1,%rcx
    4372:	48 21 c8             	and    %rcx,%rax
    4375:	48 83 f8 00          	cmp    $0x0,%rax
    4379:	74 1d                	je     4398 <_ZN4ours22x86_init_feature_earlyEv+0x98>
    437b:	48 8d 35 66 aa 02 00 	lea    0x2aa66(%rip),%rsi        # 2ede8 <.L.str>
    4382:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    4386:	e8 f5 ee ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    438b:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    438f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    4393:	e8 98 ee ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
            return ptr;
    4398:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
        auto cpuinfo = CpuLocal::access(&g_x86_cpu_info);
    439c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
        cpuinfo->init();
    43a0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
    43a4:	e8 77 19 01 00       	call   15d20 <_ZN4arch10X86CpuInfo4initEv>
    }
    43a9:	48 83 c4 70          	add    $0x70,%rsp
    43ad:	5d                   	pop    %rbp
    43ae:	c3                   	ret
    43af:	90                   	nop

00000000000043b0 <__cxx_global_var_init>:
    43b0:	55                   	push   %rbp
    43b1:	48 89 e5             	mov    %rsp,%rbp
    static arch::X86CpuInfo g_x86_cpu_info;
    43b4:	48 8d 3d cd f4 02 00 	lea    0x2f4cd(%rip),%rdi        # 33888 <_ZN4oursL14g_x86_cpu_infoE>
    43bb:	e8 20 00 00 00       	call   43e0 <_ZN4arch10X86CpuInfoC2Ev>
    43c0:	5d                   	pop    %rbp
    43c1:	c3                   	ret
    43c2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    43c9:	1f 84 00 00 00 00 00 

00000000000043d0 <_GLOBAL__sub_I_feature.cpp>:
    43d0:	55                   	push   %rbp
    43d1:	48 89 e5             	mov    %rsp,%rbp
    43d4:	e8 d7 ff ff ff       	call   43b0 <__cxx_global_var_init>
    43d9:	5d                   	pop    %rbp
    43da:	c3                   	ret
    43db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000043e0 <_ZN4arch10X86CpuInfoC2Ev>:
    struct X86CpuInfo {
    43e0:	55                   	push   %rbp
    43e1:	48 89 e5             	mov    %rsp,%rbp
    43e4:	48 83 ec 10          	sub    $0x10,%rsp
    43e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    43ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    43f0:	48 83 c0 38          	add    $0x38,%rax
    43f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    43f8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            : features_()
    43fc:	e8 0f 00 00 00       	call   4410 <_ZNSt3__16bitsetILm187EEC2B8nn210000Ev>
    4401:	48 83 c4 10          	add    $0x10,%rsp
    4405:	5d                   	pop    %rbp
    4406:	c3                   	ret
    4407:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    440e:	00 00 

0000000000004410 <_ZNSt3__16bitsetILm187EEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bitset() _NOEXCEPT {}
    4410:	55                   	push   %rbp
    4411:	48 89 e5             	mov    %rsp,%rbp
    4414:	48 83 ec 10          	sub    $0x10,%rsp
    4418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    441c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    4420:	e8 0b 00 00 00       	call   4430 <_ZNSt3__18__bitsetILm3ELm187EEC2Ev>
    4425:	48 83 c4 10          	add    $0x10,%rsp
    4429:	5d                   	pop    %rbp
    442a:	c3                   	ret
    442b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004430 <_ZNSt3__18__bitsetILm3ELm187EEC2Ev>:
{
    4430:	55                   	push   %rbp
    4431:	48 89 e5             	mov    %rsp,%rbp
    4434:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    : __first_{0}
    443c:	31 c9                	xor    %ecx,%ecx
    443e:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    4445:	00 
    4446:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    444d:	00 
    444e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
}
    4455:	5d                   	pop    %rbp
    4456:	c3                   	ret
    4457:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    445e:	00 00 

0000000000004460 <_ZNKSt3__16bitsetILm187EE4testB8nn210000Em>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool bitset<_Size>::test(size_t __pos) const {
    4460:	55                   	push   %rbp
    4461:	48 89 e5             	mov    %rsp,%rbp
    4464:	48 83 ec 30          	sub    $0x30,%rsp
    4468:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    446c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4470:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4474:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  if (__pos >= _Size)
    4478:	48 81 7d f0 bb 00 00 	cmpq   $0xbb,-0x10(%rbp)
    447f:	00 
    4480:	72 0c                	jb     448e <_ZNKSt3__16bitsetILm187EE4testB8nn210000Em+0x2e>
    std::__throw_out_of_range("bitset test argument out of range");
    4482:	48 8d 3d 93 a9 02 00 	lea    0x2a993(%rip),%rdi        # 2ee1c <.L.str.1>
    4489:	e8 42 f3 ff ff       	call   37d0 <_ZNSt3__120__throw_out_of_rangeB8nn210000EPKc>
    448e:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  return (*this)[__pos];
    4492:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    4496:	e8 25 00 00 00       	call   44c0 <_ZNKSt3__16bitsetILm187EEixB8nn210000Em>
    449b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    449f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    44a3:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    44a7:	e8 54 00 00 00       	call   4500 <_ZNKSt3__121__bit_const_referenceINS_8__bitsetILm3ELm187EEEEcvbB8nn210000Ev>
    44ac:	24 01                	and    $0x1,%al
    44ae:	48 83 c4 30          	add    $0x30,%rsp
    44b2:	5d                   	pop    %rbp
    44b3:	c3                   	ret
    44b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    44bb:	00 00 00 
    44be:	66 90                	xchg   %ax,%ax

00000000000044c0 <_ZNKSt3__16bitsetILm187EEixB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __const_reference operator[](size_t __p) const {
    44c0:	55                   	push   %rbp
    44c1:	48 89 e5             	mov    %rsp,%rbp
    44c4:	48 83 ec 20          	sub    $0x20,%rsp
    44c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    44cc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    44d0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    return __base::__make_ref(__p);
    44d4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    44d8:	e8 53 00 00 00       	call   4530 <_ZNKSt3__18__bitsetILm3ELm187EE10__make_refB8nn210000Em>
    44dd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    44e1:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    44e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    44e9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    44ed:	48 83 c4 20          	add    $0x20,%rsp
    44f1:	5d                   	pop    %rbp
    44f2:	c3                   	ret
    44f3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    44fa:	00 00 00 
    44fd:	0f 1f 00             	nopl   (%rax)

0000000000004500 <_ZNKSt3__121__bit_const_referenceINS_8__bitsetILm3ELm187EEEEcvbB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR operator bool() const _NOEXCEPT {
    4500:	55                   	push   %rbp
    4501:	48 89 e5             	mov    %rsp,%rbp
    4504:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4508:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    return static_cast<bool>(*__seg_ & __mask_);
    450c:	48 8b 01             	mov    (%rcx),%rax
    450f:	48 8b 00             	mov    (%rax),%rax
    4512:	48 23 41 08          	and    0x8(%rcx),%rax
    4516:	48 83 f8 00          	cmp    $0x0,%rax
    451a:	0f 95 c0             	setne  %al
    451d:	24 01                	and    $0x1,%al
    451f:	5d                   	pop    %rbp
    4520:	c3                   	ret
    4521:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    4528:	00 00 00 
    452b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004530 <_ZNKSt3__18__bitsetILm3ELm187EE10__make_refB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __const_reference __make_ref(size_t __pos) const _NOEXCEPT {
    4530:	55                   	push   %rbp
    4531:	48 89 e5             	mov    %rsp,%rbp
    4534:	48 83 ec 20          	sub    $0x20,%rsp
    4538:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    453c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4540:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    return __const_reference(__first_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);
    4544:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4548:	48 89 c2             	mov    %rax,%rdx
    454b:	48 c1 ea 06          	shr    $0x6,%rdx
    454f:	48 8d 34 d1          	lea    (%rcx,%rdx,8),%rsi
    4553:	88 c1                	mov    %al,%cl
    4555:	ba 01 00 00 00       	mov    $0x1,%edx
    455a:	48 d3 e2             	shl    %cl,%rdx
    455d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    4561:	e8 1a 00 00 00       	call   4580 <_ZNSt3__121__bit_const_referenceINS_8__bitsetILm3ELm187EEEEC2B8nn210000EPKmm>
    4566:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    456a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    456e:	48 83 c4 20          	add    $0x20,%rsp
    4572:	5d                   	pop    %rbp
    4573:	c3                   	ret
    4574:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    457b:	00 00 00 
    457e:	66 90                	xchg   %ax,%ax

0000000000004580 <_ZNSt3__121__bit_const_referenceINS_8__bitsetILm3ELm187EEEEC2B8nn210000EPKmm>:
        __mask_(__m) {}
    4580:	55                   	push   %rbp
    4581:	48 89 e5             	mov    %rsp,%rbp
    4584:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4588:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    458c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    4590:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      : __seg_(__s),
    4594:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4598:	48 89 08             	mov    %rcx,(%rax)
        __mask_(__m) {}
    459b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    459f:	48 89 48 08          	mov    %rcx,0x8(%rax)
    45a3:	5d                   	pop    %rbp
    45a4:	c3                   	ret
    45a5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    45ac:	00 00 00 
    45af:	90                   	nop

00000000000045b0 <_ZN4ours16arch_current_cpuEv>:
#include <ours/arch/cpu.hpp>

namespace ours {
    auto arch_current_cpu() -> CpuNum {  
    45b0:	55                   	push   %rbp
    45b1:	48 89 e5             	mov    %rsp,%rbp
        return 0; 
    45b4:	31 c0                	xor    %eax,%eax
    45b6:	5d                   	pop    %rbp
    45b7:	c3                   	ret
    45b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    45bf:	00 

00000000000045c0 <_ZN4ours17arch_activate_cpuEj>:
    }

    auto arch_activate_cpu(CpuNum) -> Status {  
    45c0:	55                   	push   %rbp
    45c1:	48 89 e5             	mov    %rsp,%rbp
    45c4:	89 7d fc             	mov    %edi,-0x4(%rbp)
        return Status::Unimplemented;
    45c7:	b8 05 00 00 00       	mov    $0x5,%eax
    45cc:	5d                   	pop    %rbp
    45cd:	c3                   	ret
    45ce:	66 90                	xchg   %ax,%ax

00000000000045d0 <_ZN4ours19arch_deactivate_cpuEj>:
    }

    auto arch_deactivate_cpu(CpuNum) -> Status {  
    45d0:	55                   	push   %rbp
    45d1:	48 89 e5             	mov    %rsp,%rbp
    45d4:	89 7d fc             	mov    %edi,-0x4(%rbp)
        return Status::Unimplemented; 
    45d7:	b8 05 00 00 00       	mov    $0x5,%eax
    45dc:	5d                   	pop    %rbp
    45dd:	c3                   	ret
    45de:	66 90                	xchg   %ax,%ax

00000000000045e0 <_ZN4ours16x86_setup_percpuEj>:
    }

    auto x86_setup_percpu(CpuNum cpunum) -> void {
    45e0:	55                   	push   %rbp
    45e1:	48 89 e5             	mov    %rsp,%rbp
    45e4:	89 7d fc             	mov    %edi,-0x4(%rbp)

    }
    45e7:	5d                   	pop    %rbp
    45e8:	c3                   	ret
    45e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000045f0 <_ZNSt3__16bitsetILm32EE3setB8nn210000Emb>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bitset<_Size>& bitset<_Size>::set(size_t __pos, bool __val) {
    45f0:	55                   	push   %rbp
    45f1:	48 89 e5             	mov    %rsp,%rbp
    45f4:	48 83 ec 40          	sub    $0x40,%rsp
    45f8:	88 d0                	mov    %dl,%al
    45fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    45fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4602:	24 01                	and    $0x1,%al
    4604:	88 45 ef             	mov    %al,-0x11(%rbp)
    4607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    460b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  if (__pos >= _Size)
    460f:	48 83 7d f0 20       	cmpq   $0x20,-0x10(%rbp)
    4614:	72 0c                	jb     4622 <_ZNSt3__16bitsetILm32EE3setB8nn210000Emb+0x32>
    std::__throw_out_of_range("bitset set argument out of range");
    4616:	48 8d 3d 7a a8 02 00 	lea    0x2a87a(%rip),%rdi        # 2ee97 <.L.str.2>
    461d:	e8 ae f1 ff ff       	call   37d0 <_ZNSt3__120__throw_out_of_rangeB8nn210000EPKc>
    4622:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  (*this)[__pos] = __val;
    4626:	8a 45 ef             	mov    -0x11(%rbp),%al
    4629:	88 45 cf             	mov    %al,-0x31(%rbp)
    462c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    4630:	e8 2b 00 00 00       	call   4660 <_ZNSt3__16bitsetILm32EEixB8nn210000Em>
    4635:	48 89 c1             	mov    %rax,%rcx
    4638:	8a 45 cf             	mov    -0x31(%rbp),%al
    463b:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    463f:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    4643:	0f b6 f0             	movzbl %al,%esi
    4646:	83 e6 01             	and    $0x1,%esi
    4649:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    464d:	e8 4e 00 00 00       	call   46a0 <_ZNSt3__115__bit_referenceINS_8__bitsetILm1ELm32EEELb1EEaSB8nn210000Eb>
    4652:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  return *this;
    4656:	48 83 c4 40          	add    $0x40,%rsp
    465a:	5d                   	pop    %rbp
    465b:	c3                   	ret
    465c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004660 <_ZNSt3__16bitsetILm32EEixB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 reference operator[](size_t __p) {
    4660:	55                   	push   %rbp
    4661:	48 89 e5             	mov    %rsp,%rbp
    4664:	48 83 ec 20          	sub    $0x20,%rsp
    4668:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    466c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4670:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    return __base::__make_ref(__p);
    4674:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    4678:	e8 73 00 00 00       	call   46f0 <_ZNSt3__18__bitsetILm1ELm32EE10__make_refB8nn210000Em>
    467d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    4681:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    4685:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4689:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    468d:	48 83 c4 20          	add    $0x20,%rsp
    4691:	5d                   	pop    %rbp
    4692:	c3                   	ret
    4693:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    469a:	00 00 00 
    469d:	0f 1f 00             	nopl   (%rax)

00000000000046a0 <_ZNSt3__115__bit_referenceINS_8__bitsetILm1ELm32EEELb1EEaSB8nn210000Eb>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 __bit_reference& operator=(bool __x) _NOEXCEPT {
    46a0:	55                   	push   %rbp
    46a1:	48 89 e5             	mov    %rsp,%rbp
    46a4:	40 88 f0             	mov    %sil,%al
    46a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    46ab:	24 01                	and    $0x1,%al
    46ad:	88 45 f7             	mov    %al,-0x9(%rbp)
    46b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    46b4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (__x)
    46b8:	f6 45 f7 01          	testb  $0x1,-0x9(%rbp)
    46bc:	74 13                	je     46d1 <_ZNSt3__115__bit_referenceINS_8__bitsetILm1ELm32EEELb1EEaSB8nn210000Eb+0x31>
    46be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      *__seg_ |= __mask_;
    46c2:	48 8b 48 08          	mov    0x8(%rax),%rcx
    46c6:	48 8b 00             	mov    (%rax),%rax
    46c9:	48 0b 08             	or     (%rax),%rcx
    46cc:	48 89 08             	mov    %rcx,(%rax)
    46cf:	eb 15                	jmp    46e6 <_ZNSt3__115__bit_referenceINS_8__bitsetILm1ELm32EEELb1EEaSB8nn210000Eb+0x46>
    46d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      *__seg_ &= ~__mask_;
    46d5:	48 8b 48 08          	mov    0x8(%rax),%rcx
    46d9:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
    46dd:	48 8b 00             	mov    (%rax),%rax
    46e0:	48 23 08             	and    (%rax),%rcx
    46e3:	48 89 08             	mov    %rcx,(%rax)
    46e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    return *this;
    46ea:	5d                   	pop    %rbp
    46eb:	c3                   	ret
    46ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000046f0 <_ZNSt3__18__bitsetILm1ELm32EE10__make_refB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 reference __make_ref(size_t __pos) _NOEXCEPT {
    46f0:	55                   	push   %rbp
    46f1:	48 89 e5             	mov    %rsp,%rbp
    46f4:	48 83 ec 20          	sub    $0x20,%rsp
    46f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    46fc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4700:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    return reference(&__first_, __storage_type(1) << __pos);
    4704:	8a 4d e0             	mov    -0x20(%rbp),%cl
    4707:	ba 01 00 00 00       	mov    $0x1,%edx
    470c:	48 d3 e2             	shl    %cl,%rdx
    470f:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    4713:	e8 18 00 00 00       	call   4730 <_ZNSt3__115__bit_referenceINS_8__bitsetILm1ELm32EEELb1EEC2B8nn210000EPmm>
    4718:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    471c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4720:	48 83 c4 20          	add    $0x20,%rsp
    4724:	5d                   	pop    %rbp
    4725:	c3                   	ret
    4726:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    472d:	00 00 00 

0000000000004730 <_ZNSt3__115__bit_referenceINS_8__bitsetILm1ELm32EEELb1EEC2B8nn210000EPmm>:
        __mask_(__m) {}
    4730:	55                   	push   %rbp
    4731:	48 89 e5             	mov    %rsp,%rbp
    4734:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4738:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    473c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    4740:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      : __seg_(__s),
    4744:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4748:	48 89 08             	mov    %rcx,(%rax)
        __mask_(__m) {}
    474b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    474f:	48 89 48 08          	mov    %rcx,0x8(%rax)
    4753:	5d                   	pop    %rbp
    4754:	c3                   	ret
    4755:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    475c:	00 00 00 
    475f:	90                   	nop

0000000000004760 <_ZN4ours25x86_tlb_global_invalidateEv>:
    using arch::Cr0;
    using arch::Cr4;
    using arch::MsrIo;
    using arch::MsrRegAddr;

    auto x86_tlb_global_invalidate() -> void {
    4760:	55                   	push   %rbp
    4761:	48 89 e5             	mov    %rsp,%rbp
    4764:	48 83 ec 70          	sub    $0x70,%rsp
    4768:	bf 4a 00 00 00       	mov    $0x4a,%edi
        if (x86_has_feature(CpuFeatureType::InvPcid)) {
    476d:	e8 5e fa ff ff       	call   41d0 <_ZN4ours15x86_has_featureEN4arch14CpuFeatureTypeE>
    4772:	a8 01                	test   $0x1,%al
    4774:	75 02                	jne    4778 <_ZN4ours25x86_tlb_global_invalidateEv+0x18>
    4776:	eb 2f                	jmp    47a7 <_ZN4ours25x86_tlb_global_invalidateEv+0x47>
        x86_invpcid({pcid, 0}, InvPcidCmd::Single);
    }

    FORCE_INLINE
    static auto x86_invpcid_all() -> void {
        x86_invpcid({0, 0}, InvPcidCmd::All);
    4778:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
    477f:	00 
    4780:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
    4787:	00 
    4788:	48 8d 45 98          	lea    -0x68(%rbp),%rax
    478c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    4790:	48 c7 45 d8 02 00 00 	movq   $0x2,-0x28(%rbp)
    4797:	00 
        asm ("invpcid %0, %1" :: "m"(request), "r"(cmd) : "memory");
    4798:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    479c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    47a0:	66 0f 38 82 08       	invpcid (%rax),%rcx
            return arch::x86_invpcid_all();
    47a5:	eb 56                	jmp    47fd <_ZN4ours25x86_tlb_global_invalidateEv+0x9d>
        enum RegisterBits { PageTableAddress, };
        typedef TypeList<Field<Id<PageTableAddress>, Bits<ustl::NumericLimits<PhysAddr>::DIGITS>>>
            FieldList;
    };
    struct Cr3: public SysReg<Cr3> { typedef SysReg<Cr3> Base; using Base::Base; };
    X86_IMPL_SYSREG(Cr3, "cr3");
    47a7:	0f 20 d8             	mov    %cr3,%rax
    47aa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    47ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    47b2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    47b6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    47ba:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    47be:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
    47c5:	00 
    47c6:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    47ca:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
    47ce:	e8 cd 10 00 00       	call   58a0 <_ZN4arch3Cr3CI2N4ustl9bitfields13BitFieldsImplImNS1_8TypeListIJNS2_13FieldMetaDataImLi0ELi0ELi64EmXtlNS1_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEEERKSt16initializer_listImE>
    47d3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
        Cr3::read().write();
    47d7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    47db:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    47df:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    47e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
        }

        FORCE_INLINE USTL_CONSTEXPR
        auto write() -> Self & {
            Self::write(*static_cast<Derived const *>(this));
    47e7:	48 8b 00             	mov    (%rax),%rax
    47ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    47ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    47f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    47f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    47fa:	0f 22 d8             	mov    %rax,%cr3
        }

        arch::tlb_invalidate_all();
    }
    47fd:	48 83 c4 70          	add    $0x70,%rsp
    4801:	5d                   	pop    %rbp
    4802:	c3                   	ret
    4803:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    480a:	84 00 00 00 00 00 

0000000000004810 <_ZN4ours20x86_setup_mmu_percpuEv>:

    auto x86_setup_mmu_percpu() -> void {
    4810:	55                   	push   %rbp
    4811:	48 89 e5             	mov    %rsp,%rbp
    4814:	48 81 ec e0 02 00 00 	sub    $0x2e0,%rsp
    X86_IMPL_SYSREG(Cr0, "cr0");
    481b:	0f 20 c0             	mov    %cr0,%rax
    481e:	48 89 85 68 fd ff ff 	mov    %rax,-0x298(%rbp)
    4825:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
    482c:	48 89 85 50 fd ff ff 	mov    %rax,-0x2b0(%rbp)
    4833:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    483a:	48 89 85 58 fd ff ff 	mov    %rax,-0x2a8(%rbp)
    4841:	48 c7 85 60 fd ff ff 	movq   $0x1,-0x2a0(%rbp)
    4848:	01 00 00 00 
    484c:	48 8d bd 70 fd ff ff 	lea    -0x290(%rbp),%rdi
    4853:	48 8d b5 58 fd ff ff 	lea    -0x2a8(%rbp),%rsi
    485a:	e8 e1 06 00 00       	call   4f40 <_ZN4arch6SysRegINS_3Cr0EECI2N4ustl9bitfields13BitFieldsImplImNS3_8TypeListIJNS4_13FieldMetaDataImLi0ELi0ELi1EmXtlNS3_4util11FixedStringILm4EEEtlA4_cLc120ELc56ELc55EEEELb1EEENS7_ImLi1ELi1ELi1EmXtlSA_tlSB_Lc83ELc115ELc101EEEELb1EEENS7_ImLi2ELi2ELi1EmXtlSA_tlSB_Lc65ELc118ELc120EEEELb1EEENS7_ImLi3ELi3ELi1EmXtlNS9_ILm7EEEtlA7_cLc66ELc110ELc100ELc82ELc101ELc103EEEELb1EEENS7_ImLi4ELi4ELi1EmXtlSF_tlSG_Lc66ELc110ELc100ELc67ELc115ELc114EEEELb1EEENS7_ImLi5ELi5ELi1EmXtlSF_tlSG_Lc79ELc112ELc77ELc97ELc115ELc107EEEELb1EEENS7_ImLi6ELi16ELi1EmXtlNS9_ILm9EEEtlA9_cLc90ELc109ELc109ELc72ELc105ELc50ELc53ELc54EEEELb1EEENS7_ImLi7ELi18ELi1EmXtlNS9_ILm8EEEtlA8_cLc72ELc105ELc49ELc54ELc90ELc109ELc109EEEELb1EEENS7_ImLi8ELi29ELi1EmXtlNS9_ILm3EEEtlA3_cLc80ELc48EEEELb1EEENS7_ImLi9ELi30ELi1EmXtlNS9_ILm5EEEtlA5_cLc80ELc107ELc114ELc117EEEELb1EEENS7_ImLi10ELi31ELi1EmXtlST_tlSU_Lc80ELc107ELc114ELc117EEEELb1EEEEEEEEERKSt16initializer_listImE>
    485f:	48 8b 85 70 fd ff ff 	mov    -0x290(%rbp),%rax
        Cr0::read().set<Cr0::Wp>(1)  // Enable Write protect.
    4866:	48 89 85 48 fd ff ff 	mov    %rax,-0x2b8(%rbp)
    486d:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
    4874:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
    487b:	c7 85 84 fd ff ff 01 	movl   $0x1,-0x27c(%rbp)
    4882:	00 00 00 
    4885:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
    488c:	48 63 8d 84 fd ff ff 	movslq -0x27c(%rbp),%rcx
    4893:	48 89 8d 78 fd ff ff 	mov    %rcx,-0x288(%rbp)
    489a:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
    48a1:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    48a8:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
    48af:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
        }

        template<usize Id>
        USTL_FORCEINLINE USTL_CONSTEXPR
        auto set(ValueTypeOf<Id> const &value) USTL_NOEXCEPT -> Self & {
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    48b6:	48 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%rcx
    48bd:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    48c4:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
    48cb:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
        template<usize Id>
        USTL_FORCEINLINE USTL_CONSTEXPR
        auto priv_set(ValueTypeOf<Id> const &value, traits::TrueType) USTL_NOEXCEPT -> void {
            // Defining the variables is just to observe their value. Usually them will
            // be optimized out. So don't worry that them occupy the statck space.
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    48d2:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
    48d9:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    48dd:	48 c7 85 80 fe ff ff 	movq   $0x10000,-0x180(%rbp)
    48e4:	00 00 01 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    48e8:	48 c7 85 78 fe ff ff 	movq   $0x10,-0x188(%rbp)
    48ef:	10 00 00 00 

            values[idx] &= ~mask;
    48f3:	48 8b 11             	mov    (%rcx),%rdx
    48f6:	48 81 e2 ff ff fe ff 	and    $0xfffffffffffeffff,%rdx
    48fd:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
    4900:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    4907:	48 8b 12             	mov    (%rdx),%rdx
    490a:	48 c1 e2 10          	shl    $0x10,%rdx
    490e:	48 0b 11             	or     (%rcx),%rdx
    4911:	48 89 11             	mov    %rdx,(%rcx)
    4914:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
    491b:	c7 85 9c fd ff ff 00 	movl   $0x0,-0x264(%rbp)
    4922:	00 00 00 
    4925:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
    492c:	48 63 8d 9c fd ff ff 	movslq -0x264(%rbp),%rcx
    4933:	48 89 8d 90 fd ff ff 	mov    %rcx,-0x270(%rbp)
    493a:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
    4941:	48 8d 85 90 fd ff ff 	lea    -0x270(%rbp),%rax
    4948:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
    494f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    4956:	48 8b 8d a0 fe ff ff 	mov    -0x160(%rbp),%rcx
    495d:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    4964:	48 89 8d c8 fe ff ff 	mov    %rcx,-0x138(%rbp)
    496b:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    4972:	48 c7 85 c0 fe ff ff 	movq   $0x0,-0x140(%rbp)
    4979:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    497d:	48 c7 85 b8 fe ff ff 	movq   $0x20000000,-0x148(%rbp)
    4984:	00 00 00 20 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    4988:	48 c7 85 b0 fe ff ff 	movq   $0x1d,-0x150(%rbp)
    498f:	1d 00 00 00 
            values[idx] &= ~mask;
    4993:	48 8b 11             	mov    (%rcx),%rdx
    4996:	48 81 e2 ff ff ff df 	and    $0xffffffffdfffffff,%rdx
    499d:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
    49a0:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    49a7:	48 8b 12             	mov    (%rdx),%rdx
    49aa:	48 c1 e2 1d          	shl    $0x1d,%rdx
    49ae:	48 0b 11             	or     (%rcx),%rdx
    49b1:	48 89 11             	mov    %rdx,(%rcx)
    49b4:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
    49bb:	c7 85 b4 fd ff ff 00 	movl   $0x0,-0x24c(%rbp)
    49c2:	00 00 00 
    49c5:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    49cc:	48 63 8d b4 fd ff ff 	movslq -0x24c(%rbp),%rcx
    49d3:	48 89 8d a8 fd ff ff 	mov    %rcx,-0x258(%rbp)
    49da:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    49e1:	48 8d 85 a8 fd ff ff 	lea    -0x258(%rbp),%rax
    49e8:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    49ef:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    49f6:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
    49fd:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    4a04:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
    4a0b:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    4a12:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
    4a19:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    4a1d:	48 c7 85 f0 fe ff ff 	movq   $0x40000000,-0x110(%rbp)
    4a24:	00 00 00 40 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    4a28:	48 c7 85 e8 fe ff ff 	movq   $0x1e,-0x118(%rbp)
    4a2f:	1e 00 00 00 
            values[idx] &= ~mask;
    4a33:	48 8b 11             	mov    (%rcx),%rdx
    4a36:	48 81 e2 ff ff ff bf 	and    $0xffffffffbfffffff,%rdx
    4a3d:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
    4a40:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    4a47:	48 8b 12             	mov    (%rdx),%rdx
    4a4a:	48 c1 e2 1e          	shl    $0x1e,%rdx
    4a4e:	48 0b 11             	or     (%rcx),%rdx
    4a51:	48 89 11             	mov    %rdx,(%rcx)
    4a54:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
    4a5b:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
    4a62:	48 8b 00             	mov    (%rax),%rax
    4a65:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
    4a6c:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
    4a73:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    4a7a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    4a81:	0f 22 c0             	mov    %rax,%cr0
            Field<Id<Cet>, Name<"cet">>,
            Field<Id<Pks>, Name<"pks">>
        > FieldList;
    };
    struct Cr4: public SysReg<Cr4> {};
    X86_IMPL_SYSREG(Cr4, "cr4");
    4a84:	0f 20 e0             	mov    %cr4,%rax
    4a87:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
    4a8e:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
    4a95:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
    4a9c:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    4aa3:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
    4aaa:	48 c7 85 e0 fd ff ff 	movq   $0x1,-0x220(%rbp)
    4ab1:	01 00 00 00 
    4ab5:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
    4abc:	48 8d b5 d8 fd ff ff 	lea    -0x228(%rbp),%rsi
    4ac3:	e8 38 0d 00 00       	call   5800 <_ZN4arch6SysRegINS_3Cr4EECI2N4ustl9bitfields13BitFieldsImplImNS3_8TypeListIJNS4_13FieldMetaDataImLi0ELi0ELi1EmXtlNS3_4util11FixedStringILm4EEEtlA4_cLc118ELc109ELc101EEEELb1EEENS7_ImLi1ELi1ELi1EmXtlSA_tlSB_Lc112ELc118ELc105EEEELb1EEENS7_ImLi2ELi2ELi1EmXtlSA_tlSB_Lc116ELc115ELc100EEEELb1EEENS7_ImLi3ELi3ELi1EmXtlNS9_ILm3EEEtlA3_cLc100ELc101EEEELb1EEENS7_ImLi4ELi4ELi1EmXtlSA_tlSB_Lc112ELc115ELc101EEEELb1EEENS7_ImLi5ELi5ELi1EmXtlSA_tlSB_Lc112ELc97ELc101EEEELb1EEENS7_ImLi6ELi6ELi1EmXtlSA_tlSB_Lc109ELc99ELc101EEEELb1EEENS7_ImLi7ELi7ELi1EmXtlSA_tlSB_Lc112ELc103ELc101EEEELb1EEENS7_ImLi8ELi8ELi1EmXtlSA_tlSB_Lc112ELc99ELc101EEEELb1EEENS7_ImLi9ELi9ELi1EmXtlNS9_ILm7EEEtlA7_cLc111ELc115ELc102ELc120ELc115ELc114EEEELb1EEENS7_ImLi10ELi10ELi1EmXtlNS9_ILm10EEEtlA10_cLc111ELc115ELc109ELc109ELc101ELc120ELc99ELc112ELc116EEEELb1EEENS7_ImLi11ELi11ELi1EmXtlNS9_ILm5EEEtlA5_cLc117ELc109ELc105ELc112EEEELb1EEENS7_ImLi12ELi12ELi1EmXtlST_tlSU_Lc108ELc97ELc53ELc55EEEELb1EEENS7_ImLi13ELi13ELi1EmXtlST_tlSU_Lc118ELc109ELc120ELc101EEEELb1EEENS7_ImLi14ELi14ELi1EmXtlST_tlSU_Lc115ELc109ELc120ELc101EEEELb1EEENS7_ImLi16ELi16ELi1EmXtlNS9_ILm9EEEtlA9_cLc70ELc115ELc71ELc115ELc66ELc97ELc115ELc101EEEELb1EEENS7_ImLi17ELi17ELi1EmXtlNS9_ILm6EEEtlA6_cLc80ELc99ELc105ELc100ELc101EEEELb1EEENS7_ImLi18ELi18ELi1EmXtlNS9_ILm8EEEtlA8_cLc111ELc115ELc120ELc115ELc97ELc118ELc101EEEELb1EEENS7_ImLi20ELi20ELi1EmXtlST_tlSU_Lc115ELc109ELc101ELc112EEEELb1EEENS7_ImLi21ELi21ELi1EmXtlST_tlSU_Lc115ELc109ELc97ELc112EEEELb1EEENS7_ImLi22ELi22ELi1EmXtlSA_tlSB_Lc112ELc107ELc101EEEELb1EEENS7_ImLi23ELi23ELi1EmXtlSA_tlSB_Lc99ELc101ELc116EEEELb1EEENS7_ImLi24ELi24ELi1EmXtlSA_tlSB_Lc112ELc107ELc115EEEELb1EEEEEEEEERKSt16initializer_listImE>
    4ac8:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
                   .set<Cr0::Nw>(0)  // Disable no-write-through.
                   .set<Cr0::Cd>(0)  // Disable cache-disable.
                   .write();

        Cr4::read().set<Cr4::Smep>(x86_has_feature(CpuFeatureType::Smep))   // Unable to execute user code.
    4acf:	48 89 85 40 fd ff ff 	mov    %rax,-0x2c0(%rbp)
    4ad6:	bf 47 00 00 00       	mov    $0x47,%edi
    4adb:	e8 f0 f6 ff ff       	call   41d0 <_ZN4ours15x86_has_featureEN4arch14CpuFeatureTypeE>
    4ae0:	48 8d 8d 40 fd ff ff 	lea    -0x2c0(%rbp),%rcx
    4ae7:	48 89 8d 08 fe ff ff 	mov    %rcx,-0x1f8(%rbp)
    4aee:	24 01                	and    $0x1,%al
    4af0:	88 85 07 fe ff ff    	mov    %al,-0x1f9(%rbp)
    4af6:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
    4afd:	8a 8d 07 fe ff ff    	mov    -0x1f9(%rbp),%cl
    4b03:	80 e1 01             	and    $0x1,%cl
    4b06:	0f b6 c9             	movzbl %cl,%ecx
    4b09:	48 89 8d f8 fd ff ff 	mov    %rcx,-0x208(%rbp)
    4b10:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    4b17:	48 8d 85 f8 fd ff ff 	lea    -0x208(%rbp),%rax
    4b1e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    4b25:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
    4b2c:	48 89 8d 28 fd ff ff 	mov    %rcx,-0x2d8(%rbp)
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    4b33:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4b3a:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
    4b41:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    4b48:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    4b4f:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
    4b56:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    4b5a:	48 c7 85 30 ff ff ff 	movq   $0x100000,-0xd0(%rbp)
    4b61:	00 00 10 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    4b65:	48 c7 85 28 ff ff ff 	movq   $0x14,-0xd8(%rbp)
    4b6c:	14 00 00 00 
            values[idx] &= ~mask;
    4b70:	48 8b 08             	mov    (%rax),%rcx
    4b73:	48 81 e1 ff ff ef ff 	and    $0xffffffffffefffff,%rcx
    4b7a:	48 89 08             	mov    %rcx,(%rax)
            values[idx] |= usize(value) << shift;
    4b7d:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
    4b84:	48 8b 09             	mov    (%rcx),%rcx
    4b87:	48 c1 e1 14          	shl    $0x14,%rcx
    4b8b:	48 0b 08             	or     (%rax),%rcx
    4b8e:	48 89 08             	mov    %rcx,(%rax)
    4b91:	bf 54 00 00 00       	mov    $0x54,%edi
                   .set<Cr4::Smap>(x86_has_feature(CpuFeatureType::Smap))   // Unable to read user data.
    4b96:	e8 35 f6 ff ff       	call   41d0 <_ZN4ours15x86_has_featureEN4arch14CpuFeatureTypeE>
    4b9b:	48 8b 8d 28 fd ff ff 	mov    -0x2d8(%rbp),%rcx
    4ba2:	48 89 8d 20 fe ff ff 	mov    %rcx,-0x1e0(%rbp)
    4ba9:	24 01                	and    $0x1,%al
    4bab:	88 85 1f fe ff ff    	mov    %al,-0x1e1(%rbp)
    4bb1:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
    4bb8:	8a 8d 1f fe ff ff    	mov    -0x1e1(%rbp),%cl
    4bbe:	80 e1 01             	and    $0x1,%cl
    4bc1:	0f b6 c9             	movzbl %cl,%ecx
    4bc4:	48 89 8d 10 fe ff ff 	mov    %rcx,-0x1f0(%rbp)
    4bcb:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    4bd2:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    4bd9:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    4be0:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
    4be7:	48 89 8d 30 fd ff ff 	mov    %rcx,-0x2d0(%rbp)
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    4bee:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    4bf5:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    4bf9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    4c00:	48 8b 45 80          	mov    -0x80(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    4c04:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
    4c0b:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    4c0f:	48 c7 85 68 ff ff ff 	movq   $0x200000,-0x98(%rbp)
    4c16:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    4c1a:	48 c7 85 60 ff ff ff 	movq   $0x15,-0xa0(%rbp)
    4c21:	15 00 00 00 
            values[idx] &= ~mask;
    4c25:	48 8b 08             	mov    (%rax),%rcx
    4c28:	48 81 e1 ff ff df ff 	and    $0xffffffffffdfffff,%rcx
    4c2f:	48 89 08             	mov    %rcx,(%rax)
            values[idx] |= usize(value) << shift;
    4c32:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    4c39:	48 8b 09             	mov    (%rcx),%rcx
    4c3c:	48 c1 e1 15          	shl    $0x15,%rcx
    4c40:	48 0b 08             	or     (%rax),%rcx
    4c43:	48 89 08             	mov    %rcx,(%rax)
    4c46:	bf 31 00 00 00       	mov    $0x31,%edi
                   .set<Cr4::Pcide>(x86_has_feature(CpuFeatureType::Pcid))  // Enable process context identifier
    4c4b:	e8 80 f5 ff ff       	call   41d0 <_ZN4ours15x86_has_featureEN4arch14CpuFeatureTypeE>
    4c50:	48 8b 8d 30 fd ff ff 	mov    -0x2d0(%rbp),%rcx
    4c57:	48 89 8d 38 fe ff ff 	mov    %rcx,-0x1c8(%rbp)
    4c5e:	24 01                	and    $0x1,%al
    4c60:	88 85 37 fe ff ff    	mov    %al,-0x1c9(%rbp)
    4c66:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
    4c6d:	8a 8d 37 fe ff ff    	mov    -0x1c9(%rbp),%cl
    4c73:	80 e1 01             	and    $0x1,%cl
    4c76:	0f b6 c9             	movzbl %cl,%ecx
    4c79:	48 89 8d 28 fe ff ff 	mov    %rcx,-0x1d8(%rbp)
    4c80:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    4c84:	48 8d 85 28 fe ff ff 	lea    -0x1d8(%rbp),%rax
    4c8b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    4c8f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    4c93:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
    4c97:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    4c9b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    4c9f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    4ca3:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
    4caa:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    4cab:	48 c7 45 a0 00 00 02 	movq   $0x20000,-0x60(%rbp)
    4cb2:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    4cb3:	48 c7 45 98 11 00 00 	movq   $0x11,-0x68(%rbp)
    4cba:	00 
            values[idx] &= ~mask;
    4cbb:	48 8b 11             	mov    (%rcx),%rdx
    4cbe:	48 81 e2 ff ff fd ff 	and    $0xfffffffffffdffff,%rdx
    4cc5:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
    4cc8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    4ccc:	48 8b 12             	mov    (%rdx),%rdx
    4ccf:	48 c1 e2 11          	shl    $0x11,%rdx
    4cd3:	48 0b 11             	or     (%rcx),%rdx
    4cd6:	48 89 11             	mov    %rdx,(%rcx)
    4cd9:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
    4ce0:	c7 85 4c fe ff ff 01 	movl   $0x1,-0x1b4(%rbp)
    4ce7:	00 00 00 
    4cea:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    4cf1:	48 63 8d 4c fe ff ff 	movslq -0x1b4(%rbp),%rcx
    4cf8:	48 89 8d 40 fe ff ff 	mov    %rcx,-0x1c0(%rbp)
    4cff:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4d03:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    4d0a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    4d0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    4d12:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    4d16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    4d1a:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    4d1e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    4d22:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    4d29:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    4d2a:	48 c7 45 d8 80 00 00 	movq   $0x80,-0x28(%rbp)
    4d31:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    4d32:	48 c7 45 d0 07 00 00 	movq   $0x7,-0x30(%rbp)
    4d39:	00 
            values[idx] &= ~mask;
    4d3a:	48 8b 11             	mov    (%rcx),%rdx
    4d3d:	48 81 e2 7f ff ff ff 	and    $0xffffffffffffff7f,%rdx
    4d44:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
    4d47:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    4d4b:	48 8b 12             	mov    (%rdx),%rdx
    4d4e:	48 c1 e2 07          	shl    $0x7,%rdx
    4d52:	48 0b 11             	or     (%rcx),%rdx
    4d55:	48 89 11             	mov    %rdx,(%rcx)
    4d58:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
    4d5f:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
    4d66:	48 8b 00             	mov    (%rax),%rax
    4d69:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    4d70:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
    4d77:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4d7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4d7f:	0f 22 e0             	mov    %rax,%cr4
    4d82:	bf 80 00 00 c0       	mov    $0xc0000080,%edi
#if PAGING_LEVEL == 5
                   .set<Cr4::La57>(x86_has_feature(CpuFeatureType::La57))
#endif
                   .write();
        
        auto shadow = MsrIo::read<usize>(MsrRegAddr::IA32Efer);
    4d87:	e8 24 01 00 00       	call   4eb0 <_ZN4arch5MsrIo4readImEET_NS_10MsrRegAddrE>
    4d8c:	48 89 85 38 fd ff ff 	mov    %rax,-0x2c8(%rbp)
        shadow |= X86_EFER_NXE;
    4d93:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
    4d9a:	48 0d 00 08 00 00    	or     $0x800,%rax
    4da0:	48 89 85 38 fd ff ff 	mov    %rax,-0x2c8(%rbp)
        MsrIo::write(MsrRegAddr::IA32Efer, shadow);
    4da7:	48 8b b5 38 fd ff ff 	mov    -0x2c8(%rbp),%rsi
    4dae:	bf 80 00 00 c0       	mov    $0xc0000080,%edi
    4db3:	e8 38 e4 ff ff       	call   31f0 <_ZN4arch5MsrIo5writeImEEvNS_10MsrRegAddrET_>
    }
    4db8:	48 81 c4 e0 02 00 00 	add    $0x2e0,%rsp
    4dbf:	5d                   	pop    %rbp
    4dc0:	c3                   	ret
    4dc1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    4dc8:	0f 1f 84 00 00 00 00 
    4dcf:	00 

0000000000004dd0 <_ZN4ours19x86_setup_mmu_earlyEv>:

    auto x86_setup_mmu_early() -> void {
    4dd0:	55                   	push   %rbp
    4dd1:	48 89 e5             	mov    %rsp,%rbp
    4dd4:	48 83 ec 70          	sub    $0x70,%rsp
    X86_IMPL_SYSREG(Cr3, "cr3");
    4dd8:	0f 20 d8             	mov    %cr3,%rax
    4ddb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4ddf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4de3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    4de7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4deb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    4def:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
    4df6:	00 
    4df7:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    4dfb:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
    4dff:	e8 9c 0a 00 00       	call   58a0 <_ZN4arch3Cr3CI2N4ustl9bitfields13BitFieldsImplImNS1_8TypeListIJNS2_13FieldMetaDataImLi0ELi0ELi64EmXtlNS1_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEEERKSt16initializer_listImE>
    4e04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
        mem::g_pgd = Cr3::read().get<Cr3::PageTableAddress>();
    4e08:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    4e0c:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    4e10:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4e14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4e1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

        template<usize Id>
        USTL_FORCEINLINE USTL_CONSTEXPR
        auto priv_get(traits::TrueType) const USTL_NOEXCEPT -> ValueTypeOf<Id> {
            typedef ValueTypeOf<Id> Result;
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    4e20:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    4e27:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    4e28:	48 c7 45 e8 ff ff ff 	movq   $0xffffffffffffffff,-0x18(%rbp)
    4e2f:	ff 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    4e30:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    4e37:	00 
            return Result((values[idx] & mask) >> shift);
    4e38:	48 8b 00             	mov    (%rax),%rax
    4e3b:	48 89 05 be 39 03 00 	mov    %rax,0x339be(%rip)        # 38800 <g_pgd>

        // Tear down the transient 1:1 identity mappings established by `PhysBoot`
        // during early boot process, and permit low-memory regions to temporarily 
        // utilize the PhysMap virtual addressing scheme until full memory management
        // infrastructure is operational.
        auto pgd = reinterpret_cast<arch::PteVal *>(mem::g_pgd);
    4e42:	48 8b 05 b7 39 03 00 	mov    0x339b7(%rip),%rax        # 38800 <g_pgd>
    4e49:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
        pgd[0] = pgd[511];
    4e4d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    4e51:	48 8b 88 f8 0f 00 00 	mov    0xff8(%rax),%rcx
    4e58:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    4e5c:	48 89 08             	mov    %rcx,(%rax)
        x86_tlb_global_invalidate();
    4e5f:	e8 fc f8 ff ff       	call   4760 <_ZN4ours25x86_tlb_global_invalidateEv>

        x86_setup_mmu_percpu();
    4e64:	e8 a7 f9 ff ff       	call   4810 <_ZN4ours20x86_setup_mmu_percpuEv>

        dispatch_cpuid(arch::AddrSizeCpuIdObserver(
    4e69:	48 8d 35 48 c7 02 00 	lea    0x2c748(%rip),%rsi        # 315b8 <g_arch_phys_addr_bits>
    4e70:	48 8d 15 42 c7 02 00 	lea    0x2c742(%rip),%rdx        # 315b9 <g_arch_virt_addr_bits>
    4e77:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    4e7b:	e8 90 00 00 00       	call   4f10 <_ZN4arch21AddrSizeCpuIdObserverC2ERhS1_>
    4e80:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    4e84:	e8 57 00 00 00       	call   4ee0 <_ZN4arch14dispatch_cpuidIJNS_21AddrSizeCpuIdObserverEEEEbDpOT_>
            mem::g_arch_virt_addr_bits)
        );
#if PAGING_LEVEL == 5
        mem::g_arch_virt_addr_bits = 57;
#endif
    }
    4e89:	48 83 c4 70          	add    $0x70,%rsp
    4e8d:	5d                   	pop    %rbp
    4e8e:	c3                   	ret
    4e8f:	90                   	nop

0000000000004e90 <_ZN4ours13x86_setup_mmuEv>:

    auto x86_setup_mmu() -> void {
    4e90:	55                   	push   %rbp
    4e91:	48 89 e5             	mov    %rsp,%rbp
        // Unmap low address.
        reinterpret_cast<arch::PteVal *>(mem::g_pgd)[0] = 0;
    4e94:	48 8b 05 65 39 03 00 	mov    0x33965(%rip),%rax        # 38800 <g_pgd>
    4e9b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        x86_tlb_global_invalidate();
    4ea2:	e8 b9 f8 ff ff       	call   4760 <_ZN4ours25x86_tlb_global_invalidateEv>
    }
    4ea7:	5d                   	pop    %rbp
    4ea8:	c3                   	ret
    4ea9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004eb0 <_ZN4arch5MsrIo4readImEET_NS_10MsrRegAddrE>:

        template <typename Int>
        static auto read(MsrRegAddr addr) -> Int {
    4eb0:	55                   	push   %rbp
    4eb1:	48 89 e5             	mov    %rsp,%rbp
    4eb4:	89 7d fc             	mov    %edi,-0x4(%rbp)
            // static_assert(internal::IsSupportedInt<Int>::value, "unsupported register access width");
            u32 lo, hi;
            asm volatile("rdmsr" : "=a"(lo), "=d"(hi) : "c"(addr));
    4eb7:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    4eba:	0f 32                	rdmsr
    4ebc:	89 45 f8             	mov    %eax,-0x8(%rbp)
    4ebf:	89 55 f4             	mov    %edx,-0xc(%rbp)
            return static_cast<Int>((static_cast<u64>(hi) << 32) | lo);
    4ec2:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4ec5:	48 c1 e0 20          	shl    $0x20,%rax
    4ec9:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    4ecc:	48 09 c8             	or     %rcx,%rax
    4ecf:	5d                   	pop    %rbp
    4ed0:	c3                   	ret
    4ed1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    4ed8:	00 00 00 
    4edb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004ee0 <_ZN4arch14dispatch_cpuidIJNS_21AddrSizeCpuIdObserverEEEEbDpOT_>:
    ///  1). Extract the required CPUID leaf and subleaf information from the provided Observers...;
    ///  2). Execute the corresponding CPUID instructions;
    ///  3). Distribute the results to each observer for decoding and interpretation;
    ///  4). Return a boolean indicating whether all operations completed successfully.
    template <typename... Observers>
    auto dispatch_cpuid(Observers &&...observers) -> bool {
    4ee0:	55                   	push   %rbp
    4ee1:	48 89 e5             	mov    %rsp,%rbp
    4ee4:	48 83 ec 30          	sub    $0x30,%rsp
    4ee8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
        typedef typename ExtractActionsFromObservers<Observers...>::Type   Actions;
        CpuId cpuid;
        return dispatch_cpuid_0(cpuid, Actions(), ustl::forward<Observers>(observers)...);
    4eec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4ef0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    { return static_cast<typename traits::RemoveRefT<T> &&>(lr); }

    template <typename T>
    USTL_FORCEINLINE USTL_CONSTEXPR 
    auto forward(traits::RemoveRefT<T> &lr) USTL_NOEXCEPT -> T &&
    { return static_cast<T &&>(lr); }
    4ef4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    4ef8:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    4efc:	e8 6f 0a 00 00       	call   5970 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEEEJNS_21AddrSizeCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_>
    4f01:	24 01                	and    $0x1,%al
    4f03:	48 83 c4 30          	add    $0x30,%rsp
    4f07:	5d                   	pop    %rbp
    4f08:	c3                   	ret
    4f09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004f10 <_ZN4arch21AddrSizeCpuIdObserverC2ERhS1_>:
    struct AddrSizeCpuIdObserver
        : CpuIdObserver<AddrSizeCpuIdObserver, 
                        CpuIdObserveItem<CpuIdLeaf::IntelAddrWidth, CpuIdSubLeaf(0), CpuIdRegTags::Eax>> {
        AddrSizeCpuIdObserver(u8 &max_phys_bits, u8 &max_virt_bits) 
            : max_phys_bits(&max_phys_bits), max_virt_bits(&max_virt_bits)
        {}
    4f10:	55                   	push   %rbp
    4f11:	48 89 e5             	mov    %rsp,%rbp
    4f14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4f18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4f1c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    4f20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            : max_phys_bits(&max_phys_bits), max_virt_bits(&max_virt_bits)
    4f24:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4f28:	48 89 08             	mov    %rcx,(%rax)
    4f2b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4f2f:	48 89 48 08          	mov    %rcx,0x8(%rax)
        {}
    4f33:	5d                   	pop    %rbp
    4f34:	c3                   	ret
    4f35:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    4f3c:	00 00 00 
    4f3f:	90                   	nop

0000000000004f40 <_ZN4arch6SysRegINS_3Cr0EECI2N4ustl9bitfields13BitFieldsImplImNS3_8TypeListIJNS4_13FieldMetaDataImLi0ELi0ELi1EmXtlNS3_4util11FixedStringILm4EEEtlA4_cLc120ELc56ELc55EEEELb1EEENS7_ImLi1ELi1ELi1EmXtlSA_tlSB_Lc83ELc115ELc101EEEELb1EEENS7_ImLi2ELi2ELi1EmXtlSA_tlSB_Lc65ELc118ELc120EEEELb1EEENS7_ImLi3ELi3ELi1EmXtlNS9_ILm7EEEtlA7_cLc66ELc110ELc100ELc82ELc101ELc103EEEELb1EEENS7_ImLi4ELi4ELi1EmXtlSF_tlSG_Lc66ELc110ELc100ELc67ELc115ELc114EEEELb1EEENS7_ImLi5ELi5ELi1EmXtlSF_tlSG_Lc79ELc112ELc77ELc97ELc115ELc107EEEELb1EEENS7_ImLi6ELi16ELi1EmXtlNS9_ILm9EEEtlA9_cLc90ELc109ELc109ELc72ELc105ELc50ELc53ELc54EEEELb1EEENS7_ImLi7ELi18ELi1EmXtlNS9_ILm8EEEtlA8_cLc72ELc105ELc49ELc54ELc90ELc109ELc109EEEELb1EEENS7_ImLi8ELi29ELi1EmXtlNS9_ILm3EEEtlA3_cLc80ELc48EEEELb1EEENS7_ImLi9ELi30ELi1EmXtlNS9_ILm5EEEtlA5_cLc80ELc107ELc114ELc117EEEELb1EEENS7_ImLi10ELi31ELi1EmXtlST_tlSU_Lc80ELc107ELc114ELc117EEEELb1EEEEEEEEERKSt16initializer_listImE>:
        using Base::Base;
    4f40:	55                   	push   %rbp
    4f41:	48 89 e5             	mov    %rsp,%rbp
    4f44:	48 83 ec 10          	sub    $0x10,%rsp
    4f48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4f4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4f50:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    4f54:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    4f58:	e8 13 00 00 00       	call   4f70 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc120ELc56ELc55EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc83ELc115ELc101EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc65ELc118ELc120EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm7EEEtlA7_cLc66ELc110ELc100ELc82ELc101ELc103EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlSB_tlSC_Lc66ELc110ELc100ELc67ELc115ELc114EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlSB_tlSC_Lc79ELc112ELc77ELc97ELc115ELc107EEEELb1EEENS3_ImLi6ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc90ELc109ELc109ELc72ELc105ELc50ELc53ELc54EEEELb1EEENS3_ImLi7ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc72ELc105ELc49ELc54ELc90ELc109ELc109EEEELb1EEENS3_ImLi8ELi29ELi1EmXtlNS5_ILm3EEEtlA3_cLc80ELc48EEEELb1EEENS3_ImLi9ELi30ELi1EmXtlNS5_ILm5EEEtlA5_cLc80ELc107ELc114ELc117EEEELb1EEENS3_ImLi10ELi31ELi1EmXtlSP_tlSQ_Lc80ELc107ELc114ELc117EEEELb1EEEEEEEC2ERKSt16initializer_listImE>
    4f5d:	48 83 c4 10          	add    $0x10,%rsp
    4f61:	5d                   	pop    %rbp
    4f62:	c3                   	ret
    4f63:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    4f6a:	00 00 00 
    4f6d:	0f 1f 00             	nopl   (%rax)

0000000000004f70 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc120ELc56ELc55EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc83ELc115ELc101EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc65ELc118ELc120EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm7EEEtlA7_cLc66ELc110ELc100ELc82ELc101ELc103EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlSB_tlSC_Lc66ELc110ELc100ELc67ELc115ELc114EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlSB_tlSC_Lc79ELc112ELc77ELc97ELc115ELc107EEEELb1EEENS3_ImLi6ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc90ELc109ELc109ELc72ELc105ELc50ELc53ELc54EEEELb1EEENS3_ImLi7ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc72ELc105ELc49ELc54ELc90ELc109ELc109EEEELb1EEENS3_ImLi8ELi29ELi1EmXtlNS5_ILm3EEEtlA3_cLc80ELc48EEEELb1EEENS3_ImLi9ELi30ELi1EmXtlNS5_ILm5EEEtlA5_cLc80ELc107ELc114ELc117EEEELb1EEENS3_ImLi10ELi31ELi1EmXtlSP_tlSQ_Lc80ELc107ELc114ELc117EEEELb1EEEEEEEC2ERKSt16initializer_listImE>:
        BitFieldsImpl(ustl::InitializerList<usize> const &val) {
    4f70:	55                   	push   %rbp
    4f71:	48 89 e5             	mov    %rsp,%rbp
    4f74:	48 83 ec 30          	sub    $0x30,%rsp
    4f78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4f7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            ustl::algorithms::copy_n(val.begin(), NUM_UNITS > val.size() ? val.size() : NUM_UNITS, values);
    4f88:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4f8c:	e8 8f 00 00 00       	call   5020 <_ZNKSt16initializer_listImE5beginB8nn210000Ev>
    4f91:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4f95:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4f99:	e8 a2 00 00 00       	call   5040 <_ZNKSt16initializer_listImE4sizeB8nn210000Ev>
    4f9e:	48 89 c1             	mov    %rax,%rcx
    4fa1:	b8 01 00 00 00       	mov    $0x1,%eax
    4fa6:	48 39 c8             	cmp    %rcx,%rax
    4fa9:	76 0f                	jbe    4fba <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc120ELc56ELc55EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc83ELc115ELc101EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc65ELc118ELc120EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm7EEEtlA7_cLc66ELc110ELc100ELc82ELc101ELc103EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlSB_tlSC_Lc66ELc110ELc100ELc67ELc115ELc114EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlSB_tlSC_Lc79ELc112ELc77ELc97ELc115ELc107EEEELb1EEENS3_ImLi6ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc90ELc109ELc109ELc72ELc105ELc50ELc53ELc54EEEELb1EEENS3_ImLi7ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc72ELc105ELc49ELc54ELc90ELc109ELc109EEEELb1EEENS3_ImLi8ELi29ELi1EmXtlNS5_ILm3EEEtlA3_cLc80ELc48EEEELb1EEENS3_ImLi9ELi30ELi1EmXtlNS5_ILm5EEEtlA5_cLc80ELc107ELc114ELc117EEEELb1EEENS3_ImLi10ELi31ELi1EmXtlSP_tlSQ_Lc80ELc107ELc114ELc117EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x4a>
    4fab:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4faf:	e8 8c 00 00 00       	call   5040 <_ZNKSt16initializer_listImE4sizeB8nn210000Ev>
    4fb4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4fb8:	eb 0b                	jmp    4fc5 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc120ELc56ELc55EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc83ELc115ELc101EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc65ELc118ELc120EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm7EEEtlA7_cLc66ELc110ELc100ELc82ELc101ELc103EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlSB_tlSC_Lc66ELc110ELc100ELc67ELc115ELc114EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlSB_tlSC_Lc79ELc112ELc77ELc97ELc115ELc107EEEELb1EEENS3_ImLi6ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc90ELc109ELc109ELc72ELc105ELc50ELc53ELc54EEEELb1EEENS3_ImLi7ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc72ELc105ELc49ELc54ELc90ELc109ELc109EEEELb1EEENS3_ImLi8ELi29ELi1EmXtlNS5_ILm3EEEtlA3_cLc80ELc48EEEELb1EEENS3_ImLi9ELi30ELi1EmXtlNS5_ILm5EEEtlA5_cLc80ELc107ELc114ELc117EEEELb1EEENS3_ImLi10ELi31ELi1EmXtlSP_tlSQ_Lc80ELc107ELc114ELc117EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x55>
    4fba:	b8 01 00 00 00       	mov    $0x1,%eax
    4fbf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4fc3:	eb 00                	jmp    4fc5 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc120ELc56ELc55EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc83ELc115ELc101EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc65ELc118ELc120EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm7EEEtlA7_cLc66ELc110ELc100ELc82ELc101ELc103EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlSB_tlSC_Lc66ELc110ELc100ELc67ELc115ELc114EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlSB_tlSC_Lc79ELc112ELc77ELc97ELc115ELc107EEEELb1EEENS3_ImLi6ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc90ELc109ELc109ELc72ELc105ELc50ELc53ELc54EEEELb1EEENS3_ImLi7ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc72ELc105ELc49ELc54ELc90ELc109ELc109EEEELb1EEENS3_ImLi8ELi29ELi1EmXtlNS5_ILm3EEEtlA3_cLc80ELc48EEEELb1EEENS3_ImLi9ELi30ELi1EmXtlNS5_ILm5EEEtlA5_cLc80ELc107ELc114ELc117EEEELb1EEENS3_ImLi10ELi31ELi1EmXtlSP_tlSQ_Lc80ELc107ELc114ELc117EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x55>
    4fc5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4fc9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    4fcd:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    4fd1:	e8 0a 00 00 00       	call   4fe0 <_ZNSt3__16copy_nB8nn210000IPKmmPmTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
        }
    4fd6:	48 83 c4 30          	add    $0x30,%rsp
    4fda:	5d                   	pop    %rbp
    4fdb:	c3                   	ret
    4fdc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004fe0 <_ZNSt3__16copy_nB8nn210000IPKmmPmTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>:
template <class _InputIterator,
          class _Size,
          class _OutputIterator,
          __enable_if_t<__has_random_access_iterator_category<_InputIterator>::value, int> = 0>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _OutputIterator
copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result) {
    4fe0:	55                   	push   %rbp
    4fe1:	48 89 e5             	mov    %rsp,%rbp
    4fe4:	48 83 ec 20          	sub    $0x20,%rsp
    4fe8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4fec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4ff0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  typedef typename iterator_traits<_InputIterator>::difference_type difference_type;
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
    4ff4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4ff8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  return std::copy(__first, __first + difference_type(__n), __result);
    4ffc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5000:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    5004:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5008:	48 c1 e0 03          	shl    $0x3,%rax
    500c:	48 01 c6             	add    %rax,%rsi
    500f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5013:	e8 48 00 00 00       	call   5060 <_ZNSt3__14copyB8nn210000IPKmPmEET0_T_S5_S4_>
    5018:	48 83 c4 20          	add    $0x20,%rsp
    501c:	5d                   	pop    %rbp
    501d:	c3                   	ret
    501e:	66 90                	xchg   %ax,%ax

0000000000005020 <_ZNKSt16initializer_listImE5beginB8nn210000Ev>:

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 initializer_list() _NOEXCEPT : __begin_(nullptr), __size_(0) {}

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 size_t size() const _NOEXCEPT { return __size_; }

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 const _Ep* begin() const _NOEXCEPT { return __begin_; }
    5020:	55                   	push   %rbp
    5021:	48 89 e5             	mov    %rsp,%rbp
    5024:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5028:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    502c:	48 8b 00             	mov    (%rax),%rax
    502f:	5d                   	pop    %rbp
    5030:	c3                   	ret
    5031:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    5038:	00 00 00 
    503b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005040 <_ZNKSt16initializer_listImE4sizeB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 size_t size() const _NOEXCEPT { return __size_; }
    5040:	55                   	push   %rbp
    5041:	48 89 e5             	mov    %rsp,%rbp
    5044:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    504c:	48 8b 40 08          	mov    0x8(%rax),%rax
    5050:	5d                   	pop    %rbp
    5051:	c3                   	ret
    5052:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    5059:	00 00 00 
    505c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005060 <_ZNSt3__14copyB8nn210000IPKmPmEET0_T_S5_S4_>:
  return std::__copy_move_unwrap_iters<__copy_impl>(std::move(__first), std::move(__last), std::move(__result));
}

template <class _InputIterator, class _OutputIterator>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _OutputIterator
copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result) {
    5060:	55                   	push   %rbp
    5061:	48 89 e5             	mov    %rsp,%rbp
    5064:	48 83 ec 30          	sub    $0x30,%rsp
    5068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    506c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5070:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  return std::__copy(__first, __last, __result).second;
    5074:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5078:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    507c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5080:	e8 1b 00 00 00       	call   50a0 <_ZNSt3__16__copyB8nn210000IPKmS2_PmEENS_4pairIT_T1_EES5_T0_S6_>
    5085:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5089:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    508d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5091:	48 83 c4 30          	add    $0x30,%rsp
    5095:	5d                   	pop    %rbp
    5096:	c3                   	ret
    5097:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    509e:	00 00 

00000000000050a0 <_ZNSt3__16__copyB8nn210000IPKmS2_PmEENS_4pairIT_T1_EES5_T0_S6_>:
__copy(_InIter __first, _Sent __last, _OutIter __result) {
    50a0:	55                   	push   %rbp
    50a1:	48 89 e5             	mov    %rsp,%rbp
    50a4:	48 83 ec 40          	sub    $0x40,%rsp
    50a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    50ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    50b0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    50b4:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return std::__copy_move_unwrap_iters<__copy_impl>(std::move(__first), std::move(__last), std::move(__result));
    50b8:	e8 73 01 00 00       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    50bd:	48 8b 00             	mov    (%rax),%rax
    50c0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    50c4:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    50c8:	e8 63 01 00 00       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    50cd:	48 8b 00             	mov    (%rax),%rax
    50d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    50d4:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    50d8:	e8 63 01 00 00       	call   5240 <_ZNSt3__14moveB8nn210000IRPmEEOu20__remove_reference_tIT_EOS3_>
    50dd:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    50e1:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    50e5:	48 8b 10             	mov    (%rax),%rdx
    50e8:	e8 23 00 00 00       	call   5110 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPKmS3_PmTnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairIS6_S7_EES6_T1_S7_>
    50ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    50f1:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    50f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    50f9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    50fd:	48 83 c4 40          	add    $0x40,%rsp
    5101:	5d                   	pop    %rbp
    5102:	c3                   	ret
    5103:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    510a:	00 00 00 
    510d:	0f 1f 00             	nopl   (%rax)

0000000000005110 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPKmS3_PmTnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairIS6_S7_EES6_T1_S7_>:
          class _InIter,
          class _Sent,
          class _OutIter,
          __enable_if_t<__can_rewrap<_InIter, _OutIter>::value, int> = 0>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 pair<_InIter, _OutIter>
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
    5110:	55                   	push   %rbp
    5111:	48 89 e5             	mov    %rsp,%rbp
    5114:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    511b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    511f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5123:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  auto __range  = std::__unwrap_range(__first, std::move(__last));
    5127:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    512b:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    5132:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    5136:	e8 f5 00 00 00       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    513b:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    5142:	48 8b 30             	mov    (%rax),%rsi
    5145:	e8 06 01 00 00       	call   5250 <_ZNSt3__114__unwrap_rangeB8nn210000IPKmS2_EEDaT_T0_>
    514a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    514e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5152:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    5159:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
    515d:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
    5161:	e8 ca 00 00 00       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    5166:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
    516d:	48 8b 00             	mov    (%rax),%rax
    5170:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    5177:	e8 b4 00 00 00       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    517c:	48 8b 00             	mov    (%rax),%rax
    517f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    5183:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    5187:	e8 54 01 00 00       	call   52e0 <_ZNSt3__113__unwrap_iterB8nn210000IPmNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
    518c:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
    5193:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    5197:	48 89 c1             	mov    %rax,%rcx
    519a:	48 8d 7d b7          	lea    -0x49(%rbp),%rdi
    519e:	e8 fd 00 00 00       	call   52a0 <_ZNKSt3__111__copy_implclB8nn210000IKmmTnNS_9enable_ifIXsr38__can_lower_copy_assignment_to_memmoveIT_T0_EE5valueEiE4typeELi0EEENS_4pairIPS4_PS5_EES9_S9_SA_>
    51a3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    51a7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    51ab:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    51af:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
    51b3:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
    51b7:	e8 74 00 00 00       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    51bc:	48 8b 00             	mov    (%rax),%rax
    51bf:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    51c3:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    51c7:	e8 64 00 00 00       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    51cc:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
    51d0:	48 8b 30             	mov    (%rax),%rsi
    51d3:	e8 78 01 00 00       	call   5350 <_ZNSt3__114__rewrap_rangeB8nn210000IPKmS2_S2_EET0_S3_T1_>
    51d8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    51dc:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
    51e0:	e8 5b 00 00 00       	call   5240 <_ZNSt3__14moveB8nn210000IRPmEEOu20__remove_reference_tIT_EOS3_>
    51e5:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    51e9:	48 8b 00             	mov    (%rax),%rax
    51ec:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    51f0:	e8 4b 00 00 00       	call   5240 <_ZNSt3__14moveB8nn210000IRPmEEOu20__remove_reference_tIT_EOS3_>
    51f5:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
    51f9:	48 8b 30             	mov    (%rax),%rsi
    51fc:	e8 8f 01 00 00       	call   5390 <_ZNSt3__113__rewrap_iterB8nn210000IPmS1_NS_18__unwrap_iter_implIS1_Lb1EEEEET_S4_T0_>
    5201:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    5205:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    5209:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
    520d:	e8 ee 00 00 00       	call   5300 <_ZNSt3__19make_pairB8nn210000IPKmPmEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS5_Iu7__decayIT0_EE4typeEEEOS6_OSA_>
    5212:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    5216:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    521a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    521e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5222:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    5229:	5d                   	pop    %rbp
    522a:	c3                   	ret
    522b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>:

_LIBCPP_BEGIN_NAMESPACE_STD

template <class _Tp>
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __libcpp_remove_reference_t<_Tp>&&
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
    5230:	55                   	push   %rbp
    5231:	48 89 e5             	mov    %rsp,%rbp
    5234:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  using _Up _LIBCPP_NODEBUG = __libcpp_remove_reference_t<_Tp>;
  return static_cast<_Up&&>(__t);
    5238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    523c:	5d                   	pop    %rbp
    523d:	c3                   	ret
    523e:	66 90                	xchg   %ax,%ax

0000000000005240 <_ZNSt3__14moveB8nn210000IRPmEEOu20__remove_reference_tIT_EOS3_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
    5240:	55                   	push   %rbp
    5241:	48 89 e5             	mov    %rsp,%rbp
    5244:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
    5248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    524c:	5d                   	pop    %rbp
    524d:	c3                   	ret
    524e:	66 90                	xchg   %ax,%ax

0000000000005250 <_ZNSt3__114__unwrap_rangeB8nn210000IPKmS2_EEDaT_T0_>:
    return std::__rewrap_iter(std::move(__orig_iter), std::move(__iter));
  }
};

template <class _Iter, class _Sent>
_LIBCPP_HIDE_FROM_ABI constexpr auto __unwrap_range(_Iter __first, _Sent __last) {
    5250:	55                   	push   %rbp
    5251:	48 89 e5             	mov    %rsp,%rbp
    5254:	48 83 ec 30          	sub    $0x30,%rsp
    5258:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    525c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5260:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return __unwrap_range_impl<_Iter, _Sent>::__unwrap(std::move(__first), std::move(__last));
    5264:	e8 c7 ff ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    5269:	48 8b 00             	mov    (%rax),%rax
    526c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5270:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    5274:	e8 b7 ff ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    5279:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    527d:	48 8b 30             	mov    (%rax),%rsi
    5280:	e8 4b 01 00 00       	call   53d0 <_ZNSt3__119__unwrap_range_implIPKmS2_E8__unwrapB8nn210000ES2_S2_>
    5285:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    5289:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    528d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5291:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5295:	48 83 c4 30          	add    $0x30,%rsp
    5299:	5d                   	pop    %rbp
    529a:	c3                   	ret
    529b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000052a0 <_ZNKSt3__111__copy_implclB8nn210000IKmmTnNS_9enable_ifIXsr38__can_lower_copy_assignment_to_memmoveIT_T0_EE5valueEiE4typeELi0EEENS_4pairIPS4_PS5_EES9_S9_SA_>:
  operator()(_In* __first, _In* __last, _Out* __result) const {
    52a0:	55                   	push   %rbp
    52a1:	48 89 e5             	mov    %rsp,%rbp
    52a4:	48 83 ec 30          	sub    $0x30,%rsp
    52a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    52ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    52b0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    52b4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    return std::__copy_trivial_impl(__first, __last, __result);
    52b8:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    52bc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    52c0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    52c4:	e8 17 02 00 00       	call   54e0 <_ZNSt3__119__copy_trivial_implB8nn210000IKmmEENS_4pairIPT_PT0_EES4_S4_S6_>
    52c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    52cd:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    52d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    52d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    52d9:	48 83 c4 30          	add    $0x30,%rsp
    52dd:	5d                   	pop    %rbp
    52de:	c3                   	ret
    52df:	90                   	nop

00000000000052e0 <_ZNSt3__113__unwrap_iterB8nn210000IPmNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>:

template <class _Iter,
          class _Impl                                             = __unwrap_iter_impl<_Iter>,
          __enable_if_t<is_copy_constructible<_Iter>::value, int> = 0>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 decltype(_Impl::__unwrap(std::declval<_Iter>()))
__unwrap_iter(_Iter __i) _NOEXCEPT {
    52e0:	55                   	push   %rbp
    52e1:	48 89 e5             	mov    %rsp,%rbp
    52e4:	48 83 ec 10          	sub    $0x10,%rsp
    52e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return _Impl::__unwrap(__i);
    52ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    52f0:	e8 6b 03 00 00       	call   5660 <_ZNSt3__118__unwrap_iter_implIPmLb1EE8__unwrapB8nn210000ES1_>
    52f5:	48 83 c4 10          	add    $0x10,%rsp
    52f9:	5d                   	pop    %rbp
    52fa:	c3                   	ret
    52fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005300 <_ZNSt3__19make_pairB8nn210000IPKmPmEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS5_Iu7__decayIT0_EE4typeEEEOS6_OSA_>:
}
#endif

template <class _T1, class _T2>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >
make_pair(_T1&& __t1, _T2&& __t2) {
    5300:	55                   	push   %rbp
    5301:	48 89 e5             	mov    %rsp,%rbp
    5304:	48 83 ec 30          	sub    $0x30,%rsp
    5308:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    530c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
    5310:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    5314:	e8 b7 01 00 00       	call   54d0 <_ZNSt3__17forwardB8nn210000IPKmEEOT_Ru20__remove_reference_tIS3_E>
    5319:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    531d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    5321:	e8 da 02 00 00       	call   5600 <_ZNSt3__17forwardB8nn210000IPmEEOT_Ru20__remove_reference_tIS2_E>
    5326:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    532a:	48 89 c2             	mov    %rax,%rdx
    532d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    5331:	e8 5a 03 00 00       	call   5690 <_ZNSt3__14pairIPKmPmEC2B8nn210000IS2_S3_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS7_OS8_>
    5336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    533a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    533e:	48 83 c4 30          	add    $0x30,%rsp
    5342:	5d                   	pop    %rbp
    5343:	c3                   	ret
    5344:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    534b:	00 00 00 
    534e:	66 90                	xchg   %ax,%ax

0000000000005350 <_ZNSt3__114__rewrap_rangeB8nn210000IPKmS2_S2_EET0_S3_T1_>:
}

template < class _Sent, class _Iter, class _Unwrapped>
_LIBCPP_HIDE_FROM_ABI constexpr _Iter __rewrap_range(_Iter __orig_iter, _Unwrapped __iter) {
    5350:	55                   	push   %rbp
    5351:	48 89 e5             	mov    %rsp,%rbp
    5354:	48 83 ec 20          	sub    $0x20,%rsp
    5358:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    535c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5360:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return __unwrap_range_impl<_Iter, _Sent>::__rewrap(std::move(__orig_iter), std::move(__iter));
    5364:	e8 c7 fe ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    5369:	48 8b 00             	mov    (%rax),%rax
    536c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5370:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    5374:	e8 b7 fe ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    5379:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    537d:	48 8b 30             	mov    (%rax),%rsi
    5380:	e8 5b 03 00 00       	call   56e0 <_ZNSt3__119__unwrap_range_implIPKmS2_E8__rewrapB8nn210000ES2_S2_>
    5385:	48 83 c4 20          	add    $0x20,%rsp
    5389:	5d                   	pop    %rbp
    538a:	c3                   	ret
    538b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005390 <_ZNSt3__113__rewrap_iterB8nn210000IPmS1_NS_18__unwrap_iter_implIS1_Lb1EEEEET_S4_T0_>:
  return __i;
}
#endif

template <class _OrigIter, class _Iter, class _Impl = __unwrap_iter_impl<_OrigIter> >
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) _NOEXCEPT {
    5390:	55                   	push   %rbp
    5391:	48 89 e5             	mov    %rsp,%rbp
    5394:	48 83 ec 20          	sub    $0x20,%rsp
    5398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    539c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    53a0:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
    53a4:	e8 97 fe ff ff       	call   5240 <_ZNSt3__14moveB8nn210000IRPmEEOu20__remove_reference_tIT_EOS3_>
    53a9:	48 8b 00             	mov    (%rax),%rax
    53ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    53b0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    53b4:	e8 87 fe ff ff       	call   5240 <_ZNSt3__14moveB8nn210000IRPmEEOu20__remove_reference_tIT_EOS3_>
    53b9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    53bd:	48 8b 30             	mov    (%rax),%rsi
    53c0:	e8 eb 03 00 00       	call   57b0 <_ZNSt3__118__unwrap_iter_implIPmLb1EE8__rewrapB8nn210000ES1_S1_>
    53c5:	48 83 c4 20          	add    $0x20,%rsp
    53c9:	5d                   	pop    %rbp
    53ca:	c3                   	ret
    53cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000053d0 <_ZNSt3__119__unwrap_range_implIPKmS2_E8__unwrapB8nn210000ES2_S2_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr auto __unwrap(_Iter __first, _Iter __last) {
    53d0:	55                   	push   %rbp
    53d1:	48 89 e5             	mov    %rsp,%rbp
    53d4:	48 83 ec 30          	sub    $0x30,%rsp
    53d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    53dc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    53e0:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    return pair{std::__unwrap_iter(std::move(__first)), std::__unwrap_iter(std::move(__last))};
    53e4:	e8 47 fe ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    53e9:	48 8b 38             	mov    (%rax),%rdi
    53ec:	e8 3f 00 00 00       	call   5430 <_ZNSt3__113__unwrap_iterB8nn210000IPKmNS_18__unwrap_iter_implIS2_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS6_EEEES6_>
    53f1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    53f5:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    53f9:	e8 32 fe ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    53fe:	48 8b 38             	mov    (%rax),%rdi
    5401:	e8 2a 00 00 00       	call   5430 <_ZNSt3__113__unwrap_iterB8nn210000IPKmNS_18__unwrap_iter_implIS2_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS6_EEEES6_>
    5406:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    540a:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    540e:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
    5412:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    5416:	e8 35 00 00 00       	call   5450 <_ZNSt3__14pairIPKmS2_EC2B8nn210000IS2_S2_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>
    541b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    541f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5423:	48 83 c4 30          	add    $0x30,%rsp
    5427:	5d                   	pop    %rbp
    5428:	c3                   	ret
    5429:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000005430 <_ZNSt3__113__unwrap_iterB8nn210000IPKmNS_18__unwrap_iter_implIS2_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS6_EEEES6_>:
__unwrap_iter(_Iter __i) _NOEXCEPT {
    5430:	55                   	push   %rbp
    5431:	48 89 e5             	mov    %rsp,%rbp
    5434:	48 83 ec 10          	sub    $0x10,%rsp
    5438:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return _Impl::__unwrap(__i);
    543c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5440:	e8 5b 00 00 00       	call   54a0 <_ZNSt3__118__unwrap_iter_implIPKmLb1EE8__unwrapB8nn210000ES2_>
    5445:	48 83 c4 10          	add    $0x10,%rsp
    5449:	5d                   	pop    %rbp
    544a:	c3                   	ret
    544b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005450 <_ZNSt3__14pairIPKmS2_EC2B8nn210000IS2_S2_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
    5450:	55                   	push   %rbp
    5451:	48 89 e5             	mov    %rsp,%rbp
    5454:	48 83 ec 20          	sub    $0x20,%rsp
    5458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    545c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5460:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    5464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5468:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    546c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5470:	e8 5b 00 00 00       	call   54d0 <_ZNSt3__17forwardB8nn210000IPKmEEOT_Ru20__remove_reference_tIS3_E>
    5475:	48 89 c1             	mov    %rax,%rcx
    5478:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    547c:	48 8b 09             	mov    (%rcx),%rcx
    547f:	48 89 08             	mov    %rcx,(%rax)
    5482:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    5486:	e8 45 00 00 00       	call   54d0 <_ZNSt3__17forwardB8nn210000IPKmEEOT_Ru20__remove_reference_tIS3_E>
    548b:	48 89 c1             	mov    %rax,%rcx
    548e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5492:	48 8b 09             	mov    (%rcx),%rcx
    5495:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
    5499:	48 83 c4 20          	add    $0x20,%rsp
    549d:	5d                   	pop    %rbp
    549e:	c3                   	ret
    549f:	90                   	nop

00000000000054a0 <_ZNSt3__118__unwrap_iter_implIPKmLb1EE8__unwrapB8nn210000ES2_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ToAddressT __unwrap(_Iter __i) _NOEXCEPT {
    54a0:	55                   	push   %rbp
    54a1:	48 89 e5             	mov    %rsp,%rbp
    54a4:	48 83 ec 10          	sub    $0x10,%rsp
    54a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::__to_address(__i);
    54ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    54b0:	e8 0b 00 00 00       	call   54c0 <_ZNSt3__112__to_addressB8nn210000IKmEEPT_S3_>
    54b5:	48 83 c4 10          	add    $0x10,%rsp
    54b9:	5d                   	pop    %rbp
    54ba:	c3                   	ret
    54bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000054c0 <_ZNSt3__112__to_addressB8nn210000IKmEEPT_S3_>:

template <class _Pointer, class = void>
struct __to_address_helper;

template <class _Tp>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp* __to_address(_Tp* __p) _NOEXCEPT {
    54c0:	55                   	push   %rbp
    54c1:	48 89 e5             	mov    %rsp,%rbp
    54c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  static_assert(!is_function<_Tp>::value, "_Tp is a function type");
  return __p;
    54c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    54cc:	5d                   	pop    %rbp
    54cd:	c3                   	ret
    54ce:	66 90                	xchg   %ax,%ax

00000000000054d0 <_ZNSt3__17forwardB8nn210000IPKmEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    54d0:	55                   	push   %rbp
    54d1:	48 89 e5             	mov    %rsp,%rbp
    54d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    54d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    54dc:	5d                   	pop    %rbp
    54dd:	c3                   	ret
    54de:	66 90                	xchg   %ax,%ax

00000000000054e0 <_ZNSt3__119__copy_trivial_implB8nn210000IKmmEENS_4pairIPT_PT0_EES4_S4_S6_>:
__copy_trivial_impl(_In* __first, _In* __last, _Out* __result) {
    54e0:	55                   	push   %rbp
    54e1:	48 89 e5             	mov    %rsp,%rbp
    54e4:	48 83 ec 40          	sub    $0x40,%rsp
    54e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    54ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    54f0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  const size_t __n = static_cast<size_t>(__last - __first);
    54f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    54f8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    54fc:	48 29 c8             	sub    %rcx,%rax
    54ff:	48 c1 f8 03          	sar    $0x3,%rax
    5503:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  std::__constexpr_memmove(__result, __first, __element_count(__n));
    5507:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    550b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    550f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    5513:	e8 38 00 00 00       	call   5550 <_ZNSt3__119__constexpr_memmoveB8nn210000ImKmEEPT_S3_PT0_NS_15__element_countE>
  return std::make_pair(__last, __result + __n);
    5518:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    551c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5520:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
    5524:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5528:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    552c:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
    5530:	e8 6b 00 00 00       	call   55a0 <_ZNSt3__19make_pairB8nn210000IRPKmPmEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS6_Iu7__decayIT0_EE4typeEEEOS7_OSB_>
    5535:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    5539:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    553d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5541:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5545:	48 83 c4 40          	add    $0x40,%rsp
    5549:	5d                   	pop    %rbp
    554a:	c3                   	ret
    554b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005550 <_ZNSt3__119__constexpr_memmoveB8nn210000ImKmEEPT_S3_PT0_NS_15__element_countE>:
  return __dest;
}

template <class _Tp, class _Up>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 _Tp*
__constexpr_memmove(_Tp* __dest, _Up* __src, __element_count __n) {
    5550:	55                   	push   %rbp
    5551:	48 89 e5             	mov    %rsp,%rbp
    5554:	48 83 ec 20          	sub    $0x20,%rsp
    5558:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    555c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5560:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  static_assert(__is_always_bitcastable<_Up, _Tp>::value);
  size_t __count = static_cast<size_t>(__n);
    5564:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5568:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      } else {
        for (size_t __i = 0; __i != __count; ++__i)
          std::__assign_trivially_copyable(__dest[__i], __src[__i]);
      }
    }
  } else if (__count > 0) {
    556c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    5571:	76 1d                	jbe    5590 <_ZNSt3__119__constexpr_memmoveB8nn210000ImKmEEPT_S3_PT0_NS_15__element_countE+0x40>
    ::__builtin_memmove(__dest, __src, (__count - 1) * sizeof(_Tp) + __datasizeof_v<_Tp>);
    5573:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5577:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    557b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    557f:	48 83 ea 01          	sub    $0x1,%rdx
    5583:	48 c1 e2 03          	shl    $0x3,%rdx
    5587:	48 83 c2 08          	add    $0x8,%rdx
    558b:	e8 30 3c 01 00       	call   191c0 <memmove>
  }
  return __dest;
    5590:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5594:	48 83 c4 20          	add    $0x20,%rsp
    5598:	5d                   	pop    %rbp
    5599:	c3                   	ret
    559a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000055a0 <_ZNSt3__19make_pairB8nn210000IRPKmPmEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS6_Iu7__decayIT0_EE4typeEEEOS7_OSB_>:
make_pair(_T1&& __t1, _T2&& __t2) {
    55a0:	55                   	push   %rbp
    55a1:	48 89 e5             	mov    %rsp,%rbp
    55a4:	48 83 ec 30          	sub    $0x30,%rsp
    55a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    55ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
    55b0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    55b4:	e8 37 00 00 00       	call   55f0 <_ZNSt3__17forwardB8nn210000IRPKmEEOT_Ru20__remove_reference_tIS4_E>
    55b9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    55bd:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    55c1:	e8 3a 00 00 00       	call   5600 <_ZNSt3__17forwardB8nn210000IPmEEOT_Ru20__remove_reference_tIS2_E>
    55c6:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    55ca:	48 89 c2             	mov    %rax,%rdx
    55cd:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    55d1:	e8 3a 00 00 00       	call   5610 <_ZNSt3__14pairIPKmPmEC2B8nn210000IRS2_S3_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS8_OS9_>
    55d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    55da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    55de:	48 83 c4 30          	add    $0x30,%rsp
    55e2:	5d                   	pop    %rbp
    55e3:	c3                   	ret
    55e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    55eb:	00 00 00 
    55ee:	66 90                	xchg   %ax,%ax

00000000000055f0 <_ZNSt3__17forwardB8nn210000IRPKmEEOT_Ru20__remove_reference_tIS4_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    55f0:	55                   	push   %rbp
    55f1:	48 89 e5             	mov    %rsp,%rbp
    55f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    55f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    55fc:	5d                   	pop    %rbp
    55fd:	c3                   	ret
    55fe:	66 90                	xchg   %ax,%ax

0000000000005600 <_ZNSt3__17forwardB8nn210000IPmEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    5600:	55                   	push   %rbp
    5601:	48 89 e5             	mov    %rsp,%rbp
    5604:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    5608:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    560c:	5d                   	pop    %rbp
    560d:	c3                   	ret
    560e:	66 90                	xchg   %ax,%ax

0000000000005610 <_ZNSt3__14pairIPKmPmEC2B8nn210000IRS2_S3_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS8_OS9_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
    5610:	55                   	push   %rbp
    5611:	48 89 e5             	mov    %rsp,%rbp
    5614:	48 83 ec 20          	sub    $0x20,%rsp
    5618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    561c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5620:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    5624:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5628:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    562c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5630:	e8 bb ff ff ff       	call   55f0 <_ZNSt3__17forwardB8nn210000IRPKmEEOT_Ru20__remove_reference_tIS4_E>
    5635:	48 89 c1             	mov    %rax,%rcx
    5638:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    563c:	48 8b 09             	mov    (%rcx),%rcx
    563f:	48 89 08             	mov    %rcx,(%rax)
    5642:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    5646:	e8 b5 ff ff ff       	call   5600 <_ZNSt3__17forwardB8nn210000IPmEEOT_Ru20__remove_reference_tIS2_E>
    564b:	48 89 c1             	mov    %rax,%rcx
    564e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5652:	48 8b 09             	mov    (%rcx),%rcx
    5655:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
    5659:	48 83 c4 20          	add    $0x20,%rsp
    565d:	5d                   	pop    %rbp
    565e:	c3                   	ret
    565f:	90                   	nop

0000000000005660 <_ZNSt3__118__unwrap_iter_implIPmLb1EE8__unwrapB8nn210000ES1_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ToAddressT __unwrap(_Iter __i) _NOEXCEPT {
    5660:	55                   	push   %rbp
    5661:	48 89 e5             	mov    %rsp,%rbp
    5664:	48 83 ec 10          	sub    $0x10,%rsp
    5668:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::__to_address(__i);
    566c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5670:	e8 0b 00 00 00       	call   5680 <_ZNSt3__112__to_addressB8nn210000ImEEPT_S2_>
    5675:	48 83 c4 10          	add    $0x10,%rsp
    5679:	5d                   	pop    %rbp
    567a:	c3                   	ret
    567b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005680 <_ZNSt3__112__to_addressB8nn210000ImEEPT_S2_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp* __to_address(_Tp* __p) _NOEXCEPT {
    5680:	55                   	push   %rbp
    5681:	48 89 e5             	mov    %rsp,%rbp
    5684:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __p;
    5688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    568c:	5d                   	pop    %rbp
    568d:	c3                   	ret
    568e:	66 90                	xchg   %ax,%ax

0000000000005690 <_ZNSt3__14pairIPKmPmEC2B8nn210000IS2_S3_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS7_OS8_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
    5690:	55                   	push   %rbp
    5691:	48 89 e5             	mov    %rsp,%rbp
    5694:	48 83 ec 20          	sub    $0x20,%rsp
    5698:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    569c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    56a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    56a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    56a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    56ac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    56b0:	e8 1b fe ff ff       	call   54d0 <_ZNSt3__17forwardB8nn210000IPKmEEOT_Ru20__remove_reference_tIS3_E>
    56b5:	48 89 c1             	mov    %rax,%rcx
    56b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    56bc:	48 8b 09             	mov    (%rcx),%rcx
    56bf:	48 89 08             	mov    %rcx,(%rax)
    56c2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    56c6:	e8 35 ff ff ff       	call   5600 <_ZNSt3__17forwardB8nn210000IPmEEOT_Ru20__remove_reference_tIS2_E>
    56cb:	48 89 c1             	mov    %rax,%rcx
    56ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    56d2:	48 8b 09             	mov    (%rcx),%rcx
    56d5:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
    56d9:	48 83 c4 20          	add    $0x20,%rsp
    56dd:	5d                   	pop    %rbp
    56de:	c3                   	ret
    56df:	90                   	nop

00000000000056e0 <_ZNSt3__119__unwrap_range_implIPKmS2_E8__rewrapB8nn210000ES2_S2_>:
  __rewrap(_Iter __orig_iter, decltype(std::__unwrap_iter(__orig_iter)) __iter) {
    56e0:	55                   	push   %rbp
    56e1:	48 89 e5             	mov    %rsp,%rbp
    56e4:	48 83 ec 20          	sub    $0x20,%rsp
    56e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    56ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    56f0:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
    return std::__rewrap_iter(std::move(__orig_iter), std::move(__iter));
    56f4:	e8 37 fb ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    56f9:	48 8b 00             	mov    (%rax),%rax
    56fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5700:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    5704:	e8 27 fb ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    5709:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    570d:	48 8b 30             	mov    (%rax),%rsi
    5710:	e8 0b 00 00 00       	call   5720 <_ZNSt3__113__rewrap_iterB8nn210000IPKmS2_NS_18__unwrap_iter_implIS2_Lb1EEEEET_S5_T0_>
    5715:	48 83 c4 20          	add    $0x20,%rsp
    5719:	5d                   	pop    %rbp
    571a:	c3                   	ret
    571b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005720 <_ZNSt3__113__rewrap_iterB8nn210000IPKmS2_NS_18__unwrap_iter_implIS2_Lb1EEEEET_S5_T0_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) _NOEXCEPT {
    5720:	55                   	push   %rbp
    5721:	48 89 e5             	mov    %rsp,%rbp
    5724:	48 83 ec 20          	sub    $0x20,%rsp
    5728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    572c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5730:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
    5734:	e8 f7 fa ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    5739:	48 8b 00             	mov    (%rax),%rax
    573c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5740:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    5744:	e8 e7 fa ff ff       	call   5230 <_ZNSt3__14moveB8nn210000IRPKmEEOu20__remove_reference_tIT_EOS4_>
    5749:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    574d:	48 8b 30             	mov    (%rax),%rsi
    5750:	e8 0b 00 00 00       	call   5760 <_ZNSt3__118__unwrap_iter_implIPKmLb1EE8__rewrapB8nn210000ES2_S2_>
    5755:	48 83 c4 20          	add    $0x20,%rsp
    5759:	5d                   	pop    %rbp
    575a:	c3                   	ret
    575b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005760 <_ZNSt3__118__unwrap_iter_implIPKmLb1EE8__rewrapB8nn210000ES2_S2_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter) {
    5760:	55                   	push   %rbp
    5761:	48 89 e5             	mov    %rsp,%rbp
    5764:	48 83 ec 20          	sub    $0x20,%rsp
    5768:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    576c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __orig_iter + (__unwrapped_iter - std::__to_address(__orig_iter));
    5770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5774:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5778:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    577c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    5780:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5784:	e8 37 fd ff ff       	call   54c0 <_ZNSt3__112__to_addressB8nn210000IKmEEPT_S3_>
    5789:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    578d:	48 89 c2             	mov    %rax,%rdx
    5790:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5794:	48 29 d1             	sub    %rdx,%rcx
    5797:	48 c1 f9 03          	sar    $0x3,%rcx
    579b:	48 c1 e1 03          	shl    $0x3,%rcx
    579f:	48 01 c8             	add    %rcx,%rax
    57a2:	48 83 c4 20          	add    $0x20,%rsp
    57a6:	5d                   	pop    %rbp
    57a7:	c3                   	ret
    57a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    57af:	00 

00000000000057b0 <_ZNSt3__118__unwrap_iter_implIPmLb1EE8__rewrapB8nn210000ES1_S1_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter) {
    57b0:	55                   	push   %rbp
    57b1:	48 89 e5             	mov    %rsp,%rbp
    57b4:	48 83 ec 20          	sub    $0x20,%rsp
    57b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    57bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __orig_iter + (__unwrapped_iter - std::__to_address(__orig_iter));
    57c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    57c4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    57c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    57cc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    57d0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    57d4:	e8 a7 fe ff ff       	call   5680 <_ZNSt3__112__to_addressB8nn210000ImEEPT_S2_>
    57d9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    57dd:	48 89 c2             	mov    %rax,%rdx
    57e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    57e4:	48 29 d1             	sub    %rdx,%rcx
    57e7:	48 c1 f9 03          	sar    $0x3,%rcx
    57eb:	48 c1 e1 03          	shl    $0x3,%rcx
    57ef:	48 01 c8             	add    %rcx,%rax
    57f2:	48 83 c4 20          	add    $0x20,%rsp
    57f6:	5d                   	pop    %rbp
    57f7:	c3                   	ret
    57f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    57ff:	00 

0000000000005800 <_ZN4arch6SysRegINS_3Cr4EECI2N4ustl9bitfields13BitFieldsImplImNS3_8TypeListIJNS4_13FieldMetaDataImLi0ELi0ELi1EmXtlNS3_4util11FixedStringILm4EEEtlA4_cLc118ELc109ELc101EEEELb1EEENS7_ImLi1ELi1ELi1EmXtlSA_tlSB_Lc112ELc118ELc105EEEELb1EEENS7_ImLi2ELi2ELi1EmXtlSA_tlSB_Lc116ELc115ELc100EEEELb1EEENS7_ImLi3ELi3ELi1EmXtlNS9_ILm3EEEtlA3_cLc100ELc101EEEELb1EEENS7_ImLi4ELi4ELi1EmXtlSA_tlSB_Lc112ELc115ELc101EEEELb1EEENS7_ImLi5ELi5ELi1EmXtlSA_tlSB_Lc112ELc97ELc101EEEELb1EEENS7_ImLi6ELi6ELi1EmXtlSA_tlSB_Lc109ELc99ELc101EEEELb1EEENS7_ImLi7ELi7ELi1EmXtlSA_tlSB_Lc112ELc103ELc101EEEELb1EEENS7_ImLi8ELi8ELi1EmXtlSA_tlSB_Lc112ELc99ELc101EEEELb1EEENS7_ImLi9ELi9ELi1EmXtlNS9_ILm7EEEtlA7_cLc111ELc115ELc102ELc120ELc115ELc114EEEELb1EEENS7_ImLi10ELi10ELi1EmXtlNS9_ILm10EEEtlA10_cLc111ELc115ELc109ELc109ELc101ELc120ELc99ELc112ELc116EEEELb1EEENS7_ImLi11ELi11ELi1EmXtlNS9_ILm5EEEtlA5_cLc117ELc109ELc105ELc112EEEELb1EEENS7_ImLi12ELi12ELi1EmXtlST_tlSU_Lc108ELc97ELc53ELc55EEEELb1EEENS7_ImLi13ELi13ELi1EmXtlST_tlSU_Lc118ELc109ELc120ELc101EEEELb1EEENS7_ImLi14ELi14ELi1EmXtlST_tlSU_Lc115ELc109ELc120ELc101EEEELb1EEENS7_ImLi16ELi16ELi1EmXtlNS9_ILm9EEEtlA9_cLc70ELc115ELc71ELc115ELc66ELc97ELc115ELc101EEEELb1EEENS7_ImLi17ELi17ELi1EmXtlNS9_ILm6EEEtlA6_cLc80ELc99ELc105ELc100ELc101EEEELb1EEENS7_ImLi18ELi18ELi1EmXtlNS9_ILm8EEEtlA8_cLc111ELc115ELc120ELc115ELc97ELc118ELc101EEEELb1EEENS7_ImLi20ELi20ELi1EmXtlST_tlSU_Lc115ELc109ELc101ELc112EEEELb1EEENS7_ImLi21ELi21ELi1EmXtlST_tlSU_Lc115ELc109ELc97ELc112EEEELb1EEENS7_ImLi22ELi22ELi1EmXtlSA_tlSB_Lc112ELc107ELc101EEEELb1EEENS7_ImLi23ELi23ELi1EmXtlSA_tlSB_Lc99ELc101ELc116EEEELb1EEENS7_ImLi24ELi24ELi1EmXtlSA_tlSB_Lc112ELc107ELc115EEEELb1EEEEEEEEERKSt16initializer_listImE>:
    5800:	55                   	push   %rbp
    5801:	48 89 e5             	mov    %rsp,%rbp
    5804:	48 83 ec 10          	sub    $0x10,%rsp
    5808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    580c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5810:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5814:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    5818:	e8 13 00 00 00       	call   5830 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc118ELc109ELc101EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc112ELc118ELc105EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc116ELc115ELc100EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm3EEEtlA3_cLc100ELc101EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlS6_tlS7_Lc112ELc115ELc101EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlS6_tlS7_Lc112ELc97ELc101EEEELb1EEENS3_ImLi6ELi6ELi1EmXtlS6_tlS7_Lc109ELc99ELc101EEEELb1EEENS3_ImLi7ELi7ELi1EmXtlS6_tlS7_Lc112ELc103ELc101EEEELb1EEENS3_ImLi8ELi8ELi1EmXtlS6_tlS7_Lc112ELc99ELc101EEEELb1EEENS3_ImLi9ELi9ELi1EmXtlNS5_ILm7EEEtlA7_cLc111ELc115ELc102ELc120ELc115ELc114EEEELb1EEENS3_ImLi10ELi10ELi1EmXtlNS5_ILm10EEEtlA10_cLc111ELc115ELc109ELc109ELc101ELc120ELc99ELc112ELc116EEEELb1EEENS3_ImLi11ELi11ELi1EmXtlNS5_ILm5EEEtlA5_cLc117ELc109ELc105ELc112EEEELb1EEENS3_ImLi12ELi12ELi1EmXtlSP_tlSQ_Lc108ELc97ELc53ELc55EEEELb1EEENS3_ImLi13ELi13ELi1EmXtlSP_tlSQ_Lc118ELc109ELc120ELc101EEEELb1EEENS3_ImLi14ELi14ELi1EmXtlSP_tlSQ_Lc115ELc109ELc120ELc101EEEELb1EEENS3_ImLi16ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc70ELc115ELc71ELc115ELc66ELc97ELc115ELc101EEEELb1EEENS3_ImLi17ELi17ELi1EmXtlNS5_ILm6EEEtlA6_cLc80ELc99ELc105ELc100ELc101EEEELb1EEENS3_ImLi18ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc111ELc115ELc120ELc115ELc97ELc118ELc101EEEELb1EEENS3_ImLi20ELi20ELi1EmXtlSP_tlSQ_Lc115ELc109ELc101ELc112EEEELb1EEENS3_ImLi21ELi21ELi1EmXtlSP_tlSQ_Lc115ELc109ELc97ELc112EEEELb1EEENS3_ImLi22ELi22ELi1EmXtlS6_tlS7_Lc112ELc107ELc101EEEELb1EEENS3_ImLi23ELi23ELi1EmXtlS6_tlS7_Lc99ELc101ELc116EEEELb1EEENS3_ImLi24ELi24ELi1EmXtlS6_tlS7_Lc112ELc107ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE>
    581d:	48 83 c4 10          	add    $0x10,%rsp
    5821:	5d                   	pop    %rbp
    5822:	c3                   	ret
    5823:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    582a:	00 00 00 
    582d:	0f 1f 00             	nopl   (%rax)

0000000000005830 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc118ELc109ELc101EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc112ELc118ELc105EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc116ELc115ELc100EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm3EEEtlA3_cLc100ELc101EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlS6_tlS7_Lc112ELc115ELc101EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlS6_tlS7_Lc112ELc97ELc101EEEELb1EEENS3_ImLi6ELi6ELi1EmXtlS6_tlS7_Lc109ELc99ELc101EEEELb1EEENS3_ImLi7ELi7ELi1EmXtlS6_tlS7_Lc112ELc103ELc101EEEELb1EEENS3_ImLi8ELi8ELi1EmXtlS6_tlS7_Lc112ELc99ELc101EEEELb1EEENS3_ImLi9ELi9ELi1EmXtlNS5_ILm7EEEtlA7_cLc111ELc115ELc102ELc120ELc115ELc114EEEELb1EEENS3_ImLi10ELi10ELi1EmXtlNS5_ILm10EEEtlA10_cLc111ELc115ELc109ELc109ELc101ELc120ELc99ELc112ELc116EEEELb1EEENS3_ImLi11ELi11ELi1EmXtlNS5_ILm5EEEtlA5_cLc117ELc109ELc105ELc112EEEELb1EEENS3_ImLi12ELi12ELi1EmXtlSP_tlSQ_Lc108ELc97ELc53ELc55EEEELb1EEENS3_ImLi13ELi13ELi1EmXtlSP_tlSQ_Lc118ELc109ELc120ELc101EEEELb1EEENS3_ImLi14ELi14ELi1EmXtlSP_tlSQ_Lc115ELc109ELc120ELc101EEEELb1EEENS3_ImLi16ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc70ELc115ELc71ELc115ELc66ELc97ELc115ELc101EEEELb1EEENS3_ImLi17ELi17ELi1EmXtlNS5_ILm6EEEtlA6_cLc80ELc99ELc105ELc100ELc101EEEELb1EEENS3_ImLi18ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc111ELc115ELc120ELc115ELc97ELc118ELc101EEEELb1EEENS3_ImLi20ELi20ELi1EmXtlSP_tlSQ_Lc115ELc109ELc101ELc112EEEELb1EEENS3_ImLi21ELi21ELi1EmXtlSP_tlSQ_Lc115ELc109ELc97ELc112EEEELb1EEENS3_ImLi22ELi22ELi1EmXtlS6_tlS7_Lc112ELc107ELc101EEEELb1EEENS3_ImLi23ELi23ELi1EmXtlS6_tlS7_Lc99ELc101ELc116EEEELb1EEENS3_ImLi24ELi24ELi1EmXtlS6_tlS7_Lc112ELc107ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE>:
        BitFieldsImpl(ustl::InitializerList<usize> const &val) {
    5830:	55                   	push   %rbp
    5831:	48 89 e5             	mov    %rsp,%rbp
    5834:	48 83 ec 30          	sub    $0x30,%rsp
    5838:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    583c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5844:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            ustl::algorithms::copy_n(val.begin(), NUM_UNITS > val.size() ? val.size() : NUM_UNITS, values);
    5848:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    584c:	e8 cf f7 ff ff       	call   5020 <_ZNKSt16initializer_listImE5beginB8nn210000Ev>
    5851:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5855:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5859:	e8 e2 f7 ff ff       	call   5040 <_ZNKSt16initializer_listImE4sizeB8nn210000Ev>
    585e:	48 89 c1             	mov    %rax,%rcx
    5861:	b8 01 00 00 00       	mov    $0x1,%eax
    5866:	48 39 c8             	cmp    %rcx,%rax
    5869:	76 0f                	jbe    587a <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc118ELc109ELc101EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc112ELc118ELc105EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc116ELc115ELc100EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm3EEEtlA3_cLc100ELc101EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlS6_tlS7_Lc112ELc115ELc101EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlS6_tlS7_Lc112ELc97ELc101EEEELb1EEENS3_ImLi6ELi6ELi1EmXtlS6_tlS7_Lc109ELc99ELc101EEEELb1EEENS3_ImLi7ELi7ELi1EmXtlS6_tlS7_Lc112ELc103ELc101EEEELb1EEENS3_ImLi8ELi8ELi1EmXtlS6_tlS7_Lc112ELc99ELc101EEEELb1EEENS3_ImLi9ELi9ELi1EmXtlNS5_ILm7EEEtlA7_cLc111ELc115ELc102ELc120ELc115ELc114EEEELb1EEENS3_ImLi10ELi10ELi1EmXtlNS5_ILm10EEEtlA10_cLc111ELc115ELc109ELc109ELc101ELc120ELc99ELc112ELc116EEEELb1EEENS3_ImLi11ELi11ELi1EmXtlNS5_ILm5EEEtlA5_cLc117ELc109ELc105ELc112EEEELb1EEENS3_ImLi12ELi12ELi1EmXtlSP_tlSQ_Lc108ELc97ELc53ELc55EEEELb1EEENS3_ImLi13ELi13ELi1EmXtlSP_tlSQ_Lc118ELc109ELc120ELc101EEEELb1EEENS3_ImLi14ELi14ELi1EmXtlSP_tlSQ_Lc115ELc109ELc120ELc101EEEELb1EEENS3_ImLi16ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc70ELc115ELc71ELc115ELc66ELc97ELc115ELc101EEEELb1EEENS3_ImLi17ELi17ELi1EmXtlNS5_ILm6EEEtlA6_cLc80ELc99ELc105ELc100ELc101EEEELb1EEENS3_ImLi18ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc111ELc115ELc120ELc115ELc97ELc118ELc101EEEELb1EEENS3_ImLi20ELi20ELi1EmXtlSP_tlSQ_Lc115ELc109ELc101ELc112EEEELb1EEENS3_ImLi21ELi21ELi1EmXtlSP_tlSQ_Lc115ELc109ELc97ELc112EEEELb1EEENS3_ImLi22ELi22ELi1EmXtlS6_tlS7_Lc112ELc107ELc101EEEELb1EEENS3_ImLi23ELi23ELi1EmXtlS6_tlS7_Lc99ELc101ELc116EEEELb1EEENS3_ImLi24ELi24ELi1EmXtlS6_tlS7_Lc112ELc107ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x4a>
    586b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    586f:	e8 cc f7 ff ff       	call   5040 <_ZNKSt16initializer_listImE4sizeB8nn210000Ev>
    5874:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5878:	eb 0b                	jmp    5885 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc118ELc109ELc101EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc112ELc118ELc105EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc116ELc115ELc100EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm3EEEtlA3_cLc100ELc101EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlS6_tlS7_Lc112ELc115ELc101EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlS6_tlS7_Lc112ELc97ELc101EEEELb1EEENS3_ImLi6ELi6ELi1EmXtlS6_tlS7_Lc109ELc99ELc101EEEELb1EEENS3_ImLi7ELi7ELi1EmXtlS6_tlS7_Lc112ELc103ELc101EEEELb1EEENS3_ImLi8ELi8ELi1EmXtlS6_tlS7_Lc112ELc99ELc101EEEELb1EEENS3_ImLi9ELi9ELi1EmXtlNS5_ILm7EEEtlA7_cLc111ELc115ELc102ELc120ELc115ELc114EEEELb1EEENS3_ImLi10ELi10ELi1EmXtlNS5_ILm10EEEtlA10_cLc111ELc115ELc109ELc109ELc101ELc120ELc99ELc112ELc116EEEELb1EEENS3_ImLi11ELi11ELi1EmXtlNS5_ILm5EEEtlA5_cLc117ELc109ELc105ELc112EEEELb1EEENS3_ImLi12ELi12ELi1EmXtlSP_tlSQ_Lc108ELc97ELc53ELc55EEEELb1EEENS3_ImLi13ELi13ELi1EmXtlSP_tlSQ_Lc118ELc109ELc120ELc101EEEELb1EEENS3_ImLi14ELi14ELi1EmXtlSP_tlSQ_Lc115ELc109ELc120ELc101EEEELb1EEENS3_ImLi16ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc70ELc115ELc71ELc115ELc66ELc97ELc115ELc101EEEELb1EEENS3_ImLi17ELi17ELi1EmXtlNS5_ILm6EEEtlA6_cLc80ELc99ELc105ELc100ELc101EEEELb1EEENS3_ImLi18ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc111ELc115ELc120ELc115ELc97ELc118ELc101EEEELb1EEENS3_ImLi20ELi20ELi1EmXtlSP_tlSQ_Lc115ELc109ELc101ELc112EEEELb1EEENS3_ImLi21ELi21ELi1EmXtlSP_tlSQ_Lc115ELc109ELc97ELc112EEEELb1EEENS3_ImLi22ELi22ELi1EmXtlS6_tlS7_Lc112ELc107ELc101EEEELb1EEENS3_ImLi23ELi23ELi1EmXtlS6_tlS7_Lc99ELc101ELc116EEEELb1EEENS3_ImLi24ELi24ELi1EmXtlS6_tlS7_Lc112ELc107ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x55>
    587a:	b8 01 00 00 00       	mov    $0x1,%eax
    587f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5883:	eb 00                	jmp    5885 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi1EmXtlNS_4util11FixedStringILm4EEEtlA4_cLc118ELc109ELc101EEEELb1EEENS3_ImLi1ELi1ELi1EmXtlS6_tlS7_Lc112ELc118ELc105EEEELb1EEENS3_ImLi2ELi2ELi1EmXtlS6_tlS7_Lc116ELc115ELc100EEEELb1EEENS3_ImLi3ELi3ELi1EmXtlNS5_ILm3EEEtlA3_cLc100ELc101EEEELb1EEENS3_ImLi4ELi4ELi1EmXtlS6_tlS7_Lc112ELc115ELc101EEEELb1EEENS3_ImLi5ELi5ELi1EmXtlS6_tlS7_Lc112ELc97ELc101EEEELb1EEENS3_ImLi6ELi6ELi1EmXtlS6_tlS7_Lc109ELc99ELc101EEEELb1EEENS3_ImLi7ELi7ELi1EmXtlS6_tlS7_Lc112ELc103ELc101EEEELb1EEENS3_ImLi8ELi8ELi1EmXtlS6_tlS7_Lc112ELc99ELc101EEEELb1EEENS3_ImLi9ELi9ELi1EmXtlNS5_ILm7EEEtlA7_cLc111ELc115ELc102ELc120ELc115ELc114EEEELb1EEENS3_ImLi10ELi10ELi1EmXtlNS5_ILm10EEEtlA10_cLc111ELc115ELc109ELc109ELc101ELc120ELc99ELc112ELc116EEEELb1EEENS3_ImLi11ELi11ELi1EmXtlNS5_ILm5EEEtlA5_cLc117ELc109ELc105ELc112EEEELb1EEENS3_ImLi12ELi12ELi1EmXtlSP_tlSQ_Lc108ELc97ELc53ELc55EEEELb1EEENS3_ImLi13ELi13ELi1EmXtlSP_tlSQ_Lc118ELc109ELc120ELc101EEEELb1EEENS3_ImLi14ELi14ELi1EmXtlSP_tlSQ_Lc115ELc109ELc120ELc101EEEELb1EEENS3_ImLi16ELi16ELi1EmXtlNS5_ILm9EEEtlA9_cLc70ELc115ELc71ELc115ELc66ELc97ELc115ELc101EEEELb1EEENS3_ImLi17ELi17ELi1EmXtlNS5_ILm6EEEtlA6_cLc80ELc99ELc105ELc100ELc101EEEELb1EEENS3_ImLi18ELi18ELi1EmXtlNS5_ILm8EEEtlA8_cLc111ELc115ELc120ELc115ELc97ELc118ELc101EEEELb1EEENS3_ImLi20ELi20ELi1EmXtlSP_tlSQ_Lc115ELc109ELc101ELc112EEEELb1EEENS3_ImLi21ELi21ELi1EmXtlSP_tlSQ_Lc115ELc109ELc97ELc112EEEELb1EEENS3_ImLi22ELi22ELi1EmXtlS6_tlS7_Lc112ELc107ELc101EEEELb1EEENS3_ImLi23ELi23ELi1EmXtlS6_tlS7_Lc99ELc101ELc116EEEELb1EEENS3_ImLi24ELi24ELi1EmXtlS6_tlS7_Lc112ELc107ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x55>
    5885:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5889:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    588d:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    5891:	e8 4a f7 ff ff       	call   4fe0 <_ZNSt3__16copy_nB8nn210000IPKmmPmTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
        }
    5896:	48 83 c4 30          	add    $0x30,%rsp
    589a:	5d                   	pop    %rbp
    589b:	c3                   	ret
    589c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000058a0 <_ZN4arch3Cr3CI2N4ustl9bitfields13BitFieldsImplImNS1_8TypeListIJNS2_13FieldMetaDataImLi0ELi0ELi64EmXtlNS1_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEEERKSt16initializer_listImE>:
    struct Cr3: public SysReg<Cr3> { typedef SysReg<Cr3> Base; using Base::Base; };
    58a0:	55                   	push   %rbp
    58a1:	48 89 e5             	mov    %rsp,%rbp
    58a4:	48 83 ec 10          	sub    $0x10,%rsp
    58a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    58ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    58b0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    58b4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    58b8:	e8 13 00 00 00       	call   58d0 <_ZN4arch6SysRegINS_3Cr3EECI2N4ustl9bitfields13BitFieldsImplImNS3_8TypeListIJNS4_13FieldMetaDataImLi0ELi0ELi64EmXtlNS3_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEEERKSt16initializer_listImE>
    58bd:	48 83 c4 10          	add    $0x10,%rsp
    58c1:	5d                   	pop    %rbp
    58c2:	c3                   	ret
    58c3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    58ca:	00 00 00 
    58cd:	0f 1f 00             	nopl   (%rax)

00000000000058d0 <_ZN4arch6SysRegINS_3Cr3EECI2N4ustl9bitfields13BitFieldsImplImNS3_8TypeListIJNS4_13FieldMetaDataImLi0ELi0ELi64EmXtlNS3_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEEERKSt16initializer_listImE>:
    58d0:	55                   	push   %rbp
    58d1:	48 89 e5             	mov    %rsp,%rbp
    58d4:	48 83 ec 10          	sub    $0x10,%rsp
    58d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    58dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    58e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    58e4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    58e8:	e8 13 00 00 00       	call   5900 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi64EmXtlNS_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE>
    58ed:	48 83 c4 10          	add    $0x10,%rsp
    58f1:	5d                   	pop    %rbp
    58f2:	c3                   	ret
    58f3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    58fa:	00 00 00 
    58fd:	0f 1f 00             	nopl   (%rax)

0000000000005900 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi64EmXtlNS_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE>:
        BitFieldsImpl(ustl::InitializerList<usize> const &val) {
    5900:	55                   	push   %rbp
    5901:	48 89 e5             	mov    %rsp,%rbp
    5904:	48 83 ec 30          	sub    $0x30,%rsp
    5908:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    590c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5910:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5914:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            ustl::algorithms::copy_n(val.begin(), NUM_UNITS > val.size() ? val.size() : NUM_UNITS, values);
    5918:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    591c:	e8 ff f6 ff ff       	call   5020 <_ZNKSt16initializer_listImE5beginB8nn210000Ev>
    5921:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5925:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5929:	e8 12 f7 ff ff       	call   5040 <_ZNKSt16initializer_listImE4sizeB8nn210000Ev>
    592e:	48 89 c1             	mov    %rax,%rcx
    5931:	b8 01 00 00 00       	mov    $0x1,%eax
    5936:	48 39 c8             	cmp    %rcx,%rax
    5939:	76 0f                	jbe    594a <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi64EmXtlNS_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x4a>
    593b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    593f:	e8 fc f6 ff ff       	call   5040 <_ZNKSt16initializer_listImE4sizeB8nn210000Ev>
    5944:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5948:	eb 0b                	jmp    5955 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi64EmXtlNS_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x55>
    594a:	b8 01 00 00 00       	mov    $0x1,%eax
    594f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5953:	eb 00                	jmp    5955 <_ZN4ustl9bitfields13BitFieldsImplImNS_8TypeListIJNS0_13FieldMetaDataImLi0ELi0ELi64EmXtlNS_4util11FixedStringILm10EEEtlA10_cLc65ELc110ELc111ELc110ELc121ELc109ELc111ELc117ELc115EEEELb1EEEEEEEC2ERKSt16initializer_listImE+0x55>
    5955:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5959:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    595d:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    5961:	e8 7a f6 ff ff       	call   4fe0 <_ZNSt3__16copy_nB8nn210000IPKmmPmTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
        }
    5966:	48 83 c4 30          	add    $0x30,%rsp
    596a:	5d                   	pop    %rbp
    596b:	c3                   	ret
    596c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005970 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEEEJNS_21AddrSizeCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_>:
    auto dispatch_cpuid_0(CpuId &&cpuid, ustl::TypeList<Actions...>, Observers &&...observers) -> bool {
    5970:	55                   	push   %rbp
    5971:	48 89 e5             	mov    %rsp,%rbp
    5974:	53                   	push   %rbx
    5975:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    597c:	48 89 bd 68 fe ff ff 	mov    %rdi,-0x198(%rbp)
    5983:	48 89 b5 60 fe ff ff 	mov    %rsi,-0x1a0(%rbp)
        return ((cpuid.query_safe(Actions::kLeaf, Actions::kSubLeaf) &&
    598a:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    5991:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
    5998:	c7 85 84 fe ff ff 08 	movl   $0x80000008,-0x17c(%rbp)
    599f:	00 00 80 
    59a2:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
    59a9:	00 00 00 
    59ac:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
    59b3:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)

    template <>
    USTL_FORCEINLINE USTL_CONSTEXPR
    auto SysReg<ArchCpuState>::read() -> ArchCpuState {
        ArchCpuState state;
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
    59ba:	9c                   	pushf
    59bb:	58                   	pop    %rax
    59bc:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
        return state;
    59c3:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax

        ~CpuId() = default;

        FORCE_INLINE
        static auto has() -> bool {
            return ArchCpuState::read()
    59ca:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    59d1:	48 8d 85 98 fe ff ff 	lea    -0x168(%rbp),%rax
    59d8:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    59df:	c7 85 fc fe ff ff 01 	movl   $0x1,-0x104(%rbp)
    59e6:	00 00 00 
    59e9:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
    59f0:	48 63 8d fc fe ff ff 	movslq -0x104(%rbp),%rcx
    59f7:	48 89 8d f0 fe ff ff 	mov    %rcx,-0x110(%rbp)
    59fe:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    5a05:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5a0c:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    5a13:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    5a1a:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
    5a21:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    5a25:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    5a29:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    5a2d:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
    5a34:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    5a35:	48 c7 45 88 00 00 20 	movq   $0x200000,-0x78(%rbp)
    5a3c:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    5a3d:	48 c7 45 80 15 00 00 	movq   $0x15,-0x80(%rbp)
    5a44:	00 
            values[idx] &= ~mask;
    5a45:	48 8b 11             	mov    (%rcx),%rdx
    5a48:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
    5a4f:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
    5a52:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    5a56:	48 8b 12             	mov    (%rdx),%rdx
    5a59:	48 c1 e2 15          	shl    $0x15,%rdx
    5a5d:	48 0b 11             	or     (%rcx),%rdx
    5a60:	48 89 11             	mov    %rdx,(%rcx)
    5a63:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    5a6a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
    5a71:	48 8b 08             	mov    (%rax),%rcx
    5a74:	48 89 8d 18 ff ff ff 	mov    %rcx,-0xe8(%rbp)
    5a7b:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
    5a82:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
    5a86:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    5a8a:	51                   	push   %rcx
    5a8b:	9d                   	popf
    5a8c:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    5a93:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    5a9a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5a9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    5aa2:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    5aa9:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    5aaa:	48 c7 45 c0 00 00 20 	movq   $0x200000,-0x40(%rbp)
    5ab1:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    5ab2:	48 c7 45 b8 15 00 00 	movq   $0x15,-0x48(%rbp)
    5ab9:	00 
            return Result((values[idx] & mask) >> shift);
    5aba:	48 8b 00             	mov    (%rax),%rax
    5abd:	48 25 00 00 20 00    	and    $0x200000,%rax
    5ac3:	48 c1 e8 15          	shr    $0x15,%rax
    5ac7:	48 83 f8 00          	cmp    $0x0,%rax
            );
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto query_safe(CpuIdLeaf leaf, CpuIdSubLeaf subleaf = CpuIdSubLeaf(0)) -> bool {
            if (has()) {
    5acb:	0f 84 ad 01 00 00    	je     5c7e <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEEEJNS_21AddrSizeCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x30e>
    5ad1:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
                query(leaf, subleaf);
    5ad8:	8b 8d 84 fe ff ff    	mov    -0x17c(%rbp),%ecx
    5ade:	8b 85 80 fe ff ff    	mov    -0x180(%rbp),%eax
    5ae4:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
    5aeb:	89 8d b4 fe ff ff    	mov    %ecx,-0x14c(%rbp)
    5af1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%rbp)
    5af7:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    5afe:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
    5b05:	9c                   	pushf
    5b06:	58                   	pop    %rax
    5b07:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
        return state;
    5b0e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
            return ArchCpuState::read()
    5b15:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
    5b1c:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5b23:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    5b2a:	c7 85 e4 fe ff ff 01 	movl   $0x1,-0x11c(%rbp)
    5b31:	00 00 00 
    5b34:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
    5b3b:	48 63 8d e4 fe ff ff 	movslq -0x11c(%rbp),%rcx
    5b42:	48 89 8d d8 fe ff ff 	mov    %rcx,-0x128(%rbp)
    5b49:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    5b50:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
    5b57:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    5b5e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
    5b65:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
    5b6c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    5b73:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
    5b7a:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    5b81:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
    5b88:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    5b8c:	48 c7 85 60 ff ff ff 	movq   $0x200000,-0xa0(%rbp)
    5b93:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    5b97:	48 c7 85 58 ff ff ff 	movq   $0x15,-0xa8(%rbp)
    5b9e:	15 00 00 00 
            values[idx] &= ~mask;
    5ba2:	48 8b 11             	mov    (%rcx),%rdx
    5ba5:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
    5bac:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
    5baf:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    5bb6:	48 8b 12             	mov    (%rdx),%rdx
    5bb9:	48 c1 e2 15          	shl    $0x15,%rdx
    5bbd:	48 0b 11             	or     (%rcx),%rdx
    5bc0:	48 89 11             	mov    %rdx,(%rcx)
    5bc3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    5bca:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
    5bd1:	48 8b 08             	mov    (%rax),%rcx
    5bd4:	48 89 8d 08 ff ff ff 	mov    %rcx,-0xf8(%rbp)
    5bdb:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
    5be2:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
    5be6:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    5bea:	51                   	push   %rcx
    5beb:	9d                   	popf
    5bec:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    5bf3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    5bfa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    5bfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    5c02:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    5c09:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    5c0a:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
    5c11:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    5c12:	48 c7 45 d8 15 00 00 	movq   $0x15,-0x28(%rbp)
    5c19:	00 
            return Result((values[idx] & mask) >> shift);
    5c1a:	48 8b 00             	mov    (%rax),%rax
    5c1d:	48 25 00 00 20 00    	and    $0x200000,%rax
    5c23:	48 c1 e8 15          	shr    $0x15,%rax
    5c27:	48 83 f8 00          	cmp    $0x0,%rax
            DEBUG_ASSERT(has(), "Use cpuid on a unsupported platform");
    5c2b:	75 26                	jne    5c53 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEEEJNS_21AddrSizeCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x2e3>
    5c2d:	48 8d 35 84 92 02 00 	lea    0x29284(%rip),%rsi        # 2eeb8 <.L.str>
    5c34:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
    5c3b:	e8 40 d6 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    5c40:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
    5c47:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
    5c4e:	e8 dd d5 ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    	        : "a" (leaf), "c" (subleaf)
    5c53:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
    5c59:	8b 8d b0 fe ff ff    	mov    -0x150(%rbp),%ecx
    	    asm volatile("cpuid"
    5c5f:	0f a2                	cpuid
    5c61:	89 c6                	mov    %eax,%esi
    5c63:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    5c6a:	89 30                	mov    %esi,(%rax)
    5c6c:	89 58 04             	mov    %ebx,0x4(%rax)
    5c6f:	89 48 08             	mov    %ecx,0x8(%rax)
    5c72:	89 50 0c             	mov    %edx,0xc(%rax)
                return true;
    5c75:	c6 85 97 fe ff ff 01 	movb   $0x1,-0x169(%rbp)
    5c7c:	eb 07                	jmp    5c85 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEEEJNS_21AddrSizeCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x315>
            }

            return false;
    5c7e:	c6 85 97 fe ff ff 00 	movb   $0x0,-0x169(%rbp)
    5c85:	31 c0                	xor    %eax,%eax
    5c87:	f6 85 97 fe ff ff 01 	testb  $0x1,-0x169(%rbp)
    5c8e:	88 85 4f fe ff ff    	mov    %al,-0x1b1(%rbp)
    5c94:	75 02                	jne    5c98 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEEEJNS_21AddrSizeCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x328>
    5c96:	eb 27                	jmp    5cbf <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEEEJNS_21AddrSizeCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x34f>
                 dispatch_cpuid_1<Actions>(cpuid, ustl::forward<Observers>(observers)...)) && ...);
    5c98:	48 8b bd 68 fe ff ff 	mov    -0x198(%rbp),%rdi
    5c9f:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
    5ca6:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    5cad:	48 8b b5 78 fe ff ff 	mov    -0x188(%rbp),%rsi
    5cb4:	e8 27 00 00 00       	call   5ce0 <_ZN4arch16dispatch_cpuid_1INS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEENS_5CpuIdEJNS_21AddrSizeCpuIdObserverEEEEbRT0_DpOT1_>
    5cb9:	88 85 4f fe ff ff    	mov    %al,-0x1b1(%rbp)
    5cbf:	8a 85 4f fe ff ff    	mov    -0x1b1(%rbp),%al
        return ((cpuid.query_safe(Actions::kLeaf, Actions::kSubLeaf) &&
    5cc5:	24 01                	and    $0x1,%al
    5cc7:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5cce:	5b                   	pop    %rbx
    5ccf:	5d                   	pop    %rbp
    5cd0:	c3                   	ret
    5cd1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    5cd8:	00 00 00 
    5cdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005ce0 <_ZN4arch16dispatch_cpuid_1INS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEENS_5CpuIdEJNS_21AddrSizeCpuIdObserverEEEEbRT0_DpOT1_>:
    auto dispatch_cpuid_1(CpuId &result, Observers &&...observers) -> bool {
    5ce0:	55                   	push   %rbp
    5ce1:	48 89 e5             	mov    %rsp,%rbp
    5ce4:	48 83 ec 20          	sub    $0x20,%rsp
    5ce8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    5cec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
        return (dispatch_cpuid_2<Action>(result, ustl::forward<Observers>(observers)), ...);
    5cf0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5cf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5cf8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5cfc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    5d00:	e8 0b 00 00 00       	call   5d10 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_21AddrSizeCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE>
    5d05:	24 01                	and    $0x1,%al
    5d07:	48 83 c4 20          	add    $0x20,%rsp
    5d0b:	5d                   	pop    %rbp
    5d0c:	c3                   	ret
    5d0d:	0f 1f 00             	nopl   (%rax)

0000000000005d10 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_21AddrSizeCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE>:
    auto dispatch_cpuid_2(CpuId &result, CpuIdObserver<Observer, ObserveItems...> &&observer) -> bool {
    5d10:	55                   	push   %rbp
    5d11:	48 89 e5             	mov    %rsp,%rbp
    5d14:	48 83 ec 20          	sub    $0x20,%rsp
    5d18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5d1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        return (dispatch_cpuid_3<Action>(result, static_cast<Observer &>(observer), ObserveItems()) && ...);
    5d20:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5d24:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    5d28:	e8 13 00 00 00       	call   5d40 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_21AddrSizeCpuIdObserverELS2_2147483656ELS3_0EJLNS_12CpuIdRegTagsE0EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
    5d2d:	24 01                	and    $0x1,%al
    5d2f:	48 83 c4 20          	add    $0x20,%rsp
    5d33:	5d                   	pop    %rbp
    5d34:	c3                   	ret
    5d35:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    5d3c:	00 00 00 
    5d3f:	90                   	nop

0000000000005d40 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_21AddrSizeCpuIdObserverELS2_2147483656ELS3_0EJLNS_12CpuIdRegTagsE0EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
    5d40:	55                   	push   %rbp
    5d41:	48 89 e5             	mov    %rsp,%rbp
    5d44:	48 83 ec 20          	sub    $0x20,%rsp
    5d48:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5d4c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
        return (observer.template observe<Leaf, SubLeaf, Regs>(
    5d50:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
                                       Regs == CpuIdRegTags::Eax ? result.eax() :
    5d54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5d58:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            return *this;
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto eax() -> u32 {
            return eax_;
    5d60:	8b 30                	mov    (%rax),%esi
        return (observer.template observe<Leaf, SubLeaf, Regs>(
    5d62:	e8 09 00 00 00       	call   5d70 <_ZN4arch21AddrSizeCpuIdObserver7observeILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0ELNS_12CpuIdRegTagsE0EjEEbT2_>
    5d67:	24 01                	and    $0x1,%al
    5d69:	48 83 c4 20          	add    $0x20,%rsp
    5d6d:	5d                   	pop    %rbp
    5d6e:	c3                   	ret
    5d6f:	90                   	nop

0000000000005d70 <_ZN4arch21AddrSizeCpuIdObserver7observeILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0ELNS_12CpuIdRegTagsE0EjEEbT2_>:

        template <CpuIdLeaf Leaf, CpuIdSubLeaf SubLeaf, CpuIdRegTags Reg, typename Integral>
        auto observe(Integral value) -> bool {
    5d70:	55                   	push   %rbp
    5d71:	48 89 e5             	mov    %rsp,%rbp
    5d74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5d78:	89 75 f4             	mov    %esi,-0xc(%rbp)
    5d7b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    5d7f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
            u8 const phys_bits = value & 0xFF;
    5d83:	8b 45 f4             	mov    -0xc(%rbp),%eax
    5d86:	25 ff 00 00 00       	and    $0xff,%eax
    5d8b:	88 45 f3             	mov    %al,-0xd(%rbp)
            u8 const virt_bits = (value >> 8) & 0xFF;
    5d8e:	8b 45 f4             	mov    -0xc(%rbp),%eax
    5d91:	c1 e8 08             	shr    $0x8,%eax
    5d94:	25 ff 00 00 00       	and    $0xff,%eax
    5d99:	88 45 f2             	mov    %al,-0xe(%rbp)

            // The value may be zero.
            if (phys_bits > *max_phys_bits) {
    5d9c:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
    5da0:	48 8b 09             	mov    (%rcx),%rcx
    5da3:	0f b6 09             	movzbl (%rcx),%ecx
    5da6:	39 c8                	cmp    %ecx,%eax
    5da8:	7e 0c                	jle    5db6 <_ZN4arch21AddrSizeCpuIdObserver7observeILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0ELNS_12CpuIdRegTagsE0EjEEbT2_+0x46>
    5daa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
                *max_phys_bits = phys_bits;
    5dae:	8a 4d f3             	mov    -0xd(%rbp),%cl
    5db1:	48 8b 00             	mov    (%rax),%rax
    5db4:	88 08                	mov    %cl,(%rax)
    5db6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
            }

            if (virt_bits > *max_virt_bits) {
    5dba:	0f b6 45 f2          	movzbl -0xe(%rbp),%eax
    5dbe:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    5dc2:	0f b6 09             	movzbl (%rcx),%ecx
    5dc5:	39 c8                	cmp    %ecx,%eax
    5dc7:	7e 0d                	jle    5dd6 <_ZN4arch21AddrSizeCpuIdObserver7observeILNS_9CpuIdLeafE2147483656ELNS_12CpuIdSubLeafE0ELNS_12CpuIdRegTagsE0EjEEbT2_+0x66>
    5dc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
                *max_virt_bits = virt_bits;
    5dcd:	8a 4d f2             	mov    -0xe(%rbp),%cl
    5dd0:	48 8b 40 08          	mov    0x8(%rax),%rax
    5dd4:	88 08                	mov    %cl,(%rax)
            }
            return true;
    5dd6:	b0 01                	mov    $0x1,%al
    5dd8:	24 01                	and    $0x1,%al
    5dda:	5d                   	pop    %rbp
    5ddb:	c3                   	ret
    5ddc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005de0 <_ZN4ours3mem12ArchVmAspaceC1EmmNS0_9VmasFlagsE>:
    NO_MANGLE PhysAddr const g_pgd;

    ArchVmAspace::ArchVmAspace(VirtAddr base, usize size, VmasFlags flags)
        : range_(base, size),
          flags_(flags)
    {}
    5de0:	55                   	push   %rbp
    5de1:	48 89 e5             	mov    %rsp,%rbp
    5de4:	48 83 ec 30          	sub    $0x30,%rsp
    5de8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5dec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5df0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    5df4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    5df8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    5dfc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ArchVmAspace::ArchVmAspace(VirtAddr base, usize size, VmasFlags flags)
    5e00:	e8 4b 09 00 00       	call   6750 <_ZN4gktl6CanaryILj1885430629EEC2Ev>
    5e05:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
          flags_(flags)
    5e09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5e0d:	48 89 47 08          	mov    %rax,0x8(%rdi)
    ArchVmAspace::ArchVmAspace(VirtAddr base, usize size, VmasFlags flags)
    5e11:	48 83 c7 10          	add    $0x10,%rdi
    5e15:	e8 56 09 00 00       	call   6770 <_ZN4ours7CpuMaskC2Ev>
    5e1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        : range_(base, size),
    5e1e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5e22:	48 89 48 18          	mov    %rcx,0x18(%rax)
    5e26:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    5e2a:	48 89 48 20          	mov    %rcx,0x20(%rax)
    {}
    5e2e:	48 83 c4 30          	add    $0x30,%rsp
    5e32:	5d                   	pop    %rbp
    5e33:	c3                   	ret
    5e34:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
    5e3b:	00 00 00 00 00 

0000000000005e40 <_ZN4ours3mem12ArchVmAspace4initEv>:

    auto ArchVmAspace::init() -> Status
    {
    5e40:	55                   	push   %rbp
    5e41:	48 89 e5             	mov    %rsp,%rbp
    5e44:	48 81 ec b0 02 00 00 	sub    $0x2b0,%rsp
    5e4b:	48 89 bd d8 fd ff ff 	mov    %rdi,-0x228(%rbp)
    5e52:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
    5e59:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
        if (bool(VmasFlags::Kernel & flags_)) [[unlikely]] {
    5e60:	48 8b 40 08          	mov    0x8(%rax),%rax
    5e64:	48 c7 85 00 fe ff ff 	movq   $0x1,-0x200(%rbp)
    5e6b:	01 00 00 00 
    5e6f:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
auto operator&(Enum lhs, Enum rhs) 
    -> ustl::traits::EnableIfT<UstlEnumBitMaskEnabledV<Enum>, Enum>
{
    typedef ustl::traits::UnderlyingTypeT<Enum>     Underlying;
    return static_cast<Enum> (
        static_cast<Underlying>(lhs) &
    5e76:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
    5e7d:	48 23 85 f8 fd ff ff 	and    -0x208(%rbp),%rax
    5e84:	48 83 f8 00          	cmp    $0x0,%rax
    5e88:	0f 84 ca 01 00 00    	je     6058 <_ZN4ours3mem12ArchVmAspace4initEv+0x218>
            // Kernel page table was provided by kernel.phys, so do not need to allocate memory. 
            auto const phys_pgd = g_pgd;
    5e8e:	48 8d 05 6b 29 03 00 	lea    0x3296b(%rip),%rax        # 38800 <g_pgd>
    5e95:	48 8b 00             	mov    (%rax),%rax
    5e98:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
            auto const virt_pgd = PhysMap::phys_to_virt(phys_pgd );
    5e9f:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
    5ea6:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)

        template <typename T>
        FORCE_INLINE CXX11_CONSTEXPR
        static auto phys_to_virt(T phys_addr) -> VirtAddr {
            static_assert(sizeof(usize) == sizeof(T));
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
    5ead:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
    5eb4:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    5ebb:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
    5ec2:	00 00 00 
                   reinterpret_cast<PhysAddr>(phys_addr) - kPhysBase < kSize;
    5ec5:	48 39 85 80 fe ff ff 	cmp    %rax,-0x180(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
    5ecc:	73 1a                	jae    5ee8 <_ZN4ours3mem12ArchVmAspace4initEv+0xa8>
                return VirtAddr(kVirtBase + (phys_addr - kPhysBase));
    5ece:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
    5ed5:	ff ff ff 
    5ed8:	48 03 85 08 fe ff ff 	add    -0x1f8(%rbp),%rax
    5edf:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
    5ee6:	eb 0b                	jmp    5ef3 <_ZN4ours3mem12ArchVmAspace4initEv+0xb3>
            }
            return VirtAddr();
    5ee8:	48 c7 85 10 fe ff ff 	movq   $0x0,-0x1f0(%rbp)
    5eef:	00 00 00 00 
    5ef3:	48 8b 95 98 fd ff ff 	mov    -0x268(%rbp),%rdx
        }
    5efa:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
    5f01:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
            auto status = page_table_.init_mmu(phys_pgd, virt_pgd);
    5f08:	48 83 c2 28          	add    $0x28,%rdx
    5f0c:	48 8b 8d d0 fd ff ff 	mov    -0x230(%rbp),%rcx
    5f13:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
    5f1a:	48 89 95 28 fe ff ff 	mov    %rdx,-0x1d8(%rbp)
    5f21:	48 89 8d 20 fe ff ff 	mov    %rcx,-0x1e0(%rbp)
    5f28:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
    5f2f:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
        }

        template <typename... Args> 
        FORCE_INLINE CXX11_CONSTEXPR
        auto init_mmu(Args... args) -> Status {
            return init<Mmu>(args...);
    5f36:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
    5f3d:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
    5f44:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    5f4b:	48 89 8d a0 fe ff ff 	mov    %rcx,-0x160(%rbp)
    5f52:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    5f59:	48 8b bd a8 fe ff ff 	mov    -0x158(%rbp),%rdi
    5f60:	48 89 bd 90 fd ff ff 	mov    %rdi,-0x270(%rbp)
    template <typename Derived>
    FORCE_INLINE CXX11_CONSTEXPR
    auto X86PageTable<Options>::init(PhysAddr pgd_pa, VirtAddr pgd_va) -> Status {
        static_assert(traits::IsBaseOfV<IX86PageTable, Derived>, "You don't know?");

        Derived *derived = new (&storage_) Derived();
    5f67:	31 c0                	xor    %eax,%eax
    5f69:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    5f70:	00 
    5f71:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
    5f78:	00 
    5f79:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
    5f80:	00 
    5f81:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
    5f88:	00 
    5f89:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    5f90:	00 
    5f91:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    5f98:	00 
    5f99:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    5fa0:	e8 5b 08 00 00       	call   6800 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEC2Ev>
    5fa5:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
    5fac:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
        pimpl_ = derived;
    5fb3:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
    5fba:	48 89 48 38          	mov    %rcx,0x38(%rax)
        auto status = pimpl_->init(pgd_pa, pgd_va);
    5fbe:	48 8b 50 38          	mov    0x38(%rax),%rdx
    5fc2:	48 8b 8d a0 fe ff ff 	mov    -0x160(%rbp),%rcx
    5fc9:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    5fd0:	48 89 95 c8 fe ff ff 	mov    %rdx,-0x138(%rbp)
    5fd7:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
    5fde:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    5fe5:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
        ustl::sync::AtomicUsize refcnt_;
    };

    FORCE_INLINE
    auto IX86PageTable::init(PhysAddr pa_table, VirtAddr va_table) -> Status {
        phys_ = pa_table;
    5fec:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
    5ff3:	48 89 48 10          	mov    %rcx,0x10(%rax)
        virt_ = va_table;
    5ff7:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
    5ffe:	48 89 48 18          	mov    %rcx,0x18(%rax)
    6002:	c7 85 8c fe ff ff 00 	movl   $0x0,-0x174(%rbp)
    6009:	00 00 00 
        if (status != Status::Ok) {
    600c:	83 bd 8c fe ff ff 00 	cmpl   $0x0,-0x174(%rbp)
    6013:	74 0e                	je     6023 <_ZN4ours3mem12ArchVmAspace4initEv+0x1e3>
            return status;
    6015:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    601b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%rbp)
    6021:	eb 0a                	jmp    602d <_ZN4ours3mem12ArchVmAspace4initEv+0x1ed>
            if (status != Status::Ok) {
                return status;
            }
        }

        return Status::Ok;
    6023:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    602a:	00 00 00 
    }
    602d:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
    6033:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
            if (status != Status::Ok) {
    6039:	83 bd c4 fd ff ff 00 	cmpl   $0x0,-0x23c(%rbp)
    6040:	74 11                	je     6053 <_ZN4ours3mem12ArchVmAspace4initEv+0x213>
                return status;
    6042:	8b 85 c4 fd ff ff    	mov    -0x23c(%rbp),%eax
    6048:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%rbp)
    604e:	e9 8c 05 00 00       	jmp    65df <_ZN4ours3mem12ArchVmAspace4initEv+0x79f>
            }
        } else if (bool(VmasFlags::Guest & flags_)) {
    6053:	e9 7d 05 00 00       	jmp    65d5 <_ZN4ours3mem12ArchVmAspace4initEv+0x795>
    6058:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    605f:	48 8b 40 08          	mov    0x8(%rax),%rax
    6063:	48 c7 85 f0 fd ff ff 	movq   $0x2,-0x210(%rbp)
    606a:	02 00 00 00 
    606e:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
    6075:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
    607c:	48 23 85 e8 fd ff ff 	and    -0x218(%rbp),%rax
    6083:	48 83 f8 00          	cmp    $0x0,%rax
    6087:	0f 84 7c 01 00 00    	je     6209 <_ZN4ours3mem12ArchVmAspace4initEv+0x3c9>
    608d:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
            auto status = page_table_.init_ept();
    6094:	48 83 c0 28          	add    $0x28,%rax
    6098:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
    609f:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    60a6:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    60ad:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    60b4:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
    template <typename Derived>
    FORCE_INLINE CXX11_CONSTEXPR
    auto X86PageTable<Options>::init() -> Status {
        // Try allocate page from PageSource
        PhysAddr pgd_pa;
        if (!pgd_pa) {
    60bb:	48 83 bd d8 fe ff ff 	cmpq   $0x0,-0x128(%rbp)
    60c2:	00 
    60c3:	75 0f                	jne    60d4 <_ZN4ours3mem12ArchVmAspace4initEv+0x294>
            return Status::OutOfMem;
    60c5:	c7 85 e8 fe ff ff 02 	movl   $0x2,-0x118(%rbp)
    60cc:	00 00 00 
    60cf:	e9 0a 01 00 00       	jmp    61de <_ZN4ours3mem12ArchVmAspace4initEv+0x39e>
    60d4:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
        }

        VirtAddr pgd_va;

        return init<Derived>(pgd_pa, pgd_va);
    60db:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
    60e2:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    60e9:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
    60f0:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
    60f7:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    60fe:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
    6105:	48 89 bd 80 fd ff ff 	mov    %rdi,-0x280(%rbp)
        Derived *derived = new (&storage_) Derived();
    610c:	31 c0                	xor    %eax,%eax
    610e:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    6115:	00 
    6116:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
    611d:	00 
    611e:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
    6125:	00 
    6126:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
    612d:	00 
    612e:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    6135:	00 
    6136:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    613d:	00 
    613e:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    6145:	e8 06 26 00 00       	call   8750 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEC2Ev>
    614a:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
    6151:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
        pimpl_ = derived;
    6158:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
    615f:	48 89 48 38          	mov    %rcx,0x38(%rax)
        auto status = pimpl_->init(pgd_pa, pgd_va);
    6163:	48 8b 50 38          	mov    0x38(%rax),%rdx
    6167:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    616e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    6175:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    617c:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    6183:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    618a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
        phys_ = pa_table;
    6191:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
    6198:	48 89 48 10          	mov    %rcx,0x10(%rax)
        virt_ = va_table;
    619c:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
    61a3:	48 89 48 18          	mov    %rcx,0x18(%rax)
    61a7:	c7 85 ec fe ff ff 00 	movl   $0x0,-0x114(%rbp)
    61ae:	00 00 00 
        if (status != Status::Ok) {
    61b1:	83 bd ec fe ff ff 00 	cmpl   $0x0,-0x114(%rbp)
    61b8:	74 0e                	je     61c8 <_ZN4ours3mem12ArchVmAspace4initEv+0x388>
            return status;
    61ba:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    61c0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
    61c6:	eb 0a                	jmp    61d2 <_ZN4ours3mem12ArchVmAspace4initEv+0x392>
        return Status::Ok;
    61c8:	c7 85 14 ff ff ff 00 	movl   $0x0,-0xec(%rbp)
    61cf:	00 00 00 
    }
    61d2:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
        return init<Derived>(pgd_pa, pgd_va);
    61d8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
    }
    61de:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    61e4:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%rbp)
            if (status != Status::Ok) {
    61ea:	83 bd c0 fd ff ff 00 	cmpl   $0x0,-0x240(%rbp)
    61f1:	74 11                	je     6204 <_ZN4ours3mem12ArchVmAspace4initEv+0x3c4>
                return status;
    61f3:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    61f9:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%rbp)
    61ff:	e9 db 03 00 00       	jmp    65df <_ZN4ours3mem12ArchVmAspace4initEv+0x79f>
            }
        } else  [[likely]] {
    6204:	e9 ca 03 00 00       	jmp    65d3 <_ZN4ours3mem12ArchVmAspace4initEv+0x793>
    6209:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
            auto status = page_table_.init_mmu();
    6210:	48 83 c0 28          	add    $0x28,%rax
    6214:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
    621b:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
    6222:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    6229:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    6230:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
        if (!pgd_pa) {
    6237:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
    623e:	00 
    623f:	75 0f                	jne    6250 <_ZN4ours3mem12ArchVmAspace4initEv+0x410>
            return Status::OutOfMem;
    6241:	c7 85 48 ff ff ff 02 	movl   $0x2,-0xb8(%rbp)
    6248:	00 00 00 
    624b:	e9 fe 00 00 00       	jmp    634e <_ZN4ours3mem12ArchVmAspace4initEv+0x50e>
    6250:	48 8b 95 78 fd ff ff 	mov    -0x288(%rbp),%rdx
        return init<Derived>(pgd_pa, pgd_va);
    6257:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
    625e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    6265:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    626c:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
    6273:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    627a:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    6281:	48 89 bd 70 fd ff ff 	mov    %rdi,-0x290(%rbp)
        Derived *derived = new (&storage_) Derived();
    6288:	31 c0                	xor    %eax,%eax
    628a:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    6291:	00 
    6292:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
    6299:	00 
    629a:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
    62a1:	00 
    62a2:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
    62a9:	00 
    62aa:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    62b1:	00 
    62b2:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    62b9:	00 
    62ba:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    62c1:	e8 3a 05 00 00       	call   6800 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEC2Ev>
    62c6:	48 8b 85 70 fd ff ff 	mov    -0x290(%rbp),%rax
    62cd:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
        pimpl_ = derived;
    62d4:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
    62db:	48 89 48 38          	mov    %rcx,0x38(%rax)
        auto status = pimpl_->init(pgd_pa, pgd_va);
    62df:	48 8b 50 38          	mov    0x38(%rax),%rdx
    62e3:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
    62ea:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    62f1:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
    62f5:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    62f9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    6300:	48 8b 45 88          	mov    -0x78(%rbp),%rax
        phys_ = pa_table;
    6304:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    6308:	48 89 48 10          	mov    %rcx,0x10(%rax)
        virt_ = va_table;
    630c:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    6313:	48 89 48 18          	mov    %rcx,0x18(%rax)
    6317:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    631e:	00 00 00 
        if (status != Status::Ok) {
    6321:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
    6328:	74 0e                	je     6338 <_ZN4ours3mem12ArchVmAspace4initEv+0x4f8>
            return status;
    632a:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    6330:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    6336:	eb 0a                	jmp    6342 <_ZN4ours3mem12ArchVmAspace4initEv+0x502>
        return Status::Ok;
    6338:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
    633f:	00 00 00 
    }
    6342:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
        return init<Derived>(pgd_pa, pgd_va);
    6348:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    }
    634e:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
    6354:	89 85 bc fd ff ff    	mov    %eax,-0x244(%rbp)
            if (status != Status::Ok) {
    635a:	83 bd bc fd ff ff 00 	cmpl   $0x0,-0x244(%rbp)
    6361:	74 11                	je     6374 <_ZN4ours3mem12ArchVmAspace4initEv+0x534>
                return status;
    6363:	8b 85 bc fd ff ff    	mov    -0x244(%rbp),%eax
    6369:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%rbp)
    636f:	e9 6b 02 00 00       	jmp    65df <_ZN4ours3mem12ArchVmAspace4initEv+0x79f>
    6374:	48 8d bd a0 fd ff ff 	lea    -0x260(%rbp),%rdi
            }
            // We should create an alias of kernel address space to avoid unnecessary switches.
            // And it could help us to call the routine passed by the driver of the user space correctly.
            auto &kpt = VmAspace::kernel_aspace()->arch_aspace().page_table_;
    637b:	e8 10 04 00 00       	call   6790 <_ZN4ours3mem8VmAspace13kernel_aspaceEv>
    6380:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
    6387:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
    638e:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
        auto operator*() USTL_NOEXCEPT -> RefMut
        {  return *pointer_;  }

        USTL_FORCEINLINE
        auto operator->() USTL_NOEXCEPT -> PtrMut
        {  return pointer_;  }
    6395:	48 8b 38             	mov    (%rax),%rdi
    6398:	e8 43 04 00 00       	call   67e0 <_ZN4ours3mem8VmAspace11arch_aspaceEv>
    639d:	48 83 c0 28          	add    $0x28,%rax
    63a1:	48 89 85 60 fd ff ff 	mov    %rax,-0x2a0(%rbp)
    63a8:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
    63af:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    63b6:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
    63bd:	48 89 85 68 fd ff ff 	mov    %rax,-0x298(%rbp)
            if (counter_) {
    63c4:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
    63c9:	0f 84 90 01 00 00    	je     655f <_ZN4ours3mem12ArchVmAspace4initEv+0x71f>
    63cf:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
                if (counter_->strong_count() == 1) {
    63d6:	48 8b 40 08          	mov    0x8(%rax),%rax
    63da:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    63de:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
        auto weak_count() USTL_NOEXCEPT -> Size
        {  return weak_counter_;  }

        USTL_FORCEINLINE
        auto strong_count() USTL_NOEXCEPT -> Size
        {  return strong_counter_;  }
    63e2:	48 83 c7 18          	add    $0x18,%rdi
    63e6:	e8 05 3a 00 00       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
    63eb:	48 83 f8 01          	cmp    $0x1,%rax
    63ef:	0f 85 47 01 00 00    	jne    653c <_ZN4ours3mem12ArchVmAspace4initEv+0x6fc>
    63f5:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
    63fc:	48 8b 08             	mov    (%rax),%rcx
    63ff:	48 8b 40 08          	mov    0x8(%rax),%rax
    6403:	48 8d 95 48 fe ff ff 	lea    -0x1b8(%rbp),%rdx
    640a:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    640e:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    6412:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    6416:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    641a:	48 89 85 58 fd ff ff 	mov    %rax,-0x2a8(%rbp)
        template <typename, typename, typename, typename>
        friend class Rc;

        USTL_FORCEINLINE
        Weak(PtrMut ptr, Counter *counter) USTL_NOEXCEPT
            : pointer_(ptr),
    6421:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    6425:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
    6428:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    642c:	48 89 48 08          	mov    %rcx,0x8(%rax)
        {
            if (counter_) {
    6430:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
    6435:	74 21                	je     6458 <_ZN4ours3mem12ArchVmAspace4initEv+0x618>
    6437:	48 8b 85 58 fd ff ff 	mov    -0x2a8(%rbp),%rax
                counter_->enable_weak();
    643e:	48 8b 40 08          	mov    0x8(%rax),%rax
    6442:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6446:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
        auto enable_strong() USTL_NOEXCEPT -> void
        {  strong_counter_  = 1;  }

        USTL_FORCEINLINE
        auto enable_weak() USTL_NOEXCEPT -> void
        {  weak_counter_  = 1;  }
    644a:	48 83 c7 10          	add    $0x10,%rdi
    644e:	be 01 00 00 00       	mov    $0x1,%esi
    6453:	e8 78 3a 00 00       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
    6458:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
                    counter_->disposer()(pointer_);
    645f:	48 8b 40 08          	mov    0x8(%rax),%rax
    6463:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    6467:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi

        USTL_FORCEINLINE
        auto disposer() USTL_NOEXCEPT -> Disposer &
        {  return this->Base1::as_ref();  }
    646b:	48 83 c7 08          	add    $0x8,%rdi
    646f:	e8 4c 3b 00 00       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
    6474:	48 89 c7             	mov    %rax,%rdi
    6477:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
    647e:	48 8b 30             	mov    (%rax),%rsi
    6481:	31 c0                	xor    %eax,%eax
    6483:	e8 58 39 00 00       	call   9de0 <_ZN4ustl12NullDisposerclEz>
    6488:	48 8d 85 48 fe ff ff 	lea    -0x1b8(%rbp),%rax
    648f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    6493:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6497:	48 89 85 50 fd ff ff 	mov    %rax,-0x2b0(%rbp)
            if (counter_) {
    649e:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
    64a3:	0f 84 91 00 00 00    	je     653a <_ZN4ours3mem12ArchVmAspace4initEv+0x6fa>
    64a9:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
                if (counter_->weak_count() == 1) {
    64b0:	48 8b 40 08          	mov    0x8(%rax),%rax
    64b4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    64b8:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
        {  return weak_counter_;  }
    64bc:	48 83 c7 10          	add    $0x10,%rdi
    64c0:	e8 2b 39 00 00       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
    64c5:	48 83 f8 01          	cmp    $0x1,%rax
    64c9:	75 4c                	jne    6517 <_ZN4ours3mem12ArchVmAspace4initEv+0x6d7>
    64cb:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
    64d2:	48 8b 40 08          	mov    0x8(%rax),%rax
    64d6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    64da:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi

        USTL_FORCEINLINE
        auto allocator() USTL_NOEXCEPT -> Allocator & 
        {  return this->Base2::as_ref();  }
    64de:	48 83 c7 09          	add    $0x9,%rdi
    64e2:	e8 19 3b 00 00       	call   a000 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EE6as_refEv>
    64e7:	48 89 c1             	mov    %rax,%rcx
    64ea:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
    64f1:	48 8b 00             	mov    (%rax),%rax
    64f4:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    64f8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    64fc:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    6503:	00 
        static auto allocate(Allocator &allocator, usize n = 1) -> T *
        {  return allocator.allocate(n);  }

        USTL_FORCEINLINE
        static auto deallocate(Allocator &allocator, PtrMut ptr, usize n = 1) -> void 
        {  allocator.deallocate(ptr, n);  }
    6504:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    6508:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    650c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    6510:	e8 bb 3a 00 00       	call   9fd0 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmAspaceEE10deallocateEPS4_m>
                } else {
    6515:	eb 21                	jmp    6538 <_ZN4ours3mem12ArchVmAspace4initEv+0x6f8>
    6517:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
                    counter_->dec_weak_ref();
    651e:	48 8b 40 08          	mov    0x8(%rax),%rax
    6522:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6526:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  weak_counter_ -= 1;  }
    652a:	48 83 c7 10          	add    $0x10,%rdi
    652e:	be 01 00 00 00       	mov    $0x1,%esi
    6533:	e8 d8 3a 00 00       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
    6538:	eb 00                	jmp    653a <_ZN4ours3mem12ArchVmAspace4initEv+0x6fa>
                } else {
    653a:	eb 21                	jmp    655d <_ZN4ours3mem12ArchVmAspace4initEv+0x71d>
    653c:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
                    counter_->dec_strong_ref();
    6543:	48 8b 40 08          	mov    0x8(%rax),%rax
    6547:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    654b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        {  strong_counter_  -= 1;  }
    654f:	48 83 c7 18          	add    $0x18,%rdi
    6553:	be 01 00 00 00       	mov    $0x1,%esi
    6558:	e8 b3 3a 00 00       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
    655d:	eb 00                	jmp    655f <_ZN4ours3mem12ArchVmAspace4initEv+0x71f>
    655f:	48 8b 8d 98 fd ff ff 	mov    -0x268(%rbp),%rcx
    6566:	48 8b 85 60 fd ff ff 	mov    -0x2a0(%rbp),%rax
    656d:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
            page_table_.alias_to(kpt, PhysMap::kVirtBase, PhysMap::kSize / PAGE_SIZE);
    6574:	48 83 c1 28          	add    $0x28,%rcx
    6578:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
    657f:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
    6586:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
    658d:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
    6594:	ff ff ff 
    6597:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
    659e:	48 c7 85 60 fe ff ff 	movq   $0x800000,-0x1a0(%rbp)
    65a5:	00 00 80 00 
    65a9:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
            return pimpl_->alias_to(*other.pimpl_, base, nr_pages);
    65b0:	48 8b 78 38          	mov    0x38(%rax),%rdi
    65b4:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
    65bb:	48 8b 70 38          	mov    0x38(%rax),%rsi
    65bf:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
    65c6:	48 8b 8d 60 fe ff ff 	mov    -0x1a0(%rbp),%rcx
    65cd:	48 8b 07             	mov    (%rdi),%rax
    65d0:	ff 50 40             	call   *0x40(%rax)
    65d3:	eb 00                	jmp    65d5 <_ZN4ours3mem12ArchVmAspace4initEv+0x795>
        }

        return Status::Ok;
    65d5:	c7 85 e4 fd ff ff 00 	movl   $0x0,-0x21c(%rbp)
    65dc:	00 00 00 
    }
    65df:	8b 85 e4 fd ff ff    	mov    -0x21c(%rbp),%eax
    65e5:	48 81 c4 b0 02 00 00 	add    $0x2b0,%rsp
    65ec:	5d                   	pop    %rbp
    65ed:	c3                   	ret
    65ee:	66 90                	xchg   %ax,%ax

00000000000065f0 <_ZN4ours3mem12ArchVmAspace3mapEmmmN4arch6paging8MmuFlagsENS3_10MapControlE>:

    auto ArchVmAspace::map(VirtAddr va, PhysAddr pa, usize n, MmuFlags flags, MapControl control) -> ustl::Result<usize, Status>
    {  
    65f0:	55                   	push   %rbp
    65f1:	48 89 e5             	mov    %rsp,%rbp
    65f4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    65fb:	48 89 f8             	mov    %rdi,%rax
    65fe:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    6602:	8b 45 10             	mov    0x10(%rbp),%eax
    6605:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
    6609:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
    660d:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
    6611:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    6615:	4c 89 45 a0          	mov    %r8,-0x60(%rbp)
    6619:	4c 89 4d 98          	mov    %r9,-0x68(%rbp)
    661d:	4c 8b 4d b8          	mov    -0x48(%rbp),%r9
        return page_table_.map_pages(va, pa, n, flags, control);
    6621:	49 83 c1 28          	add    $0x28,%r9
    6625:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
    6629:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    662d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    6631:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    6635:	8b 45 10             	mov    0x10(%rbp),%eax
    6638:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    663c:	4c 89 4d f0          	mov    %r9,-0x10(%rbp)
    6640:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
    6644:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6648:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    664c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    6650:	89 45 cc             	mov    %eax,-0x34(%rbp)
    6653:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            return pimpl_->map_pages(va, pa, n, flags, action);
    6657:	48 8b 70 38          	mov    0x38(%rax),%rsi
    665b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    665f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    6663:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
    6667:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
    666b:	44 8b 55 cc          	mov    -0x34(%rbp),%r10d
    666f:	48 89 e0             	mov    %rsp,%rax
    6672:	44 89 10             	mov    %r10d,(%rax)
    6675:	e8 d6 3a 00 00       	call   a150 <_ZN4arch6paging13IX86PageTable9map_pagesEmmmNS0_8MmuFlagsENS0_10MapControlE>
    667a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    667e:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    6685:	5d                   	pop    %rbp
    6686:	c3                   	ret
    6687:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    668e:	00 00 

0000000000006690 <_ZN4ours3mem12ArchVmAspace5unmapEmmN4arch6paging12UnMapControlE>:
    }

    auto ArchVmAspace::unmap(VirtAddr va, usize n, UnMapControl control) -> Status
    {  
    6690:	55                   	push   %rbp
    6691:	48 89 e5             	mov    %rsp,%rbp
    6694:	48 83 ec 40          	sub    $0x40,%rsp
    6698:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    669c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    66a0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    66a4:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
    66a7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
        return page_table_.unmap_pages(va, n, control);
    66ab:	48 83 c6 28          	add    $0x28,%rsi
    66af:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    66b3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    66b7:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    66ba:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    66be:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    66c2:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    66c6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    66c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            return pimpl_->unmap_pages(va, n, control);
    66cd:	48 8b 78 38          	mov    0x38(%rax),%rdi
    66d1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    66d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    66d9:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    66dc:	48 8b 07             	mov    (%rdi),%rax
    66df:	ff 50 20             	call   *0x20(%rax)
    66e2:	48 83 c4 40          	add    $0x40,%rsp
    66e6:	5d                   	pop    %rbp
    66e7:	c3                   	ret
    66e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    66ef:	00 

00000000000066f0 <_ZN4ours3mem12ArchVmAspace5queryEmPmPN4arch6paging8MmuFlagsE>:
    }

    auto ArchVmAspace::query(VirtAddr va, ai_out PhysAddr *pa, MmuFlags *flags) -> Status
    {
    66f0:	55                   	push   %rbp
    66f1:	48 89 e5             	mov    %rsp,%rbp
    66f4:	48 83 ec 40          	sub    $0x40,%rsp
    66f8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    66fc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    6700:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    6704:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    6708:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
        return page_table_.query_mapping(va, pa, flags);
    670c:	48 83 c6 28          	add    $0x28,%rsi
    6710:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    6714:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    6718:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    671c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    6720:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    6724:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    6728:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    672c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            return pimpl_->query_mapping(va, pa, flags);
    6730:	48 8b 78 38          	mov    0x38(%rax),%rdi
    6734:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    6738:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    673c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    6740:	48 8b 07             	mov    (%rdi),%rax
    6743:	ff 50 30             	call   *0x30(%rax)
    6746:	48 83 c4 40          	add    $0x40,%rsp
    674a:	5d                   	pop    %rbp
    674b:	c3                   	ret
    674c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006750 <_ZN4gktl6CanaryILj1885430629EEC2Ev>:
    /// In this file scope, it should be readonly.
    6750:	55                   	push   %rbp
    6751:	48 89 e5             	mov    %rsp,%rbp
    6754:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6758:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    675c:	c7 00 65 63 61 70    	movl   $0x70616365,(%rax)
    /// In this file scope, it should be readonly.
    6762:	5d                   	pop    %rbp
    6763:	c3                   	ret
    6764:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    676b:	00 00 00 
    676e:	66 90                	xchg   %ax,%ax

0000000000006770 <_ZN4ours7CpuMaskC2Ev>:
    struct CpuMask
    6770:	55                   	push   %rbp
    6771:	48 89 e5             	mov    %rsp,%rbp
    6774:	48 83 ec 10          	sub    $0x10,%rsp
    6778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    677c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6780:	e8 9b cf ff ff       	call   3720 <_ZNSt3__16bitsetILm32EEC2B8nn210000Ev>
    6785:	48 83 c4 10          	add    $0x10,%rsp
    6789:	5d                   	pop    %rbp
    678a:	c3                   	ret
    678b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006790 <_ZN4ours3mem8VmAspace13kernel_aspaceEv>:
        static auto sync_kernel_aspace() -> void;

        static auto switch_aspace(Self *, Self *) -> void;

        static auto kernel_aspace() -> ustl::Rc<VmAspace>
        {  return ustl::make_rc<VmAspace>(KERNEL_ASPACE_);  }
    6790:	55                   	push   %rbp
    6791:	48 89 e5             	mov    %rsp,%rbp
    6794:	48 89 f8             	mov    %rdi,%rax
    6797:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    679b:	48 8d 0d b6 21 03 00 	lea    0x321b6(%rip),%rcx        # 38958 <_ZN4ours3mem8VmAspace14KERNEL_ASPACE_E>
    67a2:	48 8b 09             	mov    (%rcx),%rcx
    67a5:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    67a9:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    template <typename Base, typename Derived = Base, typename... Args>
        requires traits::IsBaseOfV<RefCounter<Base, Args...>, Derived>
    USTL_FORCEINLINE
    auto make_rc(Derived *object) -> Rc<Base, Args...>
    {
        return Rc<Base, Args...>(object, object);
    67ad:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    67b1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    67b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    67b9:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    67bd:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    67c1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
            : pointer_(ptr),
    67c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    67c9:	48 89 11             	mov    %rdx,(%rcx)
              counter_(counter)
    67cc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    67d0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    67d4:	5d                   	pop    %rbp
    67d5:	c3                   	ret
    67d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    67dd:	00 00 00 

00000000000067e0 <_ZN4ours3mem8VmAspace11arch_aspaceEv>:

        auto is_user() const -> bool
        {  return static_cast<bool>(flags_ & VmasFlags::User);  }

        auto arch_aspace() -> ArchVmAspace & 
        {  return this->arch_;  }
    67e0:	55                   	push   %rbp
    67e1:	48 89 e5             	mov    %rsp,%rbp
    67e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    67e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67ec:	48 83 c0 40          	add    $0x40,%rax
    67f0:	5d                   	pop    %rbp
    67f1:	c3                   	ret
    67f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    67f9:	00 00 00 
    67fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006800 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEC2Ev>:
#include <arch/paging/arch_mmu_flags.hpp>
#include <ustl/traits/integral_constant.hpp>

namespace arch::paging {
    template <typename Options>
    class X86PageTableMmu
    6800:	55                   	push   %rbp
    6801:	48 89 e5             	mov    %rsp,%rbp
    6804:	48 83 ec 10          	sub    $0x10,%rsp
    6808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    680c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6810:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    6814:	e8 17 00 00 00       	call   6830 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_EC2Ev>
    6819:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    681d:	48 8d 0d 44 aa 02 00 	lea    0x2aa44(%rip),%rcx        # 31268 <_ZTVN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEE+0x10>
    6824:	48 89 08             	mov    %rcx,(%rax)
    6827:	48 83 c4 10          	add    $0x10,%rsp
    682b:	5d                   	pop    %rbp
    682c:	c3                   	ret
    682d:	0f 1f 00             	nopl   (%rax)

0000000000006830 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_EC2Ev>:
        typedef typename PagingTraits::template Pte<PagingTraits::kFinalLevel>  Pte;
        typedef typename Pte::ValueType    PteVal;

        typedef MappingContext<Derived> MappingContext;
      public:
        X86PageTableImpl() = default;
    6830:	55                   	push   %rbp
    6831:	48 89 e5             	mov    %rsp,%rbp
    6834:	48 83 ec 10          	sub    $0x10,%rsp
    6838:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    683c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6840:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    6844:	e8 77 06 00 00       	call   6ec0 <_ZN4arch6paging13IX86PageTableC2Ev>
    6849:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    684d:	48 8d 05 6c aa 02 00 	lea    0x2aa6c(%rip),%rax        # 312c0 <_ZTVN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_EE+0x10>
    6854:	48 89 07             	mov    %rax,(%rdi)
    6857:	48 83 c7 30          	add    $0x30,%rdi
    685b:	e8 a0 06 00 00       	call   6f00 <_ZN4gktl6CanaryILj1633840229EEC2Ev>
    6860:	48 83 c4 10          	add    $0x10,%rsp
    6864:	5d                   	pop    %rbp
    6865:	c3                   	ret
    6866:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    686d:	00 00 00 

0000000000006870 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEED2Ev>:
        typedef X86PageTableImpl<Self, Options>  Base;

        using typename Base::PagingTraits;
        using typename Base::LevelType;
    public:
        ~X86PageTableMmu() override = default;
    6870:	55                   	push   %rbp
    6871:	48 89 e5             	mov    %rsp,%rbp
    6874:	48 83 ec 10          	sub    $0x10,%rsp
    6878:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    687c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6880:	e8 9b 06 00 00       	call   6f20 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_ED2Ev>
    6885:	48 83 c4 10          	add    $0x10,%rsp
    6889:	5d                   	pop    %rbp
    688a:	c3                   	ret
    688b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006890 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEED0Ev>:
    6890:	55                   	push   %rbp
    6891:	48 89 e5             	mov    %rsp,%rbp
    6894:	48 83 ec 10          	sub    $0x10,%rsp
    6898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    689c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    68a0:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    68a4:	e8 c7 ff ff ff       	call   6870 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEED2Ev>
    68a9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    68ad:	be 38 00 00 00       	mov    $0x38,%esi
    68b2:	e8 d9 28 01 00       	call   19190 <_ZdlPvm>
    68b7:	48 83 c4 10          	add    $0x10,%rsp
    68bb:	5d                   	pop    %rbp
    68bc:	c3                   	ret
    68bd:	0f 1f 00             	nopl   (%rax)

00000000000068c0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE>:
    }

    TEMPLATE
    auto X86_PAGE_TABLE::map_pages_with_altmap(VirtAddr va, PhysAddr pa, usize n, MmuFlags flags, MapControl control, Altmap *altmap) 
        -> ustl::Result<usize, Status>
    {
    68c0:	55                   	push   %rbp
    68c1:	48 89 e5             	mov    %rsp,%rbp
    68c4:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
    68cb:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    68d2:	48 89 f8             	mov    %rdi,%rax
    68d5:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    68dc:	48 8b 45 18          	mov    0x18(%rbp),%rax
    68e0:	8b 45 10             	mov    0x10(%rbp),%eax
    68e3:	48 89 bd 40 ff ff ff 	mov    %rdi,-0xc0(%rbp)
    68ea:	48 89 b5 38 ff ff ff 	mov    %rsi,-0xc8(%rbp)
    68f1:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
    68f8:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
    68ff:	4c 89 85 20 ff ff ff 	mov    %r8,-0xe0(%rbp)
    6906:	4c 89 8d 18 ff ff ff 	mov    %r9,-0xe8(%rbp)
    690d:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    6914:	48 89 bd 88 fe ff ff 	mov    %rdi,-0x178(%rbp)
        canary_.verify();
    691b:	48 83 c7 30          	add    $0x30,%rdi
    691f:	e8 2c 07 00 00       	call   7050 <_ZNK4gktl6CanaryILj1633840229EE6verifyEv>
    6924:	48 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%rdi

        MappingContext context;
        auto status = prepare_map_pages(va, &pa, n, flags, &context);
    692b:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
    6932:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
    6939:	4c 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%r8
    6940:	48 8d 95 28 ff ff ff 	lea    -0xd8(%rbp),%rdx
    6947:	4c 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%r9
    694e:	e8 3d 07 00 00       	call   7090 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE>
    6953:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
        if (status != Status::Ok) {
    6959:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    6960:	74 6f                	je     69d1 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x111>
            return ustl::err(status);
    6962:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    6968:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
    696e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6975:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6979:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    697d:	48 8d bd 54 ff ff ff 	lea    -0xac(%rbp),%rdi
    {  return Err<void>();  }

    template <typename E>
    USTL_FORCEINLINE USTL_CONSTEXPR
    auto err(E e) -> Err<E>
    {  return Err<E>(ustl::forward<E>(e));  }
    6984:	e8 c7 11 00 00       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    6989:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    6990:	8b 8d 54 ff ff ff    	mov    -0xac(%rbp),%ecx
    6996:	89 8d b8 fe ff ff    	mov    %ecx,-0x148(%rbp)
    699c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    69a3:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
    69aa:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    69b1:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    69b8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    69bf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    69c3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    69c7:	e8 b4 11 00 00       	call   7b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
    69cc:	e9 8a 01 00 00       	jmp    6b5b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
        } else if (n == 0) {
    69d1:	48 83 bd 20 ff ff ff 	cmpq   $0x0,-0xe0(%rbp)
    69d8:	00 
    69d9:	75 58                	jne    6a33 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x173>
    69db:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
    69e2:	00 
    69e3:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    69e7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    69eb:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    69ef:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    69f3:	e8 d8 11 00 00       	call   7bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>
    69f8:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    69ff:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
            return ustl::ok<usize>(0);
    6a03:	48 89 8d b0 fe ff ff 	mov    %rcx,-0x150(%rbp)
    6a0a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6a0e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    6a15:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    6a19:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    6a1d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6a21:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6a25:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    6a29:	e8 d2 11 00 00       	call   7c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>
    6a2e:	e9 28 01 00 00       	jmp    6b5b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
    6a33:	eb 00                	jmp    6a35 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x175>
    6a35:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
        }

        {
            ustl::sync::LockGuard guard(mutex_);
    6a3c:	48 83 c6 35          	add    $0x35,%rsi
    6a40:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
    6a47:	e8 64 07 00 00       	call   71b0 <_ZN4ustl4sync9LockGuardIN4ours5MutexEEC2ERS3_>
    6a4c:	48 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%rdi
            status = create_mapping(Self::top_level(), reinterpret_cast<PteVal *>(virt_), &context, control);
    6a53:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    6a57:	44 8b 45 10          	mov    0x10(%rbp),%r8d
    6a5b:	be 03 00 00 00       	mov    $0x3,%esi
    6a60:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    6a67:	e8 74 07 00 00       	call   71e0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE>
    6a6c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    6a72:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
        }
    6a79:	e8 82 0e 00 00       	call   7900 <_ZN4ustl4sync9LockGuardIN4ours5MutexEED2Ev>

        if (status != Status::Ok) {
    6a7e:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    6a85:	74 6c                	je     6af3 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x233>
            return ustl::err(status);
    6a87:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    6a8d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    6a93:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
    6a9a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    6a9e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    6aa2:	48 8d bd 4c ff ff ff 	lea    -0xb4(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    6aa9:	e8 a2 10 00 00       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    6aae:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    6ab5:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
    6abb:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%rbp)
    6ac1:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6ac8:	48 8d 85 9c fe ff ff 	lea    -0x164(%rbp),%rax
    6acf:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    6ad6:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    6add:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    6ae4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6ae8:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    6aec:	e8 8f 10 00 00       	call   7b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
    6af1:	eb 68                	jmp    6b5b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
    6af3:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    6afa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    6afe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            return nr_mapped_;
    6b02:	48 8b 40 48          	mov    0x48(%rax),%rax
    6b06:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    6b0d:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
    6b14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6b18:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    6b1c:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    6b20:	e8 ab 10 00 00       	call   7bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>
    6b25:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    6b2c:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
        }
        return ustl::ok<usize>(context.mapped());
    6b30:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
    6b37:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    6b3b:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    6b42:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    6b46:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    6b4a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6b4e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6b52:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    6b56:	e8 a5 10 00 00       	call   7c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>
    6b5b:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
    }
    6b62:	48 81 c4 90 01 00 00 	add    $0x190,%rsp
    6b69:	5d                   	pop    %rbp
    6b6a:	c3                   	ret
    6b6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006b70 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE>:

    TEMPLATE
    auto X86_PAGE_TABLE::map_pages_bulk_with_altmap(VirtAddr va, PhysAddr *pa, usize len, MmuFlags flags, MapControl control, Altmap *altmap)
        -> ustl::Result<usize, Status>
    {
    6b70:	55                   	push   %rbp
    6b71:	48 89 e5             	mov    %rsp,%rbp
    6b74:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
    6b7b:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    6b82:	48 89 f8             	mov    %rdi,%rax
    6b85:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    6b8c:	48 8b 45 18          	mov    0x18(%rbp),%rax
    6b90:	8b 45 10             	mov    0x10(%rbp),%eax
    6b93:	48 89 bd 40 ff ff ff 	mov    %rdi,-0xc0(%rbp)
    6b9a:	48 89 b5 38 ff ff ff 	mov    %rsi,-0xc8(%rbp)
    6ba1:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
    6ba8:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
    6baf:	4c 89 85 20 ff ff ff 	mov    %r8,-0xe0(%rbp)
    6bb6:	4c 89 8d 18 ff ff ff 	mov    %r9,-0xe8(%rbp)
    6bbd:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    6bc4:	48 89 bd 88 fe ff ff 	mov    %rdi,-0x178(%rbp)
        canary_.verify();
    6bcb:	48 83 c7 30          	add    $0x30,%rdi
    6bcf:	e8 7c 04 00 00       	call   7050 <_ZNK4gktl6CanaryILj1633840229EE6verifyEv>
    6bd4:	48 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%rdi

        MappingContext context;
        auto status = prepare_map_pages(va, pa, len, flags, &context);
    6bdb:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
    6be2:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    6be9:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
    6bf0:	4c 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%r8
    6bf7:	4c 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%r9
    6bfe:	e8 8d 04 00 00       	call   7090 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE>
    6c03:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
        if (status != Status::Ok) {
    6c09:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    6c10:	74 6f                	je     6c81 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x111>
            return ustl::err(status);
    6c12:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    6c18:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
    6c1e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6c25:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6c29:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    6c2d:	48 8d bd 54 ff ff ff 	lea    -0xac(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    6c34:	e8 17 0f 00 00       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    6c39:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    6c40:	8b 8d 54 ff ff ff    	mov    -0xac(%rbp),%ecx
    6c46:	89 8d b8 fe ff ff    	mov    %ecx,-0x148(%rbp)
    6c4c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    6c53:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
    6c5a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    6c61:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    6c68:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    6c6f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6c73:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    6c77:	e8 04 0f 00 00       	call   7b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
    6c7c:	e9 8a 01 00 00       	jmp    6e0b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
        } else if (len == 0) {
    6c81:	48 83 bd 20 ff ff ff 	cmpq   $0x0,-0xe0(%rbp)
    6c88:	00 
    6c89:	75 58                	jne    6ce3 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x173>
    6c8b:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
    6c92:	00 
    6c93:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    6c97:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    6c9b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    6c9f:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    6ca3:	e8 28 0f 00 00       	call   7bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>
    6ca8:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    6caf:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
            return ustl::ok<usize>(0);
    6cb3:	48 89 8d b0 fe ff ff 	mov    %rcx,-0x150(%rbp)
    6cba:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6cbe:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    6cc5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    6cc9:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    6ccd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6cd1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6cd5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    6cd9:	e8 22 0f 00 00       	call   7c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>
    6cde:	e9 28 01 00 00       	jmp    6e0b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
    6ce3:	eb 00                	jmp    6ce5 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x175>
    6ce5:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
        }

        {
            ustl::sync::LockGuard guard(mutex_);
    6cec:	48 83 c6 35          	add    $0x35,%rsi
    6cf0:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
    6cf7:	e8 b4 04 00 00       	call   71b0 <_ZN4ustl4sync9LockGuardIN4ours5MutexEEC2ERS3_>
    6cfc:	48 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%rdi
            status = create_mapping(Self::top_level(), reinterpret_cast<PteVal *>(virt_), &context, control);
    6d03:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    6d07:	44 8b 45 10          	mov    0x10(%rbp),%r8d
    6d0b:	be 03 00 00 00       	mov    $0x3,%esi
    6d10:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    6d17:	e8 c4 04 00 00       	call   71e0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE>
    6d1c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    6d22:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
        }
    6d29:	e8 d2 0b 00 00       	call   7900 <_ZN4ustl4sync9LockGuardIN4ours5MutexEED2Ev>

        if (status != Status::Ok) {
    6d2e:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    6d35:	74 6c                	je     6da3 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x233>
            return ustl::err(status);
    6d37:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    6d3d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    6d43:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
    6d4a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    6d4e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    6d52:	48 8d bd 4c ff ff ff 	lea    -0xb4(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    6d59:	e8 f2 0d 00 00       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    6d5e:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    6d65:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
    6d6b:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%rbp)
    6d71:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6d78:	48 8d 85 9c fe ff ff 	lea    -0x164(%rbp),%rax
    6d7f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    6d86:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    6d8d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    6d94:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6d98:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    6d9c:	e8 df 0d 00 00       	call   7b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
    6da1:	eb 68                	jmp    6e0b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
    6da3:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    6daa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    6dae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6db2:	48 8b 40 48          	mov    0x48(%rax),%rax
    6db6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    6dbd:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
    6dc4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6dc8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    6dcc:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    6dd0:	e8 fb 0d 00 00       	call   7bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>
    6dd5:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    6ddc:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
        }
        return ustl::ok<usize>(context.mapped());
    6de0:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
    6de7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    6deb:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    6df2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    6df6:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    6dfa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6dfe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6e02:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    6e06:	e8 f5 0d 00 00       	call   7c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>
    6e0b:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
    }
    6e12:	48 81 c4 90 01 00 00 	add    $0x190,%rsp
    6e19:	5d                   	pop    %rbp
    6e1a:	c3                   	ret
    6e1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006e20 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E11unmap_pagesEmmNS0_12UnMapControlE>:
    auto X86_PAGE_TABLE::unmap_entry(PteVal volatile*, LevelType level) -> Status
    {  return Status::Unimplemented;  }

    TEMPLATE
    auto X86_PAGE_TABLE::unmap_pages(VirtAddr va, usize n, UnMapControl) -> Status
    {  return Status::Unimplemented;  }
    6e20:	55                   	push   %rbp
    6e21:	48 89 e5             	mov    %rsp,%rbp
    6e24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6e28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6e2c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    6e30:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    6e33:	b8 05 00 00 00       	mov    $0x5,%eax
    6e38:	5d                   	pop    %rbp
    6e39:	c3                   	ret
    6e3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000006e40 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E13protect_pagesEmmNS0_8MmuFlagsE>:

    TEMPLATE
    auto X86_PAGE_TABLE::protect_pages(VirtAddr va, usize n, MmuFlags flags) -> Status
    {  return Status::Unimplemented;  }
    6e40:	55                   	push   %rbp
    6e41:	48 89 e5             	mov    %rsp,%rbp
    6e44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6e48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6e4c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    6e50:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    6e54:	b8 05 00 00 00       	mov    $0x5,%eax
    6e59:	5d                   	pop    %rbp
    6e5a:	c3                   	ret
    6e5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006e60 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E13query_mappingEmPmPNS0_8MmuFlagsE>:

    TEMPLATE
    auto X86_PAGE_TABLE::query_mapping(VirtAddr va, ai_out PhysAddr *pa, ai_out MmuFlags *flags) -> Status
    {  return Status::Unimplemented;  }
    6e60:	55                   	push   %rbp
    6e61:	48 89 e5             	mov    %rsp,%rbp
    6e64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6e68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6e6c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    6e70:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    6e74:	b8 05 00 00 00       	mov    $0x5,%eax
    6e79:	5d                   	pop    %rbp
    6e7a:	c3                   	ret
    6e7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006e80 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E16harvest_accessedEmmNS0_14HarvestControlE>:

    TEMPLATE
    auto X86_PAGE_TABLE::harvest_accessed(VirtAddr va, usize n, HarvestControl action) -> Status
    {  return Status::Unimplemented;  }
    6e80:	55                   	push   %rbp
    6e81:	48 89 e5             	mov    %rsp,%rbp
    6e84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6e88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6e8c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    6e90:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    6e93:	b8 05 00 00 00       	mov    $0x5,%eax
    6e98:	5d                   	pop    %rbp
    6e99:	c3                   	ret
    6e9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000006ea0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E8alias_toERKNS0_13IX86PageTableEmm>:

    TEMPLATE
    auto X86_PAGE_TABLE::alias_to(IX86PageTable const &other, VirtAddr base, usize nr_pages) -> Status
    {  return Status::Unimplemented;  }
    6ea0:	55                   	push   %rbp
    6ea1:	48 89 e5             	mov    %rsp,%rbp
    6ea4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6ea8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6eac:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    6eb0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    6eb4:	b8 05 00 00 00       	mov    $0x5,%eax
    6eb9:	5d                   	pop    %rbp
    6eba:	c3                   	ret
    6ebb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006ec0 <_ZN4arch6paging13IX86PageTableC2Ev>:
        IX86PageTable() = default;
    6ec0:	55                   	push   %rbp
    6ec1:	48 89 e5             	mov    %rsp,%rbp
    6ec4:	48 83 ec 10          	sub    $0x10,%rsp
    6ec8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6ecc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6ed0:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    6ed4:	48 8d 05 3d a4 02 00 	lea    0x2a43d(%rip),%rax        # 31318 <_ZTVN4arch6paging13IX86PageTableE+0x10>
    6edb:	48 89 07             	mov    %rax,(%rdi)
    6ede:	48 83 c7 20          	add    $0x20,%rdi
    6ee2:	e8 89 00 00 00       	call   6f70 <_ZNSt3__16atomicImEC2B8nn210000Ev>
    6ee7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6eeb:	48 83 c7 28          	add    $0x28,%rdi
    6eef:	e8 7c 00 00 00       	call   6f70 <_ZNSt3__16atomicImEC2B8nn210000Ev>
    6ef4:	48 83 c4 10          	add    $0x10,%rsp
    6ef8:	5d                   	pop    %rbp
    6ef9:	c3                   	ret
    6efa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000006f00 <_ZN4gktl6CanaryILj1633840229EEC2Ev>:
    6f00:	55                   	push   %rbp
    6f01:	48 89 e5             	mov    %rsp,%rbp
    6f04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6f08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    6f0c:	c7 00 65 6c 62 61    	movl   $0x61626c65,(%rax)
    /// In this file scope, it should be readonly.
    6f12:	5d                   	pop    %rbp
    6f13:	c3                   	ret
    6f14:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    6f1b:	00 00 00 
    6f1e:	66 90                	xchg   %ax,%ax

0000000000006f20 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_ED2Ev>:
        virtual ~X86PageTableImpl() override = default;
    6f20:	55                   	push   %rbp
    6f21:	48 89 e5             	mov    %rsp,%rbp
    6f24:	48 83 ec 10          	sub    $0x10,%rsp
    6f28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6f2c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6f30:	e8 5b 00 00 00       	call   6f90 <_ZN4arch6paging13IX86PageTableD2Ev>
    6f35:	48 83 c4 10          	add    $0x10,%rsp
    6f39:	5d                   	pop    %rbp
    6f3a:	c3                   	ret
    6f3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006f40 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_ED0Ev>:
    6f40:	55                   	push   %rbp
    6f41:	48 89 e5             	mov    %rsp,%rbp
    6f44:	48 83 ec 10          	sub    $0x10,%rsp
    6f48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6f4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6f50:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    6f54:	e8 c7 ff ff ff       	call   6f20 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_ED2Ev>
    6f59:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6f5d:	be 38 00 00 00       	mov    $0x38,%esi
    6f62:	e8 29 22 01 00       	call   19190 <_ZdlPvm>
    6f67:	48 83 c4 10          	add    $0x10,%rsp
    6f6b:	5d                   	pop    %rbp
    6f6c:	c3                   	ret
    6f6d:	0f 1f 00             	nopl   (%rax)

0000000000006f70 <_ZNSt3__16atomicImEC2B8nn210000Ev>:
template <class _Tp>
struct atomic : public __atomic_base<_Tp> {
  using __base _LIBCPP_NODEBUG = __atomic_base<_Tp>;

#if _LIBCPP_STD_VER >= 20
  _LIBCPP_HIDE_FROM_ABI atomic() = default;
    6f70:	55                   	push   %rbp
    6f71:	48 89 e5             	mov    %rsp,%rbp
    6f74:	48 83 ec 10          	sub    $0x10,%rsp
    6f78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6f7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6f80:	e8 2b 00 00 00       	call   6fb0 <_ZNSt3__113__atomic_baseImLb1EEC2B8nn210000Ev>
    6f85:	48 83 c4 10          	add    $0x10,%rsp
    6f89:	5d                   	pop    %rbp
    6f8a:	c3                   	ret
    6f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006f90 <_ZN4arch6paging13IX86PageTableD2Ev>:
        virtual ~IX86PageTable() = default;
    6f90:	55                   	push   %rbp
    6f91:	48 89 e5             	mov    %rsp,%rbp
    6f94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6f98:	5d                   	pop    %rbp
    6f99:	c3                   	ret
    6f9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000006fa0 <_ZN4arch6paging13IX86PageTableD0Ev>:
    6fa0:	55                   	push   %rbp
    6fa1:	48 89 e5             	mov    %rsp,%rbp
    6fa4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6fa8:	0f 0b                	ud2
    6faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000006fb0 <_ZNSt3__113__atomic_baseImLb1EEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 __atomic_base() _NOEXCEPT = default;
    6fb0:	55                   	push   %rbp
    6fb1:	48 89 e5             	mov    %rsp,%rbp
    6fb4:	48 83 ec 10          	sub    $0x10,%rsp
    6fb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6fbc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6fc0:	e8 0b 00 00 00       	call   6fd0 <_ZNSt3__113__atomic_baseImLb0EEC2B8nn210000Ev>
    6fc5:	48 83 c4 10          	add    $0x10,%rsp
    6fc9:	5d                   	pop    %rbp
    6fca:	c3                   	ret
    6fcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006fd0 <_ZNSt3__113__atomic_baseImLb0EEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr __atomic_base() noexcept(is_nothrow_default_constructible_v<_Tp>) : __a_(_Tp()) {}
    6fd0:	55                   	push   %rbp
    6fd1:	48 89 e5             	mov    %rsp,%rbp
    6fd4:	48 83 ec 10          	sub    $0x10,%rsp
    6fd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6fdc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    6fe0:	31 c0                	xor    %eax,%eax
    6fe2:	31 c0                	xor    %eax,%eax
    6fe4:	89 c6                	mov    %eax,%esi
    6fe6:	e8 15 00 00 00       	call   7000 <_ZNSt3__117__cxx_atomic_implImNS_22__cxx_atomic_base_implImEEEC2B8nn210000Em>
    6feb:	48 83 c4 10          	add    $0x10,%rsp
    6fef:	5d                   	pop    %rbp
    6ff0:	c3                   	ret
    6ff1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    6ff8:	00 00 00 
    6ffb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000007000 <_ZNSt3__117__cxx_atomic_implImNS_22__cxx_atomic_base_implImEEEC2B8nn210000Em>:
template <typename _Tp, typename _Base = __cxx_atomic_base_impl<_Tp> >
struct __cxx_atomic_impl : public _Base {
  static_assert(is_trivially_copyable<_Tp>::value, "std::atomic<T> requires that 'T' be a trivially copyable type");

  _LIBCPP_HIDE_FROM_ABI __cxx_atomic_impl() _NOEXCEPT = default;
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR explicit __cxx_atomic_impl(_Tp __value) _NOEXCEPT : _Base(__value) {}
    7000:	55                   	push   %rbp
    7001:	48 89 e5             	mov    %rsp,%rbp
    7004:	48 83 ec 10          	sub    $0x10,%rsp
    7008:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    700c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7010:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    7014:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    7018:	e8 13 00 00 00       	call   7030 <_ZNSt3__122__cxx_atomic_base_implImEC2Em>
    701d:	48 83 c4 10          	add    $0x10,%rsp
    7021:	5d                   	pop    %rbp
    7022:	c3                   	ret
    7023:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    702a:	00 00 00 
    702d:	0f 1f 00             	nopl   (%rax)

0000000000007030 <_ZNSt3__122__cxx_atomic_base_implImEC2Em>:
  __cxx_atomic_base_impl() _NOEXCEPT = default;
#else
  __cxx_atomic_base_impl() _NOEXCEPT : __a_value() {
  }
#endif // _LIBCPP_CXX03_LANG
  _LIBCPP_CONSTEXPR explicit __cxx_atomic_base_impl(_Tp __value) _NOEXCEPT : __a_value(__value) {}
    7030:	55                   	push   %rbp
    7031:	48 89 e5             	mov    %rsp,%rbp
    7034:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7038:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    703c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7040:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7044:	48 89 08             	mov    %rcx,(%rax)
    7047:	5d                   	pop    %rbp
    7048:	c3                   	ret
    7049:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000007050 <_ZNK4gktl6CanaryILj1633840229EE6verifyEv>:

    7050:	55                   	push   %rbp
    7051:	48 89 e5             	mov    %rsp,%rbp
    7054:	48 83 ec 20          	sub    $0x20,%rsp
    7058:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    705c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ArchVmAspace::ArchVmAspace(VirtAddr base, usize size, VmasFlags flags)
    7060:	81 38 65 6c 62 61    	cmpl   $0x61626c65,(%rax)
    7066:	74 1d                	je     7085 <_ZNK4gktl6CanaryILj1633840229EE6verifyEv+0x35>
    7068:	48 8d 35 6d 7e 02 00 	lea    0x27e6d(%rip),%rsi        # 2eedc <.L.str>
    706f:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    7073:	e8 08 c2 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    7078:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    707c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    7080:	e8 ab c1 ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
        : range_(base, size),
    7085:	48 83 c4 20          	add    $0x20,%rsp
    7089:	5d                   	pop    %rbp
    708a:	c3                   	ret
    708b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000007090 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE>:
    {
    7090:	55                   	push   %rbp
    7091:	48 89 e5             	mov    %rsp,%rbp
    7094:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    709b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    709f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    70a3:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    70a7:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    70ab:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    70af:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    70b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    70b7:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
        auto const derived = static_cast<Derived *>(this);
    70be:	48 89 45 88          	mov    %rax,-0x78(%rbp)
        if (derived->check_virt_addr(va)) {
    70c2:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    70c6:	e8 55 08 00 00       	call   7920 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE15check_virt_addrEm>
    70cb:	a8 01                	test   $0x1,%al
    70cd:	75 02                	jne    70d1 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x41>
    70cf:	eb 0c                	jmp    70dd <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x4d>
            return Status::InvalidArguments;
    70d1:	c7 45 c0 04 00 00 00 	movl   $0x4,-0x40(%rbp)
    70d8:	e9 bf 00 00 00       	jmp    719c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x10c>
        if (derived->is_flags_allowed(flags)) {
    70dd:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
    70e1:	e8 4a 08 00 00       	call   7930 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE16is_flags_allowedENS0_8MmuFlagsE>
    70e6:	a8 01                	test   $0x1,%al
    70e8:	75 02                	jne    70ec <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x5c>
    70ea:	eb 0c                	jmp    70f8 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x68>
            return Status::InvalidArguments;
    70ec:	c7 45 c0 04 00 00 00 	movl   $0x4,-0x40(%rbp)
    70f3:	e9 a4 00 00 00       	jmp    719c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x10c>
        for (auto i = 0; i < len; ++i) {
    70f8:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
    70ff:	48 63 45 84          	movslq -0x7c(%rbp),%rax
    7103:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
    7107:	73 2d                	jae    7136 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0xa6>
            if (derived->check_phys_addr(pa[i])) {
    7109:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    710d:	48 63 4d 84          	movslq -0x7c(%rbp),%rcx
    7111:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    7115:	e8 26 08 00 00       	call   7940 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE15check_phys_addrEm>
    711a:	a8 01                	test   $0x1,%al
    711c:	75 02                	jne    7120 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x90>
    711e:	eb 09                	jmp    7129 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x99>
                return Status::InvalidArguments;
    7120:	c7 45 c0 04 00 00 00 	movl   $0x4,-0x40(%rbp)
    7127:	eb 73                	jmp    719c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x10c>
        }
    7129:	eb 00                	jmp    712b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x9b>
        for (auto i = 0; i < len; ++i) {
    712b:	8b 45 84             	mov    -0x7c(%rbp),%eax
    712e:	83 c0 01             	add    $0x1,%eax
    7131:	89 45 84             	mov    %eax,-0x7c(%rbp)
    7134:	eb c9                	jmp    70ff <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x6f>
    7136:	4c 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%r8
        return make_mapping_context(context, va, pa, len, flags);
    713d:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    7141:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    7145:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7149:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    714d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7151:	4c 89 45 f8          	mov    %r8,-0x8(%rbp)
    7155:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    7159:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    715d:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    7161:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    7165:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7169:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        auto const derived = static_cast<Derived *>(this);
    716d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        ustl::mem::construct_at(context, va, pa, n, flags, 4096);
    7171:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7175:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%rbp)
    717c:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
    7180:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    7184:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
    7188:	4c 8d 45 d0          	lea    -0x30(%rbp),%r8
    718c:	4c 8d 4d c4          	lea    -0x3c(%rbp),%r9
    7190:	e8 bb 07 00 00       	call   7950 <_ZNSt3__112construct_atB8nn210000IN4arch6paging14MappingContextINS2_15X86PageTableMmuINS1_6MutexTIN4ours5MutexEE4PackINS2_12PageFlusherTINS6_3mem7details14TlbInvalidatorEE4PackINS2_11PageSourceTINSC_13PageAllocatorEE4PackINS2_23PageTableDefaultOptionsEEEEEEEEEEEJRmRPmSQ_RNS2_8MmuFlagsEiEPSP_EEPT_SX_DpOT0_>
        return make_mapping_context(context, va, pa, len, flags);
    7195:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
    }
    719c:	8b 45 c0             	mov    -0x40(%rbp),%eax
    719f:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
    71a6:	5d                   	pop    %rbp
    71a7:	c3                   	ret
    71a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    71af:	00 

00000000000071b0 <_ZN4ustl4sync9LockGuardIN4ours5MutexEEC2ERS3_>:
    {
    public:
        LockGuard(Lock &lock)
            : lock_(&lock),
              unlocked_(false)
        { lock.lock(); }
    71b0:	55                   	push   %rbp
    71b1:	48 89 e5             	mov    %rsp,%rbp
    71b4:	48 83 ec 10          	sub    $0x10,%rsp
    71b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    71bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    71c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            : lock_(&lock),
    71c4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    71c8:	48 89 08             	mov    %rcx,(%rax)
              unlocked_(false)
    71cb:	c6 40 08 00          	movb   $0x0,0x8(%rax)
        { lock.lock(); }
    71cf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    71d3:	e8 68 0a 00 00       	call   7c40 <_ZN4ours5Mutex4lockEv>
    71d8:	48 83 c4 10          	add    $0x10,%rsp
    71dc:	5d                   	pop    %rbp
    71dd:	c3                   	ret
    71de:	66 90                	xchg   %ax,%ax

00000000000071e0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE>:
    {
    71e0:	55                   	push   %rbp
    71e1:	48 89 e5             	mov    %rsp,%rbp
    71e4:	48 81 ec 40 02 00 00 	sub    $0x240,%rsp
    71eb:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    71f2:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%rbp)
    71f8:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    71ff:	48 89 8d 40 fe ff ff 	mov    %rcx,-0x1c0(%rbp)
    7206:	44 89 85 3c fe ff ff 	mov    %r8d,-0x1c4(%rbp)
    720d:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
    7214:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
        if (level == PagingTraits::kFinalLevel) {
    721b:	83 bd 54 fe ff ff 00 	cmpl   $0x0,-0x1ac(%rbp)
    7222:	75 20                	jne    7244 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x64>
    7224:	48 8b bd f0 fd ff ff 	mov    -0x210(%rbp),%rdi
            this->create_mapping_at_l0(table, context, control);
    722b:	48 8b b5 48 fe ff ff 	mov    -0x1b8(%rbp),%rsi
    7232:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
    7239:	8b 8d 3c fe ff ff    	mov    -0x1c4(%rbp),%ecx
    723f:	e8 0c 0a 00 00       	call   7c50 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE>
    7244:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
        auto const derived = static_cast<Derived *>(this);
    724b:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
        auto const level_page_size = Self::page_size(level);
    7252:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
    7258:	89 85 68 fe ff ff    	mov    %eax,-0x198(%rbp)
            return PagingTraits::virt_to_index(level, virt);
        }

        FORCE_INLINE CXX11_CONSTEXPR 
        static auto page_size(LevelType level) -> usize {
            return PagingTraits::page_size(level);
    725e:	8b 85 68 fe ff ff    	mov    -0x198(%rbp),%eax
    7264:	89 45 bc             	mov    %eax,-0x44(%rbp)
            return Paging::virt_to_index(level, addr);
        }

        FORCE_INLINE CXX11_CONSTEXPR 
        static auto page_size(LevelType level) -> usize {
            return Paging::kPageSizeMap[usize(level)];
    7267:	48 63 4d bc          	movslq -0x44(%rbp),%rcx
    726b:	48 8d 05 8e 4d 02 00 	lea    0x24d8e(%rip),%rax        # 2c000 <_ZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE12kPageSizeMapE>
    7272:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
    7276:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
        auto const allow_large_page_mapping = bool(control & MapControl::TryLargePage);
    727d:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
    7283:	89 85 78 fe ff ff    	mov    %eax,-0x188(%rbp)
    7289:	c7 85 74 fe ff ff 04 	movl   $0x4,-0x18c(%rbp)
    7290:	00 00 00 
    7293:	8b 85 78 fe ff ff    	mov    -0x188(%rbp),%eax
        static_cast<Underlying>(rhs)
    7299:	8b 8d 74 fe ff ff    	mov    -0x18c(%rbp),%ecx
        static_cast<Underlying>(lhs) &
    729f:	21 c8                	and    %ecx,%eax
    72a1:	85 c0                	test   %eax,%eax
    72a3:	0f 95 85 27 fe ff ff 	setne  -0x1d9(%rbp)
        auto const large_page_supported = derived->level_can_be_terminal(LevelType(level));
    72aa:	8b bd 54 fe ff ff    	mov    -0x1ac(%rbp),%edi
    72b0:	e8 ab 0e 00 00       	call   8160 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21level_can_be_terminalENS0_14X86PagingLevelE>
    72b5:	88 85 26 fe ff ff    	mov    %al,-0x1da(%rbp)
        auto const max_entries = Self::max_entries(level);
    72bb:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
    72c1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%rbp)
        }

        FORCE_INLINE CXX11_CONSTEXPR 
        static auto max_entries(LevelType level) -> usize {
            return PagingTraits::max_entries(level);
    72c7:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    72cd:	89 45 c0             	mov    %eax,-0x40(%rbp)
        }

        FORCE_INLINE CXX11_CONSTEXPR 
        static auto max_entries(LevelType level) -> usize {
            return Paging::max_entries(level);
    72d0:	8b 45 c0             	mov    -0x40(%rbp),%eax
    72d3:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    72d6:	48 c7 85 18 fe ff ff 	movq   $0x200,-0x1e8(%rbp)
    72dd:	00 02 00 00 
        auto index = virt_to_index(level, context->virt_addr());
    72e1:	8b 8d 54 fe ff ff    	mov    -0x1ac(%rbp),%ecx
    72e7:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    72ee:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
    72f5:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
            return phys_cursor_.phys_addr();  
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto virt_addr() const -> VirtAddr {  
            return virt_cursor_.virt_addr();  
    72fc:	48 83 c0 28          	add    $0x28,%rax
    7300:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    7307:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
            return addr_ + consumed_;
    730e:	48 8b 50 08          	mov    0x8(%rax),%rdx
    7312:	48 8b 40 10          	mov    0x10(%rax),%rax
    7316:	48 01 d0             	add    %rdx,%rax
    7319:	89 8d 8c fe ff ff    	mov    %ecx,-0x174(%rbp)
    731f:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
            return PagingTraits::virt_to_index(level, virt);
    7326:	8b 8d 8c fe ff ff    	mov    -0x174(%rbp),%ecx
    732c:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
    7333:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
    7336:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            return Paging::virt_to_index(level, addr);
    733a:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
    733d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7341:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    7344:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
                X86_PDP_SHIFT,
                X86_PML4_SHIFT,
                X86_PML5_SHIFT,
            };

            return (virt >> kShift[usize(level)]) & 0x1FF;
    7348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    734c:	48 63 55 e4          	movslq -0x1c(%rbp),%rdx
    7350:	48 8d 0d d9 4c 02 00 	lea    0x24cd9(%rip),%rcx        # 2c030 <_ZZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE13virt_to_indexES2_mE6kShift>
    7357:	48 8d 0c d1          	lea    (%rcx,%rdx,8),%rcx
    735b:	48 8b 09             	mov    (%rcx),%rcx
    735e:	48 d3 e8             	shr    %cl,%rax
    7361:	48 25 ff 01 00 00    	and    $0x1ff,%rax
    7367:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
        for (; index < max_entries && context->size() != 0; ++index) {
    736e:	48 8b 8d 10 fe ff ff 	mov    -0x1f0(%rbp),%rcx
    7375:	31 c0                	xor    %eax,%eax
    7377:	48 3b 8d 18 fe ff ff 	cmp    -0x1e8(%rbp),%rcx
    737e:	88 85 ef fd ff ff    	mov    %al,-0x211(%rbp)
    7384:	73 2e                	jae    73b4 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x1d4>
    7386:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    738d:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
    7394:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
            return flags_;  
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto size() const -> usize {  
            return virt_cursor_.size();  
    739b:	48 83 c0 28          	add    $0x28,%rax
    739f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    73a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    73a7:	48 83 38 00          	cmpq   $0x0,(%rax)
    73ab:	0f 95 c0             	setne  %al
    73ae:	88 85 ef fd ff ff    	mov    %al,-0x211(%rbp)
    73b4:	8a 85 ef fd ff ff    	mov    -0x211(%rbp),%al
    73ba:	a8 01                	test   $0x1,%al
    73bc:	75 05                	jne    73c3 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x1e3>
    73be:	e9 19 05 00 00       	jmp    78dc <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x6fc>
            ai_virt PteVal volatile *entry = table + index;
    73c3:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    73ca:	48 8b 8d 10 fe ff ff 	mov    -0x1f0(%rbp),%rcx
    73d1:	48 c1 e1 03          	shl    $0x3,%rcx
    73d5:	48 01 c8             	add    %rcx,%rax
    73d8:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
            if (!Derived::is_present(*table)) { // The entry do not exists.
    73df:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    73e6:	48 8b 38             	mov    (%rax),%rdi
    73e9:	e8 a2 0d 00 00       	call   8190 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>
    73ee:	a8 01                	test   $0x1,%al
    73f0:	0f 85 5a 03 00 00    	jne    7750 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x570>
                if (allow_large_page_mapping && large_page_supported) {
    73f6:	f6 85 27 fe ff ff 01 	testb  $0x1,-0x1d9(%rbp)
    73fd:	0f 84 fe 02 00 00    	je     7701 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x521>
    7403:	f6 85 26 fe ff ff 01 	testb  $0x1,-0x1da(%rbp)
    740a:	0f 84 f1 02 00 00    	je     7701 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x521>
                    auto const pa_is_aligned = is_aligned(context->phys_addr(), level_page_size);
    7410:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    7417:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    741e:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
            return phys_cursor_.phys_addr();  
    7425:	48 83 c0 08          	add    $0x8,%rax
    7429:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    7430:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
            return (*addrs_) + consumed_;
    7437:	48 8b 48 18          	mov    0x18(%rax),%rcx
    743b:	48 8b 09             	mov    (%rcx),%rcx
    743e:	48 03 48 08          	add    0x8(%rax),%rcx
    7442:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    7449:	48 89 8d c8 fe ff ff 	mov    %rcx,-0x138(%rbp)
    7450:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
    7457:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    745e:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
    7465:	48 83 e9 01          	sub    $0x1,%rcx
    7469:	48 21 c8             	and    %rcx,%rax
    746c:	48 83 f8 00          	cmp    $0x0,%rax
    7470:	0f 94 c0             	sete   %al
    7473:	24 01                	and    $0x1,%al
    7475:	88 85 07 fe ff ff    	mov    %al,-0x1f9(%rbp)
                    auto const va_is_aligned = is_aligned(context->virt_addr(), level_page_size);
    747b:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    7482:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    7489:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
            return virt_cursor_.virt_addr();  
    7490:	48 83 c0 28          	add    $0x28,%rax
    7494:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    749b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
            return addr_ + consumed_;
    74a2:	48 8b 48 10          	mov    0x10(%rax),%rcx
    74a6:	48 03 48 08          	add    0x8(%rax),%rcx
    74aa:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    74b1:	48 89 8d b8 fe ff ff 	mov    %rcx,-0x148(%rbp)
    74b8:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
    74bf:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    74c6:	48 8b 8d b0 fe ff ff 	mov    -0x150(%rbp),%rcx
    74cd:	48 83 e9 01          	sub    $0x1,%rcx
    74d1:	48 21 c8             	and    %rcx,%rax
    74d4:	48 83 f8 00          	cmp    $0x0,%rax
    74d8:	0f 94 c0             	sete   %al
    74db:	24 01                	and    $0x1,%al
    74dd:	88 85 06 fe ff ff    	mov    %al,-0x1fa(%rbp)
                    if (pa_is_aligned && va_is_aligned && context->remaining_size() >= level_page_size) {
    74e3:	f6 85 07 fe ff ff 01 	testb  $0x1,-0x1f9(%rbp)
    74ea:	0f 84 0f 02 00 00    	je     76ff <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x51f>
    74f0:	f6 85 06 fe ff ff 01 	testb  $0x1,-0x1fa(%rbp)
    74f7:	0f 84 02 02 00 00    	je     76ff <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x51f>
    74fd:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
    7504:	e8 a7 0c 00 00       	call   81b0 <_ZNK4arch6paging21GenericMappingContext14remaining_sizeEv>
    7509:	48 3b 85 28 fe ff ff 	cmp    -0x1d8(%rbp),%rax
    7510:	0f 82 e9 01 00 00    	jb     76ff <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x51f>
    7516:	48 8b bd f0 fd ff ff 	mov    -0x210(%rbp),%rdi
                        update_entry(level, entry, context->phys_addr(), context->virt_addr(), context->flags());
    751d:	8b b5 54 fe ff ff    	mov    -0x1ac(%rbp),%esi
    7523:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
    752a:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    7531:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    7538:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
            return phys_cursor_.phys_addr();  
    753f:	48 83 c0 08          	add    $0x8,%rax
    7543:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    754a:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
            return (*addrs_) + consumed_;
    7551:	48 8b 48 18          	mov    0x18(%rax),%rcx
    7555:	48 8b 09             	mov    (%rcx),%rcx
    7558:	48 03 48 08          	add    0x8(%rax),%rcx
    755c:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    7563:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
    756a:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
            return virt_cursor_.virt_addr();  
    7571:	48 83 c0 28          	add    $0x28,%rax
    7575:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    757c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
            return addr_ + consumed_;
    7583:	4c 8b 40 10          	mov    0x10(%rax),%r8
    7587:	4c 03 40 08          	add    0x8(%rax),%r8
    758b:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    7592:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    7599:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
            return flags_;  
    75a0:	4c 8b 08             	mov    (%rax),%r9
    75a3:	e8 28 0c 00 00       	call   81d0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE>
                        context->consume(level_page_size);
    75a8:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    75af:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    75b6:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
    75bd:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    75c4:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
    75cb:	48 89 8d d0 fd ff ff 	mov    %rcx,-0x230(%rbp)
            Base::consume(page_size);
    75d2:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    75d9:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
    75e0:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    75e7:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
    75ee:	48 89 8d d8 fd ff ff 	mov    %rcx,-0x228(%rbp)
            return virt_cursor_;  
        }

        FORCE_INLINE
        auto consume(usize page_size) -> void {
            phys_cursor_.consume(page_size);
    75f5:	48 83 c1 08          	add    $0x8,%rcx
    75f9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    7600:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
    7604:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    7608:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    760c:	48 89 8d e0 fd ff ff 	mov    %rcx,-0x220(%rbp)
            DEBUG_ASSERT(consumed_ <= page_size_, "Consume");
    7613:	48 8b 41 08          	mov    0x8(%rcx),%rax
    7617:	48 3b 01             	cmp    (%rcx),%rax
    761a:	76 23                	jbe    763f <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x45f>
    761c:	48 8d 35 c4 78 02 00 	lea    0x278c4(%rip),%rsi        # 2eee7 <.L.str.1>
    7623:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
    762a:	e8 51 bc ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    762f:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
    7636:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
    763a:	e8 f1 bb ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    763f:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
            DEBUG_ASSERT(count_ > 0, "Consume");
    7646:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
    764b:	77 26                	ja     7673 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x493>
    764d:	48 8d 35 93 78 02 00 	lea    0x27893(%rip),%rsi        # 2eee7 <.L.str.1>
    7654:	48 8d bd 68 ff ff ff 	lea    -0x98(%rbp),%rdi
    765b:	e8 20 bc ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    7660:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    7667:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    766e:	e8 bd bb ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    7673:	48 8b 8d e0 fd ff ff 	mov    -0x220(%rbp),%rcx
            consumed_ += page_size;
    767a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    767e:	48 03 41 08          	add    0x8(%rcx),%rax
    7682:	48 89 41 08          	mov    %rax,0x8(%rcx)
            if (consumed_ == page_size_) {
    7686:	48 8b 41 08          	mov    0x8(%rcx),%rax
    768a:	48 3b 01             	cmp    (%rcx),%rax
    768d:	75 27                	jne    76b6 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x4d6>
    768f:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
                consumed_ = 0;
    7696:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    769d:	00 
                count_ -= 1;
    769e:	48 8b 48 10          	mov    0x10(%rax),%rcx
    76a2:	48 83 e9 01          	sub    $0x1,%rcx
    76a6:	48 89 48 10          	mov    %rcx,0x10(%rax)
                addrs_ += 1;
    76aa:	48 8b 48 18          	mov    0x18(%rax),%rcx
    76ae:	48 83 c1 08          	add    $0x8,%rcx
    76b2:	48 89 48 18          	mov    %rcx,0x18(%rax)
    76b6:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
    76bd:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
            virt_cursor_.consume(page_size);
    76c4:	48 83 c2 28          	add    $0x28,%rdx
    76c8:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
    76cf:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
    76d3:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    76d7:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
            consumed_ += page_size;
    76db:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    76df:	48 03 51 08          	add    0x8(%rcx),%rdx
    76e3:	48 89 51 08          	mov    %rdx,0x8(%rcx)
            nr_mapped_ += page_size / 4096;
    76e7:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
    76ee:	48 c1 e9 0c          	shr    $0xc,%rcx
    76f2:	48 03 48 48          	add    0x48(%rax),%rcx
    76f6:	48 89 48 48          	mov    %rcx,0x48(%rax)
                        continue;
    76fa:	e9 c6 01 00 00       	jmp    78c5 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x6e5>
                }
    76ff:	eb 00                	jmp    7701 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x521>
    7701:	48 8b bd f0 fd ff ff 	mov    -0x210(%rbp),%rdi
                PhysAddr new_table = this->alloc_page_table(); 
    7708:	48 c7 85 f8 fd ff ff 	movq   $0x0,-0x208(%rbp)
    770f:	00 00 00 00 
                update_entry(level, entry, new_table, 0, context->flags());
    7713:	8b b5 54 fe ff ff    	mov    -0x1ac(%rbp),%esi
    7719:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
    7720:	48 8b 8d f8 fd ff ff 	mov    -0x208(%rbp),%rcx
    7727:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    772e:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    7735:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
            return flags_;  
    773c:	4c 8b 08             	mov    (%rax),%r9
    773f:	31 c0                	xor    %eax,%eax
    7741:	31 c0                	xor    %eax,%eax
    7743:	41 89 c0             	mov    %eax,%r8d
    7746:	e8 85 0a 00 00       	call   81d0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE>
            } else {  // The entry exists.
    774b:	e9 98 00 00 00       	jmp    77e8 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x608>
                if (bool(control & MapControl::ErrorIfExisting)) {
    7750:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
    7756:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)
    775c:	c7 85 6c fe ff ff 02 	movl   $0x2,-0x194(%rbp)
    7763:	00 00 00 
    7766:	8b 85 70 fe ff ff    	mov    -0x190(%rbp),%eax
    776c:	23 85 6c fe ff ff    	and    -0x194(%rbp),%eax
    7772:	83 f8 00             	cmp    $0x0,%eax
    7775:	74 0f                	je     7786 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x5a6>
                    return Status::Error;
    7777:	c7 85 64 fe ff ff 08 	movl   $0x8,-0x19c(%rbp)
    777e:	00 00 00 
    7781:	e9 60 01 00 00       	jmp    78e6 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x706>
                if (Derived::is_large_page_mapping(*table)) {
    7786:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    778d:	48 8b 38             	mov    (%rax),%rdi
    7790:	e8 bb 0a 00 00       	call   8250 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21is_large_page_mappingEm>
    7795:	a8 01                	test   $0x1,%al
    7797:	75 02                	jne    779b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x5bb>
    7799:	eb 4b                	jmp    77e6 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x606>
                    context->skip(level_page_size);
    779b:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    77a2:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    77a9:	48 89 8d 08 ff ff ff 	mov    %rcx,-0xf8(%rbp)
    77b0:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    77b7:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
        }

        FORCE_INLINE
        auto skip(usize page_size) -> void {  
            virt_cursor_.consume(page_size);
    77be:	48 83 c1 28          	add    $0x28,%rcx
    77c2:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    77c9:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    77cd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    77d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            consumed_ += page_size;
    77d5:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    77d9:	48 03 48 08          	add    0x8(%rax),%rcx
    77dd:	48 89 48 08          	mov    %rcx,0x8(%rax)
                    continue;
    77e1:	e9 df 00 00 00       	jmp    78c5 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x6e5>
    77e6:	eb 00                	jmp    77e8 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x608>
    77e8:	48 8b 8d f0 fd ff ff 	mov    -0x210(%rbp),%rcx
            create_mapping(PagingTraits::next_level(level), 
    77ef:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
    77f5:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
            return Paging::kAllLevels[usize(level) - 1];
    77fb:	48 63 95 14 ff ff ff 	movslq -0xec(%rbp),%rdx
    7802:	48 89 d0             	mov    %rdx,%rax
    7805:	48 ff c8             	dec    %rax
    7808:	48 8d 05 51 48 02 00 	lea    0x24851(%rip),%rax        # 2c060 <_ZN4arch6paging13X86PagingBase10kAllLevelsE>
    780f:	48 8d 44 90 fc       	lea    -0x4(%rax,%rdx,4),%rax
    7814:	8b 00                	mov    (%rax),%eax
    7816:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
                           get_next_table_unchecked(*entry), 
    781c:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
    7823:	48 8b 00             	mov    (%rax),%rax
    7826:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    782d:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    7834:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    783b:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
            return 0;
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto get_next_table_unchecked(PteVal pteval) -> PteVal volatile * {
            if (Derived::is_present(pteval) && Derived::is_large_page_mapping(pteval)) {
    7842:	48 8b bd 18 ff ff ff 	mov    -0xe8(%rbp),%rdi
    7849:	e8 42 09 00 00       	call   8190 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>
    784e:	a8 01                	test   $0x1,%al
    7850:	75 02                	jne    7854 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x674>
    7852:	eb 1f                	jmp    7873 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x693>
    7854:	48 8b bd 18 ff ff ff 	mov    -0xe8(%rbp),%rdi
    785b:	e8 f0 09 00 00       	call   8250 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21is_large_page_mappingEm>
    7860:	a8 01                	test   $0x1,%al
    7862:	75 02                	jne    7866 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x686>
    7864:	eb 0d                	jmp    7873 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x693>
                return 0;
    7866:	48 c7 85 28 ff ff ff 	movq   $0x0,-0xd8(%rbp)
    786d:	00 00 00 00 
    7871:	eb 2b                	jmp    789e <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x6be>
    7873:	48 8b 8d c8 fd ff ff 	mov    -0x238(%rbp),%rcx
            }

            return reinterpret_cast<PteVal volatile *>(payload_.phys_to_virt(pteval & X86_PFN_MASK));
    787a:	48 83 c1 34          	add    $0x34,%rcx
    787e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7885:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    788b:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    788f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

        /// We provide a identity mapping converter as default.
        struct PhysToVirt {
            FORCE_INLINE CXX11_CONSTEXPR
            auto phys_to_virt(PhysAddr addr) -> VirtAddr {
                return addr;
    7893:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7897:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    789e:	8b b5 c4 fd ff ff    	mov    -0x23c(%rbp),%esi
    78a4:	48 8b bd f0 fd ff ff 	mov    -0x210(%rbp),%rdi
        }
    78ab:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
                           context, control);
    78b2:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    78b9:	44 8b 85 3c fe ff ff 	mov    -0x1c4(%rbp),%r8d
            create_mapping(PagingTraits::next_level(level), 
    78c0:	e8 1b f9 ff ff       	call   71e0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE>
        for (; index < max_entries && context->size() != 0; ++index) {
    78c5:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
    78cc:	48 83 c0 01          	add    $0x1,%rax
    78d0:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
    78d7:	e9 92 fa ff ff       	jmp    736e <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x18e>
        return Status::Ok;
    78dc:	c7 85 64 fe ff ff 00 	movl   $0x0,-0x19c(%rbp)
    78e3:	00 00 00 
    }
    78e6:	8b 85 64 fe ff ff    	mov    -0x19c(%rbp),%eax
    78ec:	48 81 c4 40 02 00 00 	add    $0x240,%rsp
    78f3:	5d                   	pop    %rbp
    78f4:	c3                   	ret
    78f5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    78fc:	00 00 00 
    78ff:	90                   	nop

0000000000007900 <_ZN4ustl4sync9LockGuardIN4ours5MutexEED2Ev>:
                unlocked_ = true;
            }
        }

        ~LockGuard()
        { unlock(); }
    7900:	55                   	push   %rbp
    7901:	48 89 e5             	mov    %rsp,%rbp
    7904:	48 83 ec 10          	sub    $0x10,%rsp
    7908:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    790c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    7910:	e8 eb 0d 00 00       	call   8700 <_ZN4ustl4sync9LockGuardIN4ours5MutexEE6unlockEv>
    7915:	48 83 c4 10          	add    $0x10,%rsp
    7919:	5d                   	pop    %rbp
    791a:	c3                   	ret
    791b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000007920 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE15check_virt_addrEm>:

        static auto check_phys_addr(PhysAddr) -> bool
        {  return false; }

        static auto check_virt_addr(VirtAddr) -> bool
        {  return false; }
    7920:	55                   	push   %rbp
    7921:	48 89 e5             	mov    %rsp,%rbp
    7924:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7928:	31 c0                	xor    %eax,%eax
    792a:	24 01                	and    $0x1,%al
    792c:	5d                   	pop    %rbp
    792d:	c3                   	ret
    792e:	66 90                	xchg   %ax,%ax

0000000000007930 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE16is_flags_allowedENS0_8MmuFlagsE>:

        static auto is_flags_allowed(MmuFlags) -> bool
        {  return false; }
    7930:	55                   	push   %rbp
    7931:	48 89 e5             	mov    %rsp,%rbp
    7934:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7938:	31 c0                	xor    %eax,%eax
    793a:	24 01                	and    $0x1,%al
    793c:	5d                   	pop    %rbp
    793d:	c3                   	ret
    793e:	66 90                	xchg   %ax,%ax

0000000000007940 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE15check_phys_addrEm>:
        {  return false; }
    7940:	55                   	push   %rbp
    7941:	48 89 e5             	mov    %rsp,%rbp
    7944:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7948:	31 c0                	xor    %eax,%eax
    794a:	24 01                	and    $0x1,%al
    794c:	5d                   	pop    %rbp
    794d:	c3                   	ret
    794e:	66 90                	xchg   %ax,%ax

0000000000007950 <_ZNSt3__112construct_atB8nn210000IN4arch6paging14MappingContextINS2_15X86PageTableMmuINS1_6MutexTIN4ours5MutexEE4PackINS2_12PageFlusherTINS6_3mem7details14TlbInvalidatorEE4PackINS2_11PageSourceTINSC_13PageAllocatorEE4PackINS2_23PageTableDefaultOptionsEEEEEEEEEEEJRmRPmSQ_RNS2_8MmuFlagsEiEPSP_EEPT_SX_DpOT0_>:
// construct_at

#if _LIBCPP_STD_VER >= 20

template <class _Tp, class... _Args, class = decltype(::new(std::declval<void*>()) _Tp(std::declval<_Args>()...))>
_LIBCPP_HIDE_FROM_ABI constexpr _Tp* construct_at(_Tp* __location, _Args&&... __args) {
    7950:	55                   	push   %rbp
    7951:	48 89 e5             	mov    %rsp,%rbp
    7954:	48 83 ec 60          	sub    $0x60,%rsp
    7958:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    795c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7960:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    7964:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    7968:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    796c:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
  _LIBCPP_ASSERT_NON_NULL(__location != nullptr, "null pointer given to construct_at");
  return ::new (static_cast<void*>(__location)) _Tp(std::forward<_Args>(__args)...);
    7970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7974:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7978:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    797c:	e8 6f 00 00 00       	call   79f0 <_ZNSt3__17forwardB8nn210000IRmEEOT_Ru20__remove_reference_tIS2_E>
    7981:	48 8b 00             	mov    (%rax),%rax
    7984:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    7988:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    798c:	e8 6f 00 00 00       	call   7a00 <_ZNSt3__17forwardB8nn210000IRPmEEOT_Ru20__remove_reference_tIS3_E>
    7991:	48 8b 00             	mov    (%rax),%rax
    7994:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7998:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    799c:	e8 4f 00 00 00       	call   79f0 <_ZNSt3__17forwardB8nn210000IRmEEOT_Ru20__remove_reference_tIS2_E>
    79a1:	48 8b 00             	mov    (%rax),%rax
    79a4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    79a8:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    79ac:	e8 5f 00 00 00       	call   7a10 <_ZNSt3__17forwardB8nn210000IRN4arch6paging8MmuFlagsEEEOT_Ru20__remove_reference_tIS5_E>
    79b1:	48 8b 00             	mov    (%rax),%rax
    79b4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    79b8:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    79bc:	e8 5f 00 00 00       	call   7a20 <_ZNSt3__17forwardB8nn210000IiEEOT_Ru20__remove_reference_tIS1_E>
    79c1:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    79c5:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    79c9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    79cd:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
    79d1:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    79d5:	4c 63 08             	movslq (%rax),%r9
    79d8:	e8 53 00 00 00       	call   7a30 <_ZN4arch6paging14MappingContextINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEEEC2EmPmmNS0_8MmuFlagsEm>
    79dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79e1:	48 83 c4 60          	add    $0x60,%rsp
    79e5:	5d                   	pop    %rbp
    79e6:	c3                   	ret
    79e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    79ee:	00 00 

00000000000079f0 <_ZNSt3__17forwardB8nn210000IRmEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    79f0:	55                   	push   %rbp
    79f1:	48 89 e5             	mov    %rsp,%rbp
    79f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    79f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    79fc:	5d                   	pop    %rbp
    79fd:	c3                   	ret
    79fe:	66 90                	xchg   %ax,%ax

0000000000007a00 <_ZNSt3__17forwardB8nn210000IRPmEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    7a00:	55                   	push   %rbp
    7a01:	48 89 e5             	mov    %rsp,%rbp
    7a04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    7a08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7a0c:	5d                   	pop    %rbp
    7a0d:	c3                   	ret
    7a0e:	66 90                	xchg   %ax,%ax

0000000000007a10 <_ZNSt3__17forwardB8nn210000IRN4arch6paging8MmuFlagsEEEOT_Ru20__remove_reference_tIS5_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    7a10:	55                   	push   %rbp
    7a11:	48 89 e5             	mov    %rsp,%rbp
    7a14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    7a18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7a1c:	5d                   	pop    %rbp
    7a1d:	c3                   	ret
    7a1e:	66 90                	xchg   %ax,%ax

0000000000007a20 <_ZNSt3__17forwardB8nn210000IiEEOT_Ru20__remove_reference_tIS1_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    7a20:	55                   	push   %rbp
    7a21:	48 89 e5             	mov    %rsp,%rbp
    7a24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    7a28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7a2c:	5d                   	pop    %rbp
    7a2d:	c3                   	ret
    7a2e:	66 90                	xchg   %ax,%ax

0000000000007a30 <_ZN4arch6paging14MappingContextINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEEEC2EmPmmNS0_8MmuFlagsEm>:
              synchroniser_() {}
    7a30:	55                   	push   %rbp
    7a31:	48 89 e5             	mov    %rsp,%rbp
    7a34:	48 83 ec 40          	sub    $0x40,%rsp
    7a38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7a3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7a40:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    7a44:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    7a48:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    7a4c:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    7a50:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    7a54:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
            : Base(va, pa, n, flags, page_size),
    7a58:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    7a5c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7a60:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    7a64:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
    7a68:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
    7a6c:	e8 2f 00 00 00       	call   7aa0 <_ZN4arch6paging21GenericMappingContextC2EmPmmNS0_8MmuFlagsEm>
    7a71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
              altmap_(0),
    7a75:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
    7a7c:	00 
              nr_mapped_(),
    7a7d:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
    7a84:	00 
              synchroniser_() {}
    7a85:	48 83 c0 50          	add    $0x50,%rax
    7a89:	31 c9                	xor    %ecx,%ecx
    7a8b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    7a92:	48 83 c4 40          	add    $0x40,%rsp
    7a96:	5d                   	pop    %rbp
    7a97:	c3                   	ret
    7a98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    7a9f:	00 

0000000000007aa0 <_ZN4arch6paging21GenericMappingContextC2EmPmmNS0_8MmuFlagsEm>:
        {}
    7aa0:	55                   	push   %rbp
    7aa1:	48 89 e5             	mov    %rsp,%rbp
    7aa4:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
    7aa8:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
    7aac:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
    7ab0:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    7ab4:	4c 89 45 a0          	mov    %r8,-0x60(%rbp)
    7ab8:	4c 89 4d 98          	mov    %r9,-0x68(%rbp)
    7abc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
            : flags_(flags),
    7ac0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7ac4:	48 89 02             	mov    %rax,(%rdx)
              phys_cursor_(pa, n, page_size)
    7ac7:	48 89 d7             	mov    %rdx,%rdi
    7aca:	48 83 c7 08          	add    $0x8,%rdi
    7ace:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    7ad2:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    7ad6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7ada:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    7ade:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
    7ae2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    7ae6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7aea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
            : page_size_(page_size),
    7aee:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    7af2:	48 89 08             	mov    %rcx,(%rax)
              consumed_(0) 
    7af5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    7afc:	00 
              count_(n),
    7afd:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    7b01:	48 89 48 10          	mov    %rcx,0x10(%rax)
              addrs_(phys),
    7b05:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    7b09:	48 89 48 18          	mov    %rcx,0x18(%rax)
              virt_cursor_(va, page_size * n),
    7b0d:	48 83 c2 28          	add    $0x28,%rdx
    7b11:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    7b15:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7b19:	48 0f af 45 a8       	imul   -0x58(%rbp),%rax
    7b1e:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    7b22:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    7b26:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7b2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
              size_(size),
    7b2e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7b32:	48 89 08             	mov    %rcx,(%rax)
              consumed_(0) 
    7b35:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    7b3c:	00 
            : addr_(virt),
    7b3d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7b41:	48 89 48 10          	mov    %rcx,0x10(%rax)
        {}
    7b45:	5d                   	pop    %rbp
    7b46:	c3                   	ret
    7b47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    7b4e:	00 00 

0000000000007b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>:
        {}
    7b50:	55                   	push   %rbp
    7b51:	48 89 e5             	mov    %rsp,%rbp
    7b54:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    7b58:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    7b5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            : error_(ustl::forward<Args>(args)...)
    7b60:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7b64:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    7b68:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    7b6c:	8b 09                	mov    (%rcx),%ecx
    7b6e:	89 08                	mov    %ecx,(%rax)
        {}
    7b70:	5d                   	pop    %rbp
    7b71:	c3                   	ret
    7b72:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    7b79:	00 00 00 
    7b7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>:
        template <typename... Args>
        USTL_CONSTEXPR
        explicit StorageTrivial(Inplace<Error>, Args &&...args)
            : error_(static_cast<Args &&>(args)...), 
              status_(Status::HaveError)
        {}
    7b80:	55                   	push   %rbp
    7b81:	48 89 e5             	mov    %rsp,%rbp
    7b84:	48 83 ec 20          	sub    $0x20,%rsp
    7b88:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    7b8c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    7b90:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : error_(static_cast<Args &&>(args)...), 
    7b94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7b98:	8b 00                	mov    (%rax),%eax
    7b9a:	89 07                	mov    %eax,(%rdi)
              status_(Status::HaveError)
    7b9c:	48 83 c7 08          	add    $0x8,%rdi
    7ba0:	be 02 00 00 00       	mov    $0x2,%esi
    7ba5:	e8 06 00 00 00       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
    7baa:	48 83 c4 20          	add    $0x20,%rsp
    7bae:	5d                   	pop    %rbp
    7baf:	c3                   	ret

0000000000007bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>:
        {}
    7bb0:	55                   	push   %rbp
    7bb1:	48 89 e5             	mov    %rsp,%rbp
    7bb4:	66 89 f0             	mov    %si,%ax
    7bb7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7bbb:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
    7bbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            : status_(v)
    7bc3:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    7bc7:	66 89 08             	mov    %cx,(%rax)
        {}
    7bca:	5d                   	pop    %rbp
    7bcb:	c3                   	ret
    7bcc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>:
        {}
    7bd0:	55                   	push   %rbp
    7bd1:	48 89 e5             	mov    %rsp,%rbp
    7bd4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    7bd8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    7bdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            : value_(ustl::forward<Args>(args)...)
    7be0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7be4:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    7be8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    7bec:	48 8b 09             	mov    (%rcx),%rcx
    7bef:	48 89 08             	mov    %rcx,(%rax)
        {}
    7bf2:	5d                   	pop    %rbp
    7bf3:	c3                   	ret
    7bf4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    7bfb:	00 00 00 
    7bfe:	66 90                	xchg   %ax,%ax

0000000000007c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>:
        {}
    7c00:	55                   	push   %rbp
    7c01:	48 89 e5             	mov    %rsp,%rbp
    7c04:	48 83 ec 20          	sub    $0x20,%rsp
    7c08:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    7c0c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    7c10:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : value_(static_cast<Args &&>(args)...), 
    7c14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7c18:	48 8b 00             	mov    (%rax),%rax
    7c1b:	48 89 07             	mov    %rax,(%rdi)
              status_(Status::HaveValue)
    7c1e:	48 83 c7 08          	add    $0x8,%rdi
    7c22:	be 01 00 00 00       	mov    $0x1,%esi
    7c27:	e8 84 ff ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
    7c2c:	48 83 c4 20          	add    $0x20,%rsp
    7c30:	5d                   	pop    %rbp
    7c31:	c3                   	ret
    7c32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    7c39:	00 00 00 
    7c3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007c40 <_ZN4ours5Mutex4lockEv>:
#define OURS_MUTEX_HPP 1

namespace ours {
    class Mutex {
    public:
        auto lock() -> void {}
    7c40:	55                   	push   %rbp
    7c41:	48 89 e5             	mov    %rsp,%rbp
    7c44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7c48:	5d                   	pop    %rbp
    7c49:	c3                   	ret
    7c4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000007c50 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE>:
    {
    7c50:	55                   	push   %rbp
    7c51:	48 89 e5             	mov    %rsp,%rbp
    7c54:	48 81 ec e0 01 00 00 	sub    $0x1e0,%rsp
    7c5b:	48 89 bd b0 fe ff ff 	mov    %rdi,-0x150(%rbp)
    7c62:	48 89 b5 a8 fe ff ff 	mov    %rsi,-0x158(%rbp)
    7c69:	48 89 95 a0 fe ff ff 	mov    %rdx,-0x160(%rbp)
    7c70:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%rbp)
    7c76:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    7c7d:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
        auto const level = PagingTraits::kFinalLevel;
    7c84:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    7c8b:	00 00 00 
        auto const readonly = (context->flags() & MmuFlags::PermMask) == MmuFlags::Writable;
    7c8e:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    7c95:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    7c9c:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
            return flags_;  
    7ca3:	48 8b 00             	mov    (%rax),%rax
    7ca6:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    7cad:	48 c7 85 18 ff ff ff 	movq   $0xe,-0xe8(%rbp)
    7cb4:	0e 00 00 00 
    7cb8:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
        static_cast<Underlying>(rhs)
    7cbf:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
        static_cast<Underlying>(lhs) &
    7cc6:	48 21 c8             	and    %rcx,%rax
    7cc9:	48 83 e8 02          	sub    $0x2,%rax
    7ccd:	0f 94 85 97 fe ff ff 	sete   -0x169(%rbp)
        auto const page_size = Self::page_size(level);
    7cd4:	48 c7 85 88 fe ff ff 	movq   $0x1000,-0x178(%rbp)
    7cdb:	00 10 00 00 
        auto const max_entries = Self::max_entries(level);
    7cdf:	48 c7 85 80 fe ff ff 	movq   $0x200,-0x180(%rbp)
    7ce6:	00 02 00 00 
        auto index = virt_to_index(PagingTraits::kFinalLevel, context->virt_addr());
    7cea:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    7cf1:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    7cf8:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
            return virt_cursor_.virt_addr();  
    7cff:	48 83 c0 28          	add    $0x28,%rax
    7d03:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    7d0a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
            return addr_ + consumed_;
    7d11:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7d15:	48 8b 40 10          	mov    0x10(%rax),%rax
    7d19:	48 01 c8             	add    %rcx,%rax
    7d1c:	c7 85 e4 fe ff ff 00 	movl   $0x0,-0x11c(%rbp)
    7d23:	00 00 00 
    7d26:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
            return PagingTraits::virt_to_index(level, virt);
    7d2d:	8b 8d e4 fe ff ff    	mov    -0x11c(%rbp),%ecx
    7d33:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    7d3a:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    7d3d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            return Paging::virt_to_index(level, addr);
    7d41:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    7d44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7d48:	89 4d f4             	mov    %ecx,-0xc(%rbp)
    7d4b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7d4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7d53:	48 63 55 f4          	movslq -0xc(%rbp),%rdx
    7d57:	48 8d 0d d2 42 02 00 	lea    0x242d2(%rip),%rcx        # 2c030 <_ZZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE13virt_to_indexES2_mE6kShift>
    7d5e:	48 8d 0c d1          	lea    (%rcx,%rdx,8),%rcx
    7d62:	48 8b 09             	mov    (%rcx),%rcx
    7d65:	48 d3 e8             	shr    %cl,%rax
    7d68:	48 25 ff 01 00 00    	and    $0x1ff,%rax
    7d6e:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
        for (; index < max_entries && context->size() != 0; ++index) {
    7d75:	31 c0                	xor    %eax,%eax
    7d77:	48 81 bd 78 fe ff ff 	cmpq   $0x200,-0x188(%rbp)
    7d7e:	00 02 00 00 
    7d82:	88 85 3f fe ff ff    	mov    %al,-0x1c1(%rbp)
    7d88:	73 2e                	jae    7db8 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x168>
    7d8a:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    7d91:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    7d98:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
            return virt_cursor_.size();  
    7d9f:	48 83 c0 28          	add    $0x28,%rax
    7da3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7da7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7dab:	48 83 38 00          	cmpq   $0x0,(%rax)
    7daf:	0f 95 c0             	setne  %al
    7db2:	88 85 3f fe ff ff    	mov    %al,-0x1c1(%rbp)
    7db8:	8a 85 3f fe ff ff    	mov    -0x1c1(%rbp),%al
    7dbe:	a8 01                	test   $0x1,%al
    7dc0:	75 05                	jne    7dc7 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x177>
    7dc2:	e9 76 03 00 00       	jmp    813d <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x4ed>
            ai_phys PteVal volatile *entry = table + index;
    7dc7:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    7dce:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
    7dd5:	48 c1 e1 03          	shl    $0x3,%rcx
    7dd9:	48 01 c8             	add    %rcx,%rax
    7ddc:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
            auto const is_existing = Derived::is_present(*table);
    7de3:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    7dea:	48 8b 38             	mov    (%rax),%rdi
    7ded:	e8 9e 03 00 00       	call   8190 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>
    7df2:	24 01                	and    $0x1,%al
    7df4:	88 85 6f fe ff ff    	mov    %al,-0x191(%rbp)
            if (is_existing) {
    7dfa:	f6 85 6f fe ff ff 01 	testb  $0x1,-0x191(%rbp)
    7e01:	0f 84 12 01 00 00    	je     7f19 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2c9>
                if (bool(control & MapControl::ErrorIfExisting)) {
    7e07:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
    7e0d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%rbp)
    7e13:	c7 85 d0 fe ff ff 02 	movl   $0x2,-0x130(%rbp)
    7e1a:	00 00 00 
    7e1d:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
    7e23:	23 85 d0 fe ff ff    	and    -0x130(%rbp),%eax
    7e29:	83 f8 00             	cmp    $0x0,%eax
    7e2c:	74 0f                	je     7e3d <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x1ed>
                    return Status::Error;
    7e2e:	c7 85 bc fe ff ff 08 	movl   $0x8,-0x144(%rbp)
    7e35:	00 00 00 
    7e38:	e9 0a 03 00 00       	jmp    8147 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x4f7>
                } else if (bool(control & MapControl::SkipIfExisting)) {
    7e3d:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
    7e43:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    7e49:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    7e50:	00 00 00 
    7e53:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    7e59:	23 85 c8 fe ff ff    	and    -0x138(%rbp),%eax
    7e5f:	83 f8 00             	cmp    $0x0,%eax
    7e62:	74 48                	je     7eac <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x25c>
                    context->skip(page_size);
    7e64:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    7e6b:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    7e72:	48 c7 85 08 ff ff ff 	movq   $0x1000,-0xf8(%rbp)
    7e79:	00 10 00 00 
    7e7d:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
            virt_cursor_.consume(page_size);
    7e84:	48 83 c1 28          	add    $0x28,%rcx
    7e88:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7e8f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    7e93:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7e97:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            consumed_ += page_size;
    7e9b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    7e9f:	48 03 48 08          	add    0x8(%rax),%rcx
    7ea3:	48 89 48 08          	mov    %rcx,0x8(%rax)
                    continue;
    7ea7:	e9 7a 02 00 00       	jmp    8126 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x4d6>
                } else if (bool(control & MapControl::OverwriteIfExisting)) {
    7eac:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
    7eb2:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    7eb8:	c7 85 c0 fe ff ff 01 	movl   $0x1,-0x140(%rbp)
    7ebf:	00 00 00 
    7ec2:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
    7ec8:	23 85 c0 fe ff ff    	and    -0x140(%rbp),%eax
    7ece:	83 f8 00             	cmp    $0x0,%eax
    7ed1:	74 40                	je     7f13 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2c3>
                    if (!readonly) {
    7ed3:	f6 85 97 fe ff ff 01 	testb  $0x1,-0x169(%rbp)
    7eda:	75 35                	jne    7f11 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2c1>
    7edc:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
                        unmap_entry(entry, level);
    7ee3:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
    7eea:	31 c0                	xor    %eax,%eax
    7eec:	31 d2                	xor    %edx,%edx
    7eee:	e8 7d 03 00 00       	call   8270 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E11unmap_entryEPVmNS0_14X86PagingLevelE>
                        context->synchroniser().sync();
    7ef3:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    7efa:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    7f01:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
            return synchroniser_;
    7f08:	48 83 c7 50          	add    $0x50,%rdi
    7f0c:	e8 7f 03 00 00       	call   8290 <_ZN4arch6paging24X86PageTableSynchroniserINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEEE4syncEv>
                }
    7f11:	eb 00                	jmp    7f13 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2c3>
    7f13:	eb 00                	jmp    7f15 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2c5>
    7f15:	eb 00                	jmp    7f17 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2c7>
            }
    7f17:	eb 00                	jmp    7f19 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2c9>
            auto const [phys, virt] = context->take(page_size);
    7f19:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    7f20:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    7f27:	48 c7 85 40 ff ff ff 	movq   $0x1000,-0xc0(%rbp)
    7f2e:	00 10 00 00 
    7f32:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
        }

        FORCE_INLINE
        auto take(usize page_size) -> ustl::Pair<PhysAddr, VirtAddr> {
            auto const phys = phys_cursor_.phys_addr();
    7f39:	48 89 c8             	mov    %rcx,%rax
    7f3c:	48 83 c0 08          	add    $0x8,%rax
    7f40:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    7f47:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
            return (*addrs_) + consumed_;
    7f4e:	48 8b 42 18          	mov    0x18(%rdx),%rax
    7f52:	48 8b 00             	mov    (%rax),%rax
    7f55:	48 03 42 08          	add    0x8(%rdx),%rax
            auto const phys = phys_cursor_.phys_addr();
    7f59:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
            auto const virt = virt_cursor_.virt_addr();
    7f60:	48 89 c8             	mov    %rcx,%rax
    7f63:	48 83 c0 28          	add    $0x28,%rax
    7f67:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    7f6e:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
            return addr_ + consumed_;
    7f75:	48 8b 42 10          	mov    0x10(%rdx),%rax
    7f79:	48 03 42 08          	add    0x8(%rdx),%rax
            auto const virt = virt_cursor_.virt_addr();
    7f7d:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
            this->consume(page_size);
    7f84:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    7f8b:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    7f8f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    7f96:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    7f9a:	48 89 8d 28 fe ff ff 	mov    %rcx,-0x1d8(%rbp)
            phys_cursor_.consume(page_size);
    7fa1:	48 83 c1 08          	add    $0x8,%rcx
    7fa5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    7fac:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    7fb0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    7fb4:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    7fb8:	48 89 8d 30 fe ff ff 	mov    %rcx,-0x1d0(%rbp)
            DEBUG_ASSERT(consumed_ <= page_size_, "Consume");
    7fbf:	48 8b 41 08          	mov    0x8(%rcx),%rax
    7fc3:	48 3b 01             	cmp    (%rcx),%rax
    7fc6:	76 1d                	jbe    7fe5 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x395>
    7fc8:	48 8d 35 18 6f 02 00 	lea    0x26f18(%rip),%rsi        # 2eee7 <.L.str.1>
    7fcf:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    7fd3:	e8 a8 b2 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    7fd8:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
    7fdc:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7fe0:	e8 4b b2 ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    7fe5:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
            DEBUG_ASSERT(count_ > 0, "Consume");
    7fec:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
    7ff1:	77 1d                	ja     8010 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x3c0>
    7ff3:	48 8d 35 ed 6e 02 00 	lea    0x26eed(%rip),%rsi        # 2eee7 <.L.str.1>
    7ffa:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
    7ffe:	e8 7d b2 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    8003:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
    8007:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    800b:	e8 20 b2 ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    8010:	48 8b 8d 30 fe ff ff 	mov    -0x1d0(%rbp),%rcx
            consumed_ += page_size;
    8017:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    801b:	48 03 41 08          	add    0x8(%rcx),%rax
    801f:	48 89 41 08          	mov    %rax,0x8(%rcx)
            if (consumed_ == page_size_) {
    8023:	48 8b 41 08          	mov    0x8(%rcx),%rax
    8027:	48 3b 01             	cmp    (%rcx),%rax
    802a:	75 27                	jne    8053 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x403>
    802c:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
                consumed_ = 0;
    8033:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    803a:	00 
                count_ -= 1;
    803b:	48 8b 48 10          	mov    0x10(%rax),%rcx
    803f:	48 83 e9 01          	sub    $0x1,%rcx
    8043:	48 89 48 10          	mov    %rcx,0x10(%rax)
                addrs_ += 1;
    8047:	48 8b 48 18          	mov    0x18(%rax),%rcx
    804b:	48 83 c1 08          	add    $0x8,%rcx
    804f:	48 89 48 18          	mov    %rcx,0x18(%rax)
    8053:	48 8b 8d 28 fe ff ff 	mov    -0x1d8(%rbp),%rcx
            virt_cursor_.consume(page_size);
    805a:	48 83 c1 28          	add    $0x28,%rcx
    805e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    8065:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    8069:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    806d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            consumed_ += page_size;
    8071:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    8075:	48 8b 48 08          	mov    0x8(%rax),%rcx
    8079:	48 01 d1             	add    %rdx,%rcx
    807c:	48 89 48 08          	mov    %rcx,0x8(%rax)
    8080:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
    8087:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
            return ustl::make_pair(phys, virt);
    808e:	e8 6d 02 00 00       	call   8300 <_ZNSt3__19make_pairB8nn210000IRKmS2_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS4_Iu7__decayIT0_EE4typeEEEOS5_OS9_>
    8093:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    809a:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
    80a1:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
    80a8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    80af:	48 89 8d 58 fe ff ff 	mov    %rcx,-0x1a8(%rbp)
    80b6:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
    80bd:	48 8d bd 58 fe ff ff 	lea    -0x1a8(%rbp),%rdi
    80c4:	e8 d7 01 00 00       	call   82a0 <_ZNSt3__13getB8nn210000ILm0EmmEEOKNS_13tuple_elementIXT_ENS_4pairIT0_T1_EEE4typeEOKS5_>
    80c9:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
    80d0:	48 8d bd 58 fe ff ff 	lea    -0x1a8(%rbp),%rdi
    80d7:	e8 f4 01 00 00       	call   82d0 <_ZNSt3__13getB8nn210000ILm1EmmEEOKNS_13tuple_elementIXT_ENS_4pairIT0_T1_EEE4typeEOKS5_>
    80dc:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
    80e3:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
            update_entry(level, entry, phys, virt, context->flags());
    80ea:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
            auto const [phys, virt] = context->take(page_size);
    80f1:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
            update_entry(level, entry, phys, virt, context->flags());
    80f8:	48 8b 08             	mov    (%rax),%rcx
            auto const [phys, virt] = context->take(page_size);
    80fb:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
            update_entry(level, entry, phys, virt, context->flags());
    8102:	4c 8b 00             	mov    (%rax),%r8
    8105:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    810c:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    8113:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
            return flags_;  
    811a:	4c 8b 08             	mov    (%rax),%r9
    811d:	31 c0                	xor    %eax,%eax
    811f:	31 f6                	xor    %esi,%esi
    8121:	e8 aa 00 00 00       	call   81d0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE>
        for (; index < max_entries && context->size() != 0; ++index) {
    8126:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    812d:	48 83 c0 01          	add    $0x1,%rax
    8131:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    8138:	e9 38 fc ff ff       	jmp    7d75 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x125>
        return Status::Ok;
    813d:	c7 85 bc fe ff ff 00 	movl   $0x0,-0x144(%rbp)
    8144:	00 00 00 
    }
    8147:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    814d:	48 81 c4 e0 01 00 00 	add    $0x1e0,%rsp
    8154:	5d                   	pop    %rbp
    8155:	c3                   	ret
    8156:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    815d:	00 00 00 

0000000000008160 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21level_can_be_terminalENS0_14X86PagingLevelE>:

        static auto is_large_page_mapping(PteVal pte) -> bool
        {  return pte & X86_MMUF_PAGE_SIZE;  }

        static auto level_can_be_terminal(LevelType level) -> bool
        {  return PagingTraits::level_can_be_terminal(level); }
    8160:	55                   	push   %rbp
    8161:	48 89 e5             	mov    %rsp,%rbp
    8164:	89 7d f4             	mov    %edi,-0xc(%rbp)
    8167:	8b 45 f4             	mov    -0xc(%rbp),%eax
    816a:	89 45 f8             	mov    %eax,-0x8(%rbp)
        }

        FORCE_INLINE CXX11_CONSTEXPR 
        static auto level_can_be_terminal(LevelType level) -> bool {
            return Paging::level_can_be_terminal(level);
    816d:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8170:	89 45 fc             	mov    %eax,-0x4(%rbp)
        static bool const kLevelCanBeTerminalMap[]
        { true, true, true, false, false };

        FORCE_INLINE CXX11_CONSTEXPR
        static auto level_can_be_terminal(LevelType level) -> bool {
            return kLevelCanBeTerminalMap[usize(level)];
    8173:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
    8177:	48 8d 05 2a 76 02 00 	lea    0x2762a(%rip),%rax        # 2f7a8 <_ZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE22kLevelCanBeTerminalMapE>
    817e:	48 01 c8             	add    %rcx,%rax
    8181:	8a 00                	mov    (%rax),%al
    8183:	24 01                	and    $0x1,%al
    8185:	5d                   	pop    %rbp
    8186:	c3                   	ret
    8187:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    818e:	00 00 

0000000000008190 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>:
        {  return pte & X86_MMUF_PRESENT;  }
    8190:	55                   	push   %rbp
    8191:	48 89 e5             	mov    %rsp,%rbp
    8194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    819c:	48 83 e0 01          	and    $0x1,%rax
    81a0:	48 83 f8 00          	cmp    $0x0,%rax
    81a4:	0f 95 c0             	setne  %al
    81a7:	24 01                	and    $0x1,%al
    81a9:	5d                   	pop    %rbp
    81aa:	c3                   	ret
    81ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000081b0 <_ZNK4arch6paging21GenericMappingContext14remaining_sizeEv>:
        auto remaining_size() const -> usize {  
    81b0:	55                   	push   %rbp
    81b1:	48 89 e5             	mov    %rsp,%rbp
    81b4:	48 83 ec 10          	sub    $0x10,%rsp
    81b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    81bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            return phys_cursor_.remaining_size();  
    81c0:	48 83 c7 08          	add    $0x8,%rdi
    81c4:	e8 27 02 00 00       	call   83f0 <_ZNK4arch6paging14PhysAddrCursor14remaining_sizeEv>
    81c9:	48 83 c4 10          	add    $0x10,%rsp
    81cd:	5d                   	pop    %rbp
    81ce:	c3                   	ret
    81cf:	90                   	nop

00000000000081d0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE>:
    {
    81d0:	55                   	push   %rbp
    81d1:	48 89 e5             	mov    %rsp,%rbp
    81d4:	48 83 ec 50          	sub    $0x50,%rsp
    81d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    81dc:	89 75 f4             	mov    %esi,-0xc(%rbp)
    81df:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    81e3:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    81e7:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    81eb:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    81ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        auto const derived = static_cast<Derived *>(this);
    81f3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        PteVal const old_pte = *pteval;
    81f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    81fb:	48 8b 00             	mov    (%rax),%rax
    81fe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        PteVal const new_pte = derived->make_pteval(level, phys, flags);
    8202:	8b 7d f4             	mov    -0xc(%rbp),%edi
    8205:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    8209:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    820d:	e8 fe 01 00 00       	call   8410 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE>
    8212:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        if (new_pte == old_pte) {
    8216:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    821a:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    821e:	75 02                	jne    8222 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x52>
            return; 
    8220:	eb 1c                	jmp    823e <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x6e>
        *pteval = new_pte;
    8222:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    8226:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    822a:	48 89 08             	mov    %rcx,(%rax)
        if (Derived::is_present(old_pte)) {
    822d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    8231:	e8 5a ff ff ff       	call   8190 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>
    8236:	a8 01                	test   $0x1,%al
    8238:	75 02                	jne    823c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x6c>
    823a:	eb 02                	jmp    823e <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x6e>
        }
    823c:	eb 00                	jmp    823e <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x6e>
    }
    823e:	48 83 c4 50          	add    $0x50,%rsp
    8242:	5d                   	pop    %rbp
    8243:	c3                   	ret
    8244:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    824b:	00 00 00 
    824e:	66 90                	xchg   %ax,%ax

0000000000008250 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21is_large_page_mappingEm>:
        {  return pte & X86_MMUF_PAGE_SIZE;  }
    8250:	55                   	push   %rbp
    8251:	48 89 e5             	mov    %rsp,%rbp
    8254:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    825c:	48 25 80 00 00 00    	and    $0x80,%rax
    8262:	48 83 f8 00          	cmp    $0x0,%rax
    8266:	0f 95 c0             	setne  %al
    8269:	24 01                	and    $0x1,%al
    826b:	5d                   	pop    %rbp
    826c:	c3                   	ret
    826d:	0f 1f 00             	nopl   (%rax)

0000000000008270 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E11unmap_entryEPVmNS0_14X86PagingLevelE>:
    {  return Status::Unimplemented;  }
    8270:	55                   	push   %rbp
    8271:	48 89 e5             	mov    %rsp,%rbp
    8274:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8278:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    827c:	89 55 ec             	mov    %edx,-0x14(%rbp)
    827f:	b8 05 00 00 00       	mov    $0x5,%eax
    8284:	5d                   	pop    %rbp
    8285:	c3                   	ret
    8286:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    828d:	00 00 00 

0000000000008290 <_ZN4arch6paging24X86PageTableSynchroniserINS0_15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEEE4syncEv>:
        auto sync() -> void {}
    8290:	55                   	push   %rbp
    8291:	48 89 e5             	mov    %rsp,%rbp
    8294:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8298:	5d                   	pop    %rbp
    8299:	c3                   	ret
    829a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000082a0 <_ZNSt3__13getB8nn210000ILm0EmmEEOKNS_13tuple_elementIXT_ENS_4pairIT0_T1_EEE4typeEOKS5_>:
  return __get_pair<_Ip>::get(std::move(__p));
}

template <size_t _Ip, class _T1, class _T2>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 const typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(const pair<_T1, _T2>&& __p) _NOEXCEPT {
    82a0:	55                   	push   %rbp
    82a1:	48 89 e5             	mov    %rsp,%rbp
    82a4:	48 83 ec 10          	sub    $0x10,%rsp
    82a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __get_pair<_Ip>::get(std::move(__p));
    82ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    82b0:	e8 fb 00 00 00       	call   83b0 <_ZNSt3__14moveB8nn210000IRKNS_4pairImmEEEEOu20__remove_reference_tIT_EOS5_>
    82b5:	48 89 c7             	mov    %rax,%rdi
    82b8:	e8 d3 00 00 00       	call   8390 <_ZNSt3__110__get_pairILm0EE3getB8nn210000ImmEEOKT_OKNS_4pairIS3_T0_EE>
    82bd:	48 83 c4 10          	add    $0x10,%rsp
    82c1:	5d                   	pop    %rbp
    82c2:	c3                   	ret
    82c3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82ca:	00 00 00 
    82cd:	0f 1f 00             	nopl   (%rax)

00000000000082d0 <_ZNSt3__13getB8nn210000ILm1EmmEEOKNS_13tuple_elementIXT_ENS_4pairIT0_T1_EEE4typeEOKS5_>:
get(const pair<_T1, _T2>&& __p) _NOEXCEPT {
    82d0:	55                   	push   %rbp
    82d1:	48 89 e5             	mov    %rsp,%rbp
    82d4:	48 83 ec 10          	sub    $0x10,%rsp
    82d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __get_pair<_Ip>::get(std::move(__p));
    82dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    82e0:	e8 cb 00 00 00       	call   83b0 <_ZNSt3__14moveB8nn210000IRKNS_4pairImmEEEEOu20__remove_reference_tIT_EOS5_>
    82e5:	48 89 c7             	mov    %rax,%rdi
    82e8:	e8 e3 00 00 00       	call   83d0 <_ZNSt3__110__get_pairILm1EE3getB8nn210000ImmEEOKT0_OKNS_4pairIT_S3_EE>
    82ed:	48 83 c4 10          	add    $0x10,%rsp
    82f1:	5d                   	pop    %rbp
    82f2:	c3                   	ret
    82f3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82fa:	00 00 00 
    82fd:	0f 1f 00             	nopl   (%rax)

0000000000008300 <_ZNSt3__19make_pairB8nn210000IRKmS2_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS4_Iu7__decayIT0_EE4typeEEEOS5_OS9_>:
make_pair(_T1&& __t1, _T2&& __t2) {
    8300:	55                   	push   %rbp
    8301:	48 89 e5             	mov    %rsp,%rbp
    8304:	48 83 ec 30          	sub    $0x30,%rsp
    8308:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    830c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
    8310:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    8314:	e8 37 00 00 00       	call   8350 <_ZNSt3__17forwardB8nn210000IRKmEEOT_Ru20__remove_reference_tIS3_E>
    8319:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    831d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    8321:	e8 2a 00 00 00       	call   8350 <_ZNSt3__17forwardB8nn210000IRKmEEOT_Ru20__remove_reference_tIS3_E>
    8326:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    832a:	48 89 c2             	mov    %rax,%rdx
    832d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    8331:	e8 2a 00 00 00       	call   8360 <_ZNSt3__14pairImmEC2B8nn210000ILb1ETnNS_9enable_ifIXclsr13_CheckArgsDepIXT_EEE23__is_pair_constructibleIRKmS5_EEEiE4typeELi0EEES5_S5_>
    8336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    833a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    833e:	48 83 c4 30          	add    $0x30,%rsp
    8342:	5d                   	pop    %rbp
    8343:	c3                   	ret
    8344:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    834b:	00 00 00 
    834e:	66 90                	xchg   %ax,%ax

0000000000008350 <_ZNSt3__17forwardB8nn210000IRKmEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    8350:	55                   	push   %rbp
    8351:	48 89 e5             	mov    %rsp,%rbp
    8354:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    8358:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    835c:	5d                   	pop    %rbp
    835d:	c3                   	ret
    835e:	66 90                	xchg   %ax,%ax

0000000000008360 <_ZNSt3__14pairImmEC2B8nn210000ILb1ETnNS_9enable_ifIXclsr13_CheckArgsDepIXT_EEE23__is_pair_constructibleIRKmS5_EEEiE4typeELi0EEES5_S5_>:
      : first(__t1), second(__t2) {}
    8360:	55                   	push   %rbp
    8361:	48 89 e5             	mov    %rsp,%rbp
    8364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8368:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    836c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    8370:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8374:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8378:	48 8b 09             	mov    (%rcx),%rcx
    837b:	48 89 08             	mov    %rcx,(%rax)
    837e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    8382:	48 8b 09             	mov    (%rcx),%rcx
    8385:	48 89 48 08          	mov    %rcx,0x8(%rax)
    8389:	5d                   	pop    %rbp
    838a:	c3                   	ret
    838b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008390 <_ZNSt3__110__get_pairILm0EE3getB8nn210000ImmEEOKT_OKNS_4pairIS3_T0_EE>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 const _T1&& get(const pair<_T1, _T2>&& __p) _NOEXCEPT {
    8390:	55                   	push   %rbp
    8391:	48 89 e5             	mov    %rsp,%rbp
    8394:	48 83 ec 10          	sub    $0x10,%rsp
    8398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::forward<const _T1>(__p.first);
    839c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    83a0:	e8 1b 00 00 00       	call   83c0 <_ZNSt3__17forwardB8nn210000IKmEEOT_Ru20__remove_reference_tIS2_E>
    83a5:	48 83 c4 10          	add    $0x10,%rsp
    83a9:	5d                   	pop    %rbp
    83aa:	c3                   	ret
    83ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000083b0 <_ZNSt3__14moveB8nn210000IRKNS_4pairImmEEEEOu20__remove_reference_tIT_EOS5_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
    83b0:	55                   	push   %rbp
    83b1:	48 89 e5             	mov    %rsp,%rbp
    83b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
    83b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    83bc:	5d                   	pop    %rbp
    83bd:	c3                   	ret
    83be:	66 90                	xchg   %ax,%ax

00000000000083c0 <_ZNSt3__17forwardB8nn210000IKmEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    83c0:	55                   	push   %rbp
    83c1:	48 89 e5             	mov    %rsp,%rbp
    83c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    83c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    83cc:	5d                   	pop    %rbp
    83cd:	c3                   	ret
    83ce:	66 90                	xchg   %ax,%ax

00000000000083d0 <_ZNSt3__110__get_pairILm1EE3getB8nn210000ImmEEOKT0_OKNS_4pairIT_S3_EE>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 const _T2&& get(const pair<_T1, _T2>&& __p) _NOEXCEPT {
    83d0:	55                   	push   %rbp
    83d1:	48 89 e5             	mov    %rsp,%rbp
    83d4:	48 83 ec 10          	sub    $0x10,%rsp
    83d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::forward<const _T2>(__p.second);
    83dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    83e0:	48 83 c7 08          	add    $0x8,%rdi
    83e4:	e8 d7 ff ff ff       	call   83c0 <_ZNSt3__17forwardB8nn210000IKmEEOT_Ru20__remove_reference_tIS2_E>
    83e9:	48 83 c4 10          	add    $0x10,%rsp
    83ed:	5d                   	pop    %rbp
    83ee:	c3                   	ret
    83ef:	90                   	nop

00000000000083f0 <_ZNK4arch6paging14PhysAddrCursor14remaining_sizeEv>:
        auto remaining_size() const -> usize {
    83f0:	55                   	push   %rbp
    83f1:	48 89 e5             	mov    %rsp,%rbp
    83f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    83f8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
            return page_size_ - consumed_;
    83fc:	48 8b 01             	mov    (%rcx),%rax
    83ff:	48 2b 41 08          	sub    0x8(%rcx),%rax
    8403:	5d                   	pop    %rbp
    8404:	c3                   	ret
    8405:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    840c:	00 00 00 
    840f:	90                   	nop

0000000000008410 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE>:

        static auto make_pteval(LevelType level, PhysAddr phys, MmuFlags flags) -> PteVal {
    8410:	55                   	push   %rbp
    8411:	48 89 e5             	mov    %rsp,%rbp
    8414:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
    841b:	89 bd cc fe ff ff    	mov    %edi,-0x134(%rbp)
    8421:	48 89 b5 c0 fe ff ff 	mov    %rsi,-0x140(%rbp)
    8428:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
            auto arch_flags = mmuflags_cast<X86MmuFlags>(flags) | X86MmuFlags::Present;
    842f:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8436:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    USTL_ENABLE_ENUM_BITMASK(X86MmuFlags);

    template <>
    FORCE_INLINE CXX11_CONSTEXPR
    auto mmuflags_cast(MmuFlags const flags) -> X86MmuFlags {
        X86MmuFlags target{};
    843d:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
    8444:	00 00 00 00 
        if (bool(flags & MmuFlags::Present)) {
    8448:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    844f:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    8456:	48 c7 85 30 ff ff ff 	movq   $0x1,-0xd0(%rbp)
    845d:	01 00 00 00 
    8461:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    8468:	48 23 85 30 ff ff ff 	and    -0xd0(%rbp),%rax
    846f:	48 83 f8 00          	cmp    $0x0,%rax
    8473:	74 50                	je     84c5 <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE+0xb5>
    8475:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    847c:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    8483:	48 c7 85 40 ff ff ff 	movq   $0x1,-0xc0(%rbp)
    848a:	01 00 00 00 
USTL_FORCEINLINE USTL_CONSTEXPR
auto operator|=(Enum& lhs, Enum rhs) 
    -> ustl::traits::EnableIfT<UstlEnumBitMaskEnabledV<Enum>, ustl::traits::AddLvalRefT<Enum>>
{
    typedef ustl::traits::UnderlyingTypeT<Enum>     Underlying;
    lhs = lhs | rhs;
    848e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8495:	48 8b 08             	mov    (%rax),%rcx
    8498:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    849f:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
    84a6:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
        static_cast<Underlying>(lhs) |
    84ad:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
    84b4:	48 0b 8d 50 ff ff ff 	or     -0xb0(%rbp),%rcx
    lhs = lhs | rhs;
    84bb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    84c2:	48 89 08             	mov    %rcx,(%rax)
            target |= X86MmuFlags::Present;
        }
        if (!bool(flags & MmuFlags::Executable)) {
    84c5:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    84cc:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    84d3:	48 c7 85 20 ff ff ff 	movq   $0x8,-0xe0(%rbp)
    84da:	08 00 00 00 
        static_cast<Underlying>(lhs) &
    84de:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    84e5:	48 23 85 20 ff ff ff 	and    -0xe0(%rbp),%rax
    84ec:	48 83 f8 00          	cmp    $0x0,%rax
    84f0:	75 3b                	jne    852d <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE+0x11d>
    84f2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    84f9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    84fd:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
    8504:	00 00 80 
    8507:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    lhs = lhs | rhs;
    850b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    850f:	48 8b 08             	mov    (%rax),%rcx
    8512:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    8516:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    851a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        static_cast<Underlying>(lhs) |
    851e:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    8522:	48 0b 4d d0          	or     -0x30(%rbp),%rcx
    lhs = lhs | rhs;
    8526:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    852a:	48 89 08             	mov    %rcx,(%rax)
            target |= X86MmuFlags::NoExecutable;
        }
        if (bool(flags & MmuFlags::Writable)) {
    852d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    8534:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    853b:	48 c7 85 10 ff ff ff 	movq   $0x2,-0xf0(%rbp)
    8542:	02 00 00 00 
        static_cast<Underlying>(lhs) &
    8546:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    854d:	48 23 85 10 ff ff ff 	and    -0xf0(%rbp),%rax
    8554:	48 83 f8 00          	cmp    $0x0,%rax
    8558:	74 50                	je     85aa <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE+0x19a>
    855a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    8561:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    8568:	48 c7 85 60 ff ff ff 	movq   $0x2,-0xa0(%rbp)
    856f:	02 00 00 00 
    lhs = lhs | rhs;
    8573:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    857a:	48 8b 08             	mov    (%rax),%rcx
    857d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    8584:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
    858b:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
        static_cast<Underlying>(lhs) |
    8592:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    8599:	48 0b 8d 70 ff ff ff 	or     -0x90(%rbp),%rcx
    lhs = lhs | rhs;
    85a0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    85a7:	48 89 08             	mov    %rcx,(%rax)
            target |= X86MmuFlags::Writable;
        }
        if (bool(flags & MmuFlags::User)) {
    85aa:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    85b1:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    85b8:	48 c7 85 00 ff ff ff 	movq   $0x20,-0x100(%rbp)
    85bf:	20 00 00 00 
        static_cast<Underlying>(lhs) &
    85c3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    85ca:	48 23 85 00 ff ff ff 	and    -0x100(%rbp),%rax
    85d1:	48 83 f8 00          	cmp    $0x0,%rax
    85d5:	74 35                	je     860c <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE+0x1fc>
    85d7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    85de:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    85e2:	48 c7 45 80 04 00 00 	movq   $0x4,-0x80(%rbp)
    85e9:	00 
    lhs = lhs | rhs;
    85ea:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    85ee:	48 8b 08             	mov    (%rax),%rcx
    85f1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    85f5:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    85f9:	48 89 45 90          	mov    %rax,-0x70(%rbp)
        static_cast<Underlying>(lhs) |
    85fd:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    8601:	48 0b 4d 90          	or     -0x70(%rbp),%rcx
    lhs = lhs | rhs;
    8605:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    8609:	48 89 08             	mov    %rcx,(%rax)
            target |= X86MmuFlags::User;
        }
        if (bool(flags & MmuFlags::Discache)) {
    860c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    8613:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    861a:	48 c7 85 f0 fe ff ff 	movq   $0x10,-0x110(%rbp)
    8621:	10 00 00 00 
        static_cast<Underlying>(lhs) &
    8625:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    862c:	48 23 85 f0 fe ff ff 	and    -0x110(%rbp),%rax
    8633:	48 83 f8 00          	cmp    $0x0,%rax
    8637:	74 35                	je     866e <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE+0x25e>
    8639:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    8640:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    8644:	48 c7 45 a0 10 00 00 	movq   $0x10,-0x60(%rbp)
    864b:	00 
    lhs = lhs | rhs;
    864c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    8650:	48 8b 08             	mov    (%rax),%rcx
    8653:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    8657:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    865b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
        static_cast<Underlying>(lhs) |
    865f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    8663:	48 0b 4d b0          	or     -0x50(%rbp),%rcx
    lhs = lhs | rhs;
    8667:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    866b:	48 89 08             	mov    %rcx,(%rax)
            target |= X86MmuFlags::Discache;
        }

        return target;
    866e:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    8675:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    867c:	48 c7 85 d0 fe ff ff 	movq   $0x1,-0x130(%rbp)
    8683:	01 00 00 00 
        static_cast<Underlying>(lhs) |
    8687:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    868e:	48 0b 85 d0 fe ff ff 	or     -0x130(%rbp),%rax
    8695:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
            if (level != PagingTraits::kFinalLevel) {
    869c:	83 bd cc fe ff ff 00 	cmpl   $0x0,-0x134(%rbp)
    86a3:	74 35                	je     86da <_ZN4arch6paging15X86PageTableMmuINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE+0x2ca>
    86a5:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    86ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    86b0:	48 c7 45 e0 80 00 00 	movq   $0x80,-0x20(%rbp)
    86b7:	00 
    lhs = lhs | rhs;
    86b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    86bc:	48 8b 08             	mov    (%rax),%rcx
    86bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    86c3:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    86c7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        static_cast<Underlying>(lhs) |
    86cb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    86cf:	48 0b 4d f0          	or     -0x10(%rbp),%rcx
    lhs = lhs | rhs;
    86d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    86d7:	48 89 08             	mov    %rcx,(%rax)
                arch_flags |= X86MmuFlags::PageSize;
            }

            // FIXME(SmallHuaZi) `phys` should does bit-and with address mask.
            return PteVal(PteVal(arch_flags) | phys);
    86da:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    86e1:	48 0b 85 c0 fe ff ff 	or     -0x140(%rbp),%rax
    86e8:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
    86ef:	5d                   	pop    %rbp
    86f0:	c3                   	ret
    86f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86f8:	00 00 00 
    86fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008700 <_ZN4ustl4sync9LockGuardIN4ours5MutexEE6unlockEv>:
        auto unlock() {
    8700:	55                   	push   %rbp
    8701:	48 89 e5             	mov    %rsp,%rbp
    8704:	48 83 ec 10          	sub    $0x10,%rsp
    8708:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    870c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8710:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
            if (!unlocked_) {
    8714:	f6 40 08 01          	testb  $0x1,0x8(%rax)
    8718:	75 14                	jne    872e <_ZN4ustl4sync9LockGuardIN4ours5MutexEE6unlockEv+0x2e>
    871a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
                lock_->unlock();
    871e:	48 8b 38             	mov    (%rax),%rdi
    8721:	e8 1a 00 00 00       	call   8740 <_ZN4ours5Mutex6unlockEv>
    8726:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
                unlocked_ = true;
    872a:	c6 40 08 01          	movb   $0x1,0x8(%rax)
        }
    872e:	48 83 c4 10          	add    $0x10,%rsp
    8732:	5d                   	pop    %rbp
    8733:	c3                   	ret
    8734:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    873b:	00 00 00 
    873e:	66 90                	xchg   %ax,%ax

0000000000008740 <_ZN4ours5Mutex6unlockEv>:
        auto unlock() -> void {}
    8740:	55                   	push   %rbp
    8741:	48 89 e5             	mov    %rsp,%rbp
    8744:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8748:	5d                   	pop    %rbp
    8749:	c3                   	ret
    874a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000008750 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEC2Ev>:

#include <arch/paging/page_table_impl.hpp>

namespace arch::paging {
    template <typename Options>
    class X86PageTableEpt
    8750:	55                   	push   %rbp
    8751:	48 89 e5             	mov    %rsp,%rbp
    8754:	48 83 ec 10          	sub    $0x10,%rsp
    8758:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    875c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    8760:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    8764:	e8 17 00 00 00       	call   8780 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_EC2Ev>
    8769:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    876d:	48 8d 0d fc 8b 02 00 	lea    0x28bfc(%rip),%rcx        # 31370 <_ZTVN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEE+0x10>
    8774:	48 89 08             	mov    %rcx,(%rax)
    8777:	48 83 c4 10          	add    $0x10,%rsp
    877b:	5d                   	pop    %rbp
    877c:	c3                   	ret
    877d:	0f 1f 00             	nopl   (%rax)

0000000000008780 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_EC2Ev>:
        X86PageTableImpl() = default;
    8780:	55                   	push   %rbp
    8781:	48 89 e5             	mov    %rsp,%rbp
    8784:	48 83 ec 10          	sub    $0x10,%rsp
    8788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    878c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    8790:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    8794:	e8 27 e7 ff ff       	call   6ec0 <_ZN4arch6paging13IX86PageTableC2Ev>
    8799:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    879d:	48 8d 05 24 8c 02 00 	lea    0x28c24(%rip),%rax        # 313c8 <_ZTVN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_EE+0x10>
    87a4:	48 89 07             	mov    %rax,(%rdi)
    87a7:	48 83 c7 30          	add    $0x30,%rdi
    87ab:	e8 50 e7 ff ff       	call   6f00 <_ZN4gktl6CanaryILj1633840229EEC2Ev>
    87b0:	48 83 c4 10          	add    $0x10,%rsp
    87b4:	5d                   	pop    %rbp
    87b5:	c3                   	ret
    87b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87bd:	00 00 00 

00000000000087c0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEED2Ev>:
        typedef X86PageTableImpl<Self, Options> Base;

        using typename Base::PagingTraits;
        using typename Base::LevelType;
    public:
        virtual ~X86PageTableEpt() override = default;
    87c0:	55                   	push   %rbp
    87c1:	48 89 e5             	mov    %rsp,%rbp
    87c4:	48 83 ec 10          	sub    $0x10,%rsp
    87c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    87cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    87d0:	e8 3b 06 00 00       	call   8e10 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_ED2Ev>
    87d5:	48 83 c4 10          	add    $0x10,%rsp
    87d9:	5d                   	pop    %rbp
    87da:	c3                   	ret
    87db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000087e0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEED0Ev>:
    87e0:	55                   	push   %rbp
    87e1:	48 89 e5             	mov    %rsp,%rbp
    87e4:	48 83 ec 10          	sub    $0x10,%rsp
    87e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    87ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    87f0:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    87f4:	e8 c7 ff ff ff       	call   87c0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEED2Ev>
    87f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    87fd:	be 38 00 00 00       	mov    $0x38,%esi
    8802:	e8 89 09 01 00       	call   19190 <_ZdlPvm>
    8807:	48 83 c4 10          	add    $0x10,%rsp
    880b:	5d                   	pop    %rbp
    880c:	c3                   	ret
    880d:	0f 1f 00             	nopl   (%rax)

0000000000008810 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE>:
    {
    8810:	55                   	push   %rbp
    8811:	48 89 e5             	mov    %rsp,%rbp
    8814:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
    881b:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    8822:	48 89 f8             	mov    %rdi,%rax
    8825:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    882c:	48 8b 45 18          	mov    0x18(%rbp),%rax
    8830:	8b 45 10             	mov    0x10(%rbp),%eax
    8833:	48 89 bd 40 ff ff ff 	mov    %rdi,-0xc0(%rbp)
    883a:	48 89 b5 38 ff ff ff 	mov    %rsi,-0xc8(%rbp)
    8841:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
    8848:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
    884f:	4c 89 85 20 ff ff ff 	mov    %r8,-0xe0(%rbp)
    8856:	4c 89 8d 18 ff ff ff 	mov    %r9,-0xe8(%rbp)
    885d:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    8864:	48 89 bd 88 fe ff ff 	mov    %rdi,-0x178(%rbp)
        canary_.verify();
    886b:	48 83 c7 30          	add    $0x30,%rdi
    886f:	e8 dc e7 ff ff       	call   7050 <_ZNK4gktl6CanaryILj1633840229EE6verifyEv>
    8874:	48 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%rdi
        auto status = prepare_map_pages(va, &pa, n, flags, &context);
    887b:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
    8882:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
    8889:	4c 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%r8
    8890:	48 8d 95 28 ff ff ff 	lea    -0xd8(%rbp),%rdx
    8897:	4c 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%r9
    889e:	e8 bd 05 00 00       	call   8e60 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE>
    88a3:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
        if (status != Status::Ok) {
    88a9:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    88b0:	74 6f                	je     8921 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x111>
            return ustl::err(status);
    88b2:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    88b8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
    88be:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    88c5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    88c9:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    88cd:	48 8d bd 54 ff ff ff 	lea    -0xac(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    88d4:	e8 77 f2 ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    88d9:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    88e0:	8b 8d 54 ff ff ff    	mov    -0xac(%rbp),%ecx
    88e6:	89 8d b8 fe ff ff    	mov    %ecx,-0x148(%rbp)
    88ec:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    88f3:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
    88fa:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    8901:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    8908:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    890f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    8913:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    8917:	e8 64 f2 ff ff       	call   7b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
    891c:	e9 8a 01 00 00       	jmp    8aab <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
        } else if (n == 0) {
    8921:	48 83 bd 20 ff ff ff 	cmpq   $0x0,-0xe0(%rbp)
    8928:	00 
    8929:	75 58                	jne    8983 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x173>
    892b:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
    8932:	00 
    8933:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    8937:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    893b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    893f:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    8943:	e8 88 f2 ff ff       	call   7bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>
    8948:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    894f:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
            return ustl::ok<usize>(0);
    8953:	48 89 8d b0 fe ff ff 	mov    %rcx,-0x150(%rbp)
    895a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    895e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    8965:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    8969:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    896d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8971:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    8975:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    8979:	e8 82 f2 ff ff       	call   7c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>
    897e:	e9 28 01 00 00       	jmp    8aab <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
    8983:	eb 00                	jmp    8985 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x175>
    8985:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
            ustl::sync::LockGuard guard(mutex_);
    898c:	48 83 c6 35          	add    $0x35,%rsi
    8990:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
    8997:	e8 14 e8 ff ff       	call   71b0 <_ZN4ustl4sync9LockGuardIN4ours5MutexEEC2ERS3_>
    899c:	48 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%rdi
            status = create_mapping(Self::top_level(), reinterpret_cast<PteVal *>(virt_), &context, control);
    89a3:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    89a7:	44 8b 45 10          	mov    0x10(%rbp),%r8d
    89ab:	be 03 00 00 00       	mov    $0x3,%esi
    89b0:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    89b7:	e8 c4 05 00 00       	call   8f80 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE>
    89bc:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    89c2:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
        }
    89c9:	e8 32 ef ff ff       	call   7900 <_ZN4ustl4sync9LockGuardIN4ours5MutexEED2Ev>
        if (status != Status::Ok) {
    89ce:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    89d5:	74 6c                	je     8a43 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x233>
            return ustl::err(status);
    89d7:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    89dd:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    89e3:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
    89ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    89ee:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    89f2:	48 8d bd 4c ff ff ff 	lea    -0xb4(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    89f9:	e8 52 f1 ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    89fe:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    8a05:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
    8a0b:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%rbp)
    8a11:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    8a18:	48 8d 85 9c fe ff ff 	lea    -0x164(%rbp),%rax
    8a1f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    8a26:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    8a2d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    8a34:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    8a38:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    8a3c:	e8 3f f1 ff ff       	call   7b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
    8a41:	eb 68                	jmp    8aab <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E21map_pages_with_altmapEmmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
    8a43:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    8a4a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8a4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            return nr_mapped_;
    8a52:	48 8b 40 48          	mov    0x48(%rax),%rax
    8a56:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    8a5d:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
    8a64:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    8a68:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    8a6c:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    8a70:	e8 5b f1 ff ff       	call   7bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>
    8a75:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    8a7c:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
        return ustl::ok<usize>(context.mapped());
    8a80:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
    8a87:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    8a8b:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    8a92:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    8a96:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    8a9a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    8a9e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    8aa2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    8aa6:	e8 55 f1 ff ff       	call   7c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>
    8aab:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
    }
    8ab2:	48 81 c4 90 01 00 00 	add    $0x190,%rsp
    8ab9:	5d                   	pop    %rbp
    8aba:	c3                   	ret
    8abb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008ac0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE>:
    {
    8ac0:	55                   	push   %rbp
    8ac1:	48 89 e5             	mov    %rsp,%rbp
    8ac4:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
    8acb:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    8ad2:	48 89 f8             	mov    %rdi,%rax
    8ad5:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    8adc:	48 8b 45 18          	mov    0x18(%rbp),%rax
    8ae0:	8b 45 10             	mov    0x10(%rbp),%eax
    8ae3:	48 89 bd 40 ff ff ff 	mov    %rdi,-0xc0(%rbp)
    8aea:	48 89 b5 38 ff ff ff 	mov    %rsi,-0xc8(%rbp)
    8af1:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
    8af8:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
    8aff:	4c 89 85 20 ff ff ff 	mov    %r8,-0xe0(%rbp)
    8b06:	4c 89 8d 18 ff ff ff 	mov    %r9,-0xe8(%rbp)
    8b0d:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    8b14:	48 89 bd 88 fe ff ff 	mov    %rdi,-0x178(%rbp)
        canary_.verify();
    8b1b:	48 83 c7 30          	add    $0x30,%rdi
    8b1f:	e8 2c e5 ff ff       	call   7050 <_ZNK4gktl6CanaryILj1633840229EE6verifyEv>
    8b24:	48 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%rdi
        auto status = prepare_map_pages(va, pa, len, flags, &context);
    8b2b:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
    8b32:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    8b39:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
    8b40:	4c 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%r8
    8b47:	4c 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%r9
    8b4e:	e8 0d 03 00 00       	call   8e60 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE>
    8b53:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
        if (status != Status::Ok) {
    8b59:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    8b60:	74 6f                	je     8bd1 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x111>
            return ustl::err(status);
    8b62:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    8b68:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
    8b6e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    8b75:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    8b79:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    8b7d:	48 8d bd 54 ff ff ff 	lea    -0xac(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    8b84:	e8 c7 ef ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    8b89:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    8b90:	8b 8d 54 ff ff ff    	mov    -0xac(%rbp),%ecx
    8b96:	89 8d b8 fe ff ff    	mov    %ecx,-0x148(%rbp)
    8b9c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    8ba3:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
    8baa:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    8bb1:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    8bb8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    8bbf:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    8bc3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    8bc7:	e8 b4 ef ff ff       	call   7b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
    8bcc:	e9 8a 01 00 00       	jmp    8d5b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
        } else if (len == 0) {
    8bd1:	48 83 bd 20 ff ff ff 	cmpq   $0x0,-0xe0(%rbp)
    8bd8:	00 
    8bd9:	75 58                	jne    8c33 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x173>
    8bdb:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
    8be2:	00 
    8be3:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    8be7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    8beb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    8bef:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    8bf3:	e8 d8 ef ff ff       	call   7bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>
    8bf8:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    8bff:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
            return ustl::ok<usize>(0);
    8c03:	48 89 8d b0 fe ff ff 	mov    %rcx,-0x150(%rbp)
    8c0a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    8c0e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    8c15:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    8c19:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    8c1d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8c21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    8c25:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    8c29:	e8 d2 ef ff ff       	call   7c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>
    8c2e:	e9 28 01 00 00       	jmp    8d5b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
    8c33:	eb 00                	jmp    8c35 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x175>
    8c35:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
            ustl::sync::LockGuard guard(mutex_);
    8c3c:	48 83 c6 35          	add    $0x35,%rsi
    8c40:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
    8c47:	e8 64 e5 ff ff       	call   71b0 <_ZN4ustl4sync9LockGuardIN4ours5MutexEEC2ERS3_>
    8c4c:	48 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%rdi
            status = create_mapping(Self::top_level(), reinterpret_cast<PteVal *>(virt_), &context, control);
    8c53:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    8c57:	44 8b 45 10          	mov    0x10(%rbp),%r8d
    8c5b:	be 03 00 00 00       	mov    $0x3,%esi
    8c60:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    8c67:	e8 14 03 00 00       	call   8f80 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE>
    8c6c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    8c72:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
        }
    8c79:	e8 82 ec ff ff       	call   7900 <_ZN4ustl4sync9LockGuardIN4ours5MutexEED2Ev>
        if (status != Status::Ok) {
    8c7e:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    8c85:	74 6c                	je     8cf3 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x233>
            return ustl::err(status);
    8c87:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    8c8d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    8c93:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
    8c9a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    8c9e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    8ca2:	48 8d bd 4c ff ff ff 	lea    -0xb4(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    8ca9:	e8 a2 ee ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    8cae:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    8cb5:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
    8cbb:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%rbp)
    8cc1:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    8cc8:	48 8d 85 9c fe ff ff 	lea    -0x164(%rbp),%rax
    8ccf:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    8cd6:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    8cdd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    8ce4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    8ce8:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    8cec:	e8 8f ee ff ff       	call   7b80 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
    8cf1:	eb 68                	jmp    8d5b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E26map_pages_bulk_with_altmapEmPmmNS0_8MmuFlagsENS0_10MapControlEPNS9_6AltmapE+0x29b>
    8cf3:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    8cfa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8cfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8d02:	48 8b 40 48          	mov    0x48(%rax),%rax
    8d06:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    8d0d:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
    8d14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    8d18:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    8d1c:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    8d20:	e8 ab ee ff ff       	call   7bd0 <_ZN4ustl2OkImEC2IJmEEEDpOT_>
    8d25:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    8d2c:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
        return ustl::ok<usize>(context.mapped());
    8d30:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
    8d37:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    8d3b:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    8d42:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    8d46:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    8d4a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    8d4e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    8d52:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    8d56:	e8 a5 ee ff ff       	call   7c00 <_ZN4ustl6result14StorageTrivialImN4ours6StatusEEC2IJmEEENS_7InplaceIJmEEEDpOT_>
    8d5b:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
    }
    8d62:	48 81 c4 90 01 00 00 	add    $0x190,%rsp
    8d69:	5d                   	pop    %rbp
    8d6a:	c3                   	ret
    8d6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008d70 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E11unmap_pagesEmmNS0_12UnMapControlE>:
    {  return Status::Unimplemented;  }
    8d70:	55                   	push   %rbp
    8d71:	48 89 e5             	mov    %rsp,%rbp
    8d74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8d78:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8d7c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    8d80:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    8d83:	b8 05 00 00 00       	mov    $0x5,%eax
    8d88:	5d                   	pop    %rbp
    8d89:	c3                   	ret
    8d8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000008d90 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E13protect_pagesEmmNS0_8MmuFlagsE>:
    {  return Status::Unimplemented;  }
    8d90:	55                   	push   %rbp
    8d91:	48 89 e5             	mov    %rsp,%rbp
    8d94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8d98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8d9c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    8da0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    8da4:	b8 05 00 00 00       	mov    $0x5,%eax
    8da9:	5d                   	pop    %rbp
    8daa:	c3                   	ret
    8dab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008db0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E13query_mappingEmPmPNS0_8MmuFlagsE>:
    {  return Status::Unimplemented;  }
    8db0:	55                   	push   %rbp
    8db1:	48 89 e5             	mov    %rsp,%rbp
    8db4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8db8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8dbc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    8dc0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    8dc4:	b8 05 00 00 00       	mov    $0x5,%eax
    8dc9:	5d                   	pop    %rbp
    8dca:	c3                   	ret
    8dcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008dd0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E16harvest_accessedEmmNS0_14HarvestControlE>:
    {  return Status::Unimplemented;  }
    8dd0:	55                   	push   %rbp
    8dd1:	48 89 e5             	mov    %rsp,%rbp
    8dd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8dd8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8ddc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    8de0:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    8de3:	b8 05 00 00 00       	mov    $0x5,%eax
    8de8:	5d                   	pop    %rbp
    8de9:	c3                   	ret
    8dea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000008df0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E8alias_toERKNS0_13IX86PageTableEmm>:
    {  return Status::Unimplemented;  }
    8df0:	55                   	push   %rbp
    8df1:	48 89 e5             	mov    %rsp,%rbp
    8df4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8df8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8dfc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    8e00:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    8e04:	b8 05 00 00 00       	mov    $0x5,%eax
    8e09:	5d                   	pop    %rbp
    8e0a:	c3                   	ret
    8e0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008e10 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_ED2Ev>:
        virtual ~X86PageTableImpl() override = default;
    8e10:	55                   	push   %rbp
    8e11:	48 89 e5             	mov    %rsp,%rbp
    8e14:	48 83 ec 10          	sub    $0x10,%rsp
    8e18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8e1c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    8e20:	e8 6b e1 ff ff       	call   6f90 <_ZN4arch6paging13IX86PageTableD2Ev>
    8e25:	48 83 c4 10          	add    $0x10,%rsp
    8e29:	5d                   	pop    %rbp
    8e2a:	c3                   	ret
    8e2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008e30 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_ED0Ev>:
    8e30:	55                   	push   %rbp
    8e31:	48 89 e5             	mov    %rsp,%rbp
    8e34:	48 83 ec 10          	sub    $0x10,%rsp
    8e38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8e3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    8e40:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    8e44:	e8 c7 ff ff ff       	call   8e10 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_ED2Ev>
    8e49:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8e4d:	be 38 00 00 00       	mov    $0x38,%esi
    8e52:	e8 39 03 01 00       	call   19190 <_ZdlPvm>
    8e57:	48 83 c4 10          	add    $0x10,%rsp
    8e5b:	5d                   	pop    %rbp
    8e5c:	c3                   	ret
    8e5d:	0f 1f 00             	nopl   (%rax)

0000000000008e60 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE>:
    {
    8e60:	55                   	push   %rbp
    8e61:	48 89 e5             	mov    %rsp,%rbp
    8e64:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    8e6b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    8e6f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    8e73:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    8e77:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    8e7b:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    8e7f:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    8e83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8e87:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
        auto const derived = static_cast<Derived *>(this);
    8e8e:	48 89 45 88          	mov    %rax,-0x78(%rbp)
        if (derived->check_virt_addr(va)) {
    8e92:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    8e96:	e8 f5 07 00 00       	call   9690 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE15check_virt_addrEm>
    8e9b:	a8 01                	test   $0x1,%al
    8e9d:	75 02                	jne    8ea1 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x41>
    8e9f:	eb 0c                	jmp    8ead <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x4d>
            return Status::InvalidArguments;
    8ea1:	c7 45 c0 04 00 00 00 	movl   $0x4,-0x40(%rbp)
    8ea8:	e9 bf 00 00 00       	jmp    8f6c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x10c>
        if (derived->is_flags_allowed(flags)) {
    8ead:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
    8eb1:	e8 ea 07 00 00       	call   96a0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE16is_flags_allowedENS0_8MmuFlagsE>
    8eb6:	a8 01                	test   $0x1,%al
    8eb8:	75 02                	jne    8ebc <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x5c>
    8eba:	eb 0c                	jmp    8ec8 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x68>
            return Status::InvalidArguments;
    8ebc:	c7 45 c0 04 00 00 00 	movl   $0x4,-0x40(%rbp)
    8ec3:	e9 a4 00 00 00       	jmp    8f6c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x10c>
        for (auto i = 0; i < len; ++i) {
    8ec8:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
    8ecf:	48 63 45 84          	movslq -0x7c(%rbp),%rax
    8ed3:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
    8ed7:	73 2d                	jae    8f06 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0xa6>
            if (derived->check_phys_addr(pa[i])) {
    8ed9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    8edd:	48 63 4d 84          	movslq -0x7c(%rbp),%rcx
    8ee1:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    8ee5:	e8 c6 07 00 00       	call   96b0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE15check_phys_addrEm>
    8eea:	a8 01                	test   $0x1,%al
    8eec:	75 02                	jne    8ef0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x90>
    8eee:	eb 09                	jmp    8ef9 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x99>
                return Status::InvalidArguments;
    8ef0:	c7 45 c0 04 00 00 00 	movl   $0x4,-0x40(%rbp)
    8ef7:	eb 73                	jmp    8f6c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x10c>
        }
    8ef9:	eb 00                	jmp    8efb <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x9b>
        for (auto i = 0; i < len; ++i) {
    8efb:	8b 45 84             	mov    -0x7c(%rbp),%eax
    8efe:	83 c0 01             	add    $0x1,%eax
    8f01:	89 45 84             	mov    %eax,-0x7c(%rbp)
    8f04:	eb c9                	jmp    8ecf <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E17prepare_map_pagesEmPmmNS0_8MmuFlagsEPNS0_14MappingContextISM_EE+0x6f>
    8f06:	4c 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%r8
        return make_mapping_context(context, va, pa, len, flags);
    8f0d:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    8f11:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    8f15:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    8f19:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    8f1d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8f21:	4c 89 45 f8          	mov    %r8,-0x8(%rbp)
    8f25:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    8f29:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    8f2d:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    8f31:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    8f35:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    8f39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        auto const derived = static_cast<Derived *>(this);
    8f3d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        ustl::mem::construct_at(context, va, pa, n, flags, 4096);
    8f41:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8f45:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%rbp)
    8f4c:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
    8f50:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    8f54:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
    8f58:	4c 8d 45 d0          	lea    -0x30(%rbp),%r8
    8f5c:	4c 8d 4d c4          	lea    -0x3c(%rbp),%r9
    8f60:	e8 5b 07 00 00       	call   96c0 <_ZNSt3__112construct_atB8nn210000IN4arch6paging14MappingContextINS2_15X86PageTableEptINS1_6MutexTIN4ours5MutexEE4PackINS2_12PageFlusherTINS6_3mem7details14TlbInvalidatorEE4PackINS2_11PageSourceTINSC_13PageAllocatorEE4PackINS2_23PageTableDefaultOptionsEEEEEEEEEEEJRmRPmSQ_RNS2_8MmuFlagsEiEPSP_EEPT_SX_DpOT0_>
        return make_mapping_context(context, va, pa, len, flags);
    8f65:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
    }
    8f6c:	8b 45 c0             	mov    -0x40(%rbp),%eax
    8f6f:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
    8f76:	5d                   	pop    %rbp
    8f77:	c3                   	ret
    8f78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    8f7f:	00 

0000000000008f80 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE>:
    {
    8f80:	55                   	push   %rbp
    8f81:	48 89 e5             	mov    %rsp,%rbp
    8f84:	48 81 ec 40 02 00 00 	sub    $0x240,%rsp
    8f8b:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    8f92:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%rbp)
    8f98:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    8f9f:	48 89 8d 40 fe ff ff 	mov    %rcx,-0x1c0(%rbp)
    8fa6:	44 89 85 3c fe ff ff 	mov    %r8d,-0x1c4(%rbp)
    8fad:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
    8fb4:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
        if (level == PagingTraits::kFinalLevel) {
    8fbb:	83 bd 54 fe ff ff 00 	cmpl   $0x0,-0x1ac(%rbp)
    8fc2:	75 20                	jne    8fe4 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x64>
    8fc4:	48 8b bd f0 fd ff ff 	mov    -0x210(%rbp),%rdi
            this->create_mapping_at_l0(table, context, control);
    8fcb:	48 8b b5 48 fe ff ff 	mov    -0x1b8(%rbp),%rsi
    8fd2:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
    8fd9:	8b 8d 3c fe ff ff    	mov    -0x1c4(%rbp),%ecx
    8fdf:	e8 ec 07 00 00       	call   97d0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE>
    8fe4:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
        auto const derived = static_cast<Derived *>(this);
    8feb:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
        auto const level_page_size = Self::page_size(level);
    8ff2:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
    8ff8:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
            return PagingTraits::page_size(level);
    8ffe:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    9004:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
            return Paging::kPageSizeMap[usize(level)];
    900a:	48 63 8d 38 ff ff ff 	movslq -0xc8(%rbp),%rcx
    9011:	48 8d 05 e8 2f 02 00 	lea    0x22fe8(%rip),%rax        # 2c000 <_ZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE12kPageSizeMapE>
    9018:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
    901c:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
        auto const allow_large_page_mapping = bool(control & MapControl::TryLargePage);
    9023:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
    9029:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%rbp)
    902f:	c7 85 70 fe ff ff 04 	movl   $0x4,-0x190(%rbp)
    9036:	00 00 00 
        static_cast<Underlying>(lhs) &
    9039:	8b 85 74 fe ff ff    	mov    -0x18c(%rbp),%eax
        static_cast<Underlying>(rhs)
    903f:	8b 8d 70 fe ff ff    	mov    -0x190(%rbp),%ecx
        static_cast<Underlying>(lhs) &
    9045:	21 c8                	and    %ecx,%eax
    9047:	85 c0                	test   %eax,%eax
    9049:	0f 95 85 27 fe ff ff 	setne  -0x1d9(%rbp)
        auto const large_page_supported = derived->level_can_be_terminal(LevelType(level));
    9050:	8b bd 54 fe ff ff    	mov    -0x1ac(%rbp),%edi
    9056:	e8 85 0c 00 00       	call   9ce0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21level_can_be_terminalENS0_14X86PagingLevelE>
    905b:	88 85 26 fe ff ff    	mov    %al,-0x1da(%rbp)
        auto const max_entries = Self::max_entries(level);
    9061:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
    9067:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
            return PagingTraits::max_entries(level);
    906d:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    9073:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
            return Paging::max_entries(level);
    9079:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    907f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
    9085:	48 c7 85 18 fe ff ff 	movq   $0x200,-0x1e8(%rbp)
    908c:	00 02 00 00 
        auto index = virt_to_index(level, context->virt_addr());
    9090:	8b 8d 54 fe ff ff    	mov    -0x1ac(%rbp),%ecx
    9096:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    909d:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
    90a4:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
            return virt_cursor_.virt_addr();  
    90ab:	48 83 c0 28          	add    $0x28,%rax
    90af:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    90b6:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
            return addr_ + consumed_;
    90bd:	48 8b 50 08          	mov    0x8(%rax),%rdx
    90c1:	48 8b 40 10          	mov    0x10(%rax),%rax
    90c5:	48 01 d0             	add    %rdx,%rax
    90c8:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%rbp)
    90ce:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
            return PagingTraits::virt_to_index(level, virt);
    90d5:	8b 8d 54 ff ff ff    	mov    -0xac(%rbp),%ecx
    90db:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    90e2:	89 8d 64 ff ff ff    	mov    %ecx,-0x9c(%rbp)
    90e8:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
            return Paging::virt_to_index(level, addr);
    90ef:	8b 8d 64 ff ff ff    	mov    -0x9c(%rbp),%ecx
    90f5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    90fc:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%rbp)
    9102:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
            return (virt >> kShift[usize(level)]) & 0x1FF;
    9109:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    9110:	48 63 95 74 ff ff ff 	movslq -0x8c(%rbp),%rdx
    9117:	48 8d 0d 12 2f 02 00 	lea    0x22f12(%rip),%rcx        # 2c030 <_ZZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE13virt_to_indexES2_mE6kShift>
    911e:	48 8d 0c d1          	lea    (%rcx,%rdx,8),%rcx
    9122:	48 8b 09             	mov    (%rcx),%rcx
    9125:	48 d3 e8             	shr    %cl,%rax
    9128:	48 25 ff 01 00 00    	and    $0x1ff,%rax
    912e:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
        for (; index < max_entries && context->size() != 0; ++index) {
    9135:	48 8b 8d 10 fe ff ff 	mov    -0x1f0(%rbp),%rcx
    913c:	31 c0                	xor    %eax,%eax
    913e:	48 3b 8d 18 fe ff ff 	cmp    -0x1e8(%rbp),%rcx
    9145:	88 85 ef fd ff ff    	mov    %al,-0x211(%rbp)
    914b:	73 34                	jae    9181 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x201>
    914d:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    9154:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
    915b:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
            return virt_cursor_.size();  
    9162:	48 83 c0 28          	add    $0x28,%rax
    9166:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    916d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    9174:	48 83 38 00          	cmpq   $0x0,(%rax)
    9178:	0f 95 c0             	setne  %al
    917b:	88 85 ef fd ff ff    	mov    %al,-0x211(%rbp)
    9181:	8a 85 ef fd ff ff    	mov    -0x211(%rbp),%al
    9187:	a8 01                	test   $0x1,%al
    9189:	75 05                	jne    9190 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x210>
    918b:	e9 e6 04 00 00       	jmp    9676 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x6f6>
            ai_virt PteVal volatile *entry = table + index;
    9190:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    9197:	48 8b 8d 10 fe ff ff 	mov    -0x1f0(%rbp),%rcx
    919e:	48 c1 e1 03          	shl    $0x3,%rcx
    91a2:	48 01 c8             	add    %rcx,%rax
    91a5:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
            if (!Derived::is_present(*table)) { // The entry do not exists.
    91ac:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    91b3:	48 8b 38             	mov    (%rax),%rdi
    91b6:	e8 35 0b 00 00       	call   9cf0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>
    91bb:	a8 01                	test   $0x1,%al
    91bd:	0f 85 36 03 00 00    	jne    94f9 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x579>
                if (allow_large_page_mapping && large_page_supported) {
    91c3:	f6 85 27 fe ff ff 01 	testb  $0x1,-0x1d9(%rbp)
    91ca:	0f 84 da 02 00 00    	je     94aa <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x52a>
    91d0:	f6 85 26 fe ff ff 01 	testb  $0x1,-0x1da(%rbp)
    91d7:	0f 84 cd 02 00 00    	je     94aa <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x52a>
                    auto const pa_is_aligned = is_aligned(context->phys_addr(), level_page_size);
    91dd:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    91e4:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
    91eb:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
            return phys_cursor_.phys_addr();  
    91f2:	48 83 c0 08          	add    $0x8,%rax
    91f6:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    91fd:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
            return (*addrs_) + consumed_;
    9204:	48 8b 48 18          	mov    0x18(%rax),%rcx
    9208:	48 8b 09             	mov    (%rcx),%rcx
    920b:	48 03 48 08          	add    0x8(%rax),%rcx
    920f:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    9216:	48 89 8d b0 fe ff ff 	mov    %rcx,-0x150(%rbp)
    921d:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
    9224:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    922b:	48 8b 8d a8 fe ff ff 	mov    -0x158(%rbp),%rcx
    9232:	48 83 e9 01          	sub    $0x1,%rcx
    9236:	48 21 c8             	and    %rcx,%rax
    9239:	48 83 f8 00          	cmp    $0x0,%rax
    923d:	0f 94 c0             	sete   %al
    9240:	24 01                	and    $0x1,%al
    9242:	88 85 07 fe ff ff    	mov    %al,-0x1f9(%rbp)
                    auto const va_is_aligned = is_aligned(context->virt_addr(), level_page_size);
    9248:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    924f:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    9256:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
            return virt_cursor_.virt_addr();  
    925d:	48 83 c0 28          	add    $0x28,%rax
    9261:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    9268:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
            return addr_ + consumed_;
    926f:	48 8b 48 10          	mov    0x10(%rax),%rcx
    9273:	48 03 48 08          	add    0x8(%rax),%rcx
    9277:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    927e:	48 89 8d a0 fe ff ff 	mov    %rcx,-0x160(%rbp)
    9285:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    928c:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    9293:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
    929a:	48 83 e9 01          	sub    $0x1,%rcx
    929e:	48 21 c8             	and    %rcx,%rax
    92a1:	48 83 f8 00          	cmp    $0x0,%rax
    92a5:	0f 94 c0             	sete   %al
    92a8:	24 01                	and    $0x1,%al
    92aa:	88 85 06 fe ff ff    	mov    %al,-0x1fa(%rbp)
                    if (pa_is_aligned && va_is_aligned && context->remaining_size() >= level_page_size) {
    92b0:	f6 85 07 fe ff ff 01 	testb  $0x1,-0x1f9(%rbp)
    92b7:	0f 84 eb 01 00 00    	je     94a8 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x528>
    92bd:	f6 85 06 fe ff ff 01 	testb  $0x1,-0x1fa(%rbp)
    92c4:	0f 84 de 01 00 00    	je     94a8 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x528>
    92ca:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
    92d1:	e8 da ee ff ff       	call   81b0 <_ZNK4arch6paging21GenericMappingContext14remaining_sizeEv>
    92d6:	48 3b 85 28 fe ff ff 	cmp    -0x1d8(%rbp),%rax
    92dd:	0f 82 c5 01 00 00    	jb     94a8 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x528>
    92e3:	48 8b bd f0 fd ff ff 	mov    -0x210(%rbp),%rdi
                        update_entry(level, entry, context->phys_addr(), context->virt_addr(), context->flags());
    92ea:	8b b5 54 fe ff ff    	mov    -0x1ac(%rbp),%esi
    92f0:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
    92f7:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    92fe:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    9305:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
            return phys_cursor_.phys_addr();  
    930c:	48 83 c0 08          	add    $0x8,%rax
    9310:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    9317:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
            return (*addrs_) + consumed_;
    931e:	48 8b 48 18          	mov    0x18(%rax),%rcx
    9322:	48 8b 09             	mov    (%rcx),%rcx
    9325:	48 03 48 08          	add    0x8(%rax),%rcx
    9329:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    9330:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    9337:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
            return virt_cursor_.virt_addr();  
    933e:	48 83 c0 28          	add    $0x28,%rax
    9342:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    9349:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
            return addr_ + consumed_;
    9350:	4c 8b 40 10          	mov    0x10(%rax),%r8
    9354:	4c 03 40 08          	add    0x8(%rax),%r8
    9358:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    935f:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    9366:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
            return flags_;  
    936d:	4c 8b 08             	mov    (%rax),%r9
    9370:	e8 8b 09 00 00       	call   9d00 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE>
                        context->consume(level_page_size);
    9375:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    937c:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    9383:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    9387:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    938e:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    9392:	48 89 8d d0 fd ff ff 	mov    %rcx,-0x230(%rbp)
            Base::consume(page_size);
    9399:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    93a0:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
    93a4:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    93a8:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    93ac:	48 89 8d d8 fd ff ff 	mov    %rcx,-0x228(%rbp)
            phys_cursor_.consume(page_size);
    93b3:	48 83 c1 08          	add    $0x8,%rcx
    93b7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    93bb:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    93bf:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    93c3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    93c7:	48 89 8d e0 fd ff ff 	mov    %rcx,-0x220(%rbp)
            DEBUG_ASSERT(consumed_ <= page_size_, "Consume");
    93ce:	48 8b 41 08          	mov    0x8(%rcx),%rax
    93d2:	48 3b 01             	cmp    (%rcx),%rax
    93d5:	76 1d                	jbe    93f4 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x474>
    93d7:	48 8d 35 09 5b 02 00 	lea    0x25b09(%rip),%rsi        # 2eee7 <.L.str.1>
    93de:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    93e2:	e8 99 9e ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    93e7:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    93eb:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    93ef:	e8 3c 9e ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    93f4:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
            DEBUG_ASSERT(count_ > 0, "Consume");
    93fb:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
    9400:	77 1d                	ja     941f <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x49f>
    9402:	48 8d 35 de 5a 02 00 	lea    0x25ade(%rip),%rsi        # 2eee7 <.L.str.1>
    9409:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    940d:	e8 6e 9e ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    9412:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
    9416:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    941a:	e8 11 9e ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    941f:	48 8b 8d e0 fd ff ff 	mov    -0x220(%rbp),%rcx
            consumed_ += page_size;
    9426:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    942a:	48 03 41 08          	add    0x8(%rcx),%rax
    942e:	48 89 41 08          	mov    %rax,0x8(%rcx)
            if (consumed_ == page_size_) {
    9432:	48 8b 41 08          	mov    0x8(%rcx),%rax
    9436:	48 3b 01             	cmp    (%rcx),%rax
    9439:	75 27                	jne    9462 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x4e2>
    943b:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
                consumed_ = 0;
    9442:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9449:	00 
                count_ -= 1;
    944a:	48 8b 48 10          	mov    0x10(%rax),%rcx
    944e:	48 83 e9 01          	sub    $0x1,%rcx
    9452:	48 89 48 10          	mov    %rcx,0x10(%rax)
                addrs_ += 1;
    9456:	48 8b 48 18          	mov    0x18(%rax),%rcx
    945a:	48 83 c1 08          	add    $0x8,%rcx
    945e:	48 89 48 18          	mov    %rcx,0x18(%rax)
    9462:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
    9469:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
            virt_cursor_.consume(page_size);
    9470:	48 83 c2 28          	add    $0x28,%rdx
    9474:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
    9478:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
    947c:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    9480:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
            consumed_ += page_size;
    9484:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    9488:	48 03 51 08          	add    0x8(%rcx),%rdx
    948c:	48 89 51 08          	mov    %rdx,0x8(%rcx)
            nr_mapped_ += page_size / 4096;
    9490:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    9497:	48 c1 e9 0c          	shr    $0xc,%rcx
    949b:	48 03 48 48          	add    0x48(%rax),%rcx
    949f:	48 89 48 48          	mov    %rcx,0x48(%rax)
                        continue;
    94a3:	e9 b7 01 00 00       	jmp    965f <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x6df>
                }
    94a8:	eb 00                	jmp    94aa <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x52a>
    94aa:	48 8b bd f0 fd ff ff 	mov    -0x210(%rbp),%rdi
                PhysAddr new_table = this->alloc_page_table(); 
    94b1:	48 c7 85 f8 fd ff ff 	movq   $0x0,-0x208(%rbp)
    94b8:	00 00 00 00 
                update_entry(level, entry, new_table, 0, context->flags());
    94bc:	8b b5 54 fe ff ff    	mov    -0x1ac(%rbp),%esi
    94c2:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
    94c9:	48 8b 8d f8 fd ff ff 	mov    -0x208(%rbp),%rcx
    94d0:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    94d7:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
    94de:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
            return flags_;  
    94e5:	4c 8b 08             	mov    (%rax),%r9
    94e8:	31 c0                	xor    %eax,%eax
    94ea:	31 c0                	xor    %eax,%eax
    94ec:	41 89 c0             	mov    %eax,%r8d
    94ef:	e8 0c 08 00 00       	call   9d00 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE>
            } else {  // The entry exists.
    94f4:	e9 a4 00 00 00       	jmp    959d <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x61d>
                if (bool(control & MapControl::ErrorIfExisting)) {
    94f9:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
    94ff:	89 85 6c fe ff ff    	mov    %eax,-0x194(%rbp)
    9505:	c7 85 68 fe ff ff 02 	movl   $0x2,-0x198(%rbp)
    950c:	00 00 00 
    950f:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
    9515:	23 85 68 fe ff ff    	and    -0x198(%rbp),%eax
    951b:	83 f8 00             	cmp    $0x0,%eax
    951e:	74 0f                	je     952f <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x5af>
                    return Status::Error;
    9520:	c7 85 64 fe ff ff 08 	movl   $0x8,-0x19c(%rbp)
    9527:	00 00 00 
    952a:	e9 51 01 00 00       	jmp    9680 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x700>
                if (Derived::is_large_page_mapping(*table)) {
    952f:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    9536:	48 8b 38             	mov    (%rax),%rdi
    9539:	e8 42 08 00 00       	call   9d80 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21is_large_page_mappingEm>
    953e:	a8 01                	test   $0x1,%al
    9540:	75 02                	jne    9544 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x5c4>
    9542:	eb 57                	jmp    959b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x61b>
                    context->skip(level_page_size);
    9544:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    954b:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    9552:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    9559:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    9560:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
            virt_cursor_.consume(page_size);
    9567:	48 83 c1 28          	add    $0x28,%rcx
    956b:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    9572:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    9579:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    9580:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
            consumed_ += page_size;
    9587:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
    958e:	48 03 48 08          	add    0x8(%rax),%rcx
    9592:	48 89 48 08          	mov    %rcx,0x8(%rax)
                    continue;
    9596:	e9 c4 00 00 00       	jmp    965f <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x6df>
    959b:	eb 00                	jmp    959d <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x61d>
    959d:	48 8b 8d f0 fd ff ff 	mov    -0x210(%rbp),%rcx
            create_mapping(PagingTraits::next_level(level), 
    95a4:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
    95aa:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
            return Paging::kAllLevels[usize(level) - 1];
    95b0:	48 63 95 ec fe ff ff 	movslq -0x114(%rbp),%rdx
    95b7:	48 89 d0             	mov    %rdx,%rax
    95ba:	48 ff c8             	dec    %rax
    95bd:	48 8d 05 9c 2a 02 00 	lea    0x22a9c(%rip),%rax        # 2c060 <_ZN4arch6paging13X86PagingBase10kAllLevelsE>
    95c4:	48 8d 44 90 fc       	lea    -0x4(%rax,%rdx,4),%rax
    95c9:	8b 00                	mov    (%rax),%eax
    95cb:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
                           get_next_table_unchecked(*entry), 
    95d1:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
    95d8:	48 8b 00             	mov    (%rax),%rax
    95db:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    95df:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    95e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    95e7:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
            if (Derived::is_present(pteval) && Derived::is_large_page_mapping(pteval)) {
    95ee:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    95f2:	e8 f9 06 00 00       	call   9cf0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>
    95f7:	a8 01                	test   $0x1,%al
    95f9:	75 02                	jne    95fd <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x67d>
    95fb:	eb 19                	jmp    9616 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x696>
    95fd:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    9601:	e8 7a 07 00 00       	call   9d80 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21is_large_page_mappingEm>
    9606:	a8 01                	test   $0x1,%al
    9608:	75 02                	jne    960c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x68c>
    960a:	eb 0a                	jmp    9616 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x696>
                return 0;
    960c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    9613:	00 
    9614:	eb 25                	jmp    963b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x6bb>
    9616:	48 8b 8d c8 fd ff ff 	mov    -0x238(%rbp),%rcx
            return reinterpret_cast<PteVal volatile *>(payload_.phys_to_virt(pteval & X86_PFN_MASK));
    961d:	48 83 c1 34          	add    $0x34,%rcx
    9621:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9625:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    962b:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    962f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    9633:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9637:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    963b:	8b b5 c4 fd ff ff    	mov    -0x23c(%rbp),%esi
    9641:	48 8b bd f0 fd ff ff 	mov    -0x210(%rbp),%rdi
        }
    9648:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
                           context, control);
    964c:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    9653:	44 8b 85 3c fe ff ff 	mov    -0x1c4(%rbp),%r8d
            create_mapping(PagingTraits::next_level(level), 
    965a:	e8 21 f9 ff ff       	call   8f80 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE>
        for (; index < max_entries && context->size() != 0; ++index) {
    965f:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
    9666:	48 83 c0 01          	add    $0x1,%rax
    966a:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
    9671:	e9 bf fa ff ff       	jmp    9135 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E14create_mappingENS0_14X86PagingLevelEPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x1b5>
        return Status::Ok;
    9676:	c7 85 64 fe ff ff 00 	movl   $0x0,-0x19c(%rbp)
    967d:	00 00 00 
    }
    9680:	8b 85 64 fe ff ff    	mov    -0x19c(%rbp),%eax
    9686:	48 81 c4 40 02 00 00 	add    $0x240,%rsp
    968d:	5d                   	pop    %rbp
    968e:	c3                   	ret
    968f:	90                   	nop

0000000000009690 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE15check_virt_addrEm>:
        { return Status::Unimplemented;  }

        static auto check_phys_addr(PhysAddr) -> bool
        { return false;  }
        static auto check_virt_addr(VirtAddr) -> bool
        { return false;  }
    9690:	55                   	push   %rbp
    9691:	48 89 e5             	mov    %rsp,%rbp
    9694:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9698:	31 c0                	xor    %eax,%eax
    969a:	24 01                	and    $0x1,%al
    969c:	5d                   	pop    %rbp
    969d:	c3                   	ret
    969e:	66 90                	xchg   %ax,%ax

00000000000096a0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE16is_flags_allowedENS0_8MmuFlagsE>:
        static auto is_flags_allowed(MmuFlags) -> bool
        { return false;  }
    96a0:	55                   	push   %rbp
    96a1:	48 89 e5             	mov    %rsp,%rbp
    96a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96a8:	31 c0                	xor    %eax,%eax
    96aa:	24 01                	and    $0x1,%al
    96ac:	5d                   	pop    %rbp
    96ad:	c3                   	ret
    96ae:	66 90                	xchg   %ax,%ax

00000000000096b0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE15check_phys_addrEm>:
        { return false;  }
    96b0:	55                   	push   %rbp
    96b1:	48 89 e5             	mov    %rsp,%rbp
    96b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96b8:	31 c0                	xor    %eax,%eax
    96ba:	24 01                	and    $0x1,%al
    96bc:	5d                   	pop    %rbp
    96bd:	c3                   	ret
    96be:	66 90                	xchg   %ax,%ax

00000000000096c0 <_ZNSt3__112construct_atB8nn210000IN4arch6paging14MappingContextINS2_15X86PageTableEptINS1_6MutexTIN4ours5MutexEE4PackINS2_12PageFlusherTINS6_3mem7details14TlbInvalidatorEE4PackINS2_11PageSourceTINSC_13PageAllocatorEE4PackINS2_23PageTableDefaultOptionsEEEEEEEEEEEJRmRPmSQ_RNS2_8MmuFlagsEiEPSP_EEPT_SX_DpOT0_>:
_LIBCPP_HIDE_FROM_ABI constexpr _Tp* construct_at(_Tp* __location, _Args&&... __args) {
    96c0:	55                   	push   %rbp
    96c1:	48 89 e5             	mov    %rsp,%rbp
    96c4:	48 83 ec 60          	sub    $0x60,%rsp
    96c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    96d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    96d4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    96d8:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    96dc:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
  return ::new (static_cast<void*>(__location)) _Tp(std::forward<_Args>(__args)...);
    96e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96e4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    96e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    96ec:	e8 ff e2 ff ff       	call   79f0 <_ZNSt3__17forwardB8nn210000IRmEEOT_Ru20__remove_reference_tIS2_E>
    96f1:	48 8b 00             	mov    (%rax),%rax
    96f4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    96f8:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    96fc:	e8 ff e2 ff ff       	call   7a00 <_ZNSt3__17forwardB8nn210000IRPmEEOT_Ru20__remove_reference_tIS3_E>
    9701:	48 8b 00             	mov    (%rax),%rax
    9704:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    9708:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    970c:	e8 df e2 ff ff       	call   79f0 <_ZNSt3__17forwardB8nn210000IRmEEOT_Ru20__remove_reference_tIS2_E>
    9711:	48 8b 00             	mov    (%rax),%rax
    9714:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    9718:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    971c:	e8 ef e2 ff ff       	call   7a10 <_ZNSt3__17forwardB8nn210000IRN4arch6paging8MmuFlagsEEEOT_Ru20__remove_reference_tIS5_E>
    9721:	48 8b 00             	mov    (%rax),%rax
    9724:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    9728:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    972c:	e8 ef e2 ff ff       	call   7a20 <_ZNSt3__17forwardB8nn210000IiEEOT_Ru20__remove_reference_tIS1_E>
    9731:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    9735:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    9739:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    973d:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
    9741:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    9745:	4c 63 08             	movslq (%rax),%r9
    9748:	e8 13 00 00 00       	call   9760 <_ZN4arch6paging14MappingContextINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEEEC2EmPmmNS0_8MmuFlagsEm>
    974d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    9751:	48 83 c4 60          	add    $0x60,%rsp
    9755:	5d                   	pop    %rbp
    9756:	c3                   	ret
    9757:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    975e:	00 00 

0000000000009760 <_ZN4arch6paging14MappingContextINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEEEC2EmPmmNS0_8MmuFlagsEm>:
              synchroniser_() {}
    9760:	55                   	push   %rbp
    9761:	48 89 e5             	mov    %rsp,%rbp
    9764:	48 83 ec 40          	sub    $0x40,%rsp
    9768:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    976c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9770:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    9774:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    9778:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    977c:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    9780:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    9784:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
            : Base(va, pa, n, flags, page_size),
    9788:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    978c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9790:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    9794:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
    9798:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
    979c:	e8 ff e2 ff ff       	call   7aa0 <_ZN4arch6paging21GenericMappingContextC2EmPmmNS0_8MmuFlagsEm>
    97a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
              altmap_(0),
    97a5:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
    97ac:	00 
              nr_mapped_(),
    97ad:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
    97b4:	00 
              synchroniser_() {}
    97b5:	48 83 c0 50          	add    $0x50,%rax
    97b9:	31 c9                	xor    %ecx,%ecx
    97bb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    97c2:	48 83 c4 40          	add    $0x40,%rsp
    97c6:	5d                   	pop    %rbp
    97c7:	c3                   	ret
    97c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    97cf:	00 

00000000000097d0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE>:
    {
    97d0:	55                   	push   %rbp
    97d1:	48 89 e5             	mov    %rsp,%rbp
    97d4:	48 81 ec e0 01 00 00 	sub    $0x1e0,%rsp
    97db:	48 89 bd b0 fe ff ff 	mov    %rdi,-0x150(%rbp)
    97e2:	48 89 b5 a8 fe ff ff 	mov    %rsi,-0x158(%rbp)
    97e9:	48 89 95 a0 fe ff ff 	mov    %rdx,-0x160(%rbp)
    97f0:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%rbp)
    97f6:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    97fd:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
        auto const level = PagingTraits::kFinalLevel;
    9804:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    980b:	00 00 00 
        auto const readonly = (context->flags() & MmuFlags::PermMask) == MmuFlags::Writable;
    980e:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    9815:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    981c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
            return flags_;  
    9823:	48 8b 00             	mov    (%rax),%rax
    9826:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    982d:	48 c7 85 08 ff ff ff 	movq   $0xe,-0xf8(%rbp)
    9834:	0e 00 00 00 
    9838:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
        static_cast<Underlying>(rhs)
    983f:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
        static_cast<Underlying>(lhs) &
    9846:	48 21 c8             	and    %rcx,%rax
    9849:	48 83 e8 02          	sub    $0x2,%rax
    984d:	0f 94 85 97 fe ff ff 	sete   -0x169(%rbp)
        auto const page_size = Self::page_size(level);
    9854:	48 c7 85 88 fe ff ff 	movq   $0x1000,-0x178(%rbp)
    985b:	00 10 00 00 
        auto const max_entries = Self::max_entries(level);
    985f:	48 c7 85 80 fe ff ff 	movq   $0x200,-0x180(%rbp)
    9866:	00 02 00 00 
        auto index = virt_to_index(PagingTraits::kFinalLevel, context->virt_addr());
    986a:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    9871:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    9878:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
            return virt_cursor_.virt_addr();  
    987f:	48 83 c0 28          	add    $0x28,%rax
    9883:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    988a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
            return addr_ + consumed_;
    9891:	48 8b 48 08          	mov    0x8(%rax),%rcx
    9895:	48 8b 40 10          	mov    0x10(%rax),%rax
    9899:	48 01 c8             	add    %rcx,%rax
    989c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    98a3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            return PagingTraits::virt_to_index(level, virt);
    98a7:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
    98aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    98ae:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    98b1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            return Paging::virt_to_index(level, addr);
    98b5:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    98b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98bc:	89 4d f4             	mov    %ecx,-0xc(%rbp)
    98bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    98c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    98c7:	48 63 55 f4          	movslq -0xc(%rbp),%rdx
    98cb:	48 8d 0d 5e 27 02 00 	lea    0x2275e(%rip),%rcx        # 2c030 <_ZZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE13virt_to_indexES2_mE6kShift>
    98d2:	48 8d 0c d1          	lea    (%rcx,%rdx,8),%rcx
    98d6:	48 8b 09             	mov    (%rcx),%rcx
    98d9:	48 d3 e8             	shr    %cl,%rax
    98dc:	48 25 ff 01 00 00    	and    $0x1ff,%rax
    98e2:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
        for (; index < max_entries && context->size() != 0; ++index) {
    98e9:	31 c0                	xor    %eax,%eax
    98eb:	48 81 bd 78 fe ff ff 	cmpq   $0x200,-0x188(%rbp)
    98f2:	00 02 00 00 
    98f6:	88 85 3f fe ff ff    	mov    %al,-0x1c1(%rbp)
    98fc:	73 2e                	jae    992c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x15c>
    98fe:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    9905:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    990c:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
            return virt_cursor_.size();  
    9913:	48 83 c0 28          	add    $0x28,%rax
    9917:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    991b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    991f:	48 83 38 00          	cmpq   $0x0,(%rax)
    9923:	0f 95 c0             	setne  %al
    9926:	88 85 3f fe ff ff    	mov    %al,-0x1c1(%rbp)
    992c:	8a 85 3f fe ff ff    	mov    -0x1c1(%rbp),%al
    9932:	a8 01                	test   $0x1,%al
    9934:	75 05                	jne    993b <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x16b>
    9936:	e9 7f 03 00 00       	jmp    9cba <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x4ea>
            ai_phys PteVal volatile *entry = table + index;
    993b:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    9942:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
    9949:	48 c1 e1 03          	shl    $0x3,%rcx
    994d:	48 01 c8             	add    %rcx,%rax
    9950:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
            auto const is_existing = Derived::is_present(*table);
    9957:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    995e:	48 8b 38             	mov    (%rax),%rdi
    9961:	e8 8a 03 00 00       	call   9cf0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>
    9966:	24 01                	and    $0x1,%al
    9968:	88 85 6f fe ff ff    	mov    %al,-0x191(%rbp)
            if (is_existing) {
    996e:	f6 85 6f fe ff ff 01 	testb  $0x1,-0x191(%rbp)
    9975:	0f 84 0c 01 00 00    	je     9a87 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2b7>
                if (bool(control & MapControl::ErrorIfExisting)) {
    997b:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
    9981:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%rbp)
    9987:	c7 85 d0 fe ff ff 02 	movl   $0x2,-0x130(%rbp)
    998e:	00 00 00 
    9991:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
    9997:	23 85 d0 fe ff ff    	and    -0x130(%rbp),%eax
    999d:	83 f8 00             	cmp    $0x0,%eax
    99a0:	74 0f                	je     99b1 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x1e1>
                    return Status::Error;
    99a2:	c7 85 bc fe ff ff 08 	movl   $0x8,-0x144(%rbp)
    99a9:	00 00 00 
    99ac:	e9 13 03 00 00       	jmp    9cc4 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x4f4>
                } else if (bool(control & MapControl::SkipIfExisting)) {
    99b1:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
    99b7:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    99bd:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    99c4:	00 00 00 
    99c7:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    99cd:	23 85 c8 fe ff ff    	and    -0x138(%rbp),%eax
    99d3:	83 f8 00             	cmp    $0x0,%eax
    99d6:	74 48                	je     9a20 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x250>
                    context->skip(page_size);
    99d8:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    99df:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    99e6:	48 c7 85 f8 fe ff ff 	movq   $0x1000,-0x108(%rbp)
    99ed:	00 10 00 00 
    99f1:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
            virt_cursor_.consume(page_size);
    99f8:	48 83 c1 28          	add    $0x28,%rcx
    99fc:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    9a03:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    9a07:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    9a0b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            consumed_ += page_size;
    9a0f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    9a13:	48 03 48 08          	add    0x8(%rax),%rcx
    9a17:	48 89 48 08          	mov    %rcx,0x8(%rax)
                    continue;
    9a1b:	e9 83 02 00 00       	jmp    9ca3 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x4d3>
                } else if (bool(control & MapControl::OverwriteIfExisting)) {
    9a20:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
    9a26:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    9a2c:	c7 85 c0 fe ff ff 01 	movl   $0x1,-0x140(%rbp)
    9a33:	00 00 00 
    9a36:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
    9a3c:	23 85 c0 fe ff ff    	and    -0x140(%rbp),%eax
    9a42:	83 f8 00             	cmp    $0x0,%eax
    9a45:	74 3a                	je     9a81 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2b1>
                    if (!readonly) {
    9a47:	f6 85 97 fe ff ff 01 	testb  $0x1,-0x169(%rbp)
    9a4e:	75 2f                	jne    9a7f <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2af>
    9a50:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
                        unmap_entry(entry, level);
    9a57:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
    9a5e:	31 c0                	xor    %eax,%eax
    9a60:	31 d2                	xor    %edx,%edx
    9a62:	e8 29 03 00 00       	call   9d90 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E11unmap_entryEPVmNS0_14X86PagingLevelE>
                        context->synchroniser().sync();
    9a67:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    9a6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9a72:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            return synchroniser_;
    9a76:	48 83 c7 50          	add    $0x50,%rdi
    9a7a:	e8 31 03 00 00       	call   9db0 <_ZN4arch6paging24X86PageTableSynchroniserINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEEE4syncEv>
                }
    9a7f:	eb 00                	jmp    9a81 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2b1>
    9a81:	eb 00                	jmp    9a83 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2b3>
    9a83:	eb 00                	jmp    9a85 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2b5>
            }
    9a85:	eb 00                	jmp    9a87 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x2b7>
            auto const [phys, virt] = context->take(page_size);
    9a87:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    9a8e:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    9a95:	48 c7 85 28 ff ff ff 	movq   $0x1000,-0xd8(%rbp)
    9a9c:	00 10 00 00 
    9aa0:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
            auto const phys = phys_cursor_.phys_addr();
    9aa7:	48 89 c8             	mov    %rcx,%rax
    9aaa:	48 83 c0 08          	add    $0x8,%rax
    9aae:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    9ab5:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
            return (*addrs_) + consumed_;
    9abc:	48 8b 42 18          	mov    0x18(%rdx),%rax
    9ac0:	48 8b 00             	mov    (%rax),%rax
    9ac3:	48 03 42 08          	add    0x8(%rdx),%rax
            auto const phys = phys_cursor_.phys_addr();
    9ac7:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
            auto const virt = virt_cursor_.virt_addr();
    9ace:	48 89 c8             	mov    %rcx,%rax
    9ad1:	48 83 c0 28          	add    $0x28,%rax
    9ad5:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    9adc:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
            return addr_ + consumed_;
    9ae3:	48 8b 42 10          	mov    0x10(%rdx),%rax
    9ae7:	48 03 42 08          	add    0x8(%rdx),%rax
            auto const virt = virt_cursor_.virt_addr();
    9aeb:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
            this->consume(page_size);
    9af2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    9af9:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
    9b00:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    9b07:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
    9b0e:	48 89 8d 28 fe ff ff 	mov    %rcx,-0x1d8(%rbp)
            phys_cursor_.consume(page_size);
    9b15:	48 83 c1 08          	add    $0x8,%rcx
    9b19:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    9b20:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    9b24:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    9b28:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    9b2c:	48 89 8d 30 fe ff ff 	mov    %rcx,-0x1d0(%rbp)
            DEBUG_ASSERT(consumed_ <= page_size_, "Consume");
    9b33:	48 8b 41 08          	mov    0x8(%rcx),%rax
    9b37:	48 3b 01             	cmp    (%rcx),%rax
    9b3a:	76 1d                	jbe    9b59 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x389>
    9b3c:	48 8d 35 a4 53 02 00 	lea    0x253a4(%rip),%rsi        # 2eee7 <.L.str.1>
    9b43:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    9b47:	e8 34 97 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    9b4c:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    9b50:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
    9b54:	e8 d7 96 ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    9b59:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
            DEBUG_ASSERT(count_ > 0, "Consume");
    9b60:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
    9b65:	77 26                	ja     9b8d <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x3bd>
    9b67:	48 8d 35 79 53 02 00 	lea    0x25379(%rip),%rsi        # 2eee7 <.L.str.1>
    9b6e:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
    9b75:	e8 06 97 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    9b7a:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
    9b81:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
    9b88:	e8 a3 96 ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    9b8d:	48 8b 8d 30 fe ff ff 	mov    -0x1d0(%rbp),%rcx
            consumed_ += page_size;
    9b94:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    9b98:	48 03 41 08          	add    0x8(%rcx),%rax
    9b9c:	48 89 41 08          	mov    %rax,0x8(%rcx)
            if (consumed_ == page_size_) {
    9ba0:	48 8b 41 08          	mov    0x8(%rcx),%rax
    9ba4:	48 3b 01             	cmp    (%rcx),%rax
    9ba7:	75 27                	jne    9bd0 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x400>
    9ba9:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
                consumed_ = 0;
    9bb0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9bb7:	00 
                count_ -= 1;
    9bb8:	48 8b 48 10          	mov    0x10(%rax),%rcx
    9bbc:	48 83 e9 01          	sub    $0x1,%rcx
    9bc0:	48 89 48 10          	mov    %rcx,0x10(%rax)
                addrs_ += 1;
    9bc4:	48 8b 48 18          	mov    0x18(%rax),%rcx
    9bc8:	48 83 c1 08          	add    $0x8,%rcx
    9bcc:	48 89 48 18          	mov    %rcx,0x18(%rax)
    9bd0:	48 8b 8d 28 fe ff ff 	mov    -0x1d8(%rbp),%rcx
            virt_cursor_.consume(page_size);
    9bd7:	48 83 c1 28          	add    $0x28,%rcx
    9bdb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    9be2:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    9be6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    9bea:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
            consumed_ += page_size;
    9bee:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    9bf2:	48 8b 48 08          	mov    0x8(%rax),%rcx
    9bf6:	48 01 d1             	add    %rdx,%rcx
    9bf9:	48 89 48 08          	mov    %rcx,0x8(%rax)
    9bfd:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
    9c04:	48 8d b5 18 ff ff ff 	lea    -0xe8(%rbp),%rsi
            return ustl::make_pair(phys, virt);
    9c0b:	e8 f0 e6 ff ff       	call   8300 <_ZNSt3__19make_pairB8nn210000IRKmS2_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS4_Iu7__decayIT0_EE4typeEEEOS5_OS9_>
    9c10:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    9c17:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
    9c1e:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
    9c25:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    9c2c:	48 89 8d 58 fe ff ff 	mov    %rcx,-0x1a8(%rbp)
    9c33:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
    9c3a:	48 8d bd 58 fe ff ff 	lea    -0x1a8(%rbp),%rdi
    9c41:	e8 5a e6 ff ff       	call   82a0 <_ZNSt3__13getB8nn210000ILm0EmmEEOKNS_13tuple_elementIXT_ENS_4pairIT0_T1_EEE4typeEOKS5_>
    9c46:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
    9c4d:	48 8d bd 58 fe ff ff 	lea    -0x1a8(%rbp),%rdi
    9c54:	e8 77 e6 ff ff       	call   82d0 <_ZNSt3__13getB8nn210000ILm1EmmEEOKNS_13tuple_elementIXT_ENS_4pairIT0_T1_EEE4typeEOKS5_>
    9c59:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
    9c60:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
            update_entry(level, entry, phys, virt, context->flags());
    9c67:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
            auto const [phys, virt] = context->take(page_size);
    9c6e:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
            update_entry(level, entry, phys, virt, context->flags());
    9c75:	48 8b 08             	mov    (%rax),%rcx
            auto const [phys, virt] = context->take(page_size);
    9c78:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
            update_entry(level, entry, phys, virt, context->flags());
    9c7f:	4c 8b 00             	mov    (%rax),%r8
    9c82:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    9c89:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    9c90:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
            return flags_;  
    9c97:	4c 8b 08             	mov    (%rax),%r9
    9c9a:	31 c0                	xor    %eax,%eax
    9c9c:	31 f6                	xor    %esi,%esi
    9c9e:	e8 5d 00 00 00       	call   9d00 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE>
        for (; index < max_entries && context->size() != 0; ++index) {
    9ca3:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    9caa:	48 83 c0 01          	add    $0x1,%rax
    9cae:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    9cb5:	e9 2f fc ff ff       	jmp    98e9 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E20create_mapping_at_l0EPVmPNS0_14MappingContextISM_EENS0_10MapControlE+0x119>
        return Status::Ok;
    9cba:	c7 85 bc fe ff ff 00 	movl   $0x0,-0x144(%rbp)
    9cc1:	00 00 00 
    }
    9cc4:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
    9cca:	48 81 c4 e0 01 00 00 	add    $0x1e0,%rsp
    9cd1:	5d                   	pop    %rbp
    9cd2:	c3                   	ret
    9cd3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9cda:	00 00 00 
    9cdd:	0f 1f 00             	nopl   (%rax)

0000000000009ce0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21level_can_be_terminalENS0_14X86PagingLevelE>:

        static auto is_present(PteVal pte) -> bool
        { return false;  }

        static auto level_can_be_terminal(LevelType level) -> bool
        { return false;  }
    9ce0:	55                   	push   %rbp
    9ce1:	48 89 e5             	mov    %rsp,%rbp
    9ce4:	89 7d fc             	mov    %edi,-0x4(%rbp)
    9ce7:	31 c0                	xor    %eax,%eax
    9ce9:	24 01                	and    $0x1,%al
    9ceb:	5d                   	pop    %rbp
    9cec:	c3                   	ret
    9ced:	0f 1f 00             	nopl   (%rax)

0000000000009cf0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>:
        { return false;  }
    9cf0:	55                   	push   %rbp
    9cf1:	48 89 e5             	mov    %rsp,%rbp
    9cf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9cf8:	31 c0                	xor    %eax,%eax
    9cfa:	24 01                	and    $0x1,%al
    9cfc:	5d                   	pop    %rbp
    9cfd:	c3                   	ret
    9cfe:	66 90                	xchg   %ax,%ax

0000000000009d00 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE>:
    {
    9d00:	55                   	push   %rbp
    9d01:	48 89 e5             	mov    %rsp,%rbp
    9d04:	48 83 ec 50          	sub    $0x50,%rsp
    9d08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9d0c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    9d0f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    9d13:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    9d17:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    9d1b:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    9d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        auto const derived = static_cast<Derived *>(this);
    9d23:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        PteVal const old_pte = *pteval;
    9d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d2b:	48 8b 00             	mov    (%rax),%rax
    9d2e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        PteVal const new_pte = derived->make_pteval(level, phys, flags);
    9d32:	8b 7d f4             	mov    -0xc(%rbp),%edi
    9d35:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    9d39:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    9d3d:	e8 7e 00 00 00       	call   9dc0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE>
    9d42:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        if (new_pte == old_pte) {
    9d46:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9d4a:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    9d4e:	75 02                	jne    9d52 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x52>
            return; 
    9d50:	eb 1c                	jmp    9d6e <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x6e>
        *pteval = new_pte;
    9d52:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    9d56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d5a:	48 89 08             	mov    %rcx,(%rax)
        if (Derived::is_present(old_pte)) {
    9d5d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    9d61:	e8 8a ff ff ff       	call   9cf0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE10is_presentEm>
    9d66:	a8 01                	test   $0x1,%al
    9d68:	75 02                	jne    9d6c <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x6c>
    9d6a:	eb 02                	jmp    9d6e <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x6e>
        }
    9d6c:	eb 00                	jmp    9d6e <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E12update_entryENS0_14X86PagingLevelEPVmmmNS0_8MmuFlagsE+0x6e>
    }
    9d6e:	48 83 c4 50          	add    $0x50,%rsp
    9d72:	5d                   	pop    %rbp
    9d73:	c3                   	ret
    9d74:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9d7b:	00 00 00 
    9d7e:	66 90                	xchg   %ax,%ax

0000000000009d80 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE21is_large_page_mappingEm>:
        { return false;  }
    9d80:	55                   	push   %rbp
    9d81:	48 89 e5             	mov    %rsp,%rbp
    9d84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9d88:	31 c0                	xor    %eax,%eax
    9d8a:	24 01                	and    $0x1,%al
    9d8c:	5d                   	pop    %rbp
    9d8d:	c3                   	ret
    9d8e:	66 90                	xchg   %ax,%ax

0000000000009d90 <_ZN4arch6paging16X86PageTableImplINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEESL_E11unmap_entryEPVmNS0_14X86PagingLevelE>:
    {  return Status::Unimplemented;  }
    9d90:	55                   	push   %rbp
    9d91:	48 89 e5             	mov    %rsp,%rbp
    9d94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9d98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9d9c:	89 55 ec             	mov    %edx,-0x14(%rbp)
    9d9f:	b8 05 00 00 00       	mov    $0x5,%eax
    9da4:	5d                   	pop    %rbp
    9da5:	c3                   	ret
    9da6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9dad:	00 00 00 

0000000000009db0 <_ZN4arch6paging24X86PageTableSynchroniserINS0_15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS4_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINSA_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEEEE4syncEv>:
        auto sync() -> void {}
    9db0:	55                   	push   %rbp
    9db1:	48 89 e5             	mov    %rsp,%rbp
    9db4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9db8:	5d                   	pop    %rbp
    9db9:	c3                   	ret
    9dba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000009dc0 <_ZN4arch6paging15X86PageTableEptINS_6MutexTIN4ours5MutexEE4PackINS0_12PageFlusherTINS3_3mem7details14TlbInvalidatorEE4PackINS0_11PageSourceTINS9_13PageAllocatorEE4PackINS0_23PageTableDefaultOptionsEEEEEEEE11make_ptevalENS0_14X86PagingLevelEmNS0_8MmuFlagsE>:

        static auto make_pteval(LevelType level, PhysAddr phys, MmuFlags flags) -> PteVal
        { return {};  }
    9dc0:	55                   	push   %rbp
    9dc1:	48 89 e5             	mov    %rsp,%rbp
    9dc4:	89 7d fc             	mov    %edi,-0x4(%rbp)
    9dc7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9dcb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    9dcf:	31 c0                	xor    %eax,%eax
    9dd1:	5d                   	pop    %rbp
    9dd2:	c3                   	ret
    9dd3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9dda:	00 00 00 
    9ddd:	0f 1f 00             	nopl   (%rax)

0000000000009de0 <_ZN4ustl12NullDisposerclEz>:
    {};

    struct NullDisposer
    {
        auto operator()(...) -> void
        {}
    9de0:	55                   	push   %rbp
    9de1:	48 89 e5             	mov    %rsp,%rbp
    9de4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9de8:	5d                   	pop    %rbp
    9de9:	c3                   	ret
    9dea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000009df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI operator _Tp() const _NOEXCEPT { return load(); }
    9df0:	55                   	push   %rbp
    9df1:	48 89 e5             	mov    %rsp,%rbp
    9df4:	48 83 ec 10          	sub    $0x10,%rsp
    9df8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9dfc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    9e00:	be 05 00 00 00       	mov    $0x5,%esi
    9e05:	e8 06 00 00 00       	call   9e10 <_ZNKSt3__113__atomic_baseImLb0EE4loadB8nn210000ENS_12memory_orderE>
    9e0a:	48 83 c4 10          	add    $0x10,%rsp
    9e0e:	5d                   	pop    %rbp
    9e0f:	c3                   	ret

0000000000009e10 <_ZNKSt3__113__atomic_baseImLb0EE4loadB8nn210000ENS_12memory_orderE>:
      _LIBCPP_CHECK_LOAD_MEMORY_ORDER(__m) {
    9e10:	55                   	push   %rbp
    9e11:	48 89 e5             	mov    %rsp,%rbp
    9e14:	48 83 ec 10          	sub    $0x10,%rsp
    9e18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9e1c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    9e1f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return std::__cxx_atomic_load(std::addressof(__a_), __m);
    9e23:	e8 88 00 00 00       	call   9eb0 <_ZNSt3__19addressofB8nn210000INS_17__cxx_atomic_implImNS_22__cxx_atomic_base_implImEEEEEEPT_RS5_>
    9e28:	48 89 c7             	mov    %rax,%rdi
    9e2b:	8b 75 f4             	mov    -0xc(%rbp),%esi
    9e2e:	e8 0d 00 00 00       	call   9e40 <_ZNSt3__117__cxx_atomic_loadB8nn210000ImEET_PKNS_22__cxx_atomic_base_implIS1_EENS_12memory_orderE>
    9e33:	48 83 c4 10          	add    $0x10,%rsp
    9e37:	5d                   	pop    %rbp
    9e38:	c3                   	ret
    9e39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009e40 <_ZNSt3__117__cxx_atomic_loadB8nn210000ImEET_PKNS_22__cxx_atomic_base_implIS1_EENS_12memory_orderE>:
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  return __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
_LIBCPP_HIDE_FROM_ABI _Tp __cxx_atomic_load(__cxx_atomic_base_impl<_Tp> const* __a, memory_order __order) _NOEXCEPT {
    9e40:	55                   	push   %rbp
    9e41:	48 89 e5             	mov    %rsp,%rbp
    9e44:	48 83 ec 30          	sub    $0x30,%rsp
    9e48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9e4c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  return __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
    9e4f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    9e53:	e8 68 00 00 00       	call   9ec0 <_ZNSt3__19addressofB8nn210000IKU7_AtomicmEEPT_RS3_>
    9e58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    9e5c:	8b 45 f4             	mov    -0xc(%rbp),%eax
    9e5f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  return __c11_atomic_load(
    9e62:	ff c8                	dec    %eax
    9e64:	83 e8 02             	sub    $0x2,%eax
    9e67:	72 19                	jb     9e82 <_ZNSt3__117__cxx_atomic_loadB8nn210000ImEET_PKNS_22__cxx_atomic_base_implIS1_EENS_12memory_orderE+0x42>
    9e69:	eb 00                	jmp    9e6b <_ZNSt3__117__cxx_atomic_loadB8nn210000ImEET_PKNS_22__cxx_atomic_base_implIS1_EENS_12memory_orderE+0x2b>
    9e6b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    9e6e:	83 e8 05             	sub    $0x5,%eax
    9e71:	74 1c                	je     9e8f <_ZNSt3__117__cxx_atomic_loadB8nn210000ImEET_PKNS_22__cxx_atomic_base_implIS1_EENS_12memory_orderE+0x4f>
    9e73:	eb 00                	jmp    9e75 <_ZNSt3__117__cxx_atomic_loadB8nn210000ImEET_PKNS_22__cxx_atomic_base_implIS1_EENS_12memory_orderE+0x35>
    9e75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9e79:	48 8b 00             	mov    (%rax),%rax
    9e7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9e80:	eb 18                	jmp    9e9a <_ZNSt3__117__cxx_atomic_loadB8nn210000ImEET_PKNS_22__cxx_atomic_base_implIS1_EENS_12memory_orderE+0x5a>
    9e82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9e86:	48 8b 00             	mov    (%rax),%rax
    9e89:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9e8d:	eb 0b                	jmp    9e9a <_ZNSt3__117__cxx_atomic_loadB8nn210000ImEET_PKNS_22__cxx_atomic_base_implIS1_EENS_12memory_orderE+0x5a>
    9e8f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9e93:	48 8b 00             	mov    (%rax),%rax
    9e96:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9e9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e9e:	48 83 c4 30          	add    $0x30,%rsp
    9ea2:	5d                   	pop    %rbp
    9ea3:	c3                   	ret
    9ea4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9eab:	00 00 00 
    9eae:	66 90                	xchg   %ax,%ax

0000000000009eb0 <_ZNSt3__19addressofB8nn210000INS_17__cxx_atomic_implImNS_22__cxx_atomic_base_implImEEEEEEPT_RS5_>:
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

template <class _Tp>
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
    9eb0:	55                   	push   %rbp
    9eb1:	48 89 e5             	mov    %rsp,%rbp
    9eb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
    9eb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ebc:	5d                   	pop    %rbp
    9ebd:	c3                   	ret
    9ebe:	66 90                	xchg   %ax,%ax

0000000000009ec0 <_ZNSt3__19addressofB8nn210000IKU7_AtomicmEEPT_RS3_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
    9ec0:	55                   	push   %rbp
    9ec1:	48 89 e5             	mov    %rsp,%rbp
    9ec4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
    9ec8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ecc:	5d                   	pop    %rbp
    9ecd:	c3                   	ret
    9ece:	66 90                	xchg   %ax,%ax

0000000000009ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>:

  _LIBCPP_HIDE_FROM_ABI _Tp operator=(_Tp __d) volatile _NOEXCEPT {
    __base::store(__d);
    return __d;
  }
  _LIBCPP_HIDE_FROM_ABI _Tp operator=(_Tp __d) _NOEXCEPT {
    9ed0:	55                   	push   %rbp
    9ed1:	48 89 e5             	mov    %rsp,%rbp
    9ed4:	48 83 ec 10          	sub    $0x10,%rsp
    9ed8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9edc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9ee0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    __base::store(__d);
    9ee4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    9ee8:	ba 05 00 00 00       	mov    $0x5,%edx
    9eed:	e8 0e 00 00 00       	call   9f00 <_ZNSt3__113__atomic_baseImLb0EE5storeB8nn210000EmNS_12memory_orderE>
    return __d;
    9ef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9ef6:	48 83 c4 10          	add    $0x10,%rsp
    9efa:	5d                   	pop    %rbp
    9efb:	c3                   	ret
    9efc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000009f00 <_ZNSt3__113__atomic_baseImLb0EE5storeB8nn210000EmNS_12memory_orderE>:
      _LIBCPP_CHECK_STORE_MEMORY_ORDER(__m) {
    9f00:	55                   	push   %rbp
    9f01:	48 89 e5             	mov    %rsp,%rbp
    9f04:	48 83 ec 20          	sub    $0x20,%rsp
    9f08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9f0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9f10:	89 55 ec             	mov    %edx,-0x14(%rbp)
    9f13:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    std::__cxx_atomic_store(std::addressof(__a_), __d, __m);
    9f17:	e8 94 ff ff ff       	call   9eb0 <_ZNSt3__19addressofB8nn210000INS_17__cxx_atomic_implImNS_22__cxx_atomic_base_implImEEEEEEPT_RS5_>
    9f1c:	48 89 c7             	mov    %rax,%rdi
    9f1f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    9f23:	8b 55 ec             	mov    -0x14(%rbp),%edx
    9f26:	e8 15 00 00 00       	call   9f40 <_ZNSt3__118__cxx_atomic_storeB8nn210000ImEEvPNS_22__cxx_atomic_base_implIT_EES2_NS_12memory_orderE>
  }
    9f2b:	48 83 c4 20          	add    $0x20,%rsp
    9f2f:	5d                   	pop    %rbp
    9f30:	c3                   	ret
    9f31:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9f38:	00 00 00 
    9f3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000009f40 <_ZNSt3__118__cxx_atomic_storeB8nn210000ImEEvPNS_22__cxx_atomic_base_implIT_EES2_NS_12memory_orderE>:
__cxx_atomic_store(__cxx_atomic_base_impl<_Tp>* __a, _Tp __val, memory_order __order) _NOEXCEPT {
    9f40:	55                   	push   %rbp
    9f41:	48 89 e5             	mov    %rsp,%rbp
    9f44:	48 83 ec 30          	sub    $0x30,%rsp
    9f48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9f4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9f50:	89 55 ec             	mov    %edx,-0x14(%rbp)
  __c11_atomic_store(std::addressof(__a->__a_value), __val, static_cast<__memory_order_underlying_t>(__order));
    9f53:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    9f57:	e8 54 00 00 00       	call   9fb0 <_ZNSt3__19addressofB8nn210000IU7_AtomicmEEPT_RS2_>
    9f5c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    9f60:	8b 45 ec             	mov    -0x14(%rbp),%eax
    9f63:	89 45 dc             	mov    %eax,-0x24(%rbp)
    9f66:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9f6a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    9f6e:	83 e8 03             	sub    $0x3,%eax
    9f71:	74 19                	je     9f8c <_ZNSt3__118__cxx_atomic_storeB8nn210000ImEEvPNS_22__cxx_atomic_base_implIT_EES2_NS_12memory_orderE+0x4c>
    9f73:	eb 00                	jmp    9f75 <_ZNSt3__118__cxx_atomic_storeB8nn210000ImEEvPNS_22__cxx_atomic_base_implIT_EES2_NS_12memory_orderE+0x35>
    9f75:	8b 45 dc             	mov    -0x24(%rbp),%eax
    9f78:	83 e8 05             	sub    $0x5,%eax
    9f7b:	74 1c                	je     9f99 <_ZNSt3__118__cxx_atomic_storeB8nn210000ImEEvPNS_22__cxx_atomic_base_implIT_EES2_NS_12memory_orderE+0x59>
    9f7d:	eb 00                	jmp    9f7f <_ZNSt3__118__cxx_atomic_storeB8nn210000ImEEvPNS_22__cxx_atomic_base_implIT_EES2_NS_12memory_orderE+0x3f>
    9f7f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9f83:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    9f87:	48 89 08             	mov    %rcx,(%rax)
    9f8a:	eb 18                	jmp    9fa4 <_ZNSt3__118__cxx_atomic_storeB8nn210000ImEEvPNS_22__cxx_atomic_base_implIT_EES2_NS_12memory_orderE+0x64>
    9f8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9f90:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    9f94:	48 89 08             	mov    %rcx,(%rax)
    9f97:	eb 0b                	jmp    9fa4 <_ZNSt3__118__cxx_atomic_storeB8nn210000ImEEvPNS_22__cxx_atomic_base_implIT_EES2_NS_12memory_orderE+0x64>
    9f99:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    9f9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9fa1:	48 87 01             	xchg   %rax,(%rcx)
}
    9fa4:	48 83 c4 30          	add    $0x30,%rsp
    9fa8:	5d                   	pop    %rbp
    9fa9:	c3                   	ret
    9faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000009fb0 <_ZNSt3__19addressofB8nn210000IU7_AtomicmEEPT_RS2_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
    9fb0:	55                   	push   %rbp
    9fb1:	48 89 e5             	mov    %rsp,%rbp
    9fb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
    9fb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9fbc:	5d                   	pop    %rbp
    9fbd:	c3                   	ret
    9fbe:	66 90                	xchg   %ax,%ax

0000000000009fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>:

        Ptr as_ptr() const
        {  return static_cast<Ptr>(&this->_data);  }

        RefMut as_ref()
        {  return this->_data;  }
    9fc0:	55                   	push   %rbp
    9fc1:	48 89 e5             	mov    %rsp,%rbp
    9fc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9fc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9fcc:	5d                   	pop    %rbp
    9fcd:	c3                   	ret
    9fce:	66 90                	xchg   %ax,%ax

0000000000009fd0 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmAspaceEE10deallocateEPS4_m>:

        auto deallocate(PtrMut ptr) -> void
        {  return operator delete(ptr);  }

        auto deallocate(PtrMut ptr, usize n) -> void
        {  return operator delete[](ptr);  }
    9fd0:	55                   	push   %rbp
    9fd1:	48 89 e5             	mov    %rsp,%rbp
    9fd4:	48 83 ec 20          	sub    $0x20,%rsp
    9fd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9fdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9fe0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    9fe4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    9fe8:	e8 03 99 00 00       	call   138f0 <_ZdaPv>
    9fed:	48 83 c4 20          	add    $0x20,%rsp
    9ff1:	5d                   	pop    %rbp
    9ff2:	c3                   	ret
    9ff3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9ffa:	00 00 00 
    9ffd:	0f 1f 00             	nopl   (%rax)

000000000000a000 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EE6as_refEv>:
    a000:	55                   	push   %rbp
    a001:	48 89 e5             	mov    %rsp,%rbp
    a004:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a008:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a00c:	5d                   	pop    %rbp
    a00d:	c3                   	ret
    a00e:	66 90                	xchg   %ax,%ax

000000000000a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _Tp operator-=(_Tp __op) _NOEXCEPT { return fetch_sub(__op) - __op; }
    a010:	55                   	push   %rbp
    a011:	48 89 e5             	mov    %rsp,%rbp
    a014:	48 83 ec 10          	sub    $0x10,%rsp
    a018:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a01c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a020:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a024:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    a028:	ba 05 00 00 00       	mov    $0x5,%edx
    a02d:	e8 0e 00 00 00       	call   a040 <_ZNSt3__113__atomic_baseImLb1EE9fetch_subB8nn210000EmNS_12memory_orderE>
    a032:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    a036:	48 83 c4 10          	add    $0x10,%rsp
    a03a:	5d                   	pop    %rbp
    a03b:	c3                   	ret
    a03c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000a040 <_ZNSt3__113__atomic_baseImLb1EE9fetch_subB8nn210000EmNS_12memory_orderE>:
  _LIBCPP_HIDE_FROM_ABI _Tp fetch_sub(_Tp __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT {
    a040:	55                   	push   %rbp
    a041:	48 89 e5             	mov    %rsp,%rbp
    a044:	48 83 ec 20          	sub    $0x20,%rsp
    a048:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a04c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a050:	89 55 ec             	mov    %edx,-0x14(%rbp)
    a053:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
    a057:	e8 54 fe ff ff       	call   9eb0 <_ZNSt3__19addressofB8nn210000INS_17__cxx_atomic_implImNS_22__cxx_atomic_base_implImEEEEEEPT_RS5_>
    a05c:	48 89 c7             	mov    %rax,%rdi
    a05f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    a063:	8b 55 ec             	mov    -0x14(%rbp),%edx
    a066:	e8 15 00 00 00       	call   a080 <_ZNSt3__122__cxx_atomic_fetch_subB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE>
    a06b:	48 83 c4 20          	add    $0x20,%rsp
    a06f:	5d                   	pop    %rbp
    a070:	c3                   	ret
    a071:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a078:	00 00 00 
    a07b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000a080 <_ZNSt3__122__cxx_atomic_fetch_subB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE>:
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
_LIBCPP_HIDE_FROM_ABI _Tp
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp>* __a, _Tp __delta, memory_order __order) _NOEXCEPT {
    a080:	55                   	push   %rbp
    a081:	48 89 e5             	mov    %rsp,%rbp
    a084:	48 83 ec 40          	sub    $0x40,%rsp
    a088:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a08c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a090:	89 55 ec             	mov    %edx,-0x14(%rbp)
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
    a093:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a097:	e8 14 ff ff ff       	call   9fb0 <_ZNSt3__19addressofB8nn210000IU7_AtomicmEEPT_RS2_>
    a09c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    a0a0:	8b 45 ec             	mov    -0x14(%rbp),%eax
    a0a3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  return __c11_atomic_fetch_sub(
    a0a7:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    a0ab:	ff c8                	dec    %eax
    a0ad:	89 c1                	mov    %eax,%ecx
    a0af:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    a0b3:	83 e8 04             	sub    $0x4,%eax
    a0b6:	77 14                	ja     a0cc <_ZNSt3__122__cxx_atomic_fetch_subB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0x4c>
    a0b8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    a0bc:	48 8d 05 9d 49 02 00 	lea    0x2499d(%rip),%rax        # 2ea60 <_ZNSt3__16__itoa11__pow10_128E+0x280>
    a0c3:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
    a0c7:	48 01 c8             	add    %rcx,%rax
    a0ca:	ff e0                	jmp    *%rax
    a0cc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    a0d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a0d4:	48 f7 d8             	neg    %rax
    a0d7:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    a0dc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a0e0:	eb 56                	jmp    a138 <_ZNSt3__122__cxx_atomic_fetch_subB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0xb8>
    a0e2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    a0e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a0ea:	48 f7 d8             	neg    %rax
    a0ed:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    a0f2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a0f6:	eb 40                	jmp    a138 <_ZNSt3__122__cxx_atomic_fetch_subB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0xb8>
    a0f8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    a0fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a100:	48 f7 d8             	neg    %rax
    a103:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    a108:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a10c:	eb 2a                	jmp    a138 <_ZNSt3__122__cxx_atomic_fetch_subB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0xb8>
    a10e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    a112:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a116:	48 f7 d8             	neg    %rax
    a119:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    a11e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a122:	eb 14                	jmp    a138 <_ZNSt3__122__cxx_atomic_fetch_subB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0xb8>
    a124:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    a128:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a12c:	48 f7 d8             	neg    %rax
    a12f:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    a134:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a138:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a13c:	48 83 c4 40          	add    $0x40,%rsp
    a140:	5d                   	pop    %rbp
    a141:	c3                   	ret
    a142:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a149:	00 00 00 
    a14c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000a150 <_ZN4arch6paging13IX86PageTable9map_pagesEmmmNS0_8MmuFlagsENS0_10MapControlE>:
        auto map_pages(VirtAddr va, PhysAddr pa, usize n, MmuFlags flags, MapControl control) -> ustl::Result<usize, Status> {
    a150:	55                   	push   %rbp
    a151:	48 89 e5             	mov    %rsp,%rbp
    a154:	48 83 ec 50          	sub    $0x50,%rsp
    a158:	48 89 f8             	mov    %rdi,%rax
    a15b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    a15f:	8b 45 10             	mov    0x10(%rbp),%eax
    a162:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a166:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a16a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    a16e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    a172:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    a176:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    a17a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
            return this->map_pages_with_altmap(va, pa, 1, flags, control, 0);
    a17e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a182:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    a186:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
    a18a:	44 8b 55 10          	mov    0x10(%rbp),%r10d
    a18e:	48 8b 06             	mov    (%rsi),%rax
    a191:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    a197:	45 31 db             	xor    %r11d,%r11d
    a19a:	44 89 14 24          	mov    %r10d,(%rsp)
    a19e:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
    a1a5:	00 00 
    a1a7:	ff 50 10             	call   *0x10(%rax)
    a1aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a1ae:	48 83 c4 50          	add    $0x50,%rsp
    a1b2:	5d                   	pop    %rbp
    a1b3:	c3                   	ret
    a1b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a1bb:	00 00 00 
    a1be:	66 90                	xchg   %ax,%ax

000000000000a1c0 <_ZN4ours3irq8init_irqEv>:
#include <ours/irq/init.hpp>

namespace ours::irq {
    auto init_irq() -> void {
    a1c0:	55                   	push   %rbp
    a1c1:	48 89 e5             	mov    %rsp,%rbp
    }
    a1c4:	5d                   	pop    %rbp
    a1c5:	c3                   	ret
    a1c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a1cd:	00 00 00 

000000000000a1d0 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_v>:

    CPU_LOCAL
    static NodeId s_nid;

    template <>
    auto CpuLocal::access<PmNode>() -> PmNode * {
    a1d0:	55                   	push   %rbp
    a1d1:	48 89 e5             	mov    %rsp,%rbp
    a1d4:	48 83 ec 40          	sub    $0x40,%rsp
    a1d8:	48 8d 05 09 97 02 00 	lea    0x29709(%rip),%rax        # 338e8 <_ZN4oursL5s_nidE>
    a1df:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            return arch_cpu_local_read<Integral>(reinterpret_cast<usize>(&integer));
    a1e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a1e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a1eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1ef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a1f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1f7:	65 48 8b 00          	mov    %gs:(%rax),%rax
    a1fb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        return ret;
    a1ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        NodeId const nid = Self::read(s_nid);
    a203:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        DEBUG_ASSERT(nid < MAX_NODES, "");
    a207:	48 83 7d d0 20       	cmpq   $0x20,-0x30(%rbp)
    a20c:	7c 1d                	jl     a22b <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_v+0x5b>
    a20e:	48 8d 35 36 4f 02 00 	lea    0x24f36(%rip),%rsi        # 2f14b <.L.str>
    a215:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    a219:	e8 62 90 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    a21e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    a222:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    a226:	e8 05 90 ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
        return PmNode::node(nid);
    a22b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a22f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    class PmNode {
        typedef PmNode     Self;
    public:
        FORCE_INLINE
        static auto node(NodeId nid) -> PmNode *
        {  return s_node_list[nid];  }
    a233:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    a237:	48 8d 3d ca e5 02 00 	lea    0x2e5ca(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
    a23e:	e8 2d 01 00 00       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
    a243:	48 8b 00             	mov    (%rax),%rax
    a246:	48 83 c4 40          	add    $0x40,%rsp
    a24a:	5d                   	pop    %rbp
    a24b:	c3                   	ret
    a24c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000a250 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_j>:
    }

    template <>
    auto CpuLocal::access<PmNode>(CpuNum CpuNum) -> PmNode * {
    a250:	55                   	push   %rbp
    a251:	48 89 e5             	mov    %rsp,%rbp
    a254:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    a25b:	89 7d 9c             	mov    %edi,-0x64(%rbp)
        NodeId *nid = Self::access(&s_nid, CpuNum);
    a25e:	8b 45 9c             	mov    -0x64(%rbp),%eax
    a261:	48 8d 0d 80 96 02 00 	lea    0x29680(%rip),%rcx        # 338e8 <_ZN4oursL5s_nidE>
    a268:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    a26c:	89 45 d4             	mov    %eax,-0x2c(%rbp)

        // The `arch-custom` object should be accessed by this interface.
        template <typename T>
        FORCE_INLINE
        static auto access(T *object, CpuNum cpunum) -> T * {
            DEBUG_ASSERT(cpunum < MAX_CPU_NUM, "");
    a26f:	83 7d d4 20          	cmpl   $0x20,-0x2c(%rbp)
    a273:	72 1d                	jb     a292 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_j+0x42>
    a275:	48 8d 35 cf 4e 02 00 	lea    0x24ecf(%rip),%rsi        # 2f14b <.L.str>
    a27c:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    a280:	e8 fb 8f ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    a285:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    a289:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    a28d:	e8 9e 8f ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
            auto const ptr = reinterpret_cast<T *>(
                reinterpret_cast<u8 *>(object) + s_cpu_offset[cpunum]
    a292:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a296:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    a29d:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    a2a0:	89 c6                	mov    %eax,%esi
    a2a2:	48 8d 3d 37 a3 02 00 	lea    0x2a337(%rip),%rdi        # 345e0 <_ZN4ours8CpuLocal12s_cpu_offsetE>
    a2a9:	e8 22 8f ff ff       	call   31d0 <_ZNSt3__15arrayIlLm32EEixB8nn210000Em>
    a2ae:	48 89 c1             	mov    %rax,%rcx
    a2b1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    a2b8:	48 03 01             	add    (%rcx),%rax
            auto const ptr = reinterpret_cast<T *>(
    a2bb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
            );
            DEBUG_ASSERT(ustl::mem::is_aligned(ptr, alignof(T)), "Invalid cpu local data pointer");
    a2bf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a2c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a2c7:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
    a2ce:	00 
    {  return is_aligned(usize(n), a);}
    a2cf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    a2d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a2d7:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    a2db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    { return (n & (a - 1)) == 0; }
    a2df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2e3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a2e7:	48 83 e9 01          	sub    $0x1,%rcx
    a2eb:	48 21 c8             	and    %rcx,%rax
    a2ee:	48 83 f8 00          	cmp    $0x0,%rax
    a2f2:	74 1d                	je     a311 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_j+0xc1>
    a2f4:	48 8d 35 ed 4a 02 00 	lea    0x24aed(%rip),%rsi        # 2ede8 <.L.str>
    a2fb:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    a2ff:	e8 7c 8f ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    a304:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    a308:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    a30c:	e8 1f 8f ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>

            return ptr;
    a311:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a315:	48 89 45 90          	mov    %rax,-0x70(%rbp)
        DEBUG_ASSERT(*nid < MAX_NODES, "");
    a319:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    a31d:	48 83 38 20          	cmpq   $0x20,(%rax)
    a321:	7c 1d                	jl     a340 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_j+0xf0>
    a323:	48 8d 35 21 4e 02 00 	lea    0x24e21(%rip),%rsi        # 2f14b <.L.str>
    a32a:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    a32e:	e8 4d 8f ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    a333:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    a337:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
    a33b:	e8 f0 8e ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
        return PmNode::node(*nid);
    a340:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    a344:	48 8b 00             	mov    (%rax),%rax
    a347:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    a34b:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    a34f:	48 8d 3d b2 e4 02 00 	lea    0x2e4b2(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
    a356:	e8 15 00 00 00       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
    a35b:	48 8b 00             	mov    (%rax),%rax
    a35e:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
    a365:	5d                   	pop    %rbp
    a366:	c3                   	ret
    a367:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    a36e:	00 00 

000000000000a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reference operator[](size_type __n) _NOEXCEPT {
    a370:	55                   	push   %rbp
    a371:	48 89 e5             	mov    %rsp,%rbp
    a374:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a378:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a37c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return __elems_[__n];
    a380:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a384:	48 c1 e1 03          	shl    $0x3,%rcx
    a388:	48 01 c8             	add    %rcx,%rax
    a38b:	5d                   	pop    %rbp
    a38c:	c3                   	ret
    a38d:	0f 1f 00             	nopl   (%rax)

000000000000a390 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L12create_nodesERKS1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS6_>:
        using Base::Base;

        template <typename F>
            requires ustl::traits::Invocable<F, NodeId>
        auto for_each(F &&functor) const -> void
        {
    a390:	55                   	push   %rbp
    a391:	48 89 e5             	mov    %rsp,%rbp
    a394:	48 83 ec 20          	sub    $0x20,%rsp
    a398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a39c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a3a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            auto const n = this->size();
    a3a4:	e8 b7 93 ff ff       	call   3760 <_ZNKSt3__16bitsetILm32EE4sizeB8nn210000Ev>
    a3a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            for (NodeId nid = 0; nid < n; ++nid) {
    a3ad:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    a3b4:	00 
    a3b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a3b9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a3bd:	73 1b                	jae    a3da <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L12create_nodesERKS1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS6_+0x4a>
                ustl::function::invoke(functor, nid);
    a3bf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a3c3:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
    a3c7:	e8 14 00 00 00       	call   a3e0 <_ZNSt3__16invokeB8nn210000IRZN4ours3memL12create_nodesERKNS2_8NodeMaskEE3$_0JRlEEENS_13invoke_resultIT_JDpT0_EE4typeEOSA_DpOSB_>
            for (NodeId nid = 0; nid < n; ++nid) {
    a3cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a3d0:	48 83 c0 01          	add    $0x1,%rax
    a3d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a3d8:	eb db                	jmp    a3b5 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L12create_nodesERKS1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS6_+0x25>
            }
        }
    a3da:	48 83 c4 20          	add    $0x20,%rsp
    a3de:	5d                   	pop    %rbp
    a3df:	c3                   	ret

000000000000a3e0 <_ZNSt3__16invokeB8nn210000IRZN4ours3memL12create_nodesERKNS2_8NodeMaskEE3$_0JRlEEENS_13invoke_resultIT_JDpT0_EE4typeEOSA_DpOSB_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
    a3e0:	55                   	push   %rbp
    a3e1:	48 89 e5             	mov    %rsp,%rbp
    a3e4:	48 83 ec 20          	sub    $0x20,%rsp
    a3e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a3ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
    a3f0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a3f4:	e8 57 00 00 00       	call   a450 <_ZNSt3__17forwardB8nn210000IRZN4ours3memL12create_nodesERKNS2_8NodeMaskEE3$_0EEOT_Ru20__remove_reference_tIS8_E>
    a3f9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a3fd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a401:	e8 5a 07 00 00       	call   ab60 <_ZNSt3__17forwardB8nn210000IRlEEOT_Ru20__remove_reference_tIS2_E>
    a406:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    a40a:	48 89 c6             	mov    %rax,%rsi
    a40d:	e8 0e 00 00 00       	call   a420 <_ZNSt3__18__invokeB8nn210000IRZN4ours3memL12create_nodesERKNS2_8NodeMaskEE3$_0JRlEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS9_DpOSA_>
    a412:	48 83 c4 20          	add    $0x20,%rsp
    a416:	5d                   	pop    %rbp
    a417:	c3                   	ret
    a418:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    a41f:	00 

000000000000a420 <_ZNSt3__18__invokeB8nn210000IRZN4ours3memL12create_nodesERKNS2_8NodeMaskEE3$_0JRlEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS9_DpOSA_>:
    a420:	55                   	push   %rbp
    a421:	48 89 e5             	mov    %rsp,%rbp
    a424:	48 83 ec 10          	sub    $0x10,%rsp
    a428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a42c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a430:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a434:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a438:	48 8b 30             	mov    (%rax),%rsi
    a43b:	e8 20 00 00 00       	call   a460 <_ZZN4ours3memL12create_nodesERKNS0_8NodeMaskEENK3$_0clEl>
    a440:	48 83 c4 10          	add    $0x10,%rsp
    a444:	5d                   	pop    %rbp
    a445:	c3                   	ret
    a446:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a44d:	00 00 00 

000000000000a450 <_ZNSt3__17forwardB8nn210000IRZN4ours3memL12create_nodesERKNS2_8NodeMaskEE3$_0EEOT_Ru20__remove_reference_tIS8_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    a450:	55                   	push   %rbp
    a451:	48 89 e5             	mov    %rsp,%rbp
    a454:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    a458:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a45c:	5d                   	pop    %rbp
    a45d:	c3                   	ret
    a45e:	66 90                	xchg   %ax,%ax

000000000000a460 <_ZZN4ours3memL12create_nodesERKNS0_8NodeMaskEENK3$_0clEl>:
    }

    INIT_CODE
    static auto create_nodes(NodeMask const &nodes) -> void
    {
        nodes.for_each([] (NodeId nid) {
    a460:	55                   	push   %rbp
    a461:	48 89 e5             	mov    %rsp,%rbp
    a464:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    a46b:	48 89 bd 70 ff ff ff 	mov    %rdi,-0x90(%rbp)
    a472:	48 89 b5 68 ff ff ff 	mov    %rsi,-0x98(%rbp)
            auto node = alloc_node(nid);
    a479:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    a480:	48 89 45 90          	mov    %rax,-0x70(%rbp)
        auto node = EarlyMem::allocate<PmNode>(1, arch::CACHE_SIZE, id);
    a484:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    a488:	48 c7 45 a8 01 00 00 	movq   $0x1,-0x58(%rbp)
    a48f:	00 
    a490:	48 c7 45 a0 40 00 00 	movq   $0x40,-0x60(%rbp)
    a497:	00 
    a498:	48 89 45 98          	mov    %rax,-0x68(%rbp)
        }

        template <typename T>
        FORCE_INLINE
        static auto allocate(usize n, usize align, NodeId nid) -> T * {
            return allocate<T>(n, align, min_address(), max_address(), nid);
    a49c:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    a4a0:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi

        static auto count_present_frames(Pfn start, Pfn end) -> usize;

        FORCE_INLINE
        static auto min_address() -> PhysAddr {  
            return s_bootmem->min_address;
    a4a4:	48 8b 05 0d 96 02 00 	mov    0x2960d(%rip),%rax        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
    a4ab:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
        }

        FORCE_INLINE
        static auto max_address() -> PhysAddr {  
            return s_bootmem->max_address;
    a4b2:	48 8b 88 f8 00 00 00 	mov    0xf8(%rax),%rcx
            return allocate<T>(n, align, min_address(), max_address(), nid);
    a4b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    a4bd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a4c1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    a4c5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    a4c9:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    a4cd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
            DEBUG_ASSERT(s_bootmem);
    a4d1:	48 8b 05 e0 95 02 00 	mov    0x295e0(%rip),%rax        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
    a4d8:	48 83 f8 00          	cmp    $0x0,%rax
    a4dc:	75 05                	jne    a4e3 <_ZZN4ours3memL12create_nodesERKNS0_8NodeMaskEENK3$_0clEl+0x83>
    a4de:	e8 1d 8c ff ff       	call   3100 <_ZN4ours5panicEv>
            PhysAddr phys_addr = s_bootmem->allocate(sizeof(T) * n, align, start, end, nid);
    a4e3:	48 8b 3d ce 95 02 00 	mov    0x295ce(%rip),%rdi        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
    a4ea:	48 83 c7 60          	add    $0x60,%rdi
    a4ee:	48 69 75 d8 f8 0d 00 	imul   $0xdf8,-0x28(%rbp),%rsi
    a4f5:	00 
    a4f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a4fa:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    a4fe:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
    a502:	4c 8b 4d b8          	mov    -0x48(%rbp),%r9
    a506:	e8 f5 06 00 00       	call   ac00 <_ZNKSt3__18functionIFmmmmmlEEclEmmmml>
    a50b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
            return PhysMap::phys_to_virt<T>(phys_addr);
    a50f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    a513:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

        template <typename U, typename T>
        FORCE_INLINE CXX11_CONSTEXPR
        static auto phys_to_virt(T phys_addr) -> U * {
            static_assert(sizeof(usize) == sizeof(T));
            return reinterpret_cast<U *>(PhysMap::phys_to_virt(phys_addr));
    a517:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a51b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
    a51f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a523:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a527:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
    a52e:	00 00 00 
                   reinterpret_cast<PhysAddr>(phys_addr) - kPhysBase < kSize;
    a531:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
    a535:	73 14                	jae    a54b <_ZZN4ours3memL12create_nodesERKNS0_8NodeMaskEENK3$_0clEl+0xeb>
                return VirtAddr(kVirtBase + (phys_addr - kPhysBase));
    a537:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
    a53e:	ff ff ff 
    a541:	48 03 45 e8          	add    -0x18(%rbp),%rax
    a545:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a549:	eb 08                	jmp    a553 <_ZZN4ours3memL12create_nodesERKNS0_8NodeMaskEENK3$_0clEl+0xf3>
            return VirtAddr();
    a54b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    a552:	00 
        }
    a553:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a557:	48 89 45 88          	mov    %rax,-0x78(%rbp)
        if (!node) {
    a55b:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    a560:	75 27                	jne    a589 <_ZZN4ours3memL12create_nodesERKNS0_8NodeMaskEENK3$_0clEl+0x129>
            panic("Fail to allocate for PmNode[{}]", id);
    a562:	48 8d 35 bb 49 02 00 	lea    0x249bb(%rip),%rsi        # 2ef24 <.L.str.3>
    a569:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
    a570:	e8 0b 8d ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    a575:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
    a57c:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
    a580:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    a584:	e8 27 06 00 00       	call   abb0 <_ZN4ours5panicIJRlEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_>
        return node;
    a589:	48 8b 45 88          	mov    -0x78(%rbp),%rax
            auto node = alloc_node(nid);
    a58d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
            std::construct_at(node, nid);
    a594:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    a59b:	48 8d b5 68 ff ff ff 	lea    -0x98(%rbp),%rsi
    a5a2:	e8 c9 05 00 00       	call   ab70 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6PmNodeEJRlEPS3_EEPT_S7_DpOT0_>
        });
    a5a7:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    a5ae:	5d                   	pop    %rbp
    a5af:	c3                   	ret

000000000000a5b0 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L10init_nodesERKS1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS6_>:
        {
    a5b0:	55                   	push   %rbp
    a5b1:	48 89 e5             	mov    %rsp,%rbp
    a5b4:	48 83 ec 20          	sub    $0x20,%rsp
    a5b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a5c0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            auto const n = this->size();
    a5c4:	e8 97 91 ff ff       	call   3760 <_ZNKSt3__16bitsetILm32EE4sizeB8nn210000Ev>
    a5c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            for (NodeId nid = 0; nid < n; ++nid) {
    a5cd:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    a5d4:	00 
    a5d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a5d9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a5dd:	73 1b                	jae    a5fa <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L10init_nodesERKS1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS6_+0x4a>
                ustl::function::invoke(functor, nid);
    a5df:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a5e3:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
    a5e7:	e8 14 00 00 00       	call   a600 <_ZNSt3__16invokeB8nn210000IRZN4ours3memL10init_nodesERKNS2_8NodeMaskEE3$_0JRlEEENS_13invoke_resultIT_JDpT0_EE4typeEOSA_DpOSB_>
            for (NodeId nid = 0; nid < n; ++nid) {
    a5ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a5f0:	48 83 c0 01          	add    $0x1,%rax
    a5f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a5f8:	eb db                	jmp    a5d5 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L10init_nodesERKS1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS6_+0x25>
        }
    a5fa:	48 83 c4 20          	add    $0x20,%rsp
    a5fe:	5d                   	pop    %rbp
    a5ff:	c3                   	ret

000000000000a600 <_ZNSt3__16invokeB8nn210000IRZN4ours3memL10init_nodesERKNS2_8NodeMaskEE3$_0JRlEEENS_13invoke_resultIT_JDpT0_EE4typeEOSA_DpOSB_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
    a600:	55                   	push   %rbp
    a601:	48 89 e5             	mov    %rsp,%rbp
    a604:	48 83 ec 20          	sub    $0x20,%rsp
    a608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a60c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
    a610:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a614:	e8 57 00 00 00       	call   a670 <_ZNSt3__17forwardB8nn210000IRZN4ours3memL10init_nodesERKNS2_8NodeMaskEE3$_0EEOT_Ru20__remove_reference_tIS8_E>
    a619:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a61d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a621:	e8 3a 05 00 00       	call   ab60 <_ZNSt3__17forwardB8nn210000IRlEEOT_Ru20__remove_reference_tIS2_E>
    a626:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    a62a:	48 89 c6             	mov    %rax,%rsi
    a62d:	e8 0e 00 00 00       	call   a640 <_ZNSt3__18__invokeB8nn210000IRZN4ours3memL10init_nodesERKNS2_8NodeMaskEE3$_0JRlEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS9_DpOSA_>
    a632:	48 83 c4 20          	add    $0x20,%rsp
    a636:	5d                   	pop    %rbp
    a637:	c3                   	ret
    a638:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    a63f:	00 

000000000000a640 <_ZNSt3__18__invokeB8nn210000IRZN4ours3memL10init_nodesERKNS2_8NodeMaskEE3$_0JRlEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS9_DpOSA_>:
    a640:	55                   	push   %rbp
    a641:	48 89 e5             	mov    %rsp,%rbp
    a644:	48 83 ec 10          	sub    $0x10,%rsp
    a648:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a64c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a650:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a654:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a658:	48 8b 30             	mov    (%rax),%rsi
    a65b:	e8 20 00 00 00       	call   a680 <_ZZN4ours3memL10init_nodesERKNS0_8NodeMaskEENK3$_0clEl>
    a660:	48 83 c4 10          	add    $0x10,%rsp
    a664:	5d                   	pop    %rbp
    a665:	c3                   	ret
    a666:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a66d:	00 00 00 

000000000000a670 <_ZNSt3__17forwardB8nn210000IRZN4ours3memL10init_nodesERKNS2_8NodeMaskEE3$_0EEOT_Ru20__remove_reference_tIS8_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    a670:	55                   	push   %rbp
    a671:	48 89 e5             	mov    %rsp,%rbp
    a674:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    a678:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a67c:	5d                   	pop    %rbp
    a67d:	c3                   	ret
    a67e:	66 90                	xchg   %ax,%ax

000000000000a680 <_ZZN4ours3memL10init_nodesERKNS0_8NodeMaskEENK3$_0clEl>:
    }

    INIT_CODE
    static auto init_nodes(NodeMask const &nodes) -> void
    {
        nodes.for_each([] (NodeId nid) {
    a680:	55                   	push   %rbp
    a681:	48 89 e5             	mov    %rsp,%rbp
    a684:	48 83 ec 30          	sub    $0x30,%rsp
    a688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a68c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
            auto const nr_zones = init_node(nid);
    a690:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a694:	e8 77 81 02 00       	call   32810 <_ZN4ours3memL9init_nodeEl>
    a699:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            log::trace("Node[{}] has {} zones", nid, nr_zones);
    a69d:	48 8d 35 a0 48 02 00 	lea    0x248a0(%rip),%rsi        # 2ef44 <.L.str.4>
    a6a4:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    a6a8:	e8 d3 8b ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    a6ad:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    a6b1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    a6b5:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    a6b9:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    a6bd:	e8 3e 09 00 00       	call   b000 <_ZN5logz45traceIJRlRKmEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_>
        });
    a6c2:	48 83 c4 30          	add    $0x30,%rsp
    a6c6:	5d                   	pop    %rbp
    a6c7:	c3                   	ret
    a6c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    a6cf:	00 

000000000000a6d0 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L13connect_nodesES1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS4_>:
        {
    a6d0:	55                   	push   %rbp
    a6d1:	48 89 e5             	mov    %rsp,%rbp
    a6d4:	48 83 ec 20          	sub    $0x20,%rsp
    a6d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a6dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a6e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            auto const n = this->size();
    a6e4:	e8 77 90 ff ff       	call   3760 <_ZNKSt3__16bitsetILm32EE4sizeB8nn210000Ev>
    a6e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            for (NodeId nid = 0; nid < n; ++nid) {
    a6ed:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    a6f4:	00 
    a6f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a6f9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a6fd:	73 1b                	jae    a71a <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L13connect_nodesES1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS4_+0x4a>
                ustl::function::invoke(functor, nid);
    a6ff:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a703:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
    a707:	e8 14 00 00 00       	call   a720 <_ZNSt3__16invokeB8nn210000IRZN4ours3memL13connect_nodesENS2_8NodeMaskEE3$_0JRlEEENS_13invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
            for (NodeId nid = 0; nid < n; ++nid) {
    a70c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a710:	48 83 c0 01          	add    $0x1,%rax
    a714:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a718:	eb db                	jmp    a6f5 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L13connect_nodesES1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS4_+0x25>
        }
    a71a:	48 83 c4 20          	add    $0x20,%rsp
    a71e:	5d                   	pop    %rbp
    a71f:	c3                   	ret

000000000000a720 <_ZNSt3__16invokeB8nn210000IRZN4ours3memL13connect_nodesENS2_8NodeMaskEE3$_0JRlEEENS_13invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
    a720:	55                   	push   %rbp
    a721:	48 89 e5             	mov    %rsp,%rbp
    a724:	48 83 ec 20          	sub    $0x20,%rsp
    a728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a72c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
    a730:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a734:	e8 57 00 00 00       	call   a790 <_ZNSt3__17forwardB8nn210000IRZN4ours3memL13connect_nodesENS2_8NodeMaskEE3$_0EEOT_Ru20__remove_reference_tIS6_E>
    a739:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a73d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a741:	e8 1a 04 00 00       	call   ab60 <_ZNSt3__17forwardB8nn210000IRlEEOT_Ru20__remove_reference_tIS2_E>
    a746:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    a74a:	48 89 c6             	mov    %rax,%rsi
    a74d:	e8 0e 00 00 00       	call   a760 <_ZNSt3__18__invokeB8nn210000IRZN4ours3memL13connect_nodesENS2_8NodeMaskEE3$_0JRlEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS7_DpOS8_>
    a752:	48 83 c4 20          	add    $0x20,%rsp
    a756:	5d                   	pop    %rbp
    a757:	c3                   	ret
    a758:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    a75f:	00 

000000000000a760 <_ZNSt3__18__invokeB8nn210000IRZN4ours3memL13connect_nodesENS2_8NodeMaskEE3$_0JRlEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS7_DpOS8_>:
    a760:	55                   	push   %rbp
    a761:	48 89 e5             	mov    %rsp,%rbp
    a764:	48 83 ec 10          	sub    $0x10,%rsp
    a768:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a76c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a770:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a774:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a778:	48 8b 30             	mov    (%rax),%rsi
    a77b:	e8 20 00 00 00       	call   a7a0 <_ZZN4ours3memL13connect_nodesENS0_8NodeMaskEENK3$_0clEl>
    a780:	48 83 c4 10          	add    $0x10,%rsp
    a784:	5d                   	pop    %rbp
    a785:	c3                   	ret
    a786:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a78d:	00 00 00 

000000000000a790 <_ZNSt3__17forwardB8nn210000IRZN4ours3memL13connect_nodesENS2_8NodeMaskEE3$_0EEOT_Ru20__remove_reference_tIS6_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    a790:	55                   	push   %rbp
    a791:	48 89 e5             	mov    %rsp,%rbp
    a794:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    a798:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a79c:	5d                   	pop    %rbp
    a79d:	c3                   	ret
    a79e:	66 90                	xchg   %ax,%ax

000000000000a7a0 <_ZZN4ours3memL13connect_nodesENS0_8NodeMaskEENK3$_0clEl>:
    }

    INIT_CODE
    static auto connect_nodes(NodeMask nodes) -> void
    {
        nodes.for_each([&] (NodeId this_nid) {
    a7a0:	55                   	push   %rbp
    a7a1:	48 89 e5             	mov    %rsp,%rbp
    a7a4:	48 83 ec 20          	sub    $0x20,%rsp
    a7a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a7ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a7b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            nodes.for_each([&] (NodeId other_nid) {
    a7b4:	48 8b 38             	mov    (%rax),%rdi
    a7b7:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    a7bb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a7bf:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
    a7c3:	e8 08 00 00 00       	call   a7d0 <_ZNK4ours3mem8NodeMask8for_eachIZZNS0_L13connect_nodesES1_ENK3$_0clElEUllE_Qsr4ustl6traitsE9InvocableIT_lEEEvOS5_>
                }

                auto this_node = PmNode::node(this_nid);
                this_node->share_with(other_nid);
            });
        });
    a7c8:	48 83 c4 20          	add    $0x20,%rsp
    a7cc:	5d                   	pop    %rbp
    a7cd:	c3                   	ret
    a7ce:	66 90                	xchg   %ax,%ax

000000000000a7d0 <_ZNK4ours3mem8NodeMask8for_eachIZZNS0_L13connect_nodesES1_ENK3$_0clElEUllE_Qsr4ustl6traitsE9InvocableIT_lEEEvOS5_>:
        {
    a7d0:	55                   	push   %rbp
    a7d1:	48 89 e5             	mov    %rsp,%rbp
    a7d4:	48 83 ec 20          	sub    $0x20,%rsp
    a7d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a7dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a7e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
            auto const n = this->size();
    a7e4:	e8 77 8f ff ff       	call   3760 <_ZNKSt3__16bitsetILm32EE4sizeB8nn210000Ev>
    a7e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            for (NodeId nid = 0; nid < n; ++nid) {
    a7ed:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    a7f4:	00 
    a7f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a7f9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a7fd:	73 1b                	jae    a81a <_ZNK4ours3mem8NodeMask8for_eachIZZNS0_L13connect_nodesES1_ENK3$_0clElEUllE_Qsr4ustl6traitsE9InvocableIT_lEEEvOS5_+0x4a>
                ustl::function::invoke(functor, nid);
    a7ff:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a803:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
    a807:	e8 14 00 00 00       	call   a820 <_ZNSt3__16invokeB8nn210000IRZZN4ours3memL13connect_nodesENS2_8NodeMaskEENK3$_0clElEUllE_JRlEEENS_13invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
            for (NodeId nid = 0; nid < n; ++nid) {
    a80c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a810:	48 83 c0 01          	add    $0x1,%rax
    a814:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a818:	eb db                	jmp    a7f5 <_ZNK4ours3mem8NodeMask8for_eachIZZNS0_L13connect_nodesES1_ENK3$_0clElEUllE_Qsr4ustl6traitsE9InvocableIT_lEEEvOS5_+0x25>
        }
    a81a:	48 83 c4 20          	add    $0x20,%rsp
    a81e:	5d                   	pop    %rbp
    a81f:	c3                   	ret

000000000000a820 <_ZNSt3__16invokeB8nn210000IRZZN4ours3memL13connect_nodesENS2_8NodeMaskEENK3$_0clElEUllE_JRlEEENS_13invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
    a820:	55                   	push   %rbp
    a821:	48 89 e5             	mov    %rsp,%rbp
    a824:	48 83 ec 20          	sub    $0x20,%rsp
    a828:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a82c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
    a830:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a834:	e8 57 00 00 00       	call   a890 <_ZNSt3__17forwardB8nn210000IRZZN4ours3memL13connect_nodesENS2_8NodeMaskEENK3$_0clElEUllE_EEOT_Ru20__remove_reference_tIS7_E>
    a839:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a83d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a841:	e8 1a 03 00 00       	call   ab60 <_ZNSt3__17forwardB8nn210000IRlEEOT_Ru20__remove_reference_tIS2_E>
    a846:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    a84a:	48 89 c6             	mov    %rax,%rsi
    a84d:	e8 0e 00 00 00       	call   a860 <_ZNSt3__18__invokeB8nn210000IRZZN4ours3memL13connect_nodesENS2_8NodeMaskEENK3$_0clElEUllE_JRlEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS8_DpOS9_>
    a852:	48 83 c4 20          	add    $0x20,%rsp
    a856:	5d                   	pop    %rbp
    a857:	c3                   	ret
    a858:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    a85f:	00 

000000000000a860 <_ZNSt3__18__invokeB8nn210000IRZZN4ours3memL13connect_nodesENS2_8NodeMaskEENK3$_0clElEUllE_JRlEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS8_DpOS9_>:
    a860:	55                   	push   %rbp
    a861:	48 89 e5             	mov    %rsp,%rbp
    a864:	48 83 ec 10          	sub    $0x10,%rsp
    a868:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a86c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a870:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a874:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a878:	48 8b 30             	mov    (%rax),%rsi
    a87b:	e8 20 00 00 00       	call   a8a0 <_ZZZN4ours3memL13connect_nodesENS0_8NodeMaskEENK3$_0clElENKUllE_clEl>
    a880:	48 83 c4 10          	add    $0x10,%rsp
    a884:	5d                   	pop    %rbp
    a885:	c3                   	ret
    a886:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a88d:	00 00 00 

000000000000a890 <_ZNSt3__17forwardB8nn210000IRZZN4ours3memL13connect_nodesENS2_8NodeMaskEENK3$_0clElEUllE_EEOT_Ru20__remove_reference_tIS7_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    a890:	55                   	push   %rbp
    a891:	48 89 e5             	mov    %rsp,%rbp
    a894:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    a898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a89c:	5d                   	pop    %rbp
    a89d:	c3                   	ret
    a89e:	66 90                	xchg   %ax,%ax

000000000000a8a0 <_ZZZN4ours3memL13connect_nodesENS0_8NodeMaskEENK3$_0clElENKUllE_clEl>:
            nodes.for_each([&] (NodeId other_nid) {
    a8a0:	55                   	push   %rbp
    a8a1:	48 89 e5             	mov    %rsp,%rbp
    a8a4:	48 83 ec 30          	sub    $0x30,%rsp
    a8a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    a8ac:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    a8b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a8b4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
                if (this_nid == other_nid) {
    a8b8:	48 8b 00             	mov    (%rax),%rax
    a8bb:	48 8b 00             	mov    (%rax),%rax
    a8be:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a8c2:	75 02                	jne    a8c6 <_ZZZN4ours3memL13connect_nodesENS0_8NodeMaskEENK3$_0clElENKUllE_clEl+0x26>
                    return; 
    a8c4:	eb 32                	jmp    a8f8 <_ZZZN4ours3memL13connect_nodesENS0_8NodeMaskEENK3$_0clElENKUllE_clEl+0x58>
    a8c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
                auto this_node = PmNode::node(this_nid);
    a8ca:	48 8b 00             	mov    (%rax),%rax
    a8cd:	48 8b 00             	mov    (%rax),%rax
    a8d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a8d4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    a8d8:	48 8d 3d 29 df 02 00 	lea    0x2df29(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
    a8df:	e8 8c fa ff ff       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
    a8e4:	48 8b 00             	mov    (%rax),%rax
    a8e7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                this_node->share_with(other_nid);
    a8eb:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    a8ef:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    a8f3:	e8 e8 44 00 00       	call   ede0 <_ZN4ours3mem6PmNode10share_withEl>
            });
    a8f8:	48 83 c4 30          	add    $0x30,%rsp
    a8fc:	5d                   	pop    %rbp
    a8fd:	c3                   	ret
    a8fe:	66 90                	xchg   %ax,%ax

000000000000a900 <_ZNKSt3__18optionalIN7bootmem6RegionEEcvbB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr const value_type&& operator*() const&& noexcept {
    _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(this->has_value(), "optional operator* called on a disengaged value");
    return std::move(this->__get());
  }

  _LIBCPP_HIDE_FROM_ABI constexpr explicit operator bool() const noexcept { return has_value(); }
    a900:	55                   	push   %rbp
    a901:	48 89 e5             	mov    %rsp,%rbp
    a904:	48 83 ec 10          	sub    $0x10,%rsp
    a908:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a90c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a910:	e8 3b 01 00 00       	call   aa50 <_ZNKSt3__123__optional_storage_baseIN7bootmem6RegionELb0EE9has_valueB8nn210000Ev>
    a915:	24 01                	and    $0x1,%al
    a917:	48 83 c4 10          	add    $0x10,%rsp
    a91b:	5d                   	pop    %rbp
    a91c:	c3                   	ret
    a91d:	0f 1f 00             	nopl   (%rax)

000000000000a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr add_pointer_t<value_type> operator->() noexcept {
    a920:	55                   	push   %rbp
    a921:	48 89 e5             	mov    %rsp,%rbp
    a924:	48 83 ec 10          	sub    $0x10,%rsp
    a928:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a92c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return std::addressof(this->__get());
    a930:	e8 4b 01 00 00       	call   aa80 <_ZNRSt3__123__optional_storage_baseIN7bootmem6RegionELb0EE5__getB8nn210000Ev>
    a935:	48 89 c7             	mov    %rax,%rdi
    a938:	e8 33 01 00 00       	call   aa70 <_ZNSt3__19addressofB8nn210000IN7bootmem6RegionEEEPT_RS3_>
    a93d:	48 83 c4 10          	add    $0x10,%rsp
    a941:	5d                   	pop    %rbp
    a942:	c3                   	ret
    a943:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a94a:	00 00 00 
    a94d:	0f 1f 00             	nopl   (%rax)

000000000000a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>:
  typedef typename __base::type type;

public:
  static inline _LIBCPP_CONSTEXPR const bool is_specialized = __base::is_specialized;
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR type min() _NOEXCEPT { return __base::min(); }
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR type max() _NOEXCEPT { return __base::max(); }
    a950:	55                   	push   %rbp
    a951:	48 89 e5             	mov    %rsp,%rbp
    a954:	e8 07 00 00 00       	call   a960 <_ZNSt3__123__libcpp_numeric_limitsImLb1EE3maxB8nn210000Ev>
    a959:	5d                   	pop    %rbp
    a95a:	c3                   	ret
    a95b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000a960 <_ZNSt3__123__libcpp_numeric_limitsImLb1EE3maxB8nn210000Ev>:
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR type max() _NOEXCEPT { return __max; }
    a960:	55                   	push   %rbp
    a961:	48 89 e5             	mov    %rsp,%rbp
    a964:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    a96b:	5d                   	pop    %rbp
    a96c:	c3                   	ret
    a96d:	0f 1f 00             	nopl   (%rax)

000000000000a970 <_ZNKSt3__18functionIFN4ustl6OptionIN7bootmem6RegionEEERNS3_8MemBlockINS3_12RegionVectorEE16IterationContextEEEclESA_>:
void function<_Rp(_ArgTypes...)>::swap(function& __f) _NOEXCEPT {
  __f_.swap(__f.__f_);
}

template <class _Rp, class... _ArgTypes>
_Rp function<_Rp(_ArgTypes...)>::operator()(_ArgTypes... __arg) const {
    a970:	55                   	push   %rbp
    a971:	48 89 e5             	mov    %rsp,%rbp
    a974:	48 83 ec 30          	sub    $0x30,%rsp
    a978:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a97c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a980:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    a984:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    a988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a98c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  return __f_(std::forward<_ArgTypes>(__arg)...);
    a990:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a994:	e8 87 00 00 00       	call   aa20 <_ZNSt3__17forwardB8nn210000IRN7bootmem8MemBlockINS1_12RegionVectorEE16IterationContextEEEOT_Ru20__remove_reference_tIS7_E>
    a999:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    a99d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    a9a1:	48 89 c2             	mov    %rax,%rdx
    a9a4:	e8 17 00 00 00       	call   a9c0 <_ZNKSt3__110__function12__value_funcIFN4ustl6OptionIN7bootmem6RegionEEERNS4_8MemBlockINS4_12RegionVectorEE16IterationContextEEEclB8nn210000ESB_>
    a9a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a9ad:	48 83 c4 30          	add    $0x30,%rsp
    a9b1:	5d                   	pop    %rbp
    a9b2:	c3                   	ret
    a9b3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a9ba:	00 00 00 
    a9bd:	0f 1f 00             	nopl   (%rax)

000000000000a9c0 <_ZNKSt3__110__function12__value_funcIFN4ustl6OptionIN7bootmem6RegionEEERNS4_8MemBlockINS4_12RegionVectorEE16IterationContextEEEclB8nn210000ESB_>:
  _LIBCPP_HIDE_FROM_ABI _Rp operator()(_ArgTypes&&... __args) const {
    a9c0:	55                   	push   %rbp
    a9c1:	48 89 e5             	mov    %rsp,%rbp
    a9c4:	48 83 ec 30          	sub    $0x30,%rsp
    a9c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a9cc:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    a9d0:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    a9d4:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    a9d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (__f_ == nullptr)
    a9e0:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
    a9e5:	75 05                	jne    a9ec <_ZNKSt3__110__function12__value_funcIFN4ustl6OptionIN7bootmem6RegionEEERNS4_8MemBlockINS4_12RegionVectorEE16IterationContextEEEclB8nn210000ESB_+0x2c>
      std::__throw_bad_function_call();
    a9e7:	e8 44 00 00 00       	call   aa30 <_ZNSt3__125__throw_bad_function_callB8nn210000Ev>
    a9ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    return (*__f_)(std::forward<_ArgTypes>(__args)...);
    a9f0:	48 8b 40 20          	mov    0x20(%rax),%rax
    a9f4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    a9f8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a9fc:	e8 1f 00 00 00       	call   aa20 <_ZNSt3__17forwardB8nn210000IRN7bootmem8MemBlockINS1_12RegionVectorEE16IterationContextEEEOT_Ru20__remove_reference_tIS7_E>
    aa01:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    aa05:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    aa09:	48 89 c2             	mov    %rax,%rdx
    aa0c:	48 8b 06             	mov    (%rsi),%rax
    aa0f:	ff 50 30             	call   *0x30(%rax)
    aa12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    aa16:	48 83 c4 30          	add    $0x30,%rsp
    aa1a:	5d                   	pop    %rbp
    aa1b:	c3                   	ret
    aa1c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000aa20 <_ZNSt3__17forwardB8nn210000IRN7bootmem8MemBlockINS1_12RegionVectorEE16IterationContextEEEOT_Ru20__remove_reference_tIS7_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    aa20:	55                   	push   %rbp
    aa21:	48 89 e5             	mov    %rsp,%rbp
    aa24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    aa28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa2c:	5d                   	pop    %rbp
    aa2d:	c3                   	ret
    aa2e:	66 90                	xchg   %ax,%ax

000000000000aa30 <_ZNSt3__125__throw_bad_function_callB8nn210000Ev>:
[[__noreturn__]] inline _LIBCPP_HIDE_FROM_ABI void __throw_bad_function_call() {
    aa30:	55                   	push   %rbp
    aa31:	48 89 e5             	mov    %rsp,%rbp
  _LIBCPP_VERBOSE_ABORT("bad_function_call was thrown in -fno-exceptions mode");
    aa34:	48 8d 3d b4 44 02 00 	lea    0x244b4(%rip),%rdi        # 2eeef <.L.str>
    aa3b:	31 c0                	xor    %eax,%eax
    aa3d:	e8 8e d1 00 00       	call   17bd0 <_ZNSt3__122__libcpp_verbose_abortEPKcz>
    aa42:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    aa49:	00 00 00 
    aa4c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000aa50 <_ZNKSt3__123__optional_storage_baseIN7bootmem6RegionELb0EE9has_valueB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool has_value() const noexcept { return this->__engaged_; }
    aa50:	55                   	push   %rbp
    aa51:	48 89 e5             	mov    %rsp,%rbp
    aa54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa5c:	8a 40 18             	mov    0x18(%rax),%al
    aa5f:	24 01                	and    $0x1,%al
    aa61:	5d                   	pop    %rbp
    aa62:	c3                   	ret
    aa63:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    aa6a:	00 00 00 
    aa6d:	0f 1f 00             	nopl   (%rax)

000000000000aa70 <_ZNSt3__19addressofB8nn210000IN7bootmem6RegionEEEPT_RS3_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
    aa70:	55                   	push   %rbp
    aa71:	48 89 e5             	mov    %rsp,%rbp
    aa74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
    aa78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa7c:	5d                   	pop    %rbp
    aa7d:	c3                   	ret
    aa7e:	66 90                	xchg   %ax,%ax

000000000000aa80 <_ZNRSt3__123__optional_storage_baseIN7bootmem6RegionELb0EE5__getB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr value_type& __get() & noexcept { return this->__val_; }
    aa80:	55                   	push   %rbp
    aa81:	48 89 e5             	mov    %rsp,%rbp
    aa84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa8c:	5d                   	pop    %rbp
    aa8d:	c3                   	ret
    aa8e:	66 90                	xchg   %ax,%ax

000000000000aa90 <_ZNSt3__13maxB8nn210000ImEERKT_S3_S3_>:
  return __comp(__a, __b) ? __b : __a;
}

template <class _Tp>
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 const _Tp&
max(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b) {
    aa90:	55                   	push   %rbp
    aa91:	48 89 e5             	mov    %rsp,%rbp
    aa94:	48 83 ec 20          	sub    $0x20,%rsp
    aa98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::max(__a, __b, __less<>());
    aaa0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    aaa4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    aaa8:	e8 33 00 00 00       	call   aae0 <_ZNSt3__13maxB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_>
    aaad:	48 83 c4 20          	add    $0x20,%rsp
    aab1:	5d                   	pop    %rbp
    aab2:	c3                   	ret
    aab3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    aaba:	00 00 00 
    aabd:	0f 1f 00             	nopl   (%rax)

000000000000aac0 <_ZNK5boost4spanImLm18446744073709551615EEixEm>:

    constexpr bool empty() const noexcept {
        return s_.n == 0;
    }

    constexpr reference operator[](size_type i) const {
    aac0:	55                   	push   %rbp
    aac1:	48 89 e5             	mov    %rsp,%rbp
    aac4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aac8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aacc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        return s_.p[i];
    aad0:	48 8b 00             	mov    (%rax),%rax
    aad3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    aad7:	48 c1 e1 03          	shl    $0x3,%rcx
    aadb:	48 01 c8             	add    %rcx,%rax
    aade:	5d                   	pop    %rbp
    aadf:	c3                   	ret

000000000000aae0 <_ZNSt3__13maxB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_>:
max(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b, _Compare __comp) {
    aae0:	55                   	push   %rbp
    aae1:	48 89 e5             	mov    %rsp,%rbp
    aae4:	48 83 ec 20          	sub    $0x20,%rsp
    aae8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    aaec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  return __comp(__a, __b) ? __b : __a;
    aaf0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    aaf4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    aaf8:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
    aafc:	e8 2f 00 00 00       	call   ab30 <_ZNKSt3__16__lessIvvEclB8nn210000ImmEEbRKT_RKT0_>
    ab01:	a8 01                	test   $0x1,%al
    ab03:	75 02                	jne    ab07 <_ZNSt3__13maxB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_+0x27>
    ab05:	eb 0a                	jmp    ab11 <_ZNSt3__13maxB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_+0x31>
    ab07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab0b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ab0f:	eb 08                	jmp    ab19 <_ZNSt3__13maxB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_+0x39>
    ab11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ab15:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ab19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab1d:	48 83 c4 20          	add    $0x20,%rsp
    ab21:	5d                   	pop    %rbp
    ab22:	c3                   	ret
    ab23:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ab2a:	00 00 00 
    ab2d:	0f 1f 00             	nopl   (%rax)

000000000000ab30 <_ZNKSt3__16__lessIvvEclB8nn210000ImmEEbRKT_RKT0_>:
struct __less {};

template <>
struct __less<void, void> {
  template <class _Tp, class _Up>
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 bool operator()(const _Tp& __lhs, const _Up& __rhs) const {
    ab30:	55                   	push   %rbp
    ab31:	48 89 e5             	mov    %rsp,%rbp
    ab34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ab38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ab3c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    return __lhs < __rhs;
    ab40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ab44:	48 8b 00             	mov    (%rax),%rax
    ab47:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    ab4b:	48 3b 01             	cmp    (%rcx),%rax
    ab4e:	0f 92 c0             	setb   %al
    ab51:	24 01                	and    $0x1,%al
    ab53:	5d                   	pop    %rbp
    ab54:	c3                   	ret
    ab55:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ab5c:	00 00 00 
    ab5f:	90                   	nop

000000000000ab60 <_ZNSt3__17forwardB8nn210000IRlEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    ab60:	55                   	push   %rbp
    ab61:	48 89 e5             	mov    %rsp,%rbp
    ab64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    ab68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab6c:	5d                   	pop    %rbp
    ab6d:	c3                   	ret
    ab6e:	66 90                	xchg   %ax,%ax

000000000000ab70 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6PmNodeEJRlEPS3_EEPT_S7_DpOT0_>:
_LIBCPP_HIDE_FROM_ABI constexpr _Tp* construct_at(_Tp* __location, _Args&&... __args) {
    ab70:	55                   	push   %rbp
    ab71:	48 89 e5             	mov    %rsp,%rbp
    ab74:	48 83 ec 20          	sub    $0x20,%rsp
    ab78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ab7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return ::new (static_cast<void*>(__location)) _Tp(std::forward<_Args>(__args)...);
    ab80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab84:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ab88:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ab8c:	e8 cf ff ff ff       	call   ab60 <_ZNSt3__17forwardB8nn210000IRlEEOT_Ru20__remove_reference_tIS2_E>
    ab91:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ab95:	48 8b 30             	mov    (%rax),%rsi
    ab98:	e8 03 40 00 00       	call   eba0 <_ZN4ours3mem6PmNodeC1El>
    ab9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aba1:	48 83 c4 20          	add    $0x20,%rsp
    aba5:	5d                   	pop    %rbp
    aba6:	c3                   	ret
    aba7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    abae:	00 00 

000000000000abb0 <_ZN4ours5panicIJRlEEEvNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEDpOT_>:
    abb0:	55                   	push   %rbp
    abb1:	48 89 e5             	mov    %rsp,%rbp
    abb4:	48 83 ec 60          	sub    $0x60,%rsp
    abb8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    abbc:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    abc0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    abc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    abc8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    abcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abd0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    abd4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    abd8:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    abdc:	e8 6f 01 00 00       	call   ad50 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSA_>
    abe1:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    abe5:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    abe9:	e8 92 01 00 00       	call   ad80 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJlEEERKNS_18__format_arg_storeIS7_JDpT_EEE>
    abee:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    abf2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    abf6:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    abfa:	e8 11 85 ff ff       	call   3110 <_ZN4ours8do_panicENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEERKNS0_17basic_format_argsINS0_20basic_format_contextINS0_20back_insert_iteratorINS0_8__format15__output_bufferIcEEEEcEEEE>
    abff:	90                   	nop

000000000000ac00 <_ZNKSt3__18functionIFmmmmmlEEclEmmmml>:
_Rp function<_Rp(_ArgTypes...)>::operator()(_ArgTypes... __arg) const {
    ac00:	55                   	push   %rbp
    ac01:	48 89 e5             	mov    %rsp,%rbp
    ac04:	48 83 ec 60          	sub    $0x60,%rsp
    ac08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ac10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    ac14:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    ac18:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    ac1c:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    ac20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac24:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    ac28:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  return __f_(std::forward<_ArgTypes>(__arg)...);
    ac2c:	e8 ff 00 00 00       	call   ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>
    ac31:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    ac35:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    ac39:	e8 f2 00 00 00       	call   ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>
    ac3e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    ac42:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    ac46:	e8 e5 00 00 00       	call   ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>
    ac4b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ac4f:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    ac53:	e8 d8 00 00 00       	call   ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>
    ac58:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    ac5c:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    ac60:	e8 db 00 00 00       	call   ad40 <_ZNSt3__17forwardB8nn210000IlEEOT_Ru20__remove_reference_tIS1_E>
    ac65:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    ac69:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    ac6d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    ac71:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    ac75:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
    ac79:	49 89 c1             	mov    %rax,%r9
    ac7c:	e8 0f 00 00 00       	call   ac90 <_ZNKSt3__110__function12__value_funcIFmmmmmlEEclB8nn210000EOmS4_S4_S4_Ol>
    ac81:	48 83 c4 60          	add    $0x60,%rsp
    ac85:	5d                   	pop    %rbp
    ac86:	c3                   	ret
    ac87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ac8e:	00 00 

000000000000ac90 <_ZNKSt3__110__function12__value_funcIFmmmmmlEEclB8nn210000EOmS4_S4_S4_Ol>:
  _LIBCPP_HIDE_FROM_ABI _Rp operator()(_ArgTypes&&... __args) const {
    ac90:	55                   	push   %rbp
    ac91:	48 89 e5             	mov    %rsp,%rbp
    ac94:	48 83 ec 60          	sub    $0x60,%rsp
    ac98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aca0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    aca4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    aca8:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    acac:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    acb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acb4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    if (__f_ == nullptr)
    acb8:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
    acbd:	75 05                	jne    acc4 <_ZNKSt3__110__function12__value_funcIFmmmmmlEEclB8nn210000EOmS4_S4_S4_Ol+0x34>
      std::__throw_bad_function_call();
    acbf:	e8 6c fd ff ff       	call   aa30 <_ZNSt3__125__throw_bad_function_callB8nn210000Ev>
    acc4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    return (*__f_)(std::forward<_ArgTypes>(__args)...);
    acc8:	48 8b 40 20          	mov    0x20(%rax),%rax
    accc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    acd0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    acd4:	e8 57 00 00 00       	call   ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>
    acd9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    acdd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ace1:	e8 4a 00 00 00       	call   ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>
    ace6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    acea:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    acee:	e8 3d 00 00 00       	call   ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>
    acf3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    acf7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    acfb:	e8 30 00 00 00       	call   ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>
    ad00:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ad04:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    ad08:	e8 33 00 00 00       	call   ad40 <_ZNSt3__17forwardB8nn210000IlEEOT_Ru20__remove_reference_tIS1_E>
    ad0d:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    ad11:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    ad15:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    ad19:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    ad1d:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
    ad21:	49 89 c1             	mov    %rax,%r9
    ad24:	48 8b 07             	mov    (%rdi),%rax
    ad27:	ff 50 30             	call   *0x30(%rax)
    ad2a:	48 83 c4 60          	add    $0x60,%rsp
    ad2e:	5d                   	pop    %rbp
    ad2f:	c3                   	ret

000000000000ad30 <_ZNSt3__17forwardB8nn210000ImEEOT_Ru20__remove_reference_tIS1_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    ad30:	55                   	push   %rbp
    ad31:	48 89 e5             	mov    %rsp,%rbp
    ad34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    ad38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad3c:	5d                   	pop    %rbp
    ad3d:	c3                   	ret
    ad3e:	66 90                	xchg   %ax,%ax

000000000000ad40 <_ZNSt3__17forwardB8nn210000IlEEOT_Ru20__remove_reference_tIS1_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    ad40:	55                   	push   %rbp
    ad41:	48 89 e5             	mov    %rsp,%rbp
    ad44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    ad48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad4c:	5d                   	pop    %rbp
    ad4d:	c3                   	ret
    ad4e:	66 90                	xchg   %ax,%ax

000000000000ad50 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSA_>:
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI __format_arg_store<_Context, _Args...> make_format_args(_Args&... __args) {
    ad50:	55                   	push   %rbp
    ad51:	48 89 e5             	mov    %rsp,%rbp
    ad54:	48 83 ec 10          	sub    $0x10,%rsp
    ad58:	48 89 f8             	mov    %rdi,%rax
    ad5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ad5f:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  return std::__format_arg_store<_Context, _Args...>(__args...);
    ad63:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    ad67:	e8 44 00 00 00       	call   adb0 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlEEC2B8nn210000ERl>
    ad6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ad70:	48 83 c4 10          	add    $0x10,%rsp
    ad74:	5d                   	pop    %rbp
    ad75:	c3                   	ret
    ad76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ad7d:	00 00 00 

000000000000ad80 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJlEEERKNS_18__format_arg_storeIS7_JDpT_EEE>:
      : __size_(sizeof...(_Args)) {
    ad80:	55                   	push   %rbp
    ad81:	48 89 e5             	mov    %rsp,%rbp
    ad84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ad8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad90:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
        __values_ = __store.__storage.__values_;
    ad97:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ad9b:	48 89 48 08          	mov    %rcx,0x8(%rax)
        __types_  = __store.__storage.__types_;
    ad9f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ada3:	48 8b 49 10          	mov    0x10(%rcx),%rcx
    ada7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  }
    adab:	5d                   	pop    %rbp
    adac:	c3                   	ret
    adad:	0f 1f 00             	nopl   (%rax)

000000000000adb0 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlEEC2B8nn210000ERl>:
  _LIBCPP_HIDE_FROM_ABI __format_arg_store(_Args&... __args) noexcept {
    adb0:	55                   	push   %rbp
    adb1:	48 89 e5             	mov    %rsp,%rbp
    adb4:	48 83 ec 20          	sub    $0x20,%rsp
    adb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adbc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    adc0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    adc4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    adc8:	e8 23 00 00 00       	call   adf0 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm1EEC2Ev>
    adcd:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
        __format::__create_packed_storage(__storage.__types_, __storage.__values_, __args...);
    add1:	48 89 f7             	mov    %rsi,%rdi
    add4:	48 83 c7 10          	add    $0x10,%rdi
    add8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    addc:	e8 6f 00 00 00       	call   ae50 <_ZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_>
  }
    ade1:	48 83 c4 20          	add    $0x20,%rsp
    ade5:	5d                   	pop    %rbp
    ade6:	c3                   	ret
    ade7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    adee:	00 00 

000000000000adf0 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm1EEC2Ev>:
struct __packed_format_arg_store {
    adf0:	55                   	push   %rbp
    adf1:	48 89 e5             	mov    %rsp,%rbp
    adf4:	48 83 ec 30          	sub    $0x30,%rsp
    adf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae00:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ae04:	48 89 c1             	mov    %rax,%rcx
    ae07:	48 83 c1 10          	add    $0x10,%rcx
    ae0b:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    ae0f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ae13:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ae17:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ae1b:	e8 80 00 00 00       	call   aea0 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ev>
    ae20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ae24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    ae28:	48 83 c0 10          	add    $0x10,%rax
    ae2c:	48 39 c8             	cmp    %rcx,%rax
    ae2f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ae33:	75 de                	jne    ae13 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm1EEC2Ev+0x23>
    ae35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  uint64_t __types_ = 0;
    ae39:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    ae40:	00 
struct __packed_format_arg_store {
    ae41:	48 83 c4 30          	add    $0x30,%rsp
    ae45:	5d                   	pop    %rbp
    ae46:	c3                   	ret
    ae47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ae4e:	00 00 

000000000000ae50 <_ZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_>:
__create_packed_storage(uint64_t& __types, __basic_format_arg_value<_Context>* __values, _Args&... __args) noexcept {
    ae50:	55                   	push   %rbp
    ae51:	48 89 e5             	mov    %rsp,%rbp
    ae54:	48 83 ec 40          	sub    $0x40,%rsp
    ae58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ae5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ae60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  int __shift = 0;
    ae64:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
      [&] {
    ae6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae6f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ae73:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    ae77:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    ae7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae7f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ae83:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    ae87:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    ae8b:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    ae8f:	e8 1c 00 00 00       	call   aeb0 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv>
}
    ae94:	48 83 c4 40          	add    $0x40,%rsp
    ae98:	5d                   	pop    %rbp
    ae99:	c3                   	ret
    ae9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000aea0 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ev>:
  };

  // These constructors contain the exact storage type used. If adjustments are
  // required, these will be done in __create_format_arg.

  _LIBCPP_HIDE_FROM_ABI __basic_format_arg_value() noexcept : __monostate_() {}
    aea0:	55                   	push   %rbp
    aea1:	48 89 e5             	mov    %rsp,%rbp
    aea4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aea8:	5d                   	pop    %rbp
    aea9:	c3                   	ret
    aeaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000aeb0 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv>:
      [&] {
    aeb0:	55                   	push   %rbp
    aeb1:	48 89 e5             	mov    %rsp,%rbp
    aeb4:	48 83 ec 40          	sub    $0x40,%rsp
    aeb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aebc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aec0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        basic_format_arg<_Context> __arg = __format::__create_format_arg<_Context>(__args);
    aec4:	48 8b 30             	mov    (%rax),%rsi
    aec7:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    aecb:	e8 80 00 00 00       	call   af50 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEElEENS_16basic_format_argIT_EERT0_>
    aed0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        if (__shift != 0)
    aed4:	48 8b 40 08          	mov    0x8(%rax),%rax
    aed8:	83 38 00             	cmpl   $0x0,(%rax)
    aedb:	74 22                	je     aeff <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv+0x4f>
    aedd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types |= static_cast<uint64_t>(__arg.__type_) << __shift;
    aee1:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    aee5:	89 ca                	mov    %ecx,%edx
    aee7:	48 8b 48 08          	mov    0x8(%rax),%rcx
    aeeb:	8b 09                	mov    (%rcx),%ecx
    aeed:	48 d3 e2             	shl    %cl,%rdx
    aef0:	48 89 d1             	mov    %rdx,%rcx
    aef3:	48 8b 40 10          	mov    0x10(%rax),%rax
    aef7:	48 0b 08             	or     (%rax),%rcx
    aefa:	48 89 08             	mov    %rcx,(%rax)
    aefd:	eb 0f                	jmp    af0e <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv+0x5e>
    aeff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types = static_cast<uint64_t>(__arg.__type_);
    af03:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    af07:	48 8b 40 10          	mov    0x10(%rax),%rax
    af0b:	48 89 08             	mov    %rcx,(%rax)
    af0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        __shift += __packed_arg_t_bits;
    af12:	48 8b 48 08          	mov    0x8(%rax),%rcx
    af16:	8b 11                	mov    (%rcx),%edx
    af18:	83 c2 05             	add    $0x5,%edx
    af1b:	89 11                	mov    %edx,(%rcx)
        *__values++ = __arg.__value_;
    af1d:	48 8b 48 18          	mov    0x18(%rax),%rcx
    af21:	48 8b 01             	mov    (%rcx),%rax
    af24:	48 89 c2             	mov    %rax,%rdx
    af27:	48 83 c2 10          	add    $0x10,%rdx
    af2b:	48 89 11             	mov    %rdx,(%rcx)
    af2e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    af32:	48 89 08             	mov    %rcx,(%rax)
    af35:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    af39:	48 89 48 08          	mov    %rcx,0x8(%rax)
      }(),
    af3d:	48 83 c4 40          	add    $0x40,%rsp
    af41:	5d                   	pop    %rbp
    af42:	c3                   	ret
    af43:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    af4a:	00 00 00 
    af4d:	0f 1f 00             	nopl   (%rax)

000000000000af50 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEElEENS_16basic_format_argIT_EERT0_>:
_LIBCPP_HIDE_FROM_ABI basic_format_arg<_Context> __create_format_arg(_Tp& __value) noexcept {
    af50:	55                   	push   %rbp
    af51:	48 89 e5             	mov    %rsp,%rbp
    af54:	48 83 ec 30          	sub    $0x30,%rsp
    af58:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    af5c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    af60:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  constexpr __arg_t __arg = __format::__determine_arg_t<_Context, _Dp>();
    af64:	c6 45 f7 04          	movb   $0x4,-0x9(%rbp)
    return basic_format_arg<_Context>{__arg, static_cast<long long>(__value)};
    af68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af6c:	48 8b 30             	mov    (%rax),%rsi
    af6f:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    af73:	e8 28 00 00 00       	call   afa0 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ex>
    af78:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    af7c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    af80:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    af84:	be 04 00 00 00       	mov    $0x4,%esi
    af89:	e8 32 00 00 00       	call   afc0 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000ENS3_7__arg_tENS_24__basic_format_arg_valueIS7_EE>
    af8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    af92:	48 83 c4 30          	add    $0x30,%rsp
    af96:	5d                   	pop    %rbp
    af97:	c3                   	ret
    af98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    af9f:	00 

000000000000afa0 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ex>:
  _LIBCPP_HIDE_FROM_ABI __basic_format_arg_value(bool __value) noexcept : __boolean_(__value) {}
  _LIBCPP_HIDE_FROM_ABI __basic_format_arg_value(_CharT __value) noexcept : __char_type_(__value) {}
  _LIBCPP_HIDE_FROM_ABI __basic_format_arg_value(int __value) noexcept : __int_(__value) {}
  _LIBCPP_HIDE_FROM_ABI __basic_format_arg_value(unsigned __value) noexcept : __unsigned_(__value) {}
  _LIBCPP_HIDE_FROM_ABI __basic_format_arg_value(long long __value) noexcept : __long_long_(__value) {}
    afa0:	55                   	push   %rbp
    afa1:	48 89 e5             	mov    %rsp,%rbp
    afa4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    afa8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    afac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afb0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    afb4:	48 89 08             	mov    %rcx,(%rax)
    afb7:	5d                   	pop    %rbp
    afb8:	c3                   	ret
    afb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000afc0 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000ENS3_7__arg_tENS_24__basic_format_arg_valueIS7_EE>:
  __basic_format_arg_value<_Context> __value_;
  __format::__arg_t __type_;

  _LIBCPP_HIDE_FROM_ABI explicit basic_format_arg(__format::__arg_t __type,
                                                  __basic_format_arg_value<_Context> __value) noexcept
      : __value_(__value), __type_(__type) {}
    afc0:	55                   	push   %rbp
    afc1:	48 89 e5             	mov    %rsp,%rbp
    afc4:	40 88 f0             	mov    %sil,%al
    afc7:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    afcb:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    afcf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    afd3:	88 45 e7             	mov    %al,-0x19(%rbp)
    afd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    afda:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    afde:	48 89 08             	mov    %rcx,(%rax)
    afe1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    afe5:	48 89 48 08          	mov    %rcx,0x8(%rax)
    afe9:	8a 4d e7             	mov    -0x19(%rbp),%cl
    afec:	88 48 10             	mov    %cl,0x10(%rax)
    afef:	5d                   	pop    %rbp
    aff0:	c3                   	ret
    aff1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    aff8:	00 00 00 
    affb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000b000 <_ZN5logz45traceIJRlRKmEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_>:
    inline auto info(ustl::views::StringView fmt, Args &&...args) -> void
    {  return logz4::log<Args...>(Level::Info, fmt, ustl::forward<Args>(args)...);  }

    template <typename... Args>
    inline auto trace(ustl::views::StringView fmt, Args &&...args) -> void
    {  return logz4::log<Args...>(Level::Info, fmt, ustl::forward<Args>(args)...);  }
    b000:	55                   	push   %rbp
    b001:	48 89 e5             	mov    %rsp,%rbp
    b004:	48 83 ec 40          	sub    $0x40,%rsp
    b008:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    b00c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    b010:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    b014:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    b018:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b01c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b020:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b024:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b028:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b02c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b030:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b034:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b038:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b03c:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
    b040:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    b044:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b048:	bf 02 00 00 00       	mov    $0x2,%edi
    b04d:	e8 3e 04 00 00       	call   b490 <_ZN5logz43logIJRlRKmEEEvNS_5LevelENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEDpOT_>
    b052:	48 83 c4 40          	add    $0x40,%rsp
    b056:	5d                   	pop    %rbp
    b057:	c3                   	ret
    b058:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    b05f:	00 

000000000000b060 <_ZN4ours5panicIJRlPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_>:
    b060:	55                   	push   %rbp
    b061:	48 89 e5             	mov    %rsp,%rbp
    b064:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    b06b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    b06f:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    b073:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    b077:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    b07b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b07f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b083:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b087:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    b08b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    b08f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b093:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    b097:	e8 c4 00 00 00       	call   b160 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlPKcEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSC_>
    b09c:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    b0a0:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    b0a4:	e8 e7 00 00 00       	call   b190 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJlPKcEEERKNS_18__format_arg_storeIS7_JDpT_EEE>
    b0a9:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    b0ad:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    b0b1:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    b0b5:	e8 56 80 ff ff       	call   3110 <_ZN4ours8do_panicENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEERKNS0_17basic_format_argsINS0_20basic_format_contextINS0_20back_insert_iteratorINS0_8__format15__output_bufferIcEEEEcEEEE>
    b0ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000b0c0 <_ZNSt3__15clampB8nn210000ImEERKT_S3_S3_S3_>:

template <class _Tp>
[[nodiscard]] inline _LIBCPP_HIDE_FROM_ABI constexpr const _Tp&
clamp(_LIBCPP_LIFETIMEBOUND const _Tp& __v,
      _LIBCPP_LIFETIMEBOUND const _Tp& __lo,
      _LIBCPP_LIFETIMEBOUND const _Tp& __hi) {
    b0c0:	55                   	push   %rbp
    b0c1:	48 89 e5             	mov    %rsp,%rbp
    b0c4:	48 83 ec 20          	sub    $0x20,%rsp
    b0c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b0cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b0d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  return std::clamp(__v, __lo, __hi, __less<>());
    b0d4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b0d8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b0dc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b0e0:	e8 0b 00 00 00       	call   b0f0 <_ZNSt3__15clampB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_S5_T0_>
    b0e5:	48 83 c4 20          	add    $0x20,%rsp
    b0e9:	5d                   	pop    %rbp
    b0ea:	c3                   	ret
    b0eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000b0f0 <_ZNSt3__15clampB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_S5_T0_>:
      _Compare __comp) {
    b0f0:	55                   	push   %rbp
    b0f1:	48 89 e5             	mov    %rsp,%rbp
    b0f4:	48 83 ec 30          	sub    $0x30,%rsp
    b0f8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    b0fc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    b100:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  return __comp(__v, __lo) ? __lo : __comp(__hi, __v) ? __hi : __v;
    b104:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b108:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b10c:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
    b110:	e8 1b fa ff ff       	call   ab30 <_ZNKSt3__16__lessIvvEclB8nn210000ImmEEbRKT_RKT0_>
    b115:	a8 01                	test   $0x1,%al
    b117:	75 02                	jne    b11b <_ZNSt3__15clampB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_S5_T0_+0x2b>
    b119:	eb 0a                	jmp    b125 <_ZNSt3__15clampB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_S5_T0_+0x35>
    b11b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b11f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    b123:	eb 31                	jmp    b156 <_ZNSt3__15clampB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_S5_T0_+0x66>
    b125:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    b129:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b12d:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
    b131:	e8 fa f9 ff ff       	call   ab30 <_ZNKSt3__16__lessIvvEclB8nn210000ImmEEbRKT_RKT0_>
    b136:	a8 01                	test   $0x1,%al
    b138:	75 02                	jne    b13c <_ZNSt3__15clampB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_S5_T0_+0x4c>
    b13a:	eb 0a                	jmp    b146 <_ZNSt3__15clampB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_S5_T0_+0x56>
    b13c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b140:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b144:	eb 08                	jmp    b14e <_ZNSt3__15clampB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_S5_T0_+0x5e>
    b146:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b14a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b14e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b152:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    b156:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b15a:	48 83 c4 30          	add    $0x30,%rsp
    b15e:	5d                   	pop    %rbp
    b15f:	c3                   	ret

000000000000b160 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlPKcEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSC_>:
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI __format_arg_store<_Context, _Args...> make_format_args(_Args&... __args) {
    b160:	55                   	push   %rbp
    b161:	48 89 e5             	mov    %rsp,%rbp
    b164:	48 83 ec 20          	sub    $0x20,%rsp
    b168:	48 89 f8             	mov    %rdi,%rax
    b16b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b16f:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    b173:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  return std::__format_arg_store<_Context, _Args...>(__args...);
    b177:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    b17b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b17f:	e8 3c 00 00 00       	call   b1c0 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlPKcEEC2B8nn210000ERlRS9_>
    b184:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b188:	48 83 c4 20          	add    $0x20,%rsp
    b18c:	5d                   	pop    %rbp
    b18d:	c3                   	ret
    b18e:	66 90                	xchg   %ax,%ax

000000000000b190 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJlPKcEEERKNS_18__format_arg_storeIS7_JDpT_EEE>:
      : __size_(sizeof...(_Args)) {
    b190:	55                   	push   %rbp
    b191:	48 89 e5             	mov    %rsp,%rbp
    b194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b198:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b19c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b1a0:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
        __values_ = __store.__storage.__values_;
    b1a7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b1ab:	48 89 48 08          	mov    %rcx,0x8(%rax)
        __types_  = __store.__storage.__types_;
    b1af:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b1b3:	48 8b 49 20          	mov    0x20(%rcx),%rcx
    b1b7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  }
    b1bb:	5d                   	pop    %rbp
    b1bc:	c3                   	ret
    b1bd:	0f 1f 00             	nopl   (%rax)

000000000000b1c0 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlPKcEEC2B8nn210000ERlRS9_>:
  _LIBCPP_HIDE_FROM_ABI __format_arg_store(_Args&... __args) noexcept {
    b1c0:	55                   	push   %rbp
    b1c1:	48 89 e5             	mov    %rsp,%rbp
    b1c4:	48 83 ec 20          	sub    $0x20,%rsp
    b1c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b1cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b1d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    b1d4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b1d8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    b1dc:	e8 1f 00 00 00       	call   b200 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm2EEC2Ev>
    b1e1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
        __format::__create_packed_storage(__storage.__types_, __storage.__values_, __args...);
    b1e5:	48 89 f7             	mov    %rsi,%rdi
    b1e8:	48 83 c7 20          	add    $0x20,%rdi
    b1ec:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b1f0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b1f4:	e8 67 00 00 00       	call   b260 <_ZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_>
  }
    b1f9:	48 83 c4 20          	add    $0x20,%rsp
    b1fd:	5d                   	pop    %rbp
    b1fe:	c3                   	ret
    b1ff:	90                   	nop

000000000000b200 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm2EEC2Ev>:
struct __packed_format_arg_store {
    b200:	55                   	push   %rbp
    b201:	48 89 e5             	mov    %rsp,%rbp
    b204:	48 83 ec 30          	sub    $0x30,%rsp
    b208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b20c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b210:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    b214:	48 89 c1             	mov    %rax,%rcx
    b217:	48 83 c1 20          	add    $0x20,%rcx
    b21b:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    b21f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b223:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    b227:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b22b:	e8 70 fc ff ff       	call   aea0 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ev>
    b230:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b234:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b238:	48 83 c0 10          	add    $0x10,%rax
    b23c:	48 39 c8             	cmp    %rcx,%rax
    b23f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b243:	75 de                	jne    b223 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm2EEC2Ev+0x23>
    b245:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  uint64_t __types_ = 0;
    b249:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    b250:	00 
struct __packed_format_arg_store {
    b251:	48 83 c4 30          	add    $0x30,%rsp
    b255:	5d                   	pop    %rbp
    b256:	c3                   	ret
    b257:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b25e:	00 00 

000000000000b260 <_ZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_>:
__create_packed_storage(uint64_t& __types, __basic_format_arg_value<_Context>* __values, _Args&... __args) noexcept {
    b260:	55                   	push   %rbp
    b261:	48 89 e5             	mov    %rsp,%rbp
    b264:	48 83 ec 70          	sub    $0x70,%rsp
    b268:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b26c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b270:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    b274:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  int __shift = 0;
    b278:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
      [&] {
    b27f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b283:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b287:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    b28b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b28f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b293:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b297:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    b29b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b29f:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    b2a3:	e8 38 00 00 00       	call   b2e0 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE0_clEv>
    b2a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b2ac:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    b2b0:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    b2b4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    b2b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b2bc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b2c0:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    b2c4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    b2c8:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    b2cc:	e8 af 00 00 00       	call   b380 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv>
}
    b2d1:	48 83 c4 70          	add    $0x70,%rsp
    b2d5:	5d                   	pop    %rbp
    b2d6:	c3                   	ret
    b2d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b2de:	00 00 

000000000000b2e0 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE0_clEv>:
      [&] {
    b2e0:	55                   	push   %rbp
    b2e1:	48 89 e5             	mov    %rsp,%rbp
    b2e4:	48 83 ec 40          	sub    $0x40,%rsp
    b2e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b2ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b2f0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        basic_format_arg<_Context> __arg = __format::__create_format_arg<_Context>(__args);
    b2f4:	48 8b 30             	mov    (%rax),%rsi
    b2f7:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    b2fb:	e8 50 fc ff ff       	call   af50 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEElEENS_16basic_format_argIT_EERT0_>
    b300:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        if (__shift != 0)
    b304:	48 8b 40 08          	mov    0x8(%rax),%rax
    b308:	83 38 00             	cmpl   $0x0,(%rax)
    b30b:	74 22                	je     b32f <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE0_clEv+0x4f>
    b30d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types |= static_cast<uint64_t>(__arg.__type_) << __shift;
    b311:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    b315:	89 ca                	mov    %ecx,%edx
    b317:	48 8b 48 08          	mov    0x8(%rax),%rcx
    b31b:	8b 09                	mov    (%rcx),%ecx
    b31d:	48 d3 e2             	shl    %cl,%rdx
    b320:	48 89 d1             	mov    %rdx,%rcx
    b323:	48 8b 40 10          	mov    0x10(%rax),%rax
    b327:	48 0b 08             	or     (%rax),%rcx
    b32a:	48 89 08             	mov    %rcx,(%rax)
    b32d:	eb 0f                	jmp    b33e <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE0_clEv+0x5e>
    b32f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types = static_cast<uint64_t>(__arg.__type_);
    b333:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    b337:	48 8b 40 10          	mov    0x10(%rax),%rax
    b33b:	48 89 08             	mov    %rcx,(%rax)
    b33e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        __shift += __packed_arg_t_bits;
    b342:	48 8b 48 08          	mov    0x8(%rax),%rcx
    b346:	8b 11                	mov    (%rcx),%edx
    b348:	83 c2 05             	add    $0x5,%edx
    b34b:	89 11                	mov    %edx,(%rcx)
        *__values++ = __arg.__value_;
    b34d:	48 8b 48 18          	mov    0x18(%rax),%rcx
    b351:	48 8b 01             	mov    (%rcx),%rax
    b354:	48 89 c2             	mov    %rax,%rdx
    b357:	48 83 c2 10          	add    $0x10,%rdx
    b35b:	48 89 11             	mov    %rdx,(%rcx)
    b35e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b362:	48 89 08             	mov    %rcx,(%rax)
    b365:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    b369:	48 89 48 08          	mov    %rcx,0x8(%rax)
      }(),
    b36d:	48 83 c4 40          	add    $0x40,%rsp
    b371:	5d                   	pop    %rbp
    b372:	c3                   	ret
    b373:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b37a:	00 00 00 
    b37d:	0f 1f 00             	nopl   (%rax)

000000000000b380 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv>:
      [&] {
    b380:	55                   	push   %rbp
    b381:	48 89 e5             	mov    %rsp,%rbp
    b384:	48 83 ec 40          	sub    $0x40,%rsp
    b388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b38c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b390:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        basic_format_arg<_Context> __arg = __format::__create_format_arg<_Context>(__args);
    b394:	48 8b 30             	mov    (%rax),%rsi
    b397:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    b39b:	e8 80 00 00 00       	call   b420 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEPKcEENS_16basic_format_argIT_EERT0_>
    b3a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        if (__shift != 0)
    b3a4:	48 8b 40 08          	mov    0x8(%rax),%rax
    b3a8:	83 38 00             	cmpl   $0x0,(%rax)
    b3ab:	74 22                	je     b3cf <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv+0x4f>
    b3ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types |= static_cast<uint64_t>(__arg.__type_) << __shift;
    b3b1:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    b3b5:	89 ca                	mov    %ecx,%edx
    b3b7:	48 8b 48 08          	mov    0x8(%rax),%rcx
    b3bb:	8b 09                	mov    (%rcx),%ecx
    b3bd:	48 d3 e2             	shl    %cl,%rdx
    b3c0:	48 89 d1             	mov    %rdx,%rcx
    b3c3:	48 8b 40 10          	mov    0x10(%rax),%rax
    b3c7:	48 0b 08             	or     (%rax),%rcx
    b3ca:	48 89 08             	mov    %rcx,(%rax)
    b3cd:	eb 0f                	jmp    b3de <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlPKcEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv+0x5e>
    b3cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types = static_cast<uint64_t>(__arg.__type_);
    b3d3:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    b3d7:	48 8b 40 10          	mov    0x10(%rax),%rax
    b3db:	48 89 08             	mov    %rcx,(%rax)
    b3de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        __shift += __packed_arg_t_bits;
    b3e2:	48 8b 48 08          	mov    0x8(%rax),%rcx
    b3e6:	8b 11                	mov    (%rcx),%edx
    b3e8:	83 c2 05             	add    $0x5,%edx
    b3eb:	89 11                	mov    %edx,(%rcx)
        *__values++ = __arg.__value_;
    b3ed:	48 8b 48 18          	mov    0x18(%rax),%rcx
    b3f1:	48 8b 01             	mov    (%rcx),%rax
    b3f4:	48 89 c2             	mov    %rax,%rdx
    b3f7:	48 83 c2 10          	add    $0x10,%rdx
    b3fb:	48 89 11             	mov    %rdx,(%rcx)
    b3fe:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b402:	48 89 08             	mov    %rcx,(%rax)
    b405:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    b409:	48 89 48 08          	mov    %rcx,0x8(%rax)
      }(),
    b40d:	48 83 c4 40          	add    $0x40,%rsp
    b411:	5d                   	pop    %rbp
    b412:	c3                   	ret
    b413:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b41a:	00 00 00 
    b41d:	0f 1f 00             	nopl   (%rax)

000000000000b420 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEPKcEENS_16basic_format_argIT_EERT0_>:
_LIBCPP_HIDE_FROM_ABI basic_format_arg<_Context> __create_format_arg(_Tp& __value) noexcept {
    b420:	55                   	push   %rbp
    b421:	48 89 e5             	mov    %rsp,%rbp
    b424:	48 83 ec 30          	sub    $0x30,%rsp
    b428:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    b42c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b430:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  constexpr __arg_t __arg = __format::__determine_arg_t<_Context, _Dp>();
    b434:	c6 45 f7 0c          	movb   $0xc,-0x9(%rbp)
    return basic_format_arg<_Context>{__arg, __value};
    b438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b43c:	48 8b 30             	mov    (%rax),%rsi
    b43f:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    b443:	e8 28 00 00 00       	call   b470 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000EPKc>
    b448:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    b44c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b450:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b454:	be 0c 00 00 00       	mov    $0xc,%esi
    b459:	e8 62 fb ff ff       	call   afc0 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000ENS3_7__arg_tENS_24__basic_format_arg_valueIS7_EE>
    b45e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b462:	48 83 c4 30          	add    $0x30,%rsp
    b466:	5d                   	pop    %rbp
    b467:	c3                   	ret
    b468:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    b46f:	00 

000000000000b470 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000EPKc>:
  _LIBCPP_HIDE_FROM_ABI __basic_format_arg_value(const _CharT* __value) noexcept : __const_char_type_ptr_(__value) {}
    b470:	55                   	push   %rbp
    b471:	48 89 e5             	mov    %rsp,%rbp
    b474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b478:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b47c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b480:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b484:	48 89 08             	mov    %rcx,(%rax)
    b487:	5d                   	pop    %rbp
    b488:	c3                   	ret
    b489:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000b490 <_ZN5logz43logIJRlRKmEEEvNS_5LevelENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEDpOT_>:
    {  return log(get_global_logger(), level, fmt, ustl::forward<Args>(args)...);  }
    b490:	55                   	push   %rbp
    b491:	48 89 e5             	mov    %rsp,%rbp
    b494:	48 83 ec 50          	sub    $0x50,%rsp
    b498:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b49c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    b4a0:	89 7d dc             	mov    %edi,-0x24(%rbp)
    b4a3:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    b4a7:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
    b4ab:	e8 b0 00 02 00       	call   2b560 <_ZN5logz417get_global_loggerEv>
    b4b0:	48 89 c7             	mov    %rax,%rdi
    b4b3:	8b 75 dc             	mov    -0x24(%rbp),%esi
    b4b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b4ba:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b4be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b4c2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b4c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b4ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b4ce:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
    b4d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b4d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b4da:	4c 8b 4d f8          	mov    -0x8(%rbp),%r9
    b4de:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    b4e2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    b4e6:	e8 15 00 00 00       	call   b500 <_ZN5logz43logIJRlRKmEEEvRNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEDpOT_>
    b4eb:	48 83 c4 50          	add    $0x50,%rsp
    b4ef:	5d                   	pop    %rbp
    b4f0:	c3                   	ret
    b4f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b4f8:	00 00 00 
    b4fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000b500 <_ZN5logz43logIJRlRKmEEEvRNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEDpOT_>:
    {  return log_impl(logger, level, fmt, ustl::fmt::make_format_args(args...));  }
    b500:	55                   	push   %rbp
    b501:	48 89 e5             	mov    %rsp,%rbp
    b504:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    b50b:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    b50f:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    b513:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b517:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    b51a:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    b51e:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    b522:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b526:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    b52d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    b530:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    b536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b53a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b53e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b542:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b546:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    b54a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b54e:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
    b555:	e8 46 00 00 00       	call   b5a0 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlKmEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSB_>
    b55a:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    b55e:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    b565:	e8 66 00 00 00       	call   b5d0 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJlKmEEERKNS_18__format_arg_storeIS7_JDpT_EEE>
    b56a:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    b571:	8b b5 6c ff ff ff    	mov    -0x94(%rbp),%esi
    b577:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    b57b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    b57f:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
    b583:	e8 c8 dc 00 00       	call   19250 <_ZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE>
    b588:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    b58f:	5d                   	pop    %rbp
    b590:	c3                   	ret
    b591:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b598:	00 00 00 
    b59b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000b5a0 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlKmEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSB_>:
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI __format_arg_store<_Context, _Args...> make_format_args(_Args&... __args) {
    b5a0:	55                   	push   %rbp
    b5a1:	48 89 e5             	mov    %rsp,%rbp
    b5a4:	48 83 ec 20          	sub    $0x20,%rsp
    b5a8:	48 89 f8             	mov    %rdi,%rax
    b5ab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b5af:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    b5b3:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  return std::__format_arg_store<_Context, _Args...>(__args...);
    b5b7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    b5bb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b5bf:	e8 3c 00 00 00       	call   b600 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlKmEEC2B8nn210000ERlRS8_>
    b5c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b5c8:	48 83 c4 20          	add    $0x20,%rsp
    b5cc:	5d                   	pop    %rbp
    b5cd:	c3                   	ret
    b5ce:	66 90                	xchg   %ax,%ax

000000000000b5d0 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJlKmEEERKNS_18__format_arg_storeIS7_JDpT_EEE>:
      : __size_(sizeof...(_Args)) {
    b5d0:	55                   	push   %rbp
    b5d1:	48 89 e5             	mov    %rsp,%rbp
    b5d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b5d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b5dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b5e0:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
        __values_ = __store.__storage.__values_;
    b5e7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b5eb:	48 89 48 08          	mov    %rcx,0x8(%rax)
        __types_  = __store.__storage.__types_;
    b5ef:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b5f3:	48 8b 49 20          	mov    0x20(%rcx),%rcx
    b5f7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  }
    b5fb:	5d                   	pop    %rbp
    b5fc:	c3                   	ret
    b5fd:	0f 1f 00             	nopl   (%rax)

000000000000b600 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJlKmEEC2B8nn210000ERlRS8_>:
  _LIBCPP_HIDE_FROM_ABI __format_arg_store(_Args&... __args) noexcept {
    b600:	55                   	push   %rbp
    b601:	48 89 e5             	mov    %rsp,%rbp
    b604:	48 83 ec 20          	sub    $0x20,%rsp
    b608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b60c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b610:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    b614:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b618:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    b61c:	e8 df fb ff ff       	call   b200 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm2EEC2Ev>
    b621:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
        __format::__create_packed_storage(__storage.__types_, __storage.__values_, __args...);
    b625:	48 89 f7             	mov    %rsi,%rdi
    b628:	48 83 c7 20          	add    $0x20,%rdi
    b62c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b630:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b634:	e8 07 00 00 00       	call   b640 <_ZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_>
  }
    b639:	48 83 c4 20          	add    $0x20,%rsp
    b63d:	5d                   	pop    %rbp
    b63e:	c3                   	ret
    b63f:	90                   	nop

000000000000b640 <_ZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_>:
__create_packed_storage(uint64_t& __types, __basic_format_arg_value<_Context>* __values, _Args&... __args) noexcept {
    b640:	55                   	push   %rbp
    b641:	48 89 e5             	mov    %rsp,%rbp
    b644:	48 83 ec 70          	sub    $0x70,%rsp
    b648:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b64c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b650:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    b654:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  int __shift = 0;
    b658:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
      [&] {
    b65f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b663:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b667:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    b66b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b66f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b673:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b677:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    b67b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b67f:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    b683:	e8 38 00 00 00       	call   b6c0 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE0_clEv>
    b688:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b68c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    b690:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    b694:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    b698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b69c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b6a0:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    b6a4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    b6a8:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    b6ac:	e8 af 00 00 00       	call   b760 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv>
}
    b6b1:	48 83 c4 70          	add    $0x70,%rsp
    b6b5:	5d                   	pop    %rbp
    b6b6:	c3                   	ret
    b6b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b6be:	00 00 

000000000000b6c0 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE0_clEv>:
      [&] {
    b6c0:	55                   	push   %rbp
    b6c1:	48 89 e5             	mov    %rsp,%rbp
    b6c4:	48 83 ec 40          	sub    $0x40,%rsp
    b6c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b6cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6d0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        basic_format_arg<_Context> __arg = __format::__create_format_arg<_Context>(__args);
    b6d4:	48 8b 30             	mov    (%rax),%rsi
    b6d7:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    b6db:	e8 70 f8 ff ff       	call   af50 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEElEENS_16basic_format_argIT_EERT0_>
    b6e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        if (__shift != 0)
    b6e4:	48 8b 40 08          	mov    0x8(%rax),%rax
    b6e8:	83 38 00             	cmpl   $0x0,(%rax)
    b6eb:	74 22                	je     b70f <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE0_clEv+0x4f>
    b6ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types |= static_cast<uint64_t>(__arg.__type_) << __shift;
    b6f1:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    b6f5:	89 ca                	mov    %ecx,%edx
    b6f7:	48 8b 48 08          	mov    0x8(%rax),%rcx
    b6fb:	8b 09                	mov    (%rcx),%ecx
    b6fd:	48 d3 e2             	shl    %cl,%rdx
    b700:	48 89 d1             	mov    %rdx,%rcx
    b703:	48 8b 40 10          	mov    0x10(%rax),%rax
    b707:	48 0b 08             	or     (%rax),%rcx
    b70a:	48 89 08             	mov    %rcx,(%rax)
    b70d:	eb 0f                	jmp    b71e <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE0_clEv+0x5e>
    b70f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types = static_cast<uint64_t>(__arg.__type_);
    b713:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    b717:	48 8b 40 10          	mov    0x10(%rax),%rax
    b71b:	48 89 08             	mov    %rcx,(%rax)
    b71e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        __shift += __packed_arg_t_bits;
    b722:	48 8b 48 08          	mov    0x8(%rax),%rcx
    b726:	8b 11                	mov    (%rcx),%edx
    b728:	83 c2 05             	add    $0x5,%edx
    b72b:	89 11                	mov    %edx,(%rcx)
        *__values++ = __arg.__value_;
    b72d:	48 8b 48 18          	mov    0x18(%rax),%rcx
    b731:	48 8b 01             	mov    (%rcx),%rax
    b734:	48 89 c2             	mov    %rax,%rdx
    b737:	48 83 c2 10          	add    $0x10,%rdx
    b73b:	48 89 11             	mov    %rdx,(%rcx)
    b73e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b742:	48 89 08             	mov    %rcx,(%rax)
    b745:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    b749:	48 89 48 08          	mov    %rcx,0x8(%rax)
      }(),
    b74d:	48 83 c4 40          	add    $0x40,%rsp
    b751:	5d                   	pop    %rbp
    b752:	c3                   	ret
    b753:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b75a:	00 00 00 
    b75d:	0f 1f 00             	nopl   (%rax)

000000000000b760 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv>:
      [&] {
    b760:	55                   	push   %rbp
    b761:	48 89 e5             	mov    %rsp,%rbp
    b764:	48 83 ec 40          	sub    $0x40,%rsp
    b768:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b76c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b770:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        basic_format_arg<_Context> __arg = __format::__create_format_arg<_Context>(__args);
    b774:	48 8b 30             	mov    (%rax),%rsi
    b777:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    b77b:	e8 80 00 00 00       	call   b800 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEKmEENS_16basic_format_argIT_EERT0_>
    b780:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        if (__shift != 0)
    b784:	48 8b 40 08          	mov    0x8(%rax),%rax
    b788:	83 38 00             	cmpl   $0x0,(%rax)
    b78b:	74 22                	je     b7af <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv+0x4f>
    b78d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types |= static_cast<uint64_t>(__arg.__type_) << __shift;
    b791:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    b795:	89 ca                	mov    %ecx,%edx
    b797:	48 8b 48 08          	mov    0x8(%rax),%rcx
    b79b:	8b 09                	mov    (%rcx),%ecx
    b79d:	48 d3 e2             	shl    %cl,%rdx
    b7a0:	48 89 d1             	mov    %rdx,%rcx
    b7a3:	48 8b 40 10          	mov    0x10(%rax),%rax
    b7a7:	48 0b 08             	or     (%rax),%rcx
    b7aa:	48 89 08             	mov    %rcx,(%rax)
    b7ad:	eb 0f                	jmp    b7be <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJlKmEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv+0x5e>
    b7af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types = static_cast<uint64_t>(__arg.__type_);
    b7b3:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
    b7b7:	48 8b 40 10          	mov    0x10(%rax),%rax
    b7bb:	48 89 08             	mov    %rcx,(%rax)
    b7be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        __shift += __packed_arg_t_bits;
    b7c2:	48 8b 48 08          	mov    0x8(%rax),%rcx
    b7c6:	8b 11                	mov    (%rcx),%edx
    b7c8:	83 c2 05             	add    $0x5,%edx
    b7cb:	89 11                	mov    %edx,(%rcx)
        *__values++ = __arg.__value_;
    b7cd:	48 8b 48 18          	mov    0x18(%rax),%rcx
    b7d1:	48 8b 01             	mov    (%rcx),%rax
    b7d4:	48 89 c2             	mov    %rax,%rdx
    b7d7:	48 83 c2 10          	add    $0x10,%rdx
    b7db:	48 89 11             	mov    %rdx,(%rcx)
    b7de:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b7e2:	48 89 08             	mov    %rcx,(%rax)
    b7e5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    b7e9:	48 89 48 08          	mov    %rcx,0x8(%rax)
      }(),
    b7ed:	48 83 c4 40          	add    $0x40,%rsp
    b7f1:	5d                   	pop    %rbp
    b7f2:	c3                   	ret
    b7f3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b7fa:	00 00 00 
    b7fd:	0f 1f 00             	nopl   (%rax)

000000000000b800 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEKmEENS_16basic_format_argIT_EERT0_>:
_LIBCPP_HIDE_FROM_ABI basic_format_arg<_Context> __create_format_arg(_Tp& __value) noexcept {
    b800:	55                   	push   %rbp
    b801:	48 89 e5             	mov    %rsp,%rbp
    b804:	48 83 ec 30          	sub    $0x30,%rsp
    b808:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    b80c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b810:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  constexpr __arg_t __arg = __format::__determine_arg_t<_Context, _Dp>();
    b814:	c6 45 f7 07          	movb   $0x7,-0x9(%rbp)
    return basic_format_arg<_Context>{__arg, static_cast<unsigned long long>(__value)};
    b818:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b81c:	48 8b 30             	mov    (%rax),%rsi
    b81f:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    b823:	e8 28 00 00 00       	call   b850 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ey>
    b828:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    b82c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b830:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b834:	be 07 00 00 00       	mov    $0x7,%esi
    b839:	e8 82 f7 ff ff       	call   afc0 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000ENS3_7__arg_tENS_24__basic_format_arg_valueIS7_EE>
    b83e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b842:	48 83 c4 30          	add    $0x30,%rsp
    b846:	5d                   	pop    %rbp
    b847:	c3                   	ret
    b848:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    b84f:	00 

000000000000b850 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ey>:
      : __unsigned_long_long_(__value) {}
    b850:	55                   	push   %rbp
    b851:	48 89 e5             	mov    %rsp,%rbp
    b854:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b858:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b85c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b860:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b864:	48 89 08             	mov    %rcx,(%rax)
    b867:	5d                   	pop    %rbp
    b868:	c3                   	ret
    b869:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000b870 <__cxx_global_var_init>:
    b870:	55                   	push   %rbp
    b871:	48 89 e5             	mov    %rsp,%rbp
    CXX11_CONSTEXPR
    static MmuFlags const PRESET_MMUF = MmuFlags::PermMask;

    INIT_DATA
    static PresetVmaInfo NAMED_PRESET_VMAS[] = {
        {
    b874:	48 8d 05 40 37 02 00 	lea    0x23740(%rip),%rax        # 2efbb <.L.str>
    b87b:	48 89 05 ae 80 02 00 	mov    %rax,0x280ae(%rip)        # 33930 <_ZN4ours3memL17NAMED_PRESET_VMASE>
    b882:	48 8d 0d 77 47 ff ff 	lea    -0xb889(%rip),%rcx        # 0 <_DYNAMIC>
    b889:	48 89 0d a8 80 02 00 	mov    %rcx,0x280a8(%rip)        # 33938 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x8>
    b890:	48 8d 05 69 d7 02 00 	lea    0x2d769(%rip),%rax        # 39000 <__bss_end>
    b897:	48 29 c8             	sub    %rcx,%rax
    b89a:	48 89 05 9f 80 02 00 	mov    %rax,0x2809f(%rip)        # 33940 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x10>
    b8a1:	48 c7 05 9c 80 02 00 	movq   $0xe,0x2809c(%rip)        # 33948 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x18>
    b8a8:	0e 00 00 00 
    b8ac:	48 c7 05 99 80 02 00 	movq   $0x20000,0x28099(%rip)        # 33950 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x20>
    b8b3:	00 00 02 00 
    b8b7:	48 8d 05 42 87 02 00 	lea    0x28742(%rip),%rax        # 34000 <_ZN4ours3memL11PRESET_VMASE>
    b8be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b8c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8c6:	48 89 05 8b 80 02 00 	mov    %rax,0x2808b(%rip)        # 33958 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x28>
            .size = usize(kImageEnd - kImageStart),
            .rights = PRESET_MMUF,
            .flags = VmaFlags::Mapped,
            .altvma = PRESET_VMAS[KernelImageVma].data(),
        },
        {
    b8cd:	48 8d 05 ef 36 02 00 	lea    0x236ef(%rip),%rax        # 2efc3 <.L.str.1>
    b8d4:	48 89 05 85 80 02 00 	mov    %rax,0x28085(%rip)        # 33960 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x30>
    b8db:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
    b8e2:	ff ff ff 
    b8e5:	48 89 05 7c 80 02 00 	mov    %rax,0x2807c(%rip)        # 33968 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x38>
    b8ec:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
    b8f3:	00 00 00 
    b8f6:	48 89 05 73 80 02 00 	mov    %rax,0x28073(%rip)        # 33970 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x40>
    b8fd:	48 c7 05 70 80 02 00 	movq   $0xe,0x28070(%rip)        # 33978 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x48>
    b904:	0e 00 00 00 
    b908:	48 c7 05 6d 80 02 00 	movq   $0x20000,0x2806d(%rip)        # 33980 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x50>
    b90f:	00 00 02 00 
    b913:	48 8d 05 96 87 02 00 	lea    0x28796(%rip),%rax        # 340b0 <_ZN4ours3memL11PRESET_VMASE+0xb0>
    b91a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b91e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b922:	48 89 05 5f 80 02 00 	mov    %rax,0x2805f(%rip)        # 33988 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x58>
            .size = PhysMap::kSize,
            .rights = PRESET_MMUF,
            .flags = VmaFlags::Mapped,
            .altvma = PRESET_VMAS[PhysMapVma].data(),
        },
        {
    b929:	48 8d 05 9d 36 02 00 	lea    0x2369d(%rip),%rax        # 2efcd <.L.str.2>
    b930:	48 89 05 59 80 02 00 	mov    %rax,0x28059(%rip)        # 33990 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x60>
    b937:	48 b8 00 00 00 00 88 	movabs $0xffffff8800000000,%rax
    b93e:	ff ff ff 
    b941:	48 89 05 50 80 02 00 	mov    %rax,0x28050(%rip)        # 33998 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x68>
    b948:	48 c7 05 4d 80 02 00 	movq   $0x200000,0x2804d(%rip)        # 339a0 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x70>
    b94f:	00 00 20 00 
    b953:	48 c7 05 4a 80 02 00 	movq   $0xe,0x2804a(%rip)        # 339a8 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x78>
    b95a:	0e 00 00 00 
    b95e:	48 c7 05 47 80 02 00 	movq   $0x0,0x28047(%rip)        # 339b0 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x80>
    b965:	00 00 00 00 
    b969:	48 8d 05 a0 88 02 00 	lea    0x288a0(%rip),%rax        # 34210 <_ZN4ours3memL11PRESET_VMASE+0x210>
    b970:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b974:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b978:	48 89 05 39 80 02 00 	mov    %rax,0x28039(%rip)        # 339b8 <_ZN4ours3memL17NAMED_PRESET_VMASE+0x88>
            .name = "k:padding",
            .base = PhysMap::kVirtBase + PhysMap::kSize,
            // Reserve a max page to prevent over prevent overwring.
            .size = MAX_PAGE_SIZE,
            .rights = PRESET_MMUF,
            .altvma = PRESET_VMAS[PaddingVma].data(),
    b97f:	5d                   	pop    %rbp
    b980:	c3                   	ret
    b981:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    b988:	0f 1f 84 00 00 00 00 
    b98f:	00 

000000000000b990 <__cxx_global_var_init.4>:
    b990:	55                   	push   %rbp
    b991:	48 89 e5             	mov    %rsp,%rbp
    }

    /// Used in init_vmm_postheap
    INIT_DATA
    static PresetVmaInfo kKernelVmas[] = {
        {
    b994:	48 8d 05 3c 36 02 00 	lea    0x2363c(%rip),%rax        # 2efd7 <.L.str.3>
    b99b:	48 89 05 1e 80 02 00 	mov    %rax,0x2801e(%rip)        # 339c0 <_ZN4ours3memL11kKernelVmasE>
    b9a2:	48 8d 0d df 67 ff ff 	lea    -0x9821(%rip),%rcx        # 2188 <__build_id_note_end>
    b9a9:	48 89 0d 18 80 02 00 	mov    %rcx,0x28018(%rip)        # 339c8 <_ZN4ours3memL11kKernelVmasE+0x8>
    b9b0:	48 8d 05 49 06 02 00 	lea    0x20649(%rip),%rax        # 2c000 <_ZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE12kPageSizeMapE>
    b9b7:	48 29 c8             	sub    %rcx,%rax
    b9ba:	48 89 05 0f 80 02 00 	mov    %rax,0x2800f(%rip)        # 339d0 <_ZN4ours3memL11kKernelVmasE+0x10>
    b9c1:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
    b9c8:	00 
    b9c9:	48 c7 45 f0 04 00 00 	movq   $0x4,-0x10(%rbp)
    b9d0:	00 
        static_cast<Underlying>(lhs) |
    b9d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        static_cast<Underlying>(rhs)
    b9d5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
        static_cast<Underlying>(lhs) |
    b9d9:	48 09 c8             	or     %rcx,%rax
    b9dc:	48 89 05 f5 7f 02 00 	mov    %rax,0x27ff5(%rip)        # 339d8 <_ZN4ours3memL11kKernelVmasE+0x18>
    b9e3:	48 c7 05 f2 7f 02 00 	movq   $0x0,0x27ff2(%rip)        # 339e0 <_ZN4ours3memL11kKernelVmasE+0x20>
    b9ea:	00 00 00 00 
    b9ee:	48 c7 05 ef 7f 02 00 	movq   $0x0,0x27fef(%rip)        # 339e8 <_ZN4ours3memL11kKernelVmasE+0x28>
    b9f5:	00 00 00 00 
            .name = "k:code",
            .base = VirtAddr(kKernelCodeStart),
            .size = usize(kKernelCodeEnd - kKernelCodeStart),
            .rights = MmuFlags::Executable | MmuFlags::Readable
        },
        {
    b9f9:	48 8d 05 de 35 02 00 	lea    0x235de(%rip),%rax        # 2efde <.L.str.5>
    ba00:	48 89 05 e9 7f 02 00 	mov    %rax,0x27fe9(%rip)        # 339f0 <_ZN4ours3memL11kKernelVmasE+0x30>
    ba07:	48 8d 0d c0 3d 02 00 	lea    0x23dc0(%rip),%rcx        # 2f7ce <__data_start>
    ba0e:	48 89 0d e3 7f 02 00 	mov    %rcx,0x27fe3(%rip)        # 339f8 <_ZN4ours3memL11kKernelVmasE+0x38>
    ba15:	48 8d 05 e4 65 02 00 	lea    0x265e4(%rip),%rax        # 32000 <start_kernel>
    ba1c:	48 29 c8             	sub    %rcx,%rax
    ba1f:	48 89 05 da 7f 02 00 	mov    %rax,0x27fda(%rip)        # 33a00 <_ZN4ours3memL11kKernelVmasE+0x40>
    ba26:	48 c7 45 e8 02 00 00 	movq   $0x2,-0x18(%rbp)
    ba2d:	00 
    ba2e:	48 c7 45 e0 04 00 00 	movq   $0x4,-0x20(%rbp)
    ba35:	00 
    ba36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        static_cast<Underlying>(rhs)
    ba3a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
        static_cast<Underlying>(lhs) |
    ba3e:	48 09 c8             	or     %rcx,%rax
    ba41:	48 89 05 c0 7f 02 00 	mov    %rax,0x27fc0(%rip)        # 33a08 <_ZN4ours3memL11kKernelVmasE+0x48>
    ba48:	48 c7 05 bd 7f 02 00 	movq   $0x0,0x27fbd(%rip)        # 33a10 <_ZN4ours3memL11kKernelVmasE+0x50>
    ba4f:	00 00 00 00 
    ba53:	48 c7 05 ba 7f 02 00 	movq   $0x0,0x27fba(%rip)        # 33a18 <_ZN4ours3memL11kKernelVmasE+0x58>
    ba5a:	00 00 00 00 
            .name = "k:data",
            .base = VirtAddr(kKernelDataStart),
            .size = usize(kKernelDataEnd - kKernelDataStart),
            .rights = MmuFlags::Writable | MmuFlags::Readable
        },
        {
    ba5e:	48 8d 05 80 35 02 00 	lea    0x23580(%rip),%rax        # 2efe5 <.L.str.6>
    ba65:	48 89 05 b4 7f 02 00 	mov    %rax,0x27fb4(%rip)        # 33a20 <_ZN4ours3memL11kKernelVmasE+0x60>
    ba6c:	48 8d 0d 8d 05 02 00 	lea    0x2058d(%rip),%rcx        # 2c000 <_ZN4arch6paging9X86PagingILNS0_14X86PagingLevelE3ELm52EE12kPageSizeMapE>
    ba73:	48 89 0d ae 7f 02 00 	mov    %rcx,0x27fae(%rip)        # 33a28 <_ZN4ours3memL11kKernelVmasE+0x68>
    ba7a:	48 8d 05 4d 3d 02 00 	lea    0x23d4d(%rip),%rax        # 2f7ce <__data_start>
    ba81:	48 29 c8             	sub    %rcx,%rax
    ba84:	48 89 05 a5 7f 02 00 	mov    %rax,0x27fa5(%rip)        # 33a30 <_ZN4ours3memL11kKernelVmasE+0x70>
    ba8b:	48 c7 05 a2 7f 02 00 	movq   $0x4,0x27fa2(%rip)        # 33a38 <_ZN4ours3memL11kKernelVmasE+0x78>
    ba92:	04 00 00 00 
    ba96:	48 c7 05 9f 7f 02 00 	movq   $0x0,0x27f9f(%rip)        # 33a40 <_ZN4ours3memL11kKernelVmasE+0x80>
    ba9d:	00 00 00 00 
    baa1:	48 c7 05 9c 7f 02 00 	movq   $0x0,0x27f9c(%rip)        # 33a48 <_ZN4ours3memL11kKernelVmasE+0x88>
    baa8:	00 00 00 00 
            .name = "k:rodata",
            .base = VirtAddr(kKernelRodataStart),
            .size = usize(kKernelRodataEnd - kKernelRodataStart),
            .rights = MmuFlags::Readable
        },
        {
    baac:	48 8d 05 3b 35 02 00 	lea    0x2353b(%rip),%rax        # 2efee <.L.str.7>
    bab3:	48 89 05 96 7f 02 00 	mov    %rax,0x27f96(%rip)        # 33a50 <_ZN4ours3memL11kKernelVmasE+0x90>
    baba:	48 8d 0d 3f 85 02 00 	lea    0x2853f(%rip),%rcx        # 34000 <_ZN4ours3memL11PRESET_VMASE>
    bac1:	48 89 0d 90 7f 02 00 	mov    %rcx,0x27f90(%rip)        # 33a58 <_ZN4ours3memL11kKernelVmasE+0x98>
    bac8:	48 8d 05 31 d5 02 00 	lea    0x2d531(%rip),%rax        # 39000 <__bss_end>
    bacf:	48 29 c8             	sub    %rcx,%rax
    bad2:	48 89 05 87 7f 02 00 	mov    %rax,0x27f87(%rip)        # 33a60 <_ZN4ours3memL11kKernelVmasE+0xa0>
    bad9:	48 c7 05 84 7f 02 00 	movq   $0x4,0x27f84(%rip)        # 33a68 <_ZN4ours3memL11kKernelVmasE+0xa8>
    bae0:	04 00 00 00 
    bae4:	48 c7 05 81 7f 02 00 	movq   $0x0,0x27f81(%rip)        # 33a70 <_ZN4ours3memL11kKernelVmasE+0xb0>
    baeb:	00 00 00 00 
    baef:	48 c7 05 7e 7f 02 00 	movq   $0x0,0x27f7e(%rip)        # 33a78 <_ZN4ours3memL11kKernelVmasE+0xb8>
    baf6:	00 00 00 00 
            .name = "k:bss",
            .base = VirtAddr(kKernelBssStart),
            .size = usize(kKernelBssEnd - kKernelBssStart),
            .rights = MmuFlags::Readable
        },
        {
    bafa:	48 8d 05 f3 34 02 00 	lea    0x234f3(%rip),%rax        # 2eff4 <.L.str.8>
    bb01:	48 89 05 78 7f 02 00 	mov    %rax,0x27f78(%rip)        # 33a80 <_ZN4ours3memL11kKernelVmasE+0xc0>
    bb08:	48 8d 0d f1 64 02 00 	lea    0x264f1(%rip),%rcx        # 32000 <start_kernel>
    bb0f:	48 89 0d 72 7f 02 00 	mov    %rcx,0x27f72(%rip)        # 33a88 <_ZN4ours3memL11kKernelVmasE+0xc8>
    bb16:	48 8d 05 e3 84 02 00 	lea    0x284e3(%rip),%rax        # 34000 <_ZN4ours3memL11PRESET_VMASE>
    bb1d:	48 29 c8             	sub    %rcx,%rax
    bb20:	48 89 05 69 7f 02 00 	mov    %rax,0x27f69(%rip)        # 33a90 <_ZN4ours3memL11kKernelVmasE+0xd0>
    bb27:	48 c7 45 d8 04 00 00 	movq   $0x4,-0x28(%rbp)
    bb2e:	00 
    bb2f:	48 c7 45 d0 02 00 00 	movq   $0x2,-0x30(%rbp)
    bb36:	00 
    bb37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        static_cast<Underlying>(rhs)
    bb3b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
        static_cast<Underlying>(lhs) |
    bb3f:	48 09 c8             	or     %rcx,%rax
    bb42:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    bb46:	48 c7 45 c0 08 00 00 	movq   $0x8,-0x40(%rbp)
    bb4d:	00 
    bb4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        static_cast<Underlying>(rhs)
    bb52:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
        static_cast<Underlying>(lhs) |
    bb56:	48 09 c8             	or     %rcx,%rax
    bb59:	48 89 05 38 7f 02 00 	mov    %rax,0x27f38(%rip)        # 33a98 <_ZN4ours3memL11kKernelVmasE+0xd8>
    bb60:	48 c7 05 35 7f 02 00 	movq   $0x0,0x27f35(%rip)        # 33aa0 <_ZN4ours3memL11kKernelVmasE+0xe0>
    bb67:	00 00 00 00 
    bb6b:	48 c7 05 32 7f 02 00 	movq   $0x0,0x27f32(%rip)        # 33aa8 <_ZN4ours3memL11kKernelVmasE+0xe8>
    bb72:	00 00 00 00 
            .name = "k:init",
            .base = VirtAddr(kKernelInitStart),
            .size = usize(kKernelInitEnd - kKernelInitStart),
            .rights = MmuFlags::Readable | MmuFlags::Writable | MmuFlags::Executable
    bb76:	5d                   	pop    %rbp
    bb77:	c3                   	ret
    bb78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    bb7f:	00 

000000000000bb80 <_GLOBAL__sub_I_init_vmm.cpp>:
    bb80:	55                   	push   %rbp
    bb81:	48 89 e5             	mov    %rsp,%rbp
    bb84:	e8 e7 fc ff ff       	call   b870 <__cxx_global_var_init>
    bb89:	e8 02 fe ff ff       	call   b990 <__cxx_global_var_init.4>
    bb8e:	5d                   	pop    %rbp
    bb8f:	c3                   	ret

000000000000bb90 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_>:
_LIBCPP_HIDE_FROM_ABI constexpr _Tp* construct_at(_Tp* __location, _Args&&... __args) {
    bb90:	55                   	push   %rbp
    bb91:	48 89 e5             	mov    %rsp,%rbp
    bb94:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
    bb9b:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bb9f:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    bba6:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    bbad:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    bbb4:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    bbbb:	4c 89 85 38 ff ff ff 	mov    %r8,-0xc8(%rbp)
    bbc2:	4c 89 8d 30 ff ff ff 	mov    %r9,-0xd0(%rbp)
  return ::new (static_cast<void*>(__location)) _Tp(std::forward<_Args>(__args)...);
    bbc9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    bbd0:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    bbd7:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
    bbde:	e8 cd 02 00 00       	call   beb0 <_ZNSt3__17forwardB8nn210000IRN4ustl2RcIN4ours3mem8VmAspaceENS1_12NullDisposerENS1_3mem9AllocatorIS5_EEmEEEEOT_Ru20__remove_reference_tISC_E>
    bbe3:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    bbea:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    bbee:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    bbf5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    bbf9:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
            : pointer_(other.pointer_),
    bc00:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    bc07:	48 8b 09             	mov    (%rcx),%rcx
    bc0a:	48 89 08             	mov    %rcx,(%rax)
              counter_(other.counter_)
    bc0d:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    bc14:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    bc18:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
    bc1c:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
    bc21:	74 21                	je     bc44 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0xb4>
    bc23:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
                counter_->inc_strong_ref();
    bc2a:	48 8b 40 08          	mov    0x8(%rax),%rax
    bc2e:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    bc32:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
        {  strong_counter_  += 1;  }
    bc36:	48 83 c7 18          	add    $0x18,%rdi
    bc3a:	be 01 00 00 00       	mov    $0x1,%esi
    bc3f:	e8 ac 02 00 00       	call   bef0 <_ZNSt3__113__atomic_baseImLb1EEpLB8nn210000Em>
    bc44:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
    bc4b:	e8 00 c7 ff ff       	call   8350 <_ZNSt3__17forwardB8nn210000IRKmEEOT_Ru20__remove_reference_tIS3_E>
    bc50:	48 8b 00             	mov    (%rax),%rax
    bc53:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    bc5a:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    bc61:	e8 ea c6 ff ff       	call   8350 <_ZNSt3__17forwardB8nn210000IRKmEEOT_Ru20__remove_reference_tIS3_E>
    bc66:	48 8b 00             	mov    (%rax),%rax
    bc69:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    bc70:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    bc77:	e8 44 02 00 00       	call   bec0 <_ZNSt3__17forwardB8nn210000IRKN4arch6paging8MmuFlagsEEEOT_Ru20__remove_reference_tIS6_E>
    bc7c:	48 8b 00             	mov    (%rax),%rax
    bc7f:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    bc86:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
    bc8d:	e8 3e 02 00 00       	call   bed0 <_ZNSt3__17forwardB8nn210000IRKN4ours3mem8VmaFlagsEEEOT_Ru20__remove_reference_tIS6_E>
    bc92:	48 8b 00             	mov    (%rax),%rax
    bc95:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    bc9c:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
    bca0:	e8 3b 02 00 00       	call   bee0 <_ZNSt3__17forwardB8nn210000IRKPKcEEOT_Ru20__remove_reference_tIS5_E>
    bca5:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
    bcac:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
    bcb3:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
    bcba:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
    bcc1:	4c 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%r9
    bcc8:	48 8b 30             	mov    (%rax),%rsi
    bccb:	48 89 e0             	mov    %rsp,%rax
    bcce:	48 89 30             	mov    %rsi,(%rax)
    bcd1:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    bcd8:	e8 23 4e 00 00       	call   10b00 <_ZN4ours3mem6VmAreaC1EN4ustl2RcINS0_8VmAspaceENS2_12NullDisposerENS2_3mem9AllocatorIS4_EEmEEmmN4arch6paging8MmuFlagsENS0_8VmaFlagsEPKc>
    bcdd:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    bce4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    bceb:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    bcf2:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
            if (counter_) {
    bcf9:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
    bcfe:	0f 84 90 01 00 00    	je     be94 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x304>
    bd04:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
                if (counter_->strong_count() == 1) {
    bd0b:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd0f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    bd13:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
        {  return strong_counter_;  }
    bd17:	48 83 c7 18          	add    $0x18,%rdi
    bd1b:	e8 d0 e0 ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
    bd20:	48 83 f8 01          	cmp    $0x1,%rax
    bd24:	0f 85 47 01 00 00    	jne    be71 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x2e1>
    bd2a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
    bd31:	48 8b 08             	mov    (%rax),%rcx
    bd34:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd38:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    bd3f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    bd43:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    bd47:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    bd4b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    bd4f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
            : pointer_(ptr),
    bd56:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    bd5a:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
    bd5d:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    bd61:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
    bd65:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
    bd6a:	74 21                	je     bd8d <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x1fd>
    bd6c:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
                counter_->enable_weak();
    bd73:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd77:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    bd7b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
        {  weak_counter_  = 1;  }
    bd7f:	48 83 c7 10          	add    $0x10,%rdi
    bd83:	be 01 00 00 00       	mov    $0x1,%esi
    bd88:	e8 43 e1 ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
    bd8d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
                    counter_->disposer()(pointer_);
    bd94:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd98:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    bd9c:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
        {  return this->Base1::as_ref();  }
    bda0:	48 83 c7 08          	add    $0x8,%rdi
    bda4:	e8 17 e2 ff ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
    bda9:	48 89 c7             	mov    %rax,%rdi
    bdac:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    bdb3:	48 8b 30             	mov    (%rax),%rsi
    bdb6:	31 c0                	xor    %eax,%eax
    bdb8:	e8 23 e0 ff ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
    bdbd:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    bdc4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    bdc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    bdcc:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
            if (counter_) {
    bdd3:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
    bdd8:	0f 84 91 00 00 00    	je     be6f <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x2df>
    bdde:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
                if (counter_->weak_count() == 1) {
    bde5:	48 8b 40 08          	mov    0x8(%rax),%rax
    bde9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    bded:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
        {  return weak_counter_;  }
    bdf1:	48 83 c7 10          	add    $0x10,%rdi
    bdf5:	e8 f6 df ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
    bdfa:	48 83 f8 01          	cmp    $0x1,%rax
    bdfe:	75 4c                	jne    be4c <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x2bc>
    be00:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
    be07:	48 8b 40 08          	mov    0x8(%rax),%rax
    be0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    be0f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
        {  return this->Base2::as_ref();  }
    be13:	48 83 c7 09          	add    $0x9,%rdi
    be17:	e8 e4 e1 ff ff       	call   a000 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EE6as_refEv>
    be1c:	48 89 c1             	mov    %rax,%rcx
    be1f:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    be26:	48 8b 00             	mov    (%rax),%rax
    be29:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    be2d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    be31:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    be38:	00 
    be39:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    be3d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    be41:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    be45:	e8 86 e1 ff ff       	call   9fd0 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmAspaceEE10deallocateEPS4_m>
                } else {
    be4a:	eb 21                	jmp    be6d <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x2dd>
    be4c:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
                    counter_->dec_weak_ref();
    be53:	48 8b 40 08          	mov    0x8(%rax),%rax
    be57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    be5b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  weak_counter_ -= 1;  }
    be5f:	48 83 c7 10          	add    $0x10,%rdi
    be63:	be 01 00 00 00       	mov    $0x1,%esi
    be68:	e8 a3 e1 ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
    be6d:	eb 00                	jmp    be6f <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x2df>
                } else {
    be6f:	eb 21                	jmp    be92 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x302>
    be71:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
                    counter_->dec_strong_ref();
    be78:	48 8b 40 08          	mov    0x8(%rax),%rax
    be7c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    be80:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        {  strong_counter_  -= 1;  }
    be84:	48 83 c7 18          	add    $0x18,%rdi
    be88:	be 01 00 00 00       	mov    $0x1,%esi
    be8d:	e8 7e e1 ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
    be92:	eb 00                	jmp    be94 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_+0x304>
    be94:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    be9b:	48 81 c4 30 01 00 00 	add    $0x130,%rsp
    bea2:	5d                   	pop    %rbp
    bea3:	c3                   	ret
    bea4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    beab:	00 00 00 
    beae:	66 90                	xchg   %ax,%ax

000000000000beb0 <_ZNSt3__17forwardB8nn210000IRN4ustl2RcIN4ours3mem8VmAspaceENS1_12NullDisposerENS1_3mem9AllocatorIS5_EEmEEEEOT_Ru20__remove_reference_tISC_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    beb0:	55                   	push   %rbp
    beb1:	48 89 e5             	mov    %rsp,%rbp
    beb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    beb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bebc:	5d                   	pop    %rbp
    bebd:	c3                   	ret
    bebe:	66 90                	xchg   %ax,%ax

000000000000bec0 <_ZNSt3__17forwardB8nn210000IRKN4arch6paging8MmuFlagsEEEOT_Ru20__remove_reference_tIS6_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    bec0:	55                   	push   %rbp
    bec1:	48 89 e5             	mov    %rsp,%rbp
    bec4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    bec8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    becc:	5d                   	pop    %rbp
    becd:	c3                   	ret
    bece:	66 90                	xchg   %ax,%ax

000000000000bed0 <_ZNSt3__17forwardB8nn210000IRKN4ours3mem8VmaFlagsEEEOT_Ru20__remove_reference_tIS6_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    bed0:	55                   	push   %rbp
    bed1:	48 89 e5             	mov    %rsp,%rbp
    bed4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    bed8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bedc:	5d                   	pop    %rbp
    bedd:	c3                   	ret
    bede:	66 90                	xchg   %ax,%ax

000000000000bee0 <_ZNSt3__17forwardB8nn210000IRKPKcEEOT_Ru20__remove_reference_tIS5_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    bee0:	55                   	push   %rbp
    bee1:	48 89 e5             	mov    %rsp,%rbp
    bee4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    bee8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    beec:	5d                   	pop    %rbp
    beed:	c3                   	ret
    beee:	66 90                	xchg   %ax,%ax

000000000000bef0 <_ZNSt3__113__atomic_baseImLb1EEpLB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _Tp operator+=(_Tp __op) _NOEXCEPT { return fetch_add(__op) + __op; }
    bef0:	55                   	push   %rbp
    bef1:	48 89 e5             	mov    %rsp,%rbp
    bef4:	48 83 ec 10          	sub    $0x10,%rsp
    bef8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    befc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bf00:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    bf04:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    bf08:	ba 05 00 00 00       	mov    $0x5,%edx
    bf0d:	e8 0e 00 00 00       	call   bf20 <_ZNSt3__113__atomic_baseImLb1EE9fetch_addB8nn210000EmNS_12memory_orderE>
    bf12:	48 03 45 f0          	add    -0x10(%rbp),%rax
    bf16:	48 83 c4 10          	add    $0x10,%rsp
    bf1a:	5d                   	pop    %rbp
    bf1b:	c3                   	ret
    bf1c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000bf20 <_ZNSt3__113__atomic_baseImLb1EE9fetch_addB8nn210000EmNS_12memory_orderE>:
  _LIBCPP_HIDE_FROM_ABI _Tp fetch_add(_Tp __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT {
    bf20:	55                   	push   %rbp
    bf21:	48 89 e5             	mov    %rsp,%rbp
    bf24:	48 83 ec 20          	sub    $0x20,%rsp
    bf28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bf30:	89 55 ec             	mov    %edx,-0x14(%rbp)
    bf33:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
    bf37:	e8 74 df ff ff       	call   9eb0 <_ZNSt3__19addressofB8nn210000INS_17__cxx_atomic_implImNS_22__cxx_atomic_base_implImEEEEEEPT_RS5_>
    bf3c:	48 89 c7             	mov    %rax,%rdi
    bf3f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    bf43:	8b 55 ec             	mov    -0x14(%rbp),%edx
    bf46:	e8 15 00 00 00       	call   bf60 <_ZNSt3__122__cxx_atomic_fetch_addB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE>
    bf4b:	48 83 c4 20          	add    $0x20,%rsp
    bf4f:	5d                   	pop    %rbp
    bf50:	c3                   	ret
    bf51:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    bf58:	00 00 00 
    bf5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000bf60 <_ZNSt3__122__cxx_atomic_fetch_addB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE>:
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp>* __a, _Tp __delta, memory_order __order) _NOEXCEPT {
    bf60:	55                   	push   %rbp
    bf61:	48 89 e5             	mov    %rsp,%rbp
    bf64:	48 83 ec 40          	sub    $0x40,%rsp
    bf68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bf70:	89 55 ec             	mov    %edx,-0x14(%rbp)
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
    bf73:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    bf77:	e8 34 e0 ff ff       	call   9fb0 <_ZNSt3__19addressofB8nn210000IU7_AtomicmEEPT_RS2_>
    bf7c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    bf80:	8b 45 ec             	mov    -0x14(%rbp),%eax
    bf83:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  return __c11_atomic_fetch_add(
    bf87:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    bf8b:	ff c8                	dec    %eax
    bf8d:	89 c1                	mov    %eax,%ecx
    bf8f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    bf93:	83 e8 04             	sub    $0x4,%eax
    bf96:	77 14                	ja     bfac <_ZNSt3__122__cxx_atomic_fetch_addB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0x4c>
    bf98:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    bf9c:	48 8d 05 d1 2a 02 00 	lea    0x22ad1(%rip),%rax        # 2ea74 <_ZNSt3__16__itoa11__pow10_128E+0x294>
    bfa3:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
    bfa7:	48 01 c8             	add    %rcx,%rax
    bfaa:	ff e0                	jmp    *%rax
    bfac:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    bfb0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bfb4:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    bfb9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    bfbd:	eb 4a                	jmp    c009 <_ZNSt3__122__cxx_atomic_fetch_addB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0xa9>
    bfbf:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    bfc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bfc7:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    bfcc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    bfd0:	eb 37                	jmp    c009 <_ZNSt3__122__cxx_atomic_fetch_addB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0xa9>
    bfd2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    bfd6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bfda:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    bfdf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    bfe3:	eb 24                	jmp    c009 <_ZNSt3__122__cxx_atomic_fetch_addB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0xa9>
    bfe5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    bfe9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bfed:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    bff2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    bff6:	eb 11                	jmp    c009 <_ZNSt3__122__cxx_atomic_fetch_addB8nn210000ImEET_PNS_22__cxx_atomic_base_implIS1_EES1_NS_12memory_orderE+0xa9>
    bff8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    bffc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c000:	f0 48 0f c1 01       	lock xadd %rax,(%rcx)
    c005:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    c009:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c00d:	48 83 c4 40          	add    $0x40,%rsp
    c011:	5d                   	pop    %rbp
    c012:	c3                   	ret
    c013:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c01a:	00 00 00 
    c01d:	0f 1f 00             	nopl   (%rax)

000000000000c020 <_ZN4ustl3mem9AllocatorIN4ours3mem6VmAreaEE10deallocateEPS4_m>:
    c020:	55                   	push   %rbp
    c021:	48 89 e5             	mov    %rsp,%rbp
    c024:	48 83 ec 20          	sub    $0x20,%rsp
    c028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c02c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c030:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    c034:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c038:	e8 b3 78 00 00       	call   138f0 <_ZdaPv>
    c03d:	48 83 c4 20          	add    $0x20,%rsp
    c041:	5d                   	pop    %rbp
    c042:	c3                   	ret
    c043:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c04a:	00 00 00 
    c04d:	0f 1f 00             	nopl   (%rax)

000000000000c050 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem6VmAreaEEELb0EE6as_refEv>:
    c050:	55                   	push   %rbp
    c051:	48 89 e5             	mov    %rsp,%rbp
    c054:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c058:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c05c:	5d                   	pop    %rbp
    c05d:	c3                   	ret
    c05e:	66 90                	xchg   %ax,%ax

000000000000c060 <_ZN4ours3mem8VmAspace9root_areaEv>:

        auto root_area() -> VmRootArea &
        {  return this->root_area_;  }
    c060:	55                   	push   %rbp
    c061:	48 89 e5             	mov    %rsp,%rbp
    c064:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c06c:	48 05 b0 00 00 00    	add    $0xb0,%rax
    c072:	5d                   	pop    %rbp
    c073:	c3                   	ret
    c074:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c07b:	00 00 00 
    c07e:	66 90                	xchg   %ax,%ax

000000000000c080 <_ZN4ours3mem11MemoryModel4initEv>:
#include <ours/mem/memory_model.hpp>

namespace ours::mem {
    auto MemoryModel::init() -> Status
    {
    c080:	55                   	push   %rbp
    c081:	48 89 e5             	mov    %rsp,%rbp
        return Status::Ok;
    c084:	31 c0                	xor    %eax,%eax
    c086:	5d                   	pop    %rbp
    c087:	c3                   	ret
    c088:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    c08f:	00 

000000000000c090 <_ZN4ours3mem11MemoryModel8populateEmmlPNS0_6AltmapE>:
    }

    auto MemoryModel::populate(Pfn start, usize nr_frames, NodeId nid, Altmap *altmap) -> Status
    {
    c090:	55                   	push   %rbp
    c091:	48 89 e5             	mov    %rsp,%rbp
    c094:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c098:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c09c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    c0a0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
        return Status::Unimplemented;
    c0a4:	b8 05 00 00 00       	mov    $0x5,%eax
    c0a9:	5d                   	pop    %rbp
    c0aa:	c3                   	ret
    c0ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000c0b0 <_ZN4ours3mem11MemoryModel10depopulateEmm>:
    }

    auto MemoryModel::depopulate(Pfn start_pfn, Pfn end_pfn) -> Status
    {
    c0b0:	55                   	push   %rbp
    c0b1:	48 89 e5             	mov    %rsp,%rbp
    c0b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        return Status::Unimplemented;
    c0bc:	b8 05 00 00 00       	mov    $0x5,%eax
    c0c1:	5d                   	pop    %rbp
    c0c2:	c3                   	ret
    c0c3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    c0ca:	84 00 00 00 00 00 

000000000000c0d0 <_ZN4ours3mem11MemoryModel12mark_presentEmm>:
    }

    auto MemoryModel::mark_present(Pfn start_pfn, Pfn end_pfn) -> void 
    {}
    c0d0:	55                   	push   %rbp
    c0d1:	48 89 e5             	mov    %rsp,%rbp
    c0d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c0dc:	5d                   	pop    %rbp
    c0dd:	c3                   	ret
    c0de:	66 90                	xchg   %ax,%ax

000000000000c0e0 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEm>:

#include <ours/cpu-local.hpp>

namespace ours::mem {
    auto alloc_frame(Gaf flags, usize order) -> PmFrame *
    {
    c0e0:	55                   	push   %rbp
    c0e1:	48 89 e5             	mov    %rsp,%rbp
    c0e4:	48 83 ec 60          	sub    $0x60,%rsp
    c0e8:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    c0ec:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
        auto local_node = CpuLocal::access<PmNode>();
    c0f0:	e8 db e0 ff ff       	call   a1d0 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_v>
    c0f5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        DEBUG_ASSERT(local_node != nullptr);
    c0f9:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    c0fe:	75 05                	jne    c105 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEm+0x25>
    c100:	e8 fb 6f ff ff       	call   3100 <_ZN4ours5panicEv>
        if (auto result = local_node->alloc_frame(flags, order)) {
    c105:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    c109:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    c10d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    c111:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
    c115:	e8 76 2e 00 00       	call   ef90 <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm>
    c11a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    c11e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    c122:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c126:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c12a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
    c12e:	48 83 c0 08          	add    $0x8,%rax
    c132:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c136:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        {  return (static_cast<u16>(status_) & static_cast<u16>(Status::HaveValue)) != 0;  }
    c13a:	0f b7 00             	movzwl (%rax),%eax
    c13d:	83 e0 01             	and    $0x1,%eax
    c140:	83 f8 00             	cmp    $0x0,%eax
    c143:	74 1c                	je     c161 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEm+0x81>
    c145:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    c149:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c14d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
            return result.unwrap();
    c151:	48 8b 00             	mov    (%rax),%rax
    c154:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    c158:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%rbp)
    c15f:	eb 07                	jmp    c168 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEm+0x88>
        if (auto result = local_node->alloc_frame(flags, order)) {
    c161:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
    c168:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
    c16c:	e8 af 02 00 00       	call   c420 <_ZN4ustl6ResultIPN4ours3mem7PmFrameENS1_6StatusEvED2Ev>
    c171:	8b 45 ac             	mov    -0x54(%rbp),%eax
    c174:	85 c0                	test   %eax,%eax
    c176:	74 04                	je     c17c <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEm+0x9c>
    c178:	eb 00                	jmp    c17a <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEm+0x9a>
    c17a:	eb 08                	jmp    c184 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEm+0xa4>
        }

        return nullptr;
    c17c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    c183:	00 
    }
    c184:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c188:	48 83 c4 60          	add    $0x60,%rsp
    c18c:	5d                   	pop    %rbp
    c18d:	c3                   	ret
    c18e:	66 90                	xchg   %ax,%ax

000000000000c190 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEPmm>:

    auto alloc_frame(Gaf flags, ai_out PhysAddr *phys_addr, usize order) -> PmFrame *
    {
    c190:	55                   	push   %rbp
    c191:	48 89 e5             	mov    %rsp,%rbp
    c194:	48 83 ec 60          	sub    $0x60,%rsp
    c198:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    c19c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    c1a0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
        auto local_node = CpuLocal::access<PmNode>();
    c1a4:	e8 27 e0 ff ff       	call   a1d0 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_v>
    c1a9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        DEBUG_ASSERT(local_node != nullptr);
    c1ad:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    c1b2:	75 05                	jne    c1b9 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEPmm+0x29>
    c1b4:	e8 47 6f ff ff       	call   3100 <_ZN4ours5panicEv>
        if (auto result = local_node->alloc_frame(flags, order)) {
    c1b9:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    c1bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    c1c1:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    c1c5:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
    c1c9:	e8 c2 2d 00 00       	call   ef90 <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm>
    c1ce:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    c1d2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    c1d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c1da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c1de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c1e2:	48 83 c0 08          	add    $0x8,%rax
    c1e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c1ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1ee:	0f b7 00             	movzwl (%rax),%eax
    c1f1:	83 e0 01             	and    $0x1,%eax
    c1f4:	83 f8 00             	cmp    $0x0,%eax
    c1f7:	74 2f                	je     c228 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEPmm+0x98>
    c1f9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    c1fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c201:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
            auto frame = result.unwrap();
    c205:	48 8b 00             	mov    (%rax),%rax
    c208:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
            if (phys_addr) {
    c20c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    c211:	74 13                	je     c226 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEPmm+0x96>
                *phys_addr =  MemoryModel::frame_to_phys(frame);
    c213:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    c217:	e8 24 02 00 00       	call   c440 <_ZN4ours3mem11MemoryModel13frame_to_physEPNS0_7PmFrameE>
    c21c:	48 89 c1             	mov    %rax,%rcx
    c21f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c223:	48 89 08             	mov    %rcx,(%rax)
            }
        }
    c226:	eb 00                	jmp    c228 <_ZN4ours3mem11alloc_frameENS0_5gafns3GafEPmm+0x98>
    c228:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
        if (auto result = local_node->alloc_frame(flags, order)) {
    c22c:	e8 ef 01 00 00       	call   c420 <_ZN4ustl6ResultIPN4ours3mem7PmFrameENS1_6StatusEvED2Ev>

        return nullptr;
    c231:	31 c0                	xor    %eax,%eax
    c233:	48 83 c4 60          	add    $0x60,%rsp
    c237:	5d                   	pop    %rbp
    c238:	c3                   	ret
    c239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000c240 <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm>:
    }

    auto alloc_frame_on_node(NodeId nid, Gaf flags, usize order) -> PmFrame *
    {
    c240:	55                   	push   %rbp
    c241:	48 89 e5             	mov    %rsp,%rbp
    c244:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    c24b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    c24f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    c253:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
        DEBUG_ASSERT(nid < MAX_NODES);
    c257:	48 83 7d b8 20       	cmpq   $0x20,-0x48(%rbp)
    c25c:	7c 05                	jl     c263 <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm+0x23>
    c25e:	e8 9d 6e ff ff       	call   3100 <_ZN4ours5panicEv>
        if (auto node = PmNode::node(nid)) {
    c263:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    c267:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    c26b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    c26f:	48 8d 3d 92 c5 02 00 	lea    0x2c592(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
    c276:	e8 f5 e0 ff ff       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
    c27b:	48 8b 00             	mov    (%rax),%rax
    c27e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    c282:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    c287:	0f 84 8d 00 00 00    	je     c31a <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm+0xda>
            if (auto result = node->alloc_frame(flags | Gaf::OnlyThisNode, order)) {
    c28d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    c291:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    c295:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c299:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
    c2a0:	00 
    c2a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c2a5:	48 0b 55 e0          	or     -0x20(%rbp),%rdx
    c2a9:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    c2ad:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    c2b1:	e8 da 2c 00 00       	call   ef90 <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm>
    c2b6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    c2ba:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    c2be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    c2c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c2c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c2ca:	48 83 c0 08          	add    $0x8,%rax
    c2ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c2d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2d6:	0f b7 00             	movzwl (%rax),%eax
    c2d9:	83 e0 01             	and    $0x1,%eax
    c2dc:	83 f8 00             	cmp    $0x0,%eax
    c2df:	74 1c                	je     c2fd <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm+0xbd>
    c2e1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    c2e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    c2e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
                return result.unwrap(); 
    c2ed:	48 8b 00             	mov    (%rax),%rax
    c2f0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    c2f4:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
    c2fb:	eb 07                	jmp    c304 <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm+0xc4>
            if (auto result = node->alloc_frame(flags | Gaf::OnlyThisNode, order)) {
    c2fd:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
    c304:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    c308:	e8 13 01 00 00       	call   c420 <_ZN4ustl6ResultIPN4ours3mem7PmFrameENS1_6StatusEvED2Ev>
    c30d:	8b 45 8c             	mov    -0x74(%rbp),%eax
    c310:	85 c0                	test   %eax,%eax
    c312:	74 04                	je     c318 <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm+0xd8>
    c314:	eb 00                	jmp    c316 <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm+0xd6>
    c316:	eb 0a                	jmp    c322 <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm+0xe2>
            }
        }
    c318:	eb 00                	jmp    c31a <_ZN4ours3mem19alloc_frame_on_nodeElNS0_5gafns3GafEm+0xda>

        return nullptr;
    c31a:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    c321:	00 
    }
    c322:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c326:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    c32d:	5d                   	pop    %rbp
    c32e:	c3                   	ret
    c32f:	90                   	nop

000000000000c330 <_ZN4ours3mem10free_frameEPNS0_7PmFrameEm>:

    auto free_frame(PmFrame *frame, usize order) -> void
    {
    c330:	55                   	push   %rbp
    c331:	48 89 e5             	mov    %rsp,%rbp
    c334:	48 83 ec 20          	sub    $0x20,%rsp
    c338:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    c33c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    c340:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    c347:	00 
    c348:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    c34c:	48 8d 3d b5 c4 02 00 	lea    0x2c4b5(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
    c353:	e8 18 e0 ff ff       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
    c358:	48 8b 00             	mov    (%rax),%rax
        auto node = PmNode::node(0);
    c35b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        DEBUG_ASSERT(node);
    c35f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    c364:	75 05                	jne    c36b <_ZN4ours3mem10free_frameEPNS0_7PmFrameEm+0x3b>
    c366:	e8 95 6d ff ff       	call   3100 <_ZN4ours5panicEv>
        return node->free_frame(frame, order);
    c36b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    c36f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    c373:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c377:	e8 34 2e 00 00       	call   f1b0 <_ZN4ours3mem6PmNode10free_frameEPNS0_7PmFrameEm>
    c37c:	48 83 c4 20          	add    $0x20,%rsp
    c380:	5d                   	pop    %rbp
    c381:	c3                   	ret
    c382:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    c389:	1f 84 00 00 00 00 00 

000000000000c390 <_ZN4ours3mem12alloc_framesENS0_5gafns3GafEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS7_NS9_16list_member_hookIJEEEXadL_ZNS7_13managed_hook_EEEEEEEEm>:
    }

    auto alloc_frames(Gaf flags, ai_out FrameList<> *list, usize n) -> Status
    {
    c390:	55                   	push   %rbp
    c391:	48 89 e5             	mov    %rsp,%rbp
    c394:	48 83 ec 20          	sub    $0x20,%rsp
    c398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c39c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c3a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        auto local_node = CpuLocal::access<PmNode>();
    c3a4:	e8 27 de ff ff       	call   a1d0 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_v>
    c3a9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        DEBUG_ASSERT(local_node != nullptr);
    c3ad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    c3b2:	75 05                	jne    c3b9 <_ZN4ours3mem12alloc_framesENS0_5gafns3GafEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS7_NS9_16list_member_hookIJEEEXadL_ZNS7_13managed_hook_EEEEEEEEm+0x29>
    c3b4:	e8 47 6d ff ff       	call   3100 <_ZN4ours5panicEv>
        return local_node->alloc_frames(flags, n, list);
    c3b9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    c3bd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    c3c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c3c5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    c3c9:	e8 a2 2e 00 00       	call   f270 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE>
    c3ce:	48 83 c4 20          	add    $0x20,%rsp
    c3d2:	5d                   	pop    %rbp
    c3d3:	c3                   	ret
    c3d4:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
    c3db:	00 00 00 00 00 

000000000000c3e0 <_ZN4ours3mem11free_framesEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEEE>:
    }

    auto free_frames(FrameList<> *list) -> void
    {
    c3e0:	55                   	push   %rbp
    c3e1:	48 89 e5             	mov    %rsp,%rbp
    c3e4:	48 83 ec 10          	sub    $0x10,%rsp
    c3e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        auto local_node = CpuLocal::access<PmNode>();
    c3ec:	e8 df dd ff ff       	call   a1d0 <_ZN4ours8CpuLocal6accessINS_3mem6PmNodeEEEPT_v>
    c3f1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        DEBUG_ASSERT(local_node != nullptr);
    c3f5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c3fa:	75 05                	jne    c401 <_ZN4ours3mem11free_framesEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEEE+0x21>
    c3fc:	e8 ff 6c ff ff       	call   3100 <_ZN4ours5panicEv>
        return local_node->free_frames(list);
    c401:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c405:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    c409:	e8 b2 2f 00 00       	call   f3c0 <_ZN4ours3mem6PmNode11free_framesEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS6_NS8_16list_member_hookIJEEEXadL_ZNS6_13managed_hook_EEEEEEEE>
    c40e:	48 83 c4 10          	add    $0x10,%rsp
    c412:	5d                   	pop    %rbp
    c413:	c3                   	ret
    c414:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c41b:	00 00 00 
    c41e:	66 90                	xchg   %ax,%ax

000000000000c420 <_ZN4ustl6ResultIPN4ours3mem7PmFrameENS1_6StatusEvED2Ev>:
    class Result
    c420:	55                   	push   %rbp
    c421:	48 89 e5             	mov    %rsp,%rbp
    c424:	48 83 ec 10          	sub    $0x10,%rsp
    c428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c42c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    c430:	e8 3b 00 00 00       	call   c470 <_ZN4ustl6result14StorageTrivialIPN4ours3mem7PmFrameENS2_6StatusEED2Ev>
    c435:	48 83 c4 10          	add    $0x10,%rsp
    c439:	5d                   	pop    %rbp
    c43a:	c3                   	ret
    c43b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000c440 <_ZN4ours3mem11MemoryModel13frame_to_physEPNS0_7PmFrameE>:

        static auto phys_to_frame(PhysAddr phys_addr) -> PmFrame *
        {  return Self::pfn_to_frame(phys_to_pfn(phys_addr));  }

        static auto frame_to_phys(PmFrame *frame) -> PhysAddr
        {  return pfn_to_phys(Self::frame_to_pfn(frame));  }
    c440:	55                   	push   %rbp
    c441:	48 89 e5             	mov    %rsp,%rbp
    c444:	48 83 ec 10          	sub    $0x10,%rsp
    c448:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    c44c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c450:	e8 2b 00 00 00       	call   c480 <_ZN4ours3mem11MemoryModel12frame_to_pfnEPNS0_7PmFrameE>
    c455:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    typedef usize   SecNum;
    typedef isize   NodeId;

    FORCE_INLINE CXX11_CONSTEXPR 
    static auto pfn_to_phys(Pfn pfn) -> PhysAddr {  
        return PhysAddr(pfn << PAGE_SHIFT);  
    c459:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c45d:	48 c1 e0 0c          	shl    $0xc,%rax
    c461:	48 83 c4 10          	add    $0x10,%rsp
    c465:	5d                   	pop    %rbp
    c466:	c3                   	ret
    c467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    c46e:	00 00 

000000000000c470 <_ZN4ustl6result14StorageTrivialIPN4ours3mem7PmFrameENS2_6StatusEED2Ev>:
        {}
    c470:	55                   	push   %rbp
    c471:	48 89 e5             	mov    %rsp,%rbp
    c474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c478:	5d                   	pop    %rbp
    c479:	c3                   	ret
    c47a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000c480 <_ZN4ours3mem11MemoryModel12frame_to_pfnEPNS0_7PmFrameE>:

        static auto virt_to_frame(VirtAddr virt) -> PmFrame *
        {  return 0; }

        static auto frame_to_pfn(PmFrame *frame) -> Pfn
        {  return 0; }
    c480:	55                   	push   %rbp
    c481:	48 89 e5             	mov    %rsp,%rbp
    c484:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c488:	31 c0                	xor    %eax,%eax
    c48a:	5d                   	pop    %rbp
    c48b:	c3                   	ret
    c48c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000c490 <_ZN4ours3mem8EarlyMem18get_node_pfn_rangeEl>:

#include <ustl/mem/align.hpp>

namespace ours::mem {
    auto EarlyMem::get_node_pfn_range(NodeId nid) -> gktl::Range<Pfn>
    {
    c490:	55                   	push   %rbp
    c491:	48 89 e5             	mov    %rsp,%rbp
    c494:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
    c49b:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
        Pfn start = ustl::NumericLimits<Pfn>::max(), end = 0;
    c49f:	e8 ac e4 ff ff       	call   a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>
    c4a4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    c4a8:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
    c4af:	00 
        EarlyMem::IterationContext context(bootmem::RegionType::Normal, nid);
    c4b0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    c4b4:	48 8d 8d 68 ff ff ff 	lea    -0x98(%rbp),%rcx
    c4bb:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    c4bf:	66 c7 45 d6 00 00    	movw   $0x0,-0x2a(%rbp)
    c4c5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    c4c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c4cd:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
                : memblock(0), start(start), end(end), type(type), nid(nid)
            {}

            FORCE_INLINE CXX11_CONSTEXPR
            IterationContext(RegionType type, NodeId nid = MAX_NODES)
                : memblock(0), start(0), end(ustl::NumericLimits<PhysAddr>::max()), type(type), nid(nid)
    c4d4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c4db:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c4e2:	00 
    c4e3:	e8 68 e4 ff ff       	call   a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>
    c4e8:	48 89 c1             	mov    %rax,%rcx
    c4eb:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    c4f2:	48 89 48 10          	mov    %rcx,0x10(%rax)
    c4f6:	66 8b 4d d6          	mov    -0x2a(%rbp),%cx
    c4fa:	66 89 48 18          	mov    %cx,0x18(%rax)
    c4fe:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    c502:	48 89 48 20          	mov    %rcx,0x20(%rax)
    c506:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
    c50d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            return s_bootmem->iterate(context);  
    c511:	48 8b 35 a0 75 02 00 	mov    0x275a0(%rip),%rsi        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
    c518:	48 81 c6 c0 00 00 00 	add    $0xc0,%rsi
    c51f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c523:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
    c52a:	e8 41 e4 ff ff       	call   a970 <_ZNKSt3__18functionIFN4ustl6OptionIN7bootmem6RegionEEERNS3_8MemBlockINS3_12RegionVectorEE16IterationContextEEEclESA_>
    c52f:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
        while (auto region = EarlyMem::iterate(context)) {
    c536:	e8 c5 e3 ff ff       	call   a900 <_ZNKSt3__18optionalIN7bootmem6RegionEEcvbB8nn210000Ev>
    c53b:	a8 01                	test   $0x1,%al
    c53d:	75 05                	jne    c544 <_ZN4ours3mem8EarlyMem18get_node_pfn_rangeEl+0xb4>
    c53f:	e9 83 00 00 00       	jmp    c5c7 <_ZN4ours3mem8EarlyMem18get_node_pfn_rangeEl+0x137>
    c544:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
            start = ustl::algorithms::min(start, phys_to_pfn(region->base));
    c54b:	e8 d0 e3 ff ff       	call   a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>
    c550:	48 8b 00             	mov    (%rax),%rax
    c553:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }

    FORCE_INLINE CXX11_CONSTEXPR 
    static auto phys_to_pfn(PhysAddr phys_addr) -> Pfn {  
        return Pfn(phys_addr >> PAGE_SHIFT);  
    c557:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c55b:	48 c1 e8 0c          	shr    $0xc,%rax
    c55f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    c566:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    c56a:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    c571:	e8 0a 02 00 00       	call   c780 <_ZNSt3__13minB8nn210000ImEERKT_S3_S3_>
    c576:	48 8b 00             	mov    (%rax),%rax
    c579:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    c57d:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
            end = ustl::algorithms::max(end, phys_to_pfn(region->end()));
    c584:	e8 97 e3 ff ff       	call   a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>
    c589:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c58d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
            flags.set_type(type);
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto end() const -> PhysAddr {
            return base + size;
    c591:	48 8b 01             	mov    (%rcx),%rax
    c594:	48 03 41 08          	add    0x8(%rcx),%rax
    c598:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c59c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c5a0:	48 c1 e8 0c          	shr    $0xc,%rax
    c5a4:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    c5ab:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    c5af:	48 8d b5 38 ff ff ff 	lea    -0xc8(%rbp),%rsi
    c5b6:	e8 d5 e4 ff ff       	call   aa90 <_ZNSt3__13maxB8nn210000ImEERKT_S3_S3_>
    c5bb:	48 8b 00             	mov    (%rax),%rax
    c5be:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
        while (auto region = EarlyMem::iterate(context)) {
    c5c2:	e9 3f ff ff ff       	jmp    c506 <_ZN4ours3mem8EarlyMem18get_node_pfn_rangeEl+0x76>
        }

        return { start, end };
    c5c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    c5cb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    c5cf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    c5d3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    c5d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    c5db:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    c5df:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
    c5e6:	5d                   	pop    %rbp
    c5e7:	c3                   	ret
    c5e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    c5ef:	00 

000000000000c5f0 <_ZN4ours3mem8EarlyMem20count_present_framesEmm>:
    }

    auto EarlyMem::count_present_frames(Pfn start, Pfn end) -> usize
    {
    c5f0:	55                   	push   %rbp
    c5f1:	48 89 e5             	mov    %rsp,%rbp
    c5f4:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
    c5fb:	48 89 7d a0          	mov    %rdi,-0x60(%rbp)
    c5ff:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
        usize nr_presents = 0;
    c603:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
    c60a:	00 
        EarlyMem::IterationContext context(start, end, bootmem::RegionType::Normal, MAX_NODES);
    c60b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    c60f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    c613:	48 8d 95 58 ff ff ff 	lea    -0xa8(%rbp),%rdx
    c61a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    c61e:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    c622:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    c626:	66 c7 45 c6 00 00    	movw   $0x0,-0x3a(%rbp)
    c62c:	48 c7 45 b8 20 00 00 	movq   $0x20,-0x48(%rbp)
    c633:	00 
    c634:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
                : memblock(0), start(start), end(end), type(type), nid(nid)
    c638:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c63f:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    c643:	48 89 48 08          	mov    %rcx,0x8(%rax)
    c647:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    c64b:	48 89 48 10          	mov    %rcx,0x10(%rax)
    c64f:	66 8b 4d c6          	mov    -0x3a(%rbp),%cx
    c653:	66 89 48 18          	mov    %cx,0x18(%rax)
    c657:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    c65b:	48 89 48 20          	mov    %rcx,0x20(%rax)
    c65f:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
    c666:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    c66a:	48 8b 35 47 74 02 00 	mov    0x27447(%rip),%rsi        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
    c671:	48 81 c6 c0 00 00 00 	add    $0xc0,%rsi
    c678:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    c67c:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
    c683:	e8 e8 e2 ff ff       	call   a970 <_ZNKSt3__18functionIFN4ustl6OptionIN7bootmem6RegionEEERNS3_8MemBlockINS3_12RegionVectorEE16IterationContextEEEclESA_>
    c688:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
        while (auto region = iterate(context)) {
    c68f:	e8 6c e2 ff ff       	call   a900 <_ZNKSt3__18optionalIN7bootmem6RegionEEcvbB8nn210000Ev>
    c694:	a8 01                	test   $0x1,%al
    c696:	75 05                	jne    c69d <_ZN4ours3mem8EarlyMem20count_present_framesEmm+0xad>
    c698:	e9 d1 00 00 00       	jmp    c76e <_ZN4ours3mem8EarlyMem20count_present_framesEmm+0x17e>
    c69d:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
            if (region->size < PAGE_SHIFT) {
    c6a4:	e8 77 e2 ff ff       	call   a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>
    c6a9:	48 83 78 08 0c       	cmpq   $0xc,0x8(%rax)
    c6ae:	73 02                	jae    c6b2 <_ZN4ours3mem8EarlyMem20count_present_framesEmm+0xc2>
                continue;
    c6b0:	eb ad                	jmp    c65f <_ZN4ours3mem8EarlyMem20count_present_framesEmm+0x6f>
    c6b2:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
            }
            auto base = ustl::mem::align_up(region->base, PAGE_SHIFT);
    c6b9:	e8 62 e2 ff ff       	call   a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>
    c6be:	48 8b 00             	mov    (%rax),%rax
    c6c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c6c5:	48 c7 45 e0 0c 00 00 	movq   $0xc,-0x20(%rbp)
    c6cc:	00 
    { return (n + a - 1) & ~(a - 1); }
    c6cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c6d1:	48 03 45 e0          	add    -0x20(%rbp),%rax
    c6d5:	48 83 e8 01          	sub    $0x1,%rax
    c6d9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    c6dd:	48 83 e9 01          	sub    $0x1,%rcx
    c6e1:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
    c6e5:	48 21 c8             	and    %rcx,%rax
    c6e8:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    c6ef:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
            auto end = ustl::mem::align_down(region->end(), PAGE_SHIFT);
    c6f6:	e8 25 e2 ff ff       	call   a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>
    c6fb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    c6ff:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    c703:	48 8b 01             	mov    (%rcx),%rax
    c706:	48 03 41 08          	add    0x8(%rcx),%rax
    c70a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c70e:	48 c7 45 f0 0c 00 00 	movq   $0xc,-0x10(%rbp)
    c715:	00 
    { return n & ~(a - 1); }
    c716:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c71a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    c71e:	48 83 e9 01          	sub    $0x1,%rcx
    c722:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
    c726:	48 21 c8             	and    %rcx,%rax
    c729:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
            if (end - base < PAGE_SHIFT) {
    c730:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c737:	48 2b 85 30 ff ff ff 	sub    -0xd0(%rbp),%rax
    c73e:	48 83 f8 0c          	cmp    $0xc,%rax
    c742:	73 05                	jae    c749 <_ZN4ours3mem8EarlyMem20count_present_framesEmm+0x159>
                continue;
    c744:	e9 16 ff ff ff       	jmp    c65f <_ZN4ours3mem8EarlyMem20count_present_framesEmm+0x6f>
            }

            nr_presents += (end - base) / PAGE_SHIFT;
    c749:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c750:	48 2b 85 30 ff ff ff 	sub    -0xd0(%rbp),%rax
    c757:	b9 0c 00 00 00       	mov    $0xc,%ecx
    c75c:	31 d2                	xor    %edx,%edx
    c75e:	48 f7 f1             	div    %rcx
    c761:	48 03 45 90          	add    -0x70(%rbp),%rax
    c765:	48 89 45 90          	mov    %rax,-0x70(%rbp)
        while (auto region = iterate(context)) {
    c769:	e9 f1 fe ff ff       	jmp    c65f <_ZN4ours3mem8EarlyMem20count_present_framesEmm+0x6f>
        }

        return nr_presents;
    c76e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    c772:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
    c779:	5d                   	pop    %rbp
    c77a:	c3                   	ret
    c77b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000c780 <_ZNSt3__13minB8nn210000ImEERKT_S3_S3_>:
  return __comp(__b, __a) ? __b : __a;
}

template <class _Tp>
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 const _Tp&
min(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b) {
    c780:	55                   	push   %rbp
    c781:	48 89 e5             	mov    %rsp,%rbp
    c784:	48 83 ec 20          	sub    $0x20,%rsp
    c788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c78c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::min(__a, __b, __less<>());
    c790:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    c794:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    c798:	e8 13 00 00 00       	call   c7b0 <_ZNSt3__13minB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_>
    c79d:	48 83 c4 20          	add    $0x20,%rsp
    c7a1:	5d                   	pop    %rbp
    c7a2:	c3                   	ret
    c7a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c7aa:	00 00 00 
    c7ad:	0f 1f 00             	nopl   (%rax)

000000000000c7b0 <_ZNSt3__13minB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_>:
min(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b, _Compare __comp) {
    c7b0:	55                   	push   %rbp
    c7b1:	48 89 e5             	mov    %rsp,%rbp
    c7b4:	48 83 ec 20          	sub    $0x20,%rsp
    c7b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    c7bc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  return __comp(__b, __a) ? __b : __a;
    c7c0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    c7c4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c7c8:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
    c7cc:	e8 5f e3 ff ff       	call   ab30 <_ZNKSt3__16__lessIvvEclB8nn210000ImmEEbRKT_RKT0_>
    c7d1:	a8 01                	test   $0x1,%al
    c7d3:	75 02                	jne    c7d7 <_ZNSt3__13minB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_+0x27>
    c7d5:	eb 0a                	jmp    c7e1 <_ZNSt3__13minB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_+0x31>
    c7d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c7db:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    c7df:	eb 08                	jmp    c7e9 <_ZNSt3__13minB8nn210000ImNS_6__lessIvvEEEERKT_S5_S5_T0_+0x39>
    c7e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c7e5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    c7e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c7ed:	48 83 c4 20          	add    $0x20,%rsp
    c7f1:	5d                   	pop    %rbp
    c7f2:	c3                   	ret
    c7f3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c7fa:	00 00 00 
    c7fd:	0f 1f 00             	nopl   (%rax)

000000000000c800 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm>:
        auto const to_erase = free_list_[order].iterator_to(*frame);
        free_list_[order].erase(to_erase);
    }

    auto PmZone::expand_frame(PmFrame *frame, usize low_order, usize high_order) -> void
    {
    c800:	55                   	push   %rbp
    c801:	48 89 e5             	mov    %rsp,%rbp
    c804:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    c80b:	48 89 bd e0 fe ff ff 	mov    %rdi,-0x120(%rbp)
    c812:	48 89 b5 d8 fe ff ff 	mov    %rsi,-0x128(%rbp)
    c819:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
    c820:	48 89 8d c8 fe ff ff 	mov    %rcx,-0x138(%rbp)
    c827:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    c82e:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
        DEBUG_ASSERT(low_order >= 0);
    c835:	48 83 bd d0 fe ff ff 	cmpq   $0x0,-0x130(%rbp)
    c83c:	00 
    c83d:	73 05                	jae    c844 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x44>
    c83f:	e8 bc 68 ff ff       	call   3100 <_ZN4ours5panicEv>
        DEBUG_ASSERT(high_order > low_order);
    c844:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    c84b:	48 3b 85 d0 fe ff ff 	cmp    -0x130(%rbp),%rax
    c852:	77 05                	ja     c859 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x59>
    c854:	e8 a7 68 ff ff       	call   3100 <_ZN4ours5panicEv>

        auto const pfn = MemoryModel::frame_to_pfn(frame);
    c859:	48 8b bd d8 fe ff ff 	mov    -0x128(%rbp),%rdi
    c860:	e8 1b fc ff ff       	call   c480 <_ZN4ours3mem11MemoryModel12frame_to_pfnEPNS0_7PmFrameE>
    c865:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
        for (auto order = high_order - 1; order >= low_order; --order) {
    c86c:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    c873:	48 83 e8 01          	sub    $0x1,%rax
    c877:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    c87e:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    c885:	48 3b 85 d0 fe ff ff 	cmp    -0x130(%rbp),%rax
    c88c:	0f 82 83 02 00 00    	jb     cb15 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x315>
            if (auto buddy_frame = get_buddy(frame, pfn, order)) {
    c892:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
    c899:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
    c8a0:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    c8a7:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
    c8ae:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
    c8b5:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
        auto buddy_pfn = pfn + (1 << (order - 1));
    c8bc:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    c8c3:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
    c8ca:	48 83 e9 01          	sub    $0x1,%rcx
    c8ce:	ba 01 00 00 00       	mov    $0x1,%edx
    c8d3:	d3 e2                	shl    %cl,%edx
    c8d5:	89 d1                	mov    %edx,%ecx
    c8d7:	48 63 c9             	movslq %ecx,%rcx
    c8da:	48 01 c8             	add    %rcx,%rax
    c8dd:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
        if (auto buddy_frame = MemoryModel::pfn_to_frame(buddy_pfn)) {
    c8e4:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
    c8eb:	e8 30 10 00 00       	call   d920 <_ZN4ours3mem11MemoryModel12pfn_to_frameEm>
    c8f0:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    c8f7:	48 83 bd e8 fe ff ff 	cmpq   $0x0,-0x118(%rbp)
    c8fe:	00 
    c8ff:	0f 84 86 01 00 00    	je     ca8b <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x28b>
            if (frame_is_buddy(frame, buddy_frame)) {
    c905:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
    c90c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    c913:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
    c91a:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
        if (!buddy->flags().is_role(PfRole::Pmm)) {
    c921:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c928:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    c92f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    {
        typedef PmFrame     Self;
    public:
        FORCE_INLINE CXX11_CONSTEXPR
        auto flags() -> FrameFlags & {
            return this->flags_;
    c936:	48 83 c0 18          	add    $0x18,%rax
    c93a:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    c941:	c7 85 5c ff ff ff 03 	movl   $0x3,-0xa4(%rbp)
    c948:	00 00 00 
    c94b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
            inner_.set<kFrameRoleId>(role);
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto is_role(PfRole const role) const -> bool {
            return role == inner_.get<kFrameRoleId>();
    c952:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    c958:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
    c95f:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    c966:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    c96a:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    c96e:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
    c975:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    c976:	48 c7 45 88 70 00 00 	movq   $0x70,-0x78(%rbp)
    c97d:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    c97e:	48 c7 45 80 04 00 00 	movq   $0x4,-0x80(%rbp)
    c985:	00 
            return Result((values[idx] & mask) >> shift);
    c986:	48 8b 09             	mov    (%rcx),%rcx
    c989:	48 83 e1 70          	and    $0x70,%rcx
    c98d:	48 c1 e9 04          	shr    $0x4,%rcx
    c991:	39 c8                	cmp    %ecx,%eax
    c993:	74 0c                	je     c9a1 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x1a1>
            return false;
    c995:	c6 85 3f ff ff ff 00 	movb   $0x0,-0xc1(%rbp)
    c99c:	e9 cd 00 00 00       	jmp    ca6e <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x26e>
        if (self->flags().zone_type() != buddy->flags().zone_type()) {
    c9a1:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    c9a8:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    c9af:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    c9b6:	48 83 c0 18          	add    $0x18,%rax
    c9ba:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    c9c1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    c9c8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    c9cc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    c9d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c9d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    c9d8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    c9df:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    c9e0:	48 c7 45 d8 80 01 00 	movq   $0x180,-0x28(%rbp)
    c9e7:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    c9e8:	48 c7 45 d0 07 00 00 	movq   $0x7,-0x30(%rbp)
    c9ef:	00 
            return Result((values[idx] & mask) >> shift);
    c9f0:	48 8b 00             	mov    (%rax),%rax
    c9f3:	48 25 80 01 00 00    	and    $0x180,%rax
    c9f9:	48 c1 e8 07          	shr    $0x7,%rax
    c9fd:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
    ca04:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    ca0b:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
    ca12:	48 83 c1 18          	add    $0x18,%rcx
    ca16:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
    ca1d:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
    ca24:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    ca28:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    ca2c:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    ca30:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    ca34:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    ca3b:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    ca3c:	48 c7 45 b8 80 01 00 	movq   $0x180,-0x48(%rbp)
    ca43:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    ca44:	48 c7 45 b0 07 00 00 	movq   $0x7,-0x50(%rbp)
    ca4b:	00 
            return Result((values[idx] & mask) >> shift);
    ca4c:	48 8b 09             	mov    (%rcx),%rcx
    ca4f:	48 81 e1 80 01 00 00 	and    $0x180,%rcx
    ca56:	48 c1 e9 07          	shr    $0x7,%rcx
    ca5a:	39 c8                	cmp    %ecx,%eax
    ca5c:	74 09                	je     ca67 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x267>
            return false;
    ca5e:	c6 85 3f ff ff ff 00 	movb   $0x0,-0xc1(%rbp)
    ca65:	eb 07                	jmp    ca6e <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x26e>
        return true;
    ca67:	c6 85 3f ff ff ff 01 	movb   $0x1,-0xc1(%rbp)
            if (frame_is_buddy(frame, buddy_frame)) {
    ca6e:	f6 85 3f ff ff ff 01 	testb  $0x1,-0xc1(%rbp)
    ca75:	75 02                	jne    ca79 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x279>
    ca77:	eb 10                	jmp    ca89 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x289>
                return buddy_frame;
    ca79:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    ca80:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    ca87:	eb 0d                	jmp    ca96 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x296>
        }
    ca89:	eb 00                	jmp    ca8b <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x28b>
        return 0;
    ca8b:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
    ca92:	00 00 00 00 
    }
    ca96:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
            if (auto buddy_frame = get_buddy(frame, pfn, order)) {
    ca9d:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
    caa4:	48 83 bd b0 fe ff ff 	cmpq   $0x0,-0x150(%rbp)
    caab:	00 
    caac:	74 4e                	je     cafc <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x2fc>
    caae:	48 8b 8d a8 fe ff ff 	mov    -0x158(%rbp),%rcx
                free_list_[order].push_back(*frame);
    cab5:	48 83 c1 50          	add    $0x50,%rcx
    cab9:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    cac0:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    cac7:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    cace:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cad5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cadd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    cae1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   //!
   //! <b>Complexity</b>: Constant.
   BOOST_CONTAINER_ATTRIBUTE_NODISCARD BOOST_CONTAINER_FORCEINLINE reference operator[](size_type n) BOOST_NOEXCEPT_OR_NOTHROW
   {
      BOOST_ASSERT(this->m_holder.m_size > n);
      return this->m_holder.start()[difference_type(n)];
    cae5:	48 6b 85 18 ff ff ff 	imul   $0x18,-0xe8(%rbp),%rax
    caec:	18 
    caed:	48 01 c7             	add    %rax,%rdi
    caf0:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
    caf7:	e8 e4 0c 00 00       	call   d7e0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE9push_backERS5_>
            }
        }
    cafc:	eb 00                	jmp    cafe <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x2fe>
        for (auto order = high_order - 1; order >= low_order; --order) {
    cafe:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    cb05:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
    cb09:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    cb10:	e9 69 fd ff ff       	jmp    c87e <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm+0x7e>
    }
    cb15:	48 81 c4 60 01 00 00 	add    $0x160,%rsp
    cb1c:	5d                   	pop    %rbp
    cb1d:	c3                   	ret
    cb1e:	66 90                	xchg   %ax,%ax

000000000000cb20 <_ZN4ours3mem6PmZone32take_frame_from_free_list_lockedEm>:
        remove_frame_from_free_list(frame, order);
        return expand_frame(frame, order, target_order);
    }

    auto PmZone::take_frame_from_free_list_locked(usize order) -> PmFrame *
    {
    cb20:	55                   	push   %rbp
    cb21:	48 89 e5             	mov    %rsp,%rbp
    cb24:	48 81 ec 90 02 00 00 	sub    $0x290,%rsp
    cb2b:	48 89 bd b0 fd ff ff 	mov    %rdi,-0x250(%rbp)
    cb32:	48 89 b5 a8 fd ff ff 	mov    %rsi,-0x258(%rbp)
    cb39:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
    cb40:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
        auto const max_order  = free_list_.size();
    cb47:	48 83 c0 50          	add    $0x50,%rax
    cb4b:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
    cb52:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
   { return this->m_holder.m_size; }
    cb59:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
    cb60:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
        for (auto i = order; i < max_order; ++i) {
    cb67:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
    cb6e:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
    cb75:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    cb7c:	48 3b 85 a0 fd ff ff 	cmp    -0x260(%rbp),%rax
    cb83:	0f 83 68 04 00 00    	jae    cff1 <_ZN4ours3mem6PmZone32take_frame_from_free_list_lockedEm+0x4d1>
    cb89:	48 8b 8d 88 fd ff ff 	mov    -0x278(%rbp),%rcx
            if (free_list_[i].empty()) {
    cb90:	48 83 c1 50          	add    $0x50,%rcx
    cb94:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    cb9b:	48 89 8d d8 fd ff ff 	mov    %rcx,-0x228(%rbp)
    cba2:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
    cba9:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
    cbb0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    cbb4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    cbb8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    cbbc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
      return this->m_holder.start()[difference_type(n)];
    cbc0:	48 6b 8d d0 fd ff ff 	imul   $0x18,-0x230(%rbp),%rcx
    cbc7:	18 
    cbc8:	48 01 c8             	add    %rcx,%rax
    cbcb:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
    cbd2:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
    cbd9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    cbdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
    cbe1:	48 83 c0 08          	add    $0x8,%rax
    cbe5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    cbe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cbed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cbf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cbf5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    cbf9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   {  return node_algorithms::unique(this->get_root_node());   }
    cbfd:	e8 8e 12 00 00       	call   de90 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE6uniqueEPKNS0_9list_nodeIS3_EE>
    cc02:	a8 01                	test   $0x1,%al
    cc04:	75 02                	jne    cc08 <_ZN4ours3mem6PmZone32take_frame_from_free_list_lockedEm+0xe8>
    cc06:	eb 05                	jmp    cc0d <_ZN4ours3mem6PmZone32take_frame_from_free_list_lockedEm+0xed>
                continue;
    cc08:	e9 cd 03 00 00       	jmp    cfda <_ZN4ours3mem6PmZone32take_frame_from_free_list_lockedEm+0x4ba>
    cc0d:	48 8b b5 88 fd ff ff 	mov    -0x278(%rbp),%rsi
            }
            
            auto frame = &free_list_[i].front();
    cc14:	48 89 f1             	mov    %rsi,%rcx
    cc17:	48 83 c1 50          	add    $0x50,%rcx
    cc1b:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    cc22:	48 89 8d c8 fd ff ff 	mov    %rcx,-0x238(%rbp)
    cc29:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
    cc30:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
    cc37:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    cc3b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    cc3f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    cc43:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    cc47:	48 6b 8d c0 fd ff ff 	imul   $0x18,-0x240(%rbp),%rcx
    cc4e:	18 
    cc4f:	48 01 c8             	add    %rcx,%rax
    cc52:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
    cc59:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
    cc60:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
    cc67:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    cc6b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
    cc6f:	48 83 c0 08          	add    $0x8,%rax
    cc73:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    cc77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    cc7b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    cc7f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cc83:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    cc87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cc8b:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    cc92:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    cc99:	48 8b 00             	mov    (%rax),%rax
    cc9c:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    cca3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    ccaa:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    ccb1:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    ccb8:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    ccbf:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
    ccc6:	00 00 00 00 
    ccca:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    ccd1:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
    ccd8:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
   const Parent * const parent = 0;
    ccdf:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
    cce6:	00 00 00 00 
   const char *const member = static_cast<const char*>(static_cast<const void*>(&(parent->*ptr_to_member)));
    ccea:	31 c9                	xor    %ecx,%ecx
    ccec:	48 03 8d 50 ff ff ff 	add    -0xb0(%rbp),%rcx
    ccf3:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
   return std::ptrdiff_t(member - static_cast<const char*>(static_cast<const void*>(parent)));
    ccfa:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
    cd01:	31 c9                	xor    %ecx,%ecx
    cd03:	48 29 d1             	sub    %rdx,%rcx
    cd06:	48 01 c8             	add    %rcx,%rax
    cd09:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    cd10:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    cd17:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    cd1e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    cd25:	48 89 85 90 fd ff ff 	mov    %rax,-0x270(%rbp)
            remove_and_split_frame(frame, i, order);
    cd2c:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
    cd33:	48 8b 8d 98 fd ff ff 	mov    -0x268(%rbp),%rcx
    cd3a:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
    cd41:	48 89 b5 10 fe ff ff 	mov    %rsi,-0x1f0(%rbp)
    cd48:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
    cd4f:	48 89 8d 00 fe ff ff 	mov    %rcx,-0x200(%rbp)
    cd56:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
    cd5d:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
    cd64:	48 89 95 80 fd ff ff 	mov    %rdx,-0x280(%rbp)
        remove_frame_from_free_list(frame, order);
    cd6b:	48 8b 8d 08 fe ff ff 	mov    -0x1f8(%rbp),%rcx
    cd72:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
    cd79:	48 89 95 40 fe ff ff 	mov    %rdx,-0x1c0(%rbp)
    cd80:	48 89 8d 38 fe ff ff 	mov    %rcx,-0x1c8(%rbp)
    cd87:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
    cd8e:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    cd95:	48 89 8d 78 fd ff ff 	mov    %rcx,-0x288(%rbp)
        auto const to_erase = free_list_[order].iterator_to(*frame);
    cd9c:	48 83 c1 50          	add    $0x50,%rcx
    cda0:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    cda7:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    cdae:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    cdb5:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
    cdbc:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    cdc0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    cdc4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    cdc8:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    cdcc:	48 6b 85 58 fe ff ff 	imul   $0x18,-0x1a8(%rbp),%rax
    cdd3:	18 
    cdd4:	48 01 c6             	add    %rax,%rsi
    cdd7:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
    cdde:	48 8d bd 28 fe ff ff 	lea    -0x1d8(%rbp),%rdi
    cde5:	e8 f6 0b 00 00       	call   d9e0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE11iterator_toERS5_>
    cdea:	48 8b 8d 78 fd ff ff 	mov    -0x288(%rbp),%rcx
        free_list_[order].erase(to_erase);
    cdf1:	48 83 c1 50          	add    $0x50,%rcx
    cdf5:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    cdfc:	48 89 8d 50 fe ff ff 	mov    %rcx,-0x1b0(%rbp)
    ce03:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
    ce0a:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    ce11:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    ce15:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    ce19:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    ce1d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ce21:	48 6b 8d 48 fe ff ff 	imul   $0x18,-0x1b8(%rbp),%rcx
    ce28:	18 
    ce29:	48 01 c8             	add    %rcx,%rax
    ce2c:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    ce33:	48 89 8d a0 fe ff ff 	mov    %rcx,-0x160(%rbp)
    ce3a:	48 8d 8d 28 fe ff ff 	lea    -0x1d8(%rbp),%rcx
    ce41:	48 89 8d 98 fe ff ff 	mov    %rcx,-0x168(%rbp)
    ce48:	48 8b 8d a0 fe ff ff 	mov    -0x160(%rbp),%rcx
      :  members_(other.pointed_node(), other.get_value_traits())
    ce4f:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
    ce56:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    ce5d:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   { return members_.nodeptr_; }
    ce64:	48 8b 12             	mov    (%rdx),%rdx
      :  members_(other.pointed_node(), other.get_value_traits())
    ce67:	48 89 95 90 fe ff ff 	mov    %rdx,-0x170(%rbp)
    ce6e:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
    ce75:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
    ce7c:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    ce83:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    ce8a:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
    ce91:	00 00 00 00 
    ce95:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
    ce9c:	48 8d 8d 90 fe ff ff 	lea    -0x170(%rbp),%rcx
    cea3:	48 89 8d b8 fe ff ff 	mov    %rcx,-0x148(%rbp)
    ceaa:	48 8d 8d 88 fe ff ff 	lea    -0x178(%rbp),%rcx
    ceb1:	48 89 8d b0 fe ff ff 	mov    %rcx,-0x150(%rbp)
    ceb8:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
    cebf:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
    cec6:	48 8b 12             	mov    (%rdx),%rdx
    cec9:	48 89 11             	mov    %rdx,(%rcx)
    cecc:	48 8d 8d 18 fe ff ff 	lea    -0x1e8(%rbp),%rcx
    ced3:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
    ceda:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    cee1:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    cee8:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
    ceef:	48 8b b5 78 fe ff ff 	mov    -0x188(%rbp),%rsi
    cef6:	48 8d 85 68 fe ff ff 	lea    -0x198(%rbp),%rax
    cefd:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    cf04:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    cf0b:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    cf12:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
      :  members_(other.pointed_node(), other.get_value_traits())
    cf19:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
    cf20:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
    cf27:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
   { return members_.nodeptr_; }
    cf2e:	48 8b 09             	mov    (%rcx),%rcx
      :  members_(other.pointed_node(), other.get_value_traits())
    cf31:	48 89 8d d0 fe ff ff 	mov    %rcx,-0x130(%rbp)
    cf38:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
    cf3f:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
    cf46:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
    cf4d:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
    cf54:	48 c7 85 c8 fe ff ff 	movq   $0x0,-0x138(%rbp)
    cf5b:	00 00 00 00 
    cf5f:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    cf66:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    cf6d:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    cf74:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
    cf7b:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    cf82:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    cf89:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
    cf90:	48 8b 09             	mov    (%rcx),%rcx
    cf93:	48 89 08             	mov    %rcx,(%rax)
    cf96:	48 8d bd 18 fe ff ff 	lea    -0x1e8(%rbp),%rdi
    cf9d:	48 8d 95 68 fe ff ff 	lea    -0x198(%rbp),%rdx
   {  return this->erase_and_dispose(i, detail::null_disposer());  }
    cfa4:	e8 d7 0a 00 00       	call   da80 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17erase_and_disposeINS0_6detail13null_disposerEEENS0_13list_iteratorIS8_Lb0EEENSD_IS8_Lb1EEET_>
    cfa9:	48 8b bd 80 fd ff ff 	mov    -0x280(%rbp),%rdi
        return expand_frame(frame, order, target_order);
    cfb0:	48 8b b5 08 fe ff ff 	mov    -0x1f8(%rbp),%rsi
    cfb7:	48 8b 95 00 fe ff ff 	mov    -0x200(%rbp),%rdx
    cfbe:	48 8b 8d f8 fd ff ff 	mov    -0x208(%rbp),%rcx
    cfc5:	e8 36 f8 ff ff       	call   c800 <_ZN4ours3mem6PmZone12expand_frameEPNS0_7PmFrameEmm>
            return frame;
    cfca:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
    cfd1:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
    cfd8:	eb 22                	jmp    cffc <_ZN4ours3mem6PmZone32take_frame_from_free_list_lockedEm+0x4dc>
        for (auto i = order; i < max_order; ++i) {
    cfda:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    cfe1:	48 83 c0 01          	add    $0x1,%rax
    cfe5:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
    cfec:	e9 84 fb ff ff       	jmp    cb75 <_ZN4ours3mem6PmZone32take_frame_from_free_list_lockedEm+0x55>
        }

        return nullptr;
    cff1:	48 c7 85 b8 fd ff ff 	movq   $0x0,-0x248(%rbp)
    cff8:	00 00 00 00 
    }
    cffc:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    d003:	48 81 c4 90 02 00 00 	add    $0x290,%rsp
    d00a:	5d                   	pop    %rbp
    d00b:	c3                   	ret
    d00c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000d010 <_ZN4ours3mem6PmZone11alloc_frameENS0_5gafns3GafEm>:
        ustl::sync::LockGuard<decltype(mutex_)> guard(mutex_);
        return this->take_frame_from_free_list_locked(order);
    }

    auto PmZone::alloc_frame(Gaf gaf, usize order) -> PmFrame *
    {
    d010:	55                   	push   %rbp
    d011:	48 89 e5             	mov    %rsp,%rbp
    d014:	48 83 ec 70          	sub    $0x70,%rsp
    d018:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    d01c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    d020:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    d024:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d028:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        if (is_order_within_pcpu_cache_limit(order)) {
    d02c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d030:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        CXX11_CONSTEXPR
        static usize const MAX_PCPU_FRAME_ORDER = 3;

        FORCE_INLINE
        static auto is_order_within_pcpu_cache_limit(usize order) -> bool
        {  return order < MAX_PCPU_FRAME_ORDER;  }
    d034:	48 83 7d d8 03       	cmpq   $0x3,-0x28(%rbp)
    d039:	73 2f                	jae    d06a <_ZN4ours3mem6PmZone11alloc_frameENS0_5gafns3GafEm+0x5a>
    d03b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
            if (auto frame = frame_cache_[order].take_object()) {
    d03f:	48 8b 78 40          	mov    0x40(%rax),%rdi
    d043:	48 69 45 b8 08 06 00 	imul   $0x608,-0x48(%rbp),%rax
    d04a:	00 
    d04b:	48 01 c7             	add    %rax,%rdi
    d04e:	e8 1d 08 00 00       	call   d870 <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE11take_objectEv>
    d053:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    d057:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    d05c:	74 0a                	je     d068 <_ZN4ours3mem6PmZone11alloc_frameENS0_5gafns3GafEm+0x58>
                return frame;
    d05e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d062:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    d066:	eb 49                	jmp    d0b1 <_ZN4ours3mem6PmZone11alloc_frameENS0_5gafns3GafEm+0xa1>
            }
        }
    d068:	eb 00                	jmp    d06a <_ZN4ours3mem6PmZone11alloc_frameENS0_5gafns3GafEm+0x5a>
    d06a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx

        return this->take_frame_from_free_list(order);
    d06e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d072:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    d076:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d07a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    d07e:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
        ustl::sync::LockGuard<decltype(mutex_)> guard(mutex_);
    d082:	48 83 c6 48          	add    $0x48,%rsi
    d086:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    d08a:	e8 a1 08 00 00       	call   d930 <_ZN4ustl4sync9LockGuardINS0_5MutexEEC2ERS2_>
    d08f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
        return this->take_frame_from_free_list_locked(order);
    d093:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    d097:	e8 84 fa ff ff       	call   cb20 <_ZN4ours3mem6PmZone32take_frame_from_free_list_lockedEm>
    d09c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    d0a0:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    }
    d0a4:	e8 b7 08 00 00       	call   d960 <_ZN4ustl4sync9LockGuardINS0_5MutexEED2Ev>
    d0a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
        return this->take_frame_from_free_list(order);
    d0ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    }
    d0b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d0b5:	48 83 c4 70          	add    $0x70,%rsp
    d0b9:	5d                   	pop    %rbp
    d0ba:	c3                   	ret
    d0bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d0c0 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm>:

    auto PmZone::free_single_frame(PmFrame *frame, Pfn pfn, usize order) -> void
    {
    d0c0:	55                   	push   %rbp
    d0c1:	48 89 e5             	mov    %rsp,%rbp
    d0c4:	48 81 ec 90 02 00 00 	sub    $0x290,%rsp
    d0cb:	48 89 bd b0 fd ff ff 	mov    %rdi,-0x250(%rbp)
    d0d2:	48 89 b5 a8 fd ff ff 	mov    %rsi,-0x258(%rbp)
    d0d9:	48 89 95 a0 fd ff ff 	mov    %rdx,-0x260(%rbp)
    d0e0:	48 89 8d 98 fd ff ff 	mov    %rcx,-0x268(%rbp)
    d0e7:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
    d0ee:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
        auto const nr_orders  = free_list_.capacity();
    d0f5:	48 c7 85 90 fd ff ff 	movq   $0xa,-0x270(%rbp)
    d0fc:	0a 00 00 00 

        // Do fold
        for (auto i = order; i < nr_orders; ++i) {
    d100:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    d107:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
    d10e:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
    d115:	48 3b 85 90 fd ff ff 	cmp    -0x270(%rbp),%rax
    d11c:	0f 83 95 04 00 00    	jae    d5b7 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x4f7>
            auto buddy_frame = get_buddy(frame, pfn, order);
    d122:	48 8b 95 a8 fd ff ff 	mov    -0x258(%rbp),%rdx
    d129:	48 8b 8d a0 fd ff ff 	mov    -0x260(%rbp),%rcx
    d130:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    d137:	48 89 95 d8 fd ff ff 	mov    %rdx,-0x228(%rbp)
    d13e:	48 89 8d d0 fd ff ff 	mov    %rcx,-0x230(%rbp)
    d145:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
        auto buddy_pfn = pfn + (1 << (order - 1));
    d14c:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
    d153:	48 8b 8d c8 fd ff ff 	mov    -0x238(%rbp),%rcx
    d15a:	48 83 e9 01          	sub    $0x1,%rcx
    d15e:	ba 01 00 00 00       	mov    $0x1,%edx
    d163:	d3 e2                	shl    %cl,%edx
    d165:	89 d1                	mov    %edx,%ecx
    d167:	48 63 c9             	movslq %ecx,%rcx
    d16a:	48 01 c8             	add    %rcx,%rax
    d16d:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
        if (auto buddy_frame = MemoryModel::pfn_to_frame(buddy_pfn)) {
    d174:	48 8b bd c0 fd ff ff 	mov    -0x240(%rbp),%rdi
    d17b:	e8 a0 07 00 00       	call   d920 <_ZN4ours3mem11MemoryModel12pfn_to_frameEm>
    d180:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
    d187:	48 83 bd b8 fd ff ff 	cmpq   $0x0,-0x248(%rbp)
    d18e:	00 
    d18f:	0f 84 bf 01 00 00    	je     d354 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x294>
            if (frame_is_buddy(frame, buddy_frame)) {
    d195:	48 8b 8d d8 fd ff ff 	mov    -0x228(%rbp),%rcx
    d19c:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    d1a3:	48 89 8d 50 fe ff ff 	mov    %rcx,-0x1b0(%rbp)
    d1aa:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
        if (!buddy->flags().is_role(PfRole::Pmm)) {
    d1b1:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    d1b8:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
    d1bf:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
    d1c6:	48 83 c0 18          	add    $0x18,%rax
    d1ca:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    d1d1:	c7 85 7c fe ff ff 03 	movl   $0x3,-0x184(%rbp)
    d1d8:	00 00 00 
    d1db:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
    d1e2:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    d1e8:	48 89 8d 98 fe ff ff 	mov    %rcx,-0x168(%rbp)
    d1ef:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
    d1f6:	48 89 8d b8 fe ff ff 	mov    %rcx,-0x148(%rbp)
    d1fd:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    d204:	48 c7 85 b0 fe ff ff 	movq   $0x0,-0x150(%rbp)
    d20b:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    d20f:	48 c7 85 a8 fe ff ff 	movq   $0x70,-0x158(%rbp)
    d216:	70 00 00 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    d21a:	48 c7 85 a0 fe ff ff 	movq   $0x4,-0x160(%rbp)
    d221:	04 00 00 00 
            return Result((values[idx] & mask) >> shift);
    d225:	48 8b 09             	mov    (%rcx),%rcx
    d228:	48 83 e1 70          	and    $0x70,%rcx
    d22c:	48 c1 e9 04          	shr    $0x4,%rcx
    d230:	39 c8                	cmp    %ecx,%eax
    d232:	74 0c                	je     d240 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x180>
            return false;
    d234:	c6 85 5f fe ff ff 00 	movb   $0x0,-0x1a1(%rbp)
    d23b:	e9 f7 00 00 00       	jmp    d337 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x277>
        if (self->flags().zone_type() != buddy->flags().zone_type()) {
    d240:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    d247:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
    d24e:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    d255:	48 83 c0 18          	add    $0x18,%rax
    d259:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
    d260:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
    d267:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
    d26e:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
    d275:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    d27c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    d283:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
    d28a:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    d28e:	48 c7 85 f8 fe ff ff 	movq   $0x180,-0x108(%rbp)
    d295:	80 01 00 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    d299:	48 c7 85 f0 fe ff ff 	movq   $0x7,-0x110(%rbp)
    d2a0:	07 00 00 00 
            return Result((values[idx] & mask) >> shift);
    d2a4:	48 8b 00             	mov    (%rax),%rax
    d2a7:	48 25 80 01 00 00    	and    $0x180,%rax
    d2ad:	48 c1 e8 07          	shr    $0x7,%rax
    d2b1:	48 8b 8d 48 fe ff ff 	mov    -0x1b8(%rbp),%rcx
    d2b8:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    d2bf:	48 8b 8d 60 fe ff ff 	mov    -0x1a0(%rbp),%rcx
    d2c6:	48 83 c1 18          	add    $0x18,%rcx
    d2ca:	48 89 8d 88 fe ff ff 	mov    %rcx,-0x178(%rbp)
    d2d1:	48 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%rcx
    d2d8:	48 89 8d c8 fe ff ff 	mov    %rcx,-0x138(%rbp)
    d2df:	48 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%rcx
    d2e6:	48 89 8d e8 fe ff ff 	mov    %rcx,-0x118(%rbp)
    d2ed:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    d2f4:	48 c7 85 e0 fe ff ff 	movq   $0x0,-0x120(%rbp)
    d2fb:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    d2ff:	48 c7 85 d8 fe ff ff 	movq   $0x180,-0x128(%rbp)
    d306:	80 01 00 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    d30a:	48 c7 85 d0 fe ff ff 	movq   $0x7,-0x130(%rbp)
    d311:	07 00 00 00 
            return Result((values[idx] & mask) >> shift);
    d315:	48 8b 09             	mov    (%rcx),%rcx
    d318:	48 81 e1 80 01 00 00 	and    $0x180,%rcx
    d31f:	48 c1 e9 07          	shr    $0x7,%rcx
    d323:	39 c8                	cmp    %ecx,%eax
    d325:	74 09                	je     d330 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x270>
            return false;
    d327:	c6 85 5f fe ff ff 00 	movb   $0x0,-0x1a1(%rbp)
    d32e:	eb 07                	jmp    d337 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x277>
        return true;
    d330:	c6 85 5f fe ff ff 01 	movb   $0x1,-0x1a1(%rbp)
            if (frame_is_buddy(frame, buddy_frame)) {
    d337:	f6 85 5f fe ff ff 01 	testb  $0x1,-0x1a1(%rbp)
    d33e:	75 02                	jne    d342 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x282>
    d340:	eb 10                	jmp    d352 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x292>
                return buddy_frame;
    d342:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    d349:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
    d350:	eb 0d                	jmp    d35f <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x29f>
        }
    d352:	eb 00                	jmp    d354 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x294>
        return 0;
    d354:	48 c7 85 e0 fd ff ff 	movq   $0x0,-0x220(%rbp)
    d35b:	00 00 00 00 
    }
    d35f:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
            auto buddy_frame = get_buddy(frame, pfn, order);
    d366:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
            if (!buddy_frame) {
    d36d:	48 83 bd 80 fd ff ff 	cmpq   $0x0,-0x280(%rbp)
    d374:	00 
    d375:	75 05                	jne    d37c <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x2bc>
                break;
    d377:	e9 3b 02 00 00       	jmp    d5b7 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x4f7>
    d37c:	48 8b 95 78 fd ff ff 	mov    -0x288(%rbp),%rdx
            }

            remove_frame_from_free_list(buddy_frame, order);
    d383:	48 8b 8d 80 fd ff ff 	mov    -0x280(%rbp),%rcx
    d38a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    d391:	48 89 95 20 fe ff ff 	mov    %rdx,-0x1e0(%rbp)
    d398:	48 89 8d 18 fe ff ff 	mov    %rcx,-0x1e8(%rbp)
    d39f:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
    d3a6:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
    d3ad:	48 89 8d 70 fd ff ff 	mov    %rcx,-0x290(%rbp)
        auto const to_erase = free_list_[order].iterator_to(*frame);
    d3b4:	48 83 c1 50          	add    $0x50,%rcx
    d3b8:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
    d3bf:	48 89 8d 40 fe ff ff 	mov    %rcx,-0x1c0(%rbp)
    d3c6:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
    d3cd:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
    d3d4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    d3d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d3dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d3e0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    d3e4:	48 6b 85 38 fe ff ff 	imul   $0x18,-0x1c8(%rbp),%rax
    d3eb:	18 
    d3ec:	48 01 c6             	add    %rax,%rsi
    d3ef:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
    d3f6:	48 8d bd 08 fe ff ff 	lea    -0x1f8(%rbp),%rdi
    d3fd:	e8 de 05 00 00       	call   d9e0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE11iterator_toERS5_>
    d402:	48 8b 8d 70 fd ff ff 	mov    -0x290(%rbp),%rcx
        free_list_[order].erase(to_erase);
    d409:	48 83 c1 50          	add    $0x50,%rcx
    d40d:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
    d414:	48 89 8d 30 fe ff ff 	mov    %rcx,-0x1d0(%rbp)
    d41b:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
    d422:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    d429:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    d42d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d431:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d435:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d439:	48 6b 8d 28 fe ff ff 	imul   $0x18,-0x1d8(%rbp),%rcx
    d440:	18 
    d441:	48 01 c8             	add    %rcx,%rax
    d444:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
    d44b:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
    d452:	48 8d 8d 08 fe ff ff 	lea    -0x1f8(%rbp),%rcx
    d459:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    d460:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
      :  members_(other.pointed_node(), other.get_value_traits())
    d467:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    d46e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    d472:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   { return members_.nodeptr_; }
    d476:	48 8b 12             	mov    (%rdx),%rdx
      :  members_(other.pointed_node(), other.get_value_traits())
    d479:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
    d480:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    d487:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
    d48b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    d48f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    d493:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
    d49a:	00 00 00 00 
    d49e:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
    d4a5:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
    d4ac:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
    d4b3:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    d4ba:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
    d4c1:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
    d4c8:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
    d4cf:	48 8b 12             	mov    (%rdx),%rdx
    d4d2:	48 89 11             	mov    %rdx,(%rcx)
    d4d5:	48 8d 8d f8 fd ff ff 	lea    -0x208(%rbp),%rcx
    d4dc:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
    d4e3:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    d4ea:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    d4f1:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    d4f8:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
    d4ff:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    d506:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    d50a:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    d511:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    d518:	48 8b 45 80          	mov    -0x80(%rbp),%rax
      :  members_(other.pointed_node(), other.get_value_traits())
    d51c:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    d523:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    d527:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   { return members_.nodeptr_; }
    d52b:	48 8b 09             	mov    (%rcx),%rcx
      :  members_(other.pointed_node(), other.get_value_traits())
    d52e:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
    d535:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    d53c:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    d540:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    d544:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    d548:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
    d54f:	00 00 00 00 
    d553:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    d557:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    d55e:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    d562:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
    d569:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    d56d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    d571:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    d575:	48 8b 09             	mov    (%rcx),%rcx
    d578:	48 89 08             	mov    %rcx,(%rax)
    d57b:	48 8d bd f8 fd ff ff 	lea    -0x208(%rbp),%rdi
    d582:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
    d589:	e8 f2 04 00 00       	call   da80 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17erase_and_disposeINS0_6detail13null_disposerEEENS0_13list_iteratorIS8_Lb0EEENSD_IS8_Lb1EEET_>
            order += 1;
    d58e:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    d595:	48 83 c0 01          	add    $0x1,%rax
    d599:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
        for (auto i = order; i < nr_orders; ++i) {
    d5a0:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
    d5a7:	48 83 c0 01          	add    $0x1,%rax
    d5ab:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
    d5b2:	e9 57 fb ff ff       	jmp    d10e <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm+0x4e>
    d5b7:	48 8b 8d 78 fd ff ff 	mov    -0x288(%rbp),%rcx
        }

        free_list_[order].push_back(*frame);
    d5be:	48 83 c1 50          	add    $0x50,%rcx
    d5c2:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
    d5c9:	48 89 8d f0 fd ff ff 	mov    %rcx,-0x210(%rbp)
    d5d0:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
    d5d7:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
    d5de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    d5e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d5e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d5ea:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    d5ee:	48 6b 85 e8 fd ff ff 	imul   $0x18,-0x218(%rbp),%rax
    d5f5:	18 
    d5f6:	48 01 c7             	add    %rax,%rdi
    d5f9:	48 8b b5 a8 fd ff ff 	mov    -0x258(%rbp),%rsi
    d600:	e8 db 01 00 00       	call   d7e0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE9push_backERS5_>
    }
    d605:	48 81 c4 90 02 00 00 	add    $0x290,%rsp
    d60c:	5d                   	pop    %rbp
    d60d:	c3                   	ret
    d60e:	66 90                	xchg   %ax,%ax

000000000000d610 <_ZN4ours3mem6PmZone22free_large_frame_blockEPNS0_7PmFrameEmm>:

    auto PmZone::free_large_frame_block(PmFrame *frame, Pfn pfn, usize order) -> void
    {
    d610:	55                   	push   %rbp
    d611:	48 89 e5             	mov    %rsp,%rbp
    d614:	48 83 ec 40          	sub    $0x40,%rsp
    d618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d61c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d620:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    d624:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    d628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d62c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        auto const end_pfn = pfn + (1 << order);
    d630:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d634:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    d638:	ba 01 00 00 00       	mov    $0x1,%edx
    d63d:	d3 e2                	shl    %cl,%edx
    d63f:	89 d1                	mov    %edx,%ecx
    d641:	48 63 c9             	movslq %ecx,%rcx
    d644:	48 01 c8             	add    %rcx,%rax
    d647:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        auto const max_order = free_list_.capacity() - 1;
    d64b:	b8 0a 00 00 00       	mov    $0xa,%eax
    d650:	48 83 e8 01          	sub    $0x1,%rax
    d654:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    d658:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    d65c:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi

        order = ustl::algorithms::min(order, max_order);
    d660:	e8 1b f1 ff ff       	call   c780 <_ZNSt3__13minB8nn210000ImEERKT_S3_S3_>
    d665:	48 8b 00             	mov    (%rax),%rax
    d668:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

        while (pfn != end_pfn) {
    d66c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d670:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    d674:	74 3b                	je     d6b1 <_ZN4ours3mem6PmZone22free_large_frame_blockEPNS0_7PmFrameEmm+0xa1>
    d676:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
            free_single_frame(frame, pfn, order);
    d67a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    d67e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d682:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    d686:	e8 35 fa ff ff       	call   d0c0 <_ZN4ours3mem6PmZone17free_single_frameEPNS0_7PmFrameEmm>
            pfn += 1 << order;
    d68b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d68f:	89 c1                	mov    %eax,%ecx
    d691:	b8 01 00 00 00       	mov    $0x1,%eax
    d696:	d3 e0                	shl    %cl,%eax
    d698:	48 98                	cltq
    d69a:	48 03 45 e8          	add    -0x18(%rbp),%rax
    d69e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            frame = MemoryModel::pfn_to_frame(pfn);
    d6a2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    d6a6:	e8 75 02 00 00       	call   d920 <_ZN4ours3mem11MemoryModel12pfn_to_frameEm>
    d6ab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        while (pfn != end_pfn) {
    d6af:	eb bb                	jmp    d66c <_ZN4ours3mem6PmZone22free_large_frame_blockEPNS0_7PmFrameEmm+0x5c>
        }
    }
    d6b1:	48 83 c4 40          	add    $0x40,%rsp
    d6b5:	5d                   	pop    %rbp
    d6b6:	c3                   	ret
    d6b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    d6be:	00 00 

000000000000d6c0 <_ZN4ours3mem6PmZone10free_frameEPNS0_7PmFrameEm>:
        ustl::sync::LockGuard<decltype(mutex_)> guard(mutex_);
        free_large_frame_block(frame, pfn, order);
    }

    auto PmZone::free_frame(PmFrame *frame, usize order) -> void
    {
    d6c0:	55                   	push   %rbp
    d6c1:	48 89 e5             	mov    %rsp,%rbp
    d6c4:	48 83 ec 70          	sub    $0x70,%rsp
    d6c8:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
    d6cc:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
    d6d0:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
    d6d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d6d8:	48 89 45 90          	mov    %rax,-0x70(%rbp)
        auto const pfn = MemoryModel::frame_to_pfn(frame);
    d6dc:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    d6e0:	e8 9b ed ff ff       	call   c480 <_ZN4ours3mem11MemoryModel12frame_to_pfnEPNS0_7PmFrameE>
    d6e5:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    d6e9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        free_frame_inner(frame, pfn, order);
    d6ed:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    d6f1:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    d6f5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d6f9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d6fd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    d701:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    d705:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    d709:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d70d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
        if (is_order_within_pcpu_cache_limit(order)) {
    d711:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d715:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d719:	48 83 7d f8 03       	cmpq   $0x3,-0x8(%rbp)
    d71e:	73 1e                	jae    d73e <_ZN4ours3mem6PmZone10free_frameEPNS0_7PmFrameEm+0x7e>
    d720:	48 8b 45 98          	mov    -0x68(%rbp),%rax
            return frame_cache_[order].return_object(frame);
    d724:	48 8b 78 40          	mov    0x40(%rax),%rdi
    d728:	48 69 45 d8 08 06 00 	imul   $0x608,-0x28(%rbp),%rax
    d72f:	00 
    d730:	48 01 c7             	add    %rax,%rdi
    d733:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    d737:	e8 94 05 00 00       	call   dcd0 <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE13return_objectEPS3_>
    d73c:	eb 2f                	jmp    d76d <_ZN4ours3mem6PmZone10free_frameEPNS0_7PmFrameEm+0xad>
    d73e:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
        ustl::sync::LockGuard<decltype(mutex_)> guard(mutex_);
    d742:	48 83 c6 48          	add    $0x48,%rsi
    d746:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    d74a:	e8 e1 01 00 00       	call   d930 <_ZN4ustl4sync9LockGuardINS0_5MutexEEC2ERS2_>
    d74f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
        free_large_frame_block(frame, pfn, order);
    d753:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    d757:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    d75b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    d75f:	e8 ac fe ff ff       	call   d610 <_ZN4ours3mem6PmZone22free_large_frame_blockEPNS0_7PmFrameEmm>
    d764:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    }
    d768:	e8 f3 01 00 00       	call   d960 <_ZN4ustl4sync9LockGuardINS0_5MutexEED2Ev>
    d76d:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi

        auto const nr_pages = 1 << order;
    d771:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d775:	89 c1                	mov    %eax,%ecx
    d777:	b8 01 00 00 00       	mov    $0x1,%eax
    d77c:	d3 e0                	shl    %cl,%eax
    d77e:	89 45 a4             	mov    %eax,-0x5c(%rbp)
        this->managed_frames_ += nr_pages;
    d781:	48 63 75 a4          	movslq -0x5c(%rbp),%rsi
    d785:	48 83 c7 28          	add    $0x28,%rdi
    d789:	e8 62 e7 ff ff       	call   bef0 <_ZNSt3__113__atomic_baseImLb1EEpLB8nn210000Em>
    }
    d78e:	48 83 c4 70          	add    $0x70,%rsp
    d792:	5d                   	pop    %rbp
    d793:	c3                   	ret
    d794:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d79b:	00 00 00 
    d79e:	66 90                	xchg   %ax,%ax

000000000000d7a0 <_ZNK4gktl6CanaryILj1517252197EE6verifyEv>:
    struct Canary {
        constexpr Canary()
            : magic_(Magic)
        {}

        auto verify() const -> void {
    d7a0:	55                   	push   %rbp
    d7a1:	48 89 e5             	mov    %rsp,%rbp
    d7a4:	48 83 ec 20          	sub    $0x20,%rsp
    d7a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d7ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            DEBUG_ASSERT(this->magic_ == Magic, "Error type");
    d7b0:	81 38 65 6e 6f 5a    	cmpl   $0x5a6f6e65,(%rax)
    d7b6:	74 1d                	je     d7d5 <_ZNK4gktl6CanaryILj1517252197EE6verifyEv+0x35>
    d7b8:	48 8d 35 1d 17 02 00 	lea    0x2171d(%rip),%rsi        # 2eedc <.L.str>
    d7bf:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    d7c3:	e8 b8 5a ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    d7c8:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    d7cc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    d7d0:	e8 5b 5a ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
        }
    d7d5:	48 83 c4 20          	add    $0x20,%rsp
    d7d9:	5d                   	pop    %rbp
    d7da:	c3                   	ret
    d7db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d7e0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE9push_backERS5_>:
   {
    d7e0:	55                   	push   %rbp
    d7e1:	48 89 e5             	mov    %rsp,%rbp
    d7e4:	48 83 ec 70          	sub    $0x70,%rsp
    d7e8:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    d7ec:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    d7f0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    d7f4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    d7f8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      node_ptr to_insert = priv_value_traits().to_node_ptr(value);
    d7fc:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    d800:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
         (static_cast<node_reference>(static_cast<hook_reference>(value.*P)));
    d804:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    d808:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    d80c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    d810:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    d814:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    d818:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    d81c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    d820:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
    d824:	48 83 c0 08          	add    $0x8,%rax
    d828:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d82c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d830:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d838:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d83c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      node_algorithms::link_before(this->get_root_node(), to_insert);
    d840:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    d844:	e8 b7 05 00 00       	call   de00 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE11link_beforeEPNS0_9list_nodeIS3_EES8_>
    d849:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    d84d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    d851:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d855:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    d859:	48 8b 45 e0          	mov    -0x20(%rbp),%rax

   BOOST_INTRUSIVE_FORCEINLINE void decrement()
   {  --size_; }

   BOOST_INTRUSIVE_FORCEINLINE void increment()
   {  ++size_; }
    d85d:	48 8b 08             	mov    (%rax),%rcx
    d860:	48 83 c1 01          	add    $0x1,%rcx
    d864:	48 89 08             	mov    %rcx,(%rax)
   }
    d867:	48 83 c4 70          	add    $0x70,%rsp
    d86b:	5d                   	pop    %rbp
    d86c:	c3                   	ret
    d86d:	0f 1f 00             	nopl   (%rax)

000000000000d870 <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE11take_objectEv>:
        typedef typename ConfigTraits::Mutex                Mutex;

        typedef SingleCpuCache<CachedObject, Config>  ScpCache;

        auto take_object() -> CachedObject *
        {
    d870:	55                   	push   %rbp
    d871:	48 89 e5             	mov    %rsp,%rbp
    d874:	48 83 ec 60          	sub    $0x60,%rsp
    d878:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
    d87c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d880:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
            size_t const CpuNum = CurrentCpu::current_cpu();
    d884:	e8 e7 04 00 00       	call   dd70 <_ZN3ktl18DefaultCacheConfig10CurrentCpu11current_cpuEv>
    d889:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    d88d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
            if (caches_[CpuNum].has_value()) {
    d891:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    d895:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    d899:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    d89d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d8a1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    d8a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d8a9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d8ad:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    d8b1:	48 6b 45 d0 30       	imul   $0x30,-0x30(%rbp),%rax
    d8b6:	48 01 c7             	add    %rax,%rdi
    d8b9:	e8 c2 04 00 00       	call   dd80 <_ZNKSt3__123__optional_storage_baseIN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEELb0EE9has_valueB8nn210000Ev>
    d8be:	a8 01                	test   $0x1,%al
    d8c0:	75 02                	jne    d8c4 <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE11take_objectEv+0x54>
    d8c2:	eb 3f                	jmp    d903 <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE11take_objectEv+0x93>
    d8c4:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
                return caches_[CpuNum]->take_object();
    d8c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    d8cc:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    d8d0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    d8d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d8d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d8dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d8e0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d8e4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    d8e8:	48 6b 45 c0 30       	imul   $0x30,-0x40(%rbp),%rax
    d8ed:	48 01 c7             	add    %rax,%rdi
    d8f0:	e8 ab 04 00 00       	call   dda0 <_ZNSt3__18optionalIN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEEEptB8nn210000Ev>
    d8f5:	48 89 c7             	mov    %rax,%rdi
    d8f8:	e8 d3 05 00 00       	call   ded0 <_ZN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE11take_objectEv>
    d8fd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    d901:	eb 08                	jmp    d90b <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE11take_objectEv+0x9b>
            }
            return 0;
    d903:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    d90a:	00 
        }
    d90b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d90f:	48 83 c4 60          	add    $0x60,%rsp
    d913:	5d                   	pop    %rbp
    d914:	c3                   	ret
    d915:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d91c:	00 00 00 
    d91f:	90                   	nop

000000000000d920 <_ZN4ours3mem11MemoryModel12pfn_to_frameEm>:
        {  return 0; }
    d920:	55                   	push   %rbp
    d921:	48 89 e5             	mov    %rsp,%rbp
    d924:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d928:	31 c0                	xor    %eax,%eax
    d92a:	5d                   	pop    %rbp
    d92b:	c3                   	ret
    d92c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000d930 <_ZN4ustl4sync9LockGuardINS0_5MutexEEC2ERS2_>:
        { lock.lock(); }
    d930:	55                   	push   %rbp
    d931:	48 89 e5             	mov    %rsp,%rbp
    d934:	48 83 ec 10          	sub    $0x10,%rsp
    d938:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d93c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d940:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            : lock_(&lock),
    d944:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    d948:	48 89 08             	mov    %rcx,(%rax)
              unlocked_(false)
    d94b:	c6 40 08 00          	movb   $0x0,0x8(%rax)
        { lock.lock(); }
    d94f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    d953:	e8 28 00 00 00       	call   d980 <_ZN4ustl4sync5Mutex4lockEv>
    d958:	48 83 c4 10          	add    $0x10,%rsp
    d95c:	5d                   	pop    %rbp
    d95d:	c3                   	ret
    d95e:	66 90                	xchg   %ax,%ax

000000000000d960 <_ZN4ustl4sync9LockGuardINS0_5MutexEED2Ev>:
        { unlock(); }
    d960:	55                   	push   %rbp
    d961:	48 89 e5             	mov    %rsp,%rbp
    d964:	48 83 ec 10          	sub    $0x10,%rsp
    d968:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d96c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    d970:	e8 1b 00 00 00       	call   d990 <_ZN4ustl4sync9LockGuardINS0_5MutexEE6unlockEv>
    d975:	48 83 c4 10          	add    $0x10,%rsp
    d979:	5d                   	pop    %rbp
    d97a:	c3                   	ret
    d97b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d980 <_ZN4ustl4sync5Mutex4lockEv>:
#define USTL_SYNC_MUTEX_HPP 1

namespace ustl::sync {
    class Mutex {
      public:
        auto lock() -> void {}
    d980:	55                   	push   %rbp
    d981:	48 89 e5             	mov    %rsp,%rbp
    d984:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d988:	5d                   	pop    %rbp
    d989:	c3                   	ret
    d98a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000d990 <_ZN4ustl4sync9LockGuardINS0_5MutexEE6unlockEv>:
        auto unlock() {
    d990:	55                   	push   %rbp
    d991:	48 89 e5             	mov    %rsp,%rbp
    d994:	48 83 ec 10          	sub    $0x10,%rsp
    d998:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d99c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d9a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
            if (!unlocked_) {
    d9a4:	f6 40 08 01          	testb  $0x1,0x8(%rax)
    d9a8:	75 14                	jne    d9be <_ZN4ustl4sync9LockGuardINS0_5MutexEE6unlockEv+0x2e>
    d9aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
                lock_->unlock();
    d9ae:	48 8b 38             	mov    (%rax),%rdi
    d9b1:	e8 1a 00 00 00       	call   d9d0 <_ZN4ustl4sync5Mutex6unlockEv>
    d9b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
                unlocked_ = true;
    d9ba:	c6 40 08 01          	movb   $0x1,0x8(%rax)
        }
    d9be:	48 83 c4 10          	add    $0x10,%rsp
    d9c2:	5d                   	pop    %rbp
    d9c3:	c3                   	ret
    d9c4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d9cb:	00 00 00 
    d9ce:	66 90                	xchg   %ax,%ax

000000000000d9d0 <_ZN4ustl4sync5Mutex6unlockEv>:
        auto unlock() -> void {}
    d9d0:	55                   	push   %rbp
    d9d1:	48 89 e5             	mov    %rsp,%rbp
    d9d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d9d8:	5d                   	pop    %rbp
    d9d9:	c3                   	ret
    d9da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000d9e0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE11iterator_toERS5_>:
   {
    d9e0:	55                   	push   %rbp
    d9e1:	48 89 e5             	mov    %rsp,%rbp
    d9e4:	50                   	push   %rax
    d9e5:	48 89 f8             	mov    %rdi,%rax
    d9e8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    d9ec:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    d9f0:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    d9f7:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    d9fb:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
      return iterator(this->priv_value_traits().to_node_ptr(value), this->priv_value_traits_ptr());
    d9ff:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    da06:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    da0a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    da0e:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
    da12:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    da16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    da1a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    da1e:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    da22:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    da26:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    da2a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    da2e:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    da32:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    da36:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    da3a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    da3e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    da42:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
    da46:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    da4a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    da4e:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    da52:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    da56:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    da5a:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
    da5e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    da62:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    da66:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    da6a:	48 8b 12             	mov    (%rdx),%rdx
    da6d:	48 89 11             	mov    %rdx,(%rcx)
    da70:	48 83 c4 08          	add    $0x8,%rsp
    da74:	5d                   	pop    %rbp
    da75:	c3                   	ret
    da76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    da7d:	00 00 00 

000000000000da80 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17erase_and_disposeINS0_6detail13null_disposerEEENS0_13list_iteratorIS8_Lb0EEENSD_IS8_Lb1EEET_>:
   {
    da80:	55                   	push   %rbp
    da81:	48 89 e5             	mov    %rsp,%rbp
    da84:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
    da8b:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
    da92:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
    da99:	48 89 f8             	mov    %rdi,%rax
    da9c:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    daa3:	48 89 bd 20 ff ff ff 	mov    %rdi,-0xe0(%rbp)
    daaa:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
    dab1:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
    dab8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    dabf:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    dac6:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
    dacd:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   { return members_.nodeptr_; }
    dad4:	48 8b 00             	mov    (%rax),%rax
      node_ptr to_erase(i.pointed_node());
    dad7:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    dade:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
    dae5:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
      node_ptr p = node_traits::get_next(members_.nodeptr_);
    daec:	48 8b 08             	mov    (%rax),%rcx
    daef:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    daf3:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    daf7:	48 8b 09             	mov    (%rcx),%rcx
    dafa:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
      members_.nodeptr_ = p;
    db01:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
    db08:	48 89 08             	mov    %rcx,(%rax)
      node_algorithms::unlink(to_erase);
    db0b:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
    db12:	e8 49 01 00 00       	call   dc60 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE6unlinkEPNS0_9list_nodeIS3_EE>
    db17:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    db1e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    db25:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    db2c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    db33:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   {  --size_; }
    db3a:	48 8b 08             	mov    (%rax),%rcx
    db3d:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
    db41:	48 89 08             	mov    %rcx,(%rax)
         node_algorithms::init(to_erase);
    db44:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
    db4b:	e8 80 5f ff ff       	call   3ad0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE4initEPNS0_9list_nodeIS3_EE>
    db50:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    db57:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
      disposer(this->priv_value_traits().to_value_ptr(to_erase));
    db5e:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    db65:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
            (static_cast<Hook*>(boost::movelib::to_raw_pointer(n)), P));
    db6c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    db73:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    db77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    db7b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    db7f:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    db86:	00 
    db87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    db8b:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    db8f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   const Parent * const parent = 0;
    db93:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    db9a:	00 
   const char *const member = static_cast<const char*>(static_cast<const void*>(&(parent->*ptr_to_member)));
    db9b:	31 c9                	xor    %ecx,%ecx
    db9d:	48 03 4d e8          	add    -0x18(%rbp),%rcx
    dba1:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   return std::ptrdiff_t(member - static_cast<const char*>(static_cast<const void*>(parent)));
    dba5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
    dba9:	31 c9                	xor    %ecx,%ecx
    dbab:	48 29 d1             	sub    %rdx,%rcx
    dbae:	48 01 c8             	add    %rcx,%rax
    dbb1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    dbb5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    dbb9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    dbbd:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    dbc1:	48 8d bd 1f ff ff ff 	lea    -0xe1(%rbp),%rdi
    dbc8:	e8 63 64 ff ff       	call   4030 <_ZN5boost9intrusive6detail13null_disposerclIPN4ours3mem7PmFrameEEEvT_>
    dbcd:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
    dbd4:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
    dbdb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    dbe2:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
    dbe9:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
    dbf0:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    dbf7:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
    dbfb:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   { return members_.nodeptr_; }
    dbff:	48 8b 09             	mov    (%rcx),%rcx
    dc02:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    dc06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dc0a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    dc0e:	48 89 7d 80          	mov    %rdi,-0x80(%rbp)
    dc12:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
    dc19:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
    dc20:	00 00 00 00 
    dc24:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    dc28:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    dc2c:	48 8d 8d 78 ff ff ff 	lea    -0x88(%rbp),%rcx
    dc33:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
    dc37:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    dc3e:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
    dc42:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    dc46:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    dc4a:	48 8b 12             	mov    (%rdx),%rdx
    dc4d:	48 89 11             	mov    %rdx,(%rcx)
      return i.unconst();
    dc50:	48 81 c4 20 01 00 00 	add    $0x120,%rsp
    dc57:	5d                   	pop    %rbp
    dc58:	c3                   	ret
    dc59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000dc60 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE6unlinkEPNS0_9list_nodeIS3_EE>:
   //!
   //! <b>Complexity</b>: Constant
   //!
   //! <b>Throws</b>: Nothing.
   static node_ptr unlink(node_ptr this_node) BOOST_NOEXCEPT
   {
    dc60:	55                   	push   %rbp
    dc61:	48 89 e5             	mov    %rsp,%rbp
    dc64:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      node_ptr next(NodeTraits::get_next(this_node));
    dc68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    dc6c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    dc70:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    dc74:	48 8b 00             	mov    (%rax),%rax
    dc77:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      node_ptr prev(NodeTraits::get_previous(this_node));
    dc7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    dc7f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   {  return n->prev_;  }
    dc83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    dc87:	48 8b 40 08          	mov    0x8(%rax),%rax
    dc8b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
      NodeTraits::set_next(prev, next);
    dc8f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    dc93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dc97:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    dc9b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   {  n->next_ = next;  }
    dc9f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    dca3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dca7:	48 89 08             	mov    %rcx,(%rax)
      NodeTraits::set_previous(next, prev);
    dcaa:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    dcae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    dcb2:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    dcb6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   {  n->prev_ = prev;  }
    dcba:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    dcbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dcc2:	48 89 48 08          	mov    %rcx,0x8(%rax)
      return next;
    dcc6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    dcca:	5d                   	pop    %rbp
    dccb:	c3                   	ret
    dccc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000dcd0 <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE13return_objectEPS3_>:

        auto return_object(CachedObject *object) -> void
        {
    dcd0:	55                   	push   %rbp
    dcd1:	48 89 e5             	mov    %rsp,%rbp
    dcd4:	48 83 ec 60          	sub    $0x60,%rsp
    dcd8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    dcdc:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    dce0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    dce4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
            size_t const CpuNum = CurrentCpu::current_cpu();
    dce8:	e8 83 00 00 00       	call   dd70 <_ZN3ktl18DefaultCacheConfig10CurrentCpu11current_cpuEv>
    dced:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    dcf1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
            if (caches_[CpuNum].has_value()) {
    dcf5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    dcf9:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    dcfd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    dd01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    dd05:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    dd09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    dd0d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dd11:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    dd15:	48 6b 45 d0 30       	imul   $0x30,-0x30(%rbp),%rax
    dd1a:	48 01 c7             	add    %rax,%rdi
    dd1d:	e8 5e 00 00 00       	call   dd80 <_ZNKSt3__123__optional_storage_baseIN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEELb0EE9has_valueB8nn210000Ev>
    dd22:	a8 01                	test   $0x1,%al
    dd24:	75 02                	jne    dd28 <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE13return_objectEPS3_+0x58>
    dd26:	eb 3d                	jmp    dd65 <_ZN3ktl8PcpCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE13return_objectEPS3_+0x95>
    dd28:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
                return caches_[CpuNum]->return_object(object);
    dd2c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    dd30:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    dd34:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    dd38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    dd3c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    dd40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dd44:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    dd48:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    dd4c:	48 6b 45 c0 30       	imul   $0x30,-0x40(%rbp),%rax
    dd51:	48 01 c7             	add    %rax,%rdi
    dd54:	e8 47 00 00 00       	call   dda0 <_ZNSt3__18optionalIN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEEEptB8nn210000Ev>
    dd59:	48 89 c7             	mov    %rax,%rdi
    dd5c:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    dd60:	e8 6b 00 00 00       	call   ddd0 <_ZN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE13return_objectEPS3_>
            }
        }
    dd65:	48 83 c4 60          	add    $0x60,%rsp
    dd69:	5d                   	pop    %rbp
    dd6a:	c3                   	ret
    dd6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000dd70 <_ZN3ktl18DefaultCacheConfig10CurrentCpu11current_cpuEv>:
        typedef ustl::sync::Mutex   Mutex;

        struct CurrentCpu
        {
            static auto current_cpu() -> size_t
            {  return ours::arch_current_cpu();  }
    dd70:	55                   	push   %rbp
    dd71:	48 89 e5             	mov    %rsp,%rbp
    dd74:	e8 37 68 ff ff       	call   45b0 <_ZN4ours16arch_current_cpuEv>
    dd79:	89 c0                	mov    %eax,%eax
    dd7b:	5d                   	pop    %rbp
    dd7c:	c3                   	ret
    dd7d:	0f 1f 00             	nopl   (%rax)

000000000000dd80 <_ZNKSt3__123__optional_storage_baseIN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEELb0EE9has_valueB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool has_value() const noexcept { return this->__engaged_; }
    dd80:	55                   	push   %rbp
    dd81:	48 89 e5             	mov    %rsp,%rbp
    dd84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dd88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dd8c:	8a 40 28             	mov    0x28(%rax),%al
    dd8f:	24 01                	and    $0x1,%al
    dd91:	5d                   	pop    %rbp
    dd92:	c3                   	ret
    dd93:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    dd9a:	00 00 00 
    dd9d:	0f 1f 00             	nopl   (%rax)

000000000000dda0 <_ZNSt3__18optionalIN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEEEptB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr add_pointer_t<value_type> operator->() noexcept {
    dda0:	55                   	push   %rbp
    dda1:	48 89 e5             	mov    %rsp,%rbp
    dda4:	48 83 ec 10          	sub    $0x10,%rsp
    dda8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ddac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return std::addressof(this->__get());
    ddb0:	e8 3b 00 00 00       	call   ddf0 <_ZNRSt3__123__optional_storage_baseIN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEELb0EE5__getB8nn210000Ev>
    ddb5:	48 89 c7             	mov    %rax,%rdi
    ddb8:	e8 23 00 00 00       	call   dde0 <_ZNSt3__19addressofB8nn210000IN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEEEEPT_RS8_>
    ddbd:	48 83 c4 10          	add    $0x10,%rsp
    ddc1:	5d                   	pop    %rbp
    ddc2:	c3                   	ret
    ddc3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ddca:	00 00 00 
    ddcd:	0f 1f 00             	nopl   (%rax)

000000000000ddd0 <_ZN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE13return_objectEPS3_>:
        {}
    ddd0:	55                   	push   %rbp
    ddd1:	48 89 e5             	mov    %rsp,%rbp
    ddd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ddd8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dddc:	5d                   	pop    %rbp
    dddd:	c3                   	ret
    ddde:	66 90                	xchg   %ax,%ax

000000000000dde0 <_ZNSt3__19addressofB8nn210000IN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEEEEPT_RS8_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
    dde0:	55                   	push   %rbp
    dde1:	48 89 e5             	mov    %rsp,%rbp
    dde4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
    dde8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ddec:	5d                   	pop    %rbp
    dded:	c3                   	ret
    ddee:	66 90                	xchg   %ax,%ax

000000000000ddf0 <_ZNRSt3__123__optional_storage_baseIN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS4_16FrameCacheConfigEEELb0EE5__getB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr value_type& __get() & noexcept { return this->__val_; }
    ddf0:	55                   	push   %rbp
    ddf1:	48 89 e5             	mov    %rsp,%rbp
    ddf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ddf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ddfc:	5d                   	pop    %rbp
    ddfd:	c3                   	ret
    ddfe:	66 90                	xchg   %ax,%ax

000000000000de00 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE11link_beforeEPNS0_9list_nodeIS3_EES8_>:
   //!
   //! <b>Complexity</b>: Constant
   //!
   //! <b>Throws</b>: Nothing.
   static void link_before(node_ptr nxt_node, node_ptr this_node) BOOST_NOEXCEPT
   {
    de00:	55                   	push   %rbp
    de01:	48 89 e5             	mov    %rsp,%rbp
    de04:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
    de08:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
      node_ptr prev(NodeTraits::get_previous(nxt_node));
    de0c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    de10:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   {  return n->prev_;  }
    de14:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    de18:	48 8b 40 08          	mov    0x8(%rax),%rax
    de1c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      NodeTraits::set_previous(this_node, prev);
    de20:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    de24:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    de28:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    de2c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   {  n->prev_ = prev;  }
    de30:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    de34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    de38:	48 89 48 08          	mov    %rcx,0x8(%rax)
      NodeTraits::set_next(this_node, nxt_node);
    de3c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    de40:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    de44:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    de48:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   {  n->next_ = next;  }
    de4c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    de50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    de54:	48 89 08             	mov    %rcx,(%rax)
      //nxt_node might be an alias for prev->next_
      //so use it before NodeTraits::set_next(prev, ...)
      //is called and the reference changes its value
      NodeTraits::set_previous(nxt_node, this_node);
    de57:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    de5b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    de5f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    de63:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   {  n->prev_ = prev;  }
    de67:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    de6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    de6f:	48 89 48 08          	mov    %rcx,0x8(%rax)
      NodeTraits::set_next(prev, this_node);
    de73:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    de77:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    de7b:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    de7f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   {  n->next_ = next;  }
    de83:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    de87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    de8b:	48 89 08             	mov    %rcx,(%rax)
   }
    de8e:	5d                   	pop    %rbp
    de8f:	c3                   	ret

000000000000de90 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE6uniqueEPKNS0_9list_nodeIS3_EE>:
   {
    de90:	55                   	push   %rbp
    de91:	48 89 e5             	mov    %rsp,%rbp
    de94:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
      node_ptr next = NodeTraits::get_next(this_node);
    de98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de9c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   {  return n->next_;  }
    dea0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dea4:	48 8b 00             	mov    (%rax),%rax
    dea7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      return !next || next == this_node;
    deab:	b0 01                	mov    $0x1,%al
    dead:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    deb2:	88 45 e7             	mov    %al,-0x19(%rbp)
    deb5:	74 0e                	je     dec5 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE6uniqueEPKNS0_9list_nodeIS3_EE+0x35>
    deb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    debb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    debf:	0f 94 c0             	sete   %al
    dec2:	88 45 e7             	mov    %al,-0x19(%rbp)
    dec5:	8a 45 e7             	mov    -0x19(%rbp),%al
    dec8:	24 01                	and    $0x1,%al
    deca:	5d                   	pop    %rbp
    decb:	c3                   	ret
    decc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000ded0 <_ZN3ktl14SingleCpuCacheIN4ours3mem7PmFrameENS2_16FrameCacheConfigEE11take_objectEv>:
        {  return 0;  }
    ded0:	55                   	push   %rbp
    ded1:	48 89 e5             	mov    %rsp,%rbp
    ded4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ded8:	31 c0                	xor    %eax,%eax
    deda:	5d                   	pop    %rbp
    dedb:	c3                   	ret
    dedc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000dee0 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE>:
    ZoneQueues::ZoneQueues(NodeId nid)
        : nid_(nid)
    {}

    auto ZoneQueues::emplace(PmZone *zone, ZoneType ztype) -> void 
    {
    dee0:	55                   	push   %rbp
    dee1:	48 89 e5             	mov    %rsp,%rbp
    dee4:	48 81 ec 10 06 00 00 	sub    $0x610,%rsp
    deeb:	48 89 bd a8 fa ff ff 	mov    %rdi,-0x558(%rbp)
    def2:	48 89 b5 a0 fa ff ff 	mov    %rsi,-0x560(%rbp)
    def9:	89 95 9c fa ff ff    	mov    %edx,-0x564(%rbp)
    deff:	48 8b 85 a8 fa ff ff 	mov    -0x558(%rbp),%rax
    df06:	48 89 85 58 fa ff ff 	mov    %rax,-0x5a8(%rbp)
        DEBUG_ASSERT(ztype < NR_ZONES_PER_NODE);
    df0d:	83 bd 9c fa ff ff 04 	cmpl   $0x4,-0x564(%rbp)
    df14:	7c 05                	jl     df1b <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0x3b>
    df16:	e8 e5 51 ff ff       	call   3100 <_ZN4ours5panicEv>
    df1b:	48 8b 8d 58 fa ff ff 	mov    -0x5a8(%rbp),%rcx
        DEBUG_ASSERT(local_zones_[ztype] == 0);
    df22:	48 83 c1 08          	add    $0x8,%rcx
    df26:	8b 85 9c fa ff ff    	mov    -0x564(%rbp),%eax
    df2c:	48 89 8d c8 fa ff ff 	mov    %rcx,-0x538(%rbp)
    df33:	48 89 85 c0 fa ff ff 	mov    %rax,-0x540(%rbp)
    df3a:	48 8b 85 c8 fa ff ff 	mov    -0x538(%rbp),%rax
    df41:	48 89 85 80 fb ff ff 	mov    %rax,-0x480(%rbp)
    df48:	48 8b 85 80 fb ff ff 	mov    -0x480(%rbp),%rax
    df4f:	48 89 85 98 fb ff ff 	mov    %rax,-0x468(%rbp)
    df56:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
    df5d:	48 8b 8d c0 fa ff ff 	mov    -0x540(%rbp),%rcx
    df64:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
    df69:	74 05                	je     df70 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0x90>
    df6b:	e8 90 51 ff ff       	call   3100 <_ZN4ours5panicEv>

        if (!zone) {
    df70:	48 83 bd a0 fa ff ff 	cmpq   $0x0,-0x560(%rbp)
    df77:	00 
    df78:	75 37                	jne    dfb1 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0xd1>
            panic("Error {}", 0);
    df7a:	48 8d 35 7a 10 02 00 	lea    0x2107a(%rip),%rsi        # 2effb <.L.str>
    df81:	48 8d bd 88 fa ff ff 	lea    -0x578(%rbp),%rdi
    df88:	e8 f3 52 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    df8d:	c7 85 84 fa ff ff 00 	movl   $0x0,-0x57c(%rbp)
    df94:	00 00 00 
    df97:	48 8b bd 88 fa ff ff 	mov    -0x578(%rbp),%rdi
    df9e:	48 8b b5 90 fa ff ff 	mov    -0x570(%rbp),%rsi
    dfa5:	48 8d 95 84 fa ff ff 	lea    -0x57c(%rbp),%rdx
    dfac:	e8 bf 16 00 00       	call   f670 <_ZN4ours5panicIJiEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    dfb1:	48 8b 8d 58 fa ff ff 	mov    -0x5a8(%rbp),%rcx
            return;
        }

        local_zones_[ztype] = zone;
    dfb8:	48 8b 95 a0 fa ff ff 	mov    -0x560(%rbp),%rdx
    dfbf:	48 83 c1 08          	add    $0x8,%rcx
    dfc3:	8b 85 9c fa ff ff    	mov    -0x564(%rbp),%eax
    dfc9:	48 89 8d b8 fa ff ff 	mov    %rcx,-0x548(%rbp)
    dfd0:	48 89 85 b0 fa ff ff 	mov    %rax,-0x550(%rbp)
    dfd7:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
    dfde:	48 89 85 88 fb ff ff 	mov    %rax,-0x478(%rbp)
    dfe5:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
    dfec:	48 89 85 90 fb ff ff 	mov    %rax,-0x470(%rbp)
    dff3:	48 8b 85 90 fb ff ff 	mov    -0x470(%rbp),%rax
    dffa:	48 8b 8d b0 fa ff ff 	mov    -0x550(%rbp),%rcx
    e001:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        for (auto i = 0; i < local_zones_.size(); ++i) {
    e005:	c7 85 80 fa ff ff 00 	movl   $0x0,-0x580(%rbp)
    e00c:	00 00 00 
    e00f:	48 8b 8d 58 fa ff ff 	mov    -0x5a8(%rbp),%rcx
    e016:	48 63 85 80 fa ff ff 	movslq -0x580(%rbp),%rax
    e01d:	48 83 c1 08          	add    $0x8,%rcx
    e021:	48 89 8d d0 fa ff ff 	mov    %rcx,-0x530(%rbp)
    e028:	48 8b 8d d0 fa ff ff 	mov    -0x530(%rbp),%rcx
    e02f:	48 3b 41 20          	cmp    0x20(%rcx),%rax
    e033:	0f 83 7b 0a 00 00    	jae    eab4 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0xbd4>
            if (ztype > i) {
    e039:	8b 85 9c fa ff ff    	mov    -0x564(%rbp),%eax
    e03f:	3b 85 80 fa ff ff    	cmp    -0x580(%rbp),%eax
    e045:	0f 8e 53 0a 00 00    	jle    ea9e <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0xbbe>
    e04b:	48 8b 8d 58 fa ff ff 	mov    -0x5a8(%rbp),%rcx
                local_queue_.emplace(local_queue_.begin() + i, zone, ztype);
    e052:	48 89 c8             	mov    %rcx,%rax
    e055:	48 83 c0 30          	add    $0x30,%rax
    e059:	48 83 c1 30          	add    $0x30,%rcx
    e05d:	48 8d 95 68 fa ff ff 	lea    -0x598(%rbp),%rdx
    e064:	48 89 95 30 fb ff ff 	mov    %rdx,-0x4d0(%rbp)
    e06b:	48 89 8d 28 fb ff ff 	mov    %rcx,-0x4d8(%rbp)
    e072:	48 8b 8d 28 fb ff ff 	mov    -0x4d8(%rbp),%rcx
    e079:	48 89 8d a0 fb ff ff 	mov    %rcx,-0x460(%rbp)
    e080:	48 8b 8d a0 fb ff ff 	mov    -0x460(%rbp),%rcx
    e087:	48 89 8d c8 fb ff ff 	mov    %rcx,-0x438(%rbp)
    e08e:	48 8b 8d c8 fb ff ff 	mov    -0x438(%rbp),%rcx
    e095:	48 8d 95 68 fa ff ff 	lea    -0x598(%rbp),%rdx
    e09c:	48 89 95 b0 fb ff ff 	mov    %rdx,-0x450(%rbp)
    e0a3:	48 89 8d a8 fb ff ff 	mov    %rcx,-0x458(%rbp)
    e0aa:	48 8b 8d b0 fb ff ff 	mov    -0x450(%rbp),%rcx
      : m_ptr(ptr)
    e0b1:	48 8b 95 a8 fb ff ff 	mov    -0x458(%rbp),%rdx
    e0b8:	48 89 11             	mov    %rdx,(%rcx)
    e0bb:	48 63 8d 80 fa ff ff 	movslq -0x580(%rbp),%rcx
    e0c2:	48 8d 95 70 fa ff ff 	lea    -0x590(%rbp),%rdx
    e0c9:	48 89 95 20 fb ff ff 	mov    %rdx,-0x4e0(%rbp)
    e0d0:	48 8d 95 68 fa ff ff 	lea    -0x598(%rbp),%rdx
    e0d7:	48 89 95 18 fb ff ff 	mov    %rdx,-0x4e8(%rbp)
    e0de:	48 89 8d 10 fb ff ff 	mov    %rcx,-0x4f0(%rbp)
   {  BOOST_ASSERT(x.m_ptr || !off); return vec_iterator(x.m_ptr+off);  }
    e0e5:	48 8b 8d 18 fb ff ff 	mov    -0x4e8(%rbp),%rcx
    e0ec:	48 8b 09             	mov    (%rcx),%rcx
    e0ef:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
    e0f6:	48 c1 e2 04          	shl    $0x4,%rdx
    e0fa:	48 01 d1             	add    %rdx,%rcx
    e0fd:	48 8d 95 70 fa ff ff 	lea    -0x590(%rbp),%rdx
    e104:	48 89 95 c0 fb ff ff 	mov    %rdx,-0x440(%rbp)
    e10b:	48 89 8d b8 fb ff ff 	mov    %rcx,-0x448(%rbp)
    e112:	48 8b 8d c0 fb ff ff 	mov    -0x440(%rbp),%rcx
      : m_ptr(ptr)
    e119:	48 8b 95 b8 fb ff ff 	mov    -0x448(%rbp),%rdx
    e120:	48 89 11             	mov    %rdx,(%rcx)
    e123:	48 8d 8d 78 fa ff ff 	lea    -0x588(%rbp),%rcx
    e12a:	48 89 8d 40 fb ff ff 	mov    %rcx,-0x4c0(%rbp)
    e131:	48 8d 8d 70 fa ff ff 	lea    -0x590(%rbp),%rcx
    e138:	48 89 8d 38 fb ff ff 	mov    %rcx,-0x4c8(%rbp)
    e13f:	48 8b 8d 40 fb ff ff 	mov    -0x4c0(%rbp),%rcx
      :  m_ptr(other.get_ptr())
    e146:	48 8b 95 38 fb ff ff 	mov    -0x4c8(%rbp),%rdx
    e14d:	48 89 95 78 fb ff ff 	mov    %rdx,-0x488(%rbp)
    e154:	48 8b 95 78 fb ff ff 	mov    -0x488(%rbp),%rdx
    e15b:	48 8b 12             	mov    (%rdx),%rdx
    e15e:	48 89 11             	mov    %rdx,(%rcx)
    e161:	48 8d 8d 60 fa ff ff 	lea    -0x5a0(%rbp),%rcx
    e168:	48 89 8d 08 fb ff ff 	mov    %rcx,-0x4f8(%rbp)
    e16f:	48 89 85 00 fb ff ff 	mov    %rax,-0x500(%rbp)
    e176:	48 8d 85 78 fa ff ff 	lea    -0x588(%rbp),%rax
    e17d:	48 89 85 f8 fa ff ff 	mov    %rax,-0x508(%rbp)
    e184:	48 8d 85 a0 fa ff ff 	lea    -0x560(%rbp),%rax
    e18b:	48 89 85 f0 fa ff ff 	mov    %rax,-0x510(%rbp)
    e192:	48 8d 85 9c fa ff ff 	lea    -0x564(%rbp),%rax
    e199:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
    e1a0:	48 8b 85 00 fb ff ff 	mov    -0x500(%rbp),%rax
    e1a7:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
    e1ae:	48 8d 85 78 fa ff ff 	lea    -0x588(%rbp),%rax
    e1b5:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
{  return   it.get_ptr();  }
    e1bc:	48 8b 85 38 fc ff ff 	mov    -0x3c8(%rbp),%rax
    e1c3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    e1c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e1cb:	48 89 85 48 fa ff ff 	mov    %rax,-0x5b8(%rbp)
   {
      BOOST_ASSERT(this->priv_in_range_or_end(position));
      //Just call more general insert(pos, size, value) and return iterator
      typedef dtl::insert_emplace_proxy<allocator_type, Args...> proxy_t;
      return this->priv_insert_forward_range( vector_iterator_get_ptr(position), 1
                                            , proxy_t(::boost::forward<Args>(args)...));
    e1d2:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
    e1d9:	48 89 85 40 fc ff ff 	mov    %rax,-0x3c0(%rbp)
      #else //Old move

         template <class T>
         BOOST_MOVE_INTRINSIC_CAST
         T&& forward(typename ::boost::move_detail::remove_reference<T>::type& t) BOOST_NOEXCEPT
         {  return static_cast<T&&>(t);   }
    e1e0:	48 8b 8d 40 fc ff ff 	mov    -0x3c0(%rbp),%rcx
    e1e7:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
    e1ee:	48 89 85 48 fc ff ff 	mov    %rax,-0x3b8(%rbp)
    e1f5:	48 8b 85 48 fc ff ff 	mov    -0x3b8(%rbp),%rax
    e1fc:	48 8d 95 d8 fa ff ff 	lea    -0x528(%rbp),%rdx
    e203:	48 89 95 60 fc ff ff 	mov    %rdx,-0x3a0(%rbp)
    e20a:	48 89 8d 58 fc ff ff 	mov    %rcx,-0x3a8(%rbp)
    e211:	48 89 85 50 fc ff ff 	mov    %rax,-0x3b0(%rbp)
    e218:	48 8b 95 60 fc ff ff 	mov    -0x3a0(%rbp),%rdx
   typedef typename base_t::index_tuple_t          index_tuple_t;

   static const bool single_value = true;

   BOOST_CONTAINER_FORCEINLINE explicit insert_emplace_proxy(BOOST_FWD_REF(Args)... args)
      : base_t(::boost::forward<Args>(args)...)
    e21f:	48 8b 85 58 fc ff ff 	mov    -0x3a8(%rbp),%rax
    e226:	48 89 85 68 fc ff ff 	mov    %rax,-0x398(%rbp)
    e22d:	48 8b 8d 68 fc ff ff 	mov    -0x398(%rbp),%rcx
    e234:	48 8b 85 50 fc ff ff 	mov    -0x3b0(%rbp),%rax
    e23b:	48 89 85 70 fc ff ff 	mov    %rax,-0x390(%rbp)
    e242:	48 8b 85 70 fc ff ff 	mov    -0x390(%rbp),%rax
    e249:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    e24d:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    e251:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    e255:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      : args_(args...)
    e259:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    e25d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e261:	e8 3a 22 00 00       	call   104a0 <_ZN5boost9container3dtl5tupleIJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEEC2IS7_JS9_EEEOT_DpOT0_>
    e266:	48 8b 8d 40 fa ff ff 	mov    -0x5c0(%rbp),%rcx
    e26d:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
      return this->priv_insert_forward_range( vector_iterator_get_ptr(position), 1
    e274:	48 8b b5 d8 fa ff ff 	mov    -0x528(%rbp),%rsi
    e27b:	48 8b 95 e0 fa ff ff 	mov    -0x520(%rbp),%rdx
    e282:	48 8d bd 60 fa ff ff 	lea    -0x5a0(%rbp),%rdi
    e289:	48 89 bd 20 fc ff ff 	mov    %rdi,-0x3e0(%rbp)
    e290:	48 89 b5 10 fc ff ff 	mov    %rsi,-0x3f0(%rbp)
    e297:	48 89 95 18 fc ff ff 	mov    %rdx,-0x3e8(%rbp)
    e29e:	48 89 8d 08 fc ff ff 	mov    %rcx,-0x3f8(%rbp)
    e2a5:	48 89 85 00 fc ff ff 	mov    %rax,-0x400(%rbp)
    e2ac:	48 c7 85 f8 fb ff ff 	movq   $0x1,-0x408(%rbp)
    e2b3:	01 00 00 00 
    e2b7:	48 8b 95 08 fc ff ff 	mov    -0x3f8(%rbp),%rdx
    e2be:	48 89 95 50 fa ff ff 	mov    %rdx,-0x5b0(%rbp)
   template <class InsertionProxy>
   BOOST_CONTAINER_FORCEINLINE iterator priv_insert_forward_range
      (const pointer &pos, const size_type n, const InsertionProxy insert_range_proxy)
   {
      BOOST_ASSERT(this->m_holder.capacity() >= this->m_holder.m_size);
      T *const p = boost::movelib::to_raw_pointer(pos);
    e2c5:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
    e2cc:	48 8b 00             	mov    (%rax),%rax
    e2cf:	48 89 85 78 fc ff ff 	mov    %rax,-0x388(%rbp)
    e2d6:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
    e2dd:	48 89 85 f0 fb ff ff 	mov    %rax,-0x410(%rbp)
      //Check if we have enough memory or try to expand current memory
      if (BOOST_LIKELY(n <= (this->m_holder.capacity() - this->m_holder.m_size))){
    e2e4:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
    e2eb:	48 89 95 80 fc ff ff 	mov    %rdx,-0x380(%rbp)
    e2f2:	b9 04 00 00 00       	mov    $0x4,%ecx
    e2f7:	48 2b 4a 40          	sub    0x40(%rdx),%rcx
    e2fb:	48 39 c8             	cmp    %rcx,%rax
    e2fe:	0f 87 0c 07 00 00    	ja     ea10 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0xb30>
    e304:	48 8b 95 50 fa ff ff 	mov    -0x5b0(%rbp),%rdx
         //Expand forward
         this->priv_insert_forward_range_expand_forward
            (p, n, insert_range_proxy, dtl::bool_<dtl::is_single_value_proxy<InsertionProxy>::value>());
    e30b:	48 8b 8d f0 fb ff ff 	mov    -0x410(%rbp),%rcx
    e312:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
    e319:	48 8b b5 10 fc ff ff 	mov    -0x3f0(%rbp),%rsi
    e320:	48 89 b5 e0 fb ff ff 	mov    %rsi,-0x420(%rbp)
    e327:	48 8b b5 18 fc ff ff 	mov    -0x3e8(%rbp),%rsi
    e32e:	48 89 b5 e8 fb ff ff 	mov    %rsi,-0x418(%rbp)
         this->priv_insert_forward_range_expand_forward
    e335:	48 8b bd e0 fb ff ff 	mov    -0x420(%rbp),%rdi
    e33c:	48 8b b5 e8 fb ff ff 	mov    -0x418(%rbp),%rsi
    e343:	48 89 bd b8 fc ff ff 	mov    %rdi,-0x348(%rbp)
    e34a:	48 89 b5 c0 fc ff ff 	mov    %rsi,-0x340(%rbp)
    e351:	48 89 95 b0 fc ff ff 	mov    %rdx,-0x350(%rbp)
    e358:	48 89 8d a8 fc ff ff 	mov    %rcx,-0x358(%rbp)
    e35f:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    e366:	48 8b 85 b0 fc ff ff 	mov    -0x350(%rbp),%rax
    e36d:	48 89 85 38 fa ff ff 	mov    %rax,-0x5c8(%rbp)
    e374:	48 89 85 00 fd ff ff 	mov    %rax,-0x300(%rbp)
    e37b:	48 8b 95 00 fd ff ff 	mov    -0x300(%rbp),%rdx
    e382:	48 89 95 a0 fd ff ff 	mov    %rdx,-0x260(%rbp)
    e389:	48 8b 8d a0 fd ff ff 	mov    -0x260(%rbp),%rcx
    e390:	48 89 8d a8 fd ff ff 	mov    %rcx,-0x258(%rbp)
    e397:	48 8b 8d a8 fd ff ff 	mov    -0x258(%rbp),%rcx
    e39e:	48 89 8d b0 fd ff ff 	mov    %rcx,-0x250(%rbp)
    e3a5:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
    e3ac:	48 89 8d b8 fd ff ff 	mov    %rcx,-0x248(%rbp)
    e3b3:	48 8b 8d b8 fd ff ff 	mov    -0x248(%rbp),%rcx
   private:
   BOOST_CONTAINER_FORCEINLINE T *priv_raw_begin() const
   {  return boost::movelib::to_raw_pointer(m_holder.start());  }

   BOOST_CONTAINER_FORCEINLINE T* priv_raw_end() const
   {  return this->priv_raw_begin() + this->m_holder.m_size;  }
    e3ba:	48 8b 52 40          	mov    0x40(%rdx),%rdx
    e3be:	48 c1 e2 04          	shl    $0x4,%rdx
    e3c2:	48 01 d1             	add    %rdx,%rcx
   BOOST_CONTAINER_FORCEINLINE void priv_insert_forward_range_expand_forward
      (T* const raw_pos, const size_type, InsertionProxy insert_range_proxy, dtl::true_type)
   {
      BOOST_ASSERT(this->room_enough());
      //There is enough memory
      T* const old_finish = this->priv_raw_end();
    e3c5:	48 89 8d 98 fc ff ff 	mov    %rcx,-0x368(%rbp)
    e3cc:	48 89 85 08 fd ff ff 	mov    %rax,-0x2f8(%rbp)
    e3d3:	48 8b 85 08 fd ff ff 	mov    -0x2f8(%rbp),%rax
      allocator_type & a = this->m_holder.alloc();
    e3da:	48 89 85 90 fc ff ff 	mov    %rax,-0x370(%rbp)

      if (old_finish == raw_pos){
    e3e1:	48 8b 85 98 fc ff ff 	mov    -0x368(%rbp),%rax
    e3e8:	48 3b 85 a8 fc ff ff 	cmp    -0x358(%rbp),%rax
    e3ef:	0f 85 ec 01 00 00    	jne    e5e1 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0x701>
         insert_range_proxy.uninitialized_copy_n_and_update(a, old_finish, 1);
    e3f5:	48 8b 8d 90 fc ff ff 	mov    -0x370(%rbp),%rcx
    e3fc:	48 8b 85 98 fc ff ff 	mov    -0x368(%rbp),%rax
    e403:	48 8d 95 b8 fc ff ff 	lea    -0x348(%rbp),%rdx
    e40a:	48 89 95 30 fd ff ff 	mov    %rdx,-0x2d0(%rbp)
    e411:	48 89 8d 28 fd ff ff 	mov    %rcx,-0x2d8(%rbp)
    e418:	48 89 85 20 fd ff ff 	mov    %rax,-0x2e0(%rbp)
    e41f:	48 c7 85 18 fd ff ff 	movq   $0x1,-0x2e8(%rbp)
    e426:	01 00 00 00 
    e42a:	48 8b b5 30 fd ff ff 	mov    -0x2d0(%rbp),%rsi
   {  this->priv_uninitialized_copy_some_and_update(a, index_tuple_t(), p, n);  }
    e431:	48 8b 95 28 fd ff ff 	mov    -0x2d8(%rbp),%rdx
    e438:	48 8b 8d 20 fd ff ff 	mov    -0x2e0(%rbp),%rcx
    e43f:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
    e446:	48 89 b5 e0 fd ff ff 	mov    %rsi,-0x220(%rbp)
    e44d:	48 89 95 d8 fd ff ff 	mov    %rdx,-0x228(%rbp)
    e454:	48 8d 95 17 fd ff ff 	lea    -0x2e9(%rbp),%rdx
    e45b:	48 89 95 d0 fd ff ff 	mov    %rdx,-0x230(%rbp)
    e462:	48 89 8d c8 fd ff ff 	mov    %rcx,-0x238(%rbp)
    e469:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
    e470:	48 8b bd e0 fd ff ff 	mov    -0x220(%rbp),%rdi
    e477:	48 89 bd 18 fa ff ff 	mov    %rdi,-0x5e8(%rbp)
      alloc_traits::construct( a, boost::movelib::iterator_to_raw_pointer(p), ::boost::forward<Args>(get<IdxPack>(this->args_))... );
    e47e:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
    e485:	48 89 85 20 fa ff ff 	mov    %rax,-0x5e0(%rbp)
    e48c:	48 8d 85 c8 fd ff ff 	lea    -0x238(%rbp),%rax
    e493:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
template <class Iterator>
BOOST_MOVE_FORCEINLINE typename boost::movelib::detail::iterator_to_element_ptr<Iterator>::type
   iterator_to_raw_pointer(const Iterator &i)
{
   return ::boost::movelib::to_raw_pointer
      (  ::boost::movelib::detail::iterator_to_pointer(i)   );
    e49a:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
    e4a1:	48 8b 00             	mov    (%rax),%rax
    e4a4:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
{  return i; }
    e4ab:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    e4b2:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
    e4b9:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    e4c0:	48 89 85 28 fa ff ff 	mov    %rax,-0x5d8(%rbp)
    e4c7:	e8 b4 1e 00 00       	call   10380 <_ZN5boost9container3dtl3getILi0EJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEEENS1_8get_implIXT_ENS1_5tupleIJDpT0_EEEE4typeERSE_>
    e4cc:	48 8b bd 18 fa ff ff 	mov    -0x5e8(%rbp),%rdi
    e4d3:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
    e4da:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
    e4e1:	48 89 85 30 fa ff ff 	mov    %rax,-0x5d0(%rbp)
    e4e8:	e8 b3 1e 00 00       	call   103a0 <_ZN5boost9container3dtl3getILi1EJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEEENS1_8get_implIXT_ENS1_5tupleIJDpT0_EEEE4typeERSE_>
    e4ed:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
    e4f4:	48 8b 95 28 fa ff ff 	mov    -0x5d8(%rbp),%rdx
    e4fb:	48 8b 8d 30 fa ff ff 	mov    -0x5d0(%rbp),%rcx
    e502:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
    e509:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
    e510:	48 89 b5 10 fe ff ff 	mov    %rsi,-0x1f0(%rbp)
    e517:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
    e51e:	48 89 8d 00 fe ff ff 	mov    %rcx,-0x200(%rbp)
    e525:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
            < dtl::is_not_std_allocator<Allocator>
            , boost::container::dtl::has_member_function_callable_with_construct
                  < Allocator, T*, Args... >
            >::value;
         dtl::bool_<value> flag;
         allocator_traits::priv_construct(flag, a, p, ::boost::forward<Args>(args)...);
    e52c:	48 8b b5 10 fe ff ff 	mov    -0x1f0(%rbp),%rsi
    e533:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
    e53a:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
    e541:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
    e548:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
    e54f:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    e556:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
    e55d:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
    e564:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    e56b:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    e572:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    e579:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
      BOOST_CONTAINER_FORCEINLINE static void priv_construct(dtl::true_type, Allocator &a, T *p, BOOST_FWD_REF(Args) ...args)
      {  a.construct( p, ::boost::forward<Args>(args)...);  }

      template<class T, class ...Args>
      BOOST_CONTAINER_FORCEINLINE static void priv_construct(dtl::false_type, Allocator &, T *p, BOOST_FWD_REF(Args) ...args)
      {  ::new((void*)p, boost_container_new_t()) T(::boost::forward<Args>(args)...); }
    e580:	48 8b b5 68 fe ff ff 	mov    -0x198(%rbp),%rsi
    e587:	bf 10 00 00 00       	mov    $0x10,%edi
    e58c:	e8 2f 1e 00 00       	call   103c0 <_ZnwmPv21boost_container_new_t>
    e591:	48 89 c1             	mov    %rax,%rcx
    e594:	48 8b 85 38 fa ff ff 	mov    -0x5c8(%rbp),%rax
    e59b:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
    e5a2:	48 89 95 78 fe ff ff 	mov    %rdx,-0x188(%rbp)
    e5a9:	48 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%rdx
    e5b0:	48 8b 12             	mov    (%rdx),%rdx
    e5b3:	48 89 11             	mov    %rdx,(%rcx)
    e5b6:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
    e5bd:	48 89 95 80 fe ff ff 	mov    %rdx,-0x180(%rbp)
    e5c4:	48 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%rdx
    e5cb:	8b 12                	mov    (%rdx),%edx
    e5cd:	89 51 08             	mov    %edx,0x8(%rcx)
         ++this->m_holder.m_size;
    e5d0:	48 8b 48 40          	mov    0x40(%rax),%rcx
    e5d4:	48 83 c1 01          	add    $0x1,%rcx
    e5d8:	48 89 48 40          	mov    %rcx,0x40(%rax)
      }
    e5dc:	e9 fa 03 00 00       	jmp    e9db <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0xafb>
      else{
         //New elements can be just copied.
         //Move to uninitialized memory last objects
         T * const before_old_finish = old_finish-1;
    e5e1:	48 8b 85 98 fc ff ff 	mov    -0x368(%rbp),%rax
    e5e8:	48 83 c0 f0          	add    $0xfffffffffffffff0,%rax
    e5ec:	48 89 85 88 fc ff ff 	mov    %rax,-0x378(%rbp)

         allocator_traits_type::construct(a, old_finish, ::boost::move(*before_old_finish));
    e5f3:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
    e5fa:	48 8b 8d 98 fc ff ff 	mov    -0x368(%rbp),%rcx
    e601:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
    e608:	48 89 85 50 fd ff ff 	mov    %rax,-0x2b0(%rbp)
         { return static_cast<typename ::boost::move_detail::remove_reference<T>::type &&>(t); }
    e60f:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
    e616:	48 89 95 48 fd ff ff 	mov    %rdx,-0x2b8(%rbp)
    e61d:	48 89 8d 40 fd ff ff 	mov    %rcx,-0x2c0(%rbp)
    e624:	48 89 85 38 fd ff ff 	mov    %rax,-0x2c8(%rbp)
         allocator_traits::priv_construct(flag, a, p, ::boost::forward<Args>(args)...);
    e62b:	48 8b 95 48 fd ff ff 	mov    -0x2b8(%rbp),%rdx
    e632:	48 8b 8d 40 fd ff ff 	mov    -0x2c0(%rbp),%rcx
    e639:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
    e640:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
         {  return static_cast<T&&>(t);   }
    e647:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
    e64e:	48 89 95 b0 fe ff ff 	mov    %rdx,-0x150(%rbp)
    e655:	48 89 8d a8 fe ff ff 	mov    %rcx,-0x158(%rbp)
    e65c:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
      {  ::new((void*)p, boost_container_new_t()) T(::boost::forward<Args>(args)...); }
    e663:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
    e66a:	bf 10 00 00 00       	mov    $0x10,%edi
    e66f:	e8 4c 1d 00 00       	call   103c0 <_ZnwmPv21boost_container_new_t>
    e674:	48 89 c1             	mov    %rax,%rcx
    e677:	48 8b 85 38 fa ff ff 	mov    -0x5c8(%rbp),%rax
    e67e:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
    e685:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
    e68c:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
    e693:	48 8b 32             	mov    (%rdx),%rsi
    e696:	48 89 31             	mov    %rsi,(%rcx)
    e699:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    e69d:	48 89 51 08          	mov    %rdx,0x8(%rcx)
         ++this->m_holder.m_size;
    e6a1:	48 8b 48 40          	mov    0x40(%rax),%rcx
    e6a5:	48 83 c1 01          	add    $0x1,%rcx
    e6a9:	48 89 48 40          	mov    %rcx,0x40(%rax)
         //Copy previous to last objects to the initialized end
         boost::container::move_backward(raw_pos, before_old_finish, old_finish);
    e6ad:	48 8b 95 a8 fc ff ff 	mov    -0x358(%rbp),%rdx
    e6b4:	48 8b 8d 88 fc ff ff 	mov    -0x378(%rbp),%rcx
    e6bb:	48 8b 85 98 fc ff ff 	mov    -0x368(%rbp),%rax
    e6c2:	48 89 95 70 fd ff ff 	mov    %rdx,-0x290(%rbp)
    e6c9:	48 89 8d 68 fd ff ff 	mov    %rcx,-0x298(%rbp)
    e6d0:	48 89 85 60 fd ff ff 	mov    %rax,-0x2a0(%rbp)
typename F>   // F models ForwardIterator
BOOST_CONTAINER_FORCEINLINE typename dtl::enable_if_memtransfer_copy_assignable<I, F, F>::type
   move_backward(I f, I l, F r) BOOST_NOEXCEPT_OR_NOTHROW
{
   typedef typename boost::container::iter_value<I>::type value_type;
   const std::size_t n = boost::container::iterator_udistance(f, l);
    e6d7:	48 8b 8d 70 fd ff ff 	mov    -0x290(%rbp),%rcx
    e6de:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
    e6e5:	48 89 8d d0 fe ff ff 	mov    %rcx,-0x130(%rbp)
    e6ec:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)

template<class It>
BOOST_INTRUSIVE_FORCEINLINE typename iter_size<It>::type
   iterator_udistance(It first, It last)
{
   return (typename iter_size<It>::type)(iterator_distance)(first, last);
    e6f3:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
    e6fa:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    e701:	48 89 8d e8 fe ff ff 	mov    %rcx,-0x118(%rbp)
    e708:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   typename iter_difference<InputIt>::type off = last - first;
    e70f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    e716:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
    e71d:	48 29 c8             	sub    %rcx,%rax
    e720:	48 c1 f8 04          	sar    $0x4,%rax
    e724:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
   return off;
    e72b:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    e732:	48 89 85 58 fd ff ff 	mov    %rax,-0x2a8(%rbp)
   if (BOOST_LIKELY(n != 0)){
    e739:	48 83 bd 58 fd ff ff 	cmpq   $0x0,-0x2a8(%rbp)
    e740:	00 
    e741:	0f 84 99 00 00 00    	je     e7e0 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0x900>
      r -= n;
    e747:	48 8b 95 58 fd ff ff 	mov    -0x2a8(%rbp),%rdx
    e74e:	48 8b 85 60 fd ff ff 	mov    -0x2a0(%rbp),%rax
    e755:	31 c9                	xor    %ecx,%ecx
    e757:	48 29 d1             	sub    %rdx,%rcx
    e75a:	48 c1 e1 04          	shl    $0x4,%rcx
    e75e:	48 01 c8             	add    %rcx,%rax
    e761:	48 89 85 60 fd ff ff 	mov    %rax,-0x2a0(%rbp)
    e768:	48 8d 85 60 fd ff ff 	lea    -0x2a0(%rbp),%rax
    e76f:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
      (  ::boost::movelib::detail::iterator_to_pointer(i)   );
    e776:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    e77d:	48 8b 00             	mov    (%rax),%rax
    e780:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
{  return i; }
    e787:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
    e78e:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
    e795:	48 8b bd 50 fe ff ff 	mov    -0x1b0(%rbp),%rdi
    e79c:	48 8d 85 70 fd ff ff 	lea    -0x290(%rbp),%rax
    e7a3:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
      (  ::boost::movelib::detail::iterator_to_pointer(i)   );
    e7aa:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
    e7b1:	48 8b 00             	mov    (%rax),%rax
    e7b4:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
{  return i; }
    e7bb:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
    e7c2:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
    e7c9:	48 8b b5 40 fe ff ff 	mov    -0x1c0(%rbp),%rsi
      std::memmove((boost::movelib::iterator_to_raw_pointer)(r), (boost::movelib::iterator_to_raw_pointer)(f), sizeof(value_type)*n);
    e7d0:	48 8b 95 58 fd ff ff 	mov    -0x2a8(%rbp),%rdx
    e7d7:	48 c1 e2 04          	shl    $0x4,%rdx
    e7db:	e8 e0 a9 00 00       	call   191c0 <memmove>
         //Insert new objects in the raw_pos
         insert_range_proxy.copy_n_and_update(a, raw_pos, 1);
    e7e0:	48 8b 8d 90 fc ff ff 	mov    -0x370(%rbp),%rcx
    e7e7:	48 8b 85 a8 fc ff ff 	mov    -0x358(%rbp),%rax
    e7ee:	48 8d 95 b8 fc ff ff 	lea    -0x348(%rbp),%rdx
    e7f5:	48 89 95 98 fd ff ff 	mov    %rdx,-0x268(%rbp)
    e7fc:	48 89 8d 90 fd ff ff 	mov    %rcx,-0x270(%rbp)
    e803:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
    e80a:	48 c7 85 80 fd ff ff 	movq   $0x1,-0x280(%rbp)
    e811:	01 00 00 00 
    e815:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
   {}

   template<class Iterator>
   BOOST_CONTAINER_FORCEINLINE void copy_n_and_update(Allocator &a, Iterator p, std::size_t n)
   {  this->priv_copy_some_and_update(a, index_tuple_t(), p, n);  }
    e81c:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
    e823:	48 8b 8d 88 fd ff ff 	mov    -0x278(%rbp),%rcx
    e82a:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
    e831:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
    e838:	48 89 95 20 ff ff ff 	mov    %rdx,-0xe0(%rbp)
    e83f:	48 8d 95 7f fd ff ff 	lea    -0x281(%rbp),%rdx
    e846:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
    e84d:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
    e854:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    e85b:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
    e862:	48 89 bd f8 f9 ff ff 	mov    %rdi,-0x608(%rbp)
   template<std::size_t ...IdxPack, class Iterator>
   BOOST_CONTAINER_FORCEINLINE void priv_copy_some_and_update(Allocator &a, const index_tuple<IdxPack...>&, Iterator p, std::size_t n)
   {
      BOOST_ASSERT(n ==1); (void)n;
      typename dtl::aligned_storage<sizeof(value_type), dtl::alignment_of<value_type>::value>::type v;
      alloc_traits::construct(a, move_detail::force_ptr<value_type *>(&v), ::boost::forward<Args>(get<IdxPack>(this->args_))...);
    e869:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    e870:	48 89 85 00 fa ff ff 	mov    %rax,-0x600(%rbp)
    e877:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
    e87e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)


template <typename T>
BOOST_MOVE_FORCEINLINE T force_ptr(const volatile void *p)
{
   return static_cast<T>(const_cast<void*>(p));
    e882:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e886:	48 89 85 08 fa ff ff 	mov    %rax,-0x5f8(%rbp)
    e88d:	e8 ee 1a 00 00       	call   10380 <_ZN5boost9container3dtl3getILi0EJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEEENS1_8get_implIXT_ENS1_5tupleIJDpT0_EEEE4typeERSE_>
    e892:	48 8b bd f8 f9 ff ff 	mov    -0x608(%rbp),%rdi
    e899:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    e8a0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    e8a7:	48 89 85 10 fa ff ff 	mov    %rax,-0x5f0(%rbp)
    e8ae:	e8 ed 1a 00 00       	call   103a0 <_ZN5boost9container3dtl3getILi1EJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEEENS1_8get_implIXT_ENS1_5tupleIJDpT0_EEEE4typeERSE_>
    e8b3:	48 8b b5 00 fa ff ff 	mov    -0x600(%rbp),%rsi
    e8ba:	48 8b 95 08 fa ff ff 	mov    -0x5f8(%rbp),%rdx
    e8c1:	48 8b 8d 10 fa ff ff 	mov    -0x5f0(%rbp),%rcx
    e8c8:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    e8cf:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    e8d6:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
    e8dd:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
    e8e4:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
    e8eb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
         allocator_traits::priv_construct(flag, a, p, ::boost::forward<Args>(args)...);
    e8f2:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
    e8f9:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
    e900:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    e907:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    e90e:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
    e915:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e91c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    e923:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    e92a:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
    e92e:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
    e932:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    e936:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      {  ::new((void*)p, boost_container_new_t()) T(::boost::forward<Args>(args)...); }
    e93d:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
    e941:	bf 10 00 00 00       	mov    $0x10,%edi
    e946:	e8 75 1a 00 00       	call   103c0 <_ZnwmPv21boost_container_new_t>
    e94b:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    e94f:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    e953:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    e957:	48 8b 09             	mov    (%rcx),%rcx
    e95a:	48 89 08             	mov    %rcx,(%rax)
    e95d:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    e964:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    e968:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    e96c:	8b 09                	mov    (%rcx),%ecx
    e96e:	89 48 08             	mov    %ecx,0x8(%rax)
    e971:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
    e978:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    e97c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
      value_type *vp = move_detail::force_ptr<value_type *>(&v);
    e980:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
      BOOST_CONTAINER_TRY{
         *p = ::boost::move(*vp);
    e987:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    e98e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
         { return static_cast<typename ::boost::move_detail::remove_reference<T>::type &&>(t); }
    e995:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
    e99c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    e9a3:	48 8b 11             	mov    (%rcx),%rdx
    e9a6:	48 89 10             	mov    %rdx,(%rax)
    e9a9:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    e9ad:	48 89 48 08          	mov    %rcx,0x8(%rax)
      BOOST_CONTAINER_CATCH(...){
         alloc_traits::destroy(a, vp);
         BOOST_CONTAINER_RETHROW
      }
      BOOST_CONTAINER_CATCH_END
      alloc_traits::destroy(a, vp);
    e9b1:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
    e9b8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    e9bf:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    e9c3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      const bool value = boost::container::dtl::
    e9c7:	c6 45 bf 00          	movb   $0x0,-0x41(%rbp)
      allocator_traits::priv_destroy(flag, a, p);
    e9cb:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    e9cf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    e9d3:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    e9d7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
         return iterator(pos);
    e9db:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
    e9e2:	48 8b 00             	mov    (%rax),%rax
    e9e5:	48 8d 8d 60 fa ff ff 	lea    -0x5a0(%rbp),%rcx
    e9ec:	48 89 8d 30 fc ff ff 	mov    %rcx,-0x3d0(%rbp)
    e9f3:	48 89 85 28 fc ff ff 	mov    %rax,-0x3d8(%rbp)
    e9fa:	48 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%rax
      : m_ptr(ptr)
    ea01:	48 8b 8d 28 fc ff ff 	mov    -0x3d8(%rbp),%rcx
    ea08:	48 89 08             	mov    %rcx,(%rax)
         return iterator(pos);
    ea0b:	e9 8c 00 00 00       	jmp    ea9c <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0xbbc>
    ea10:	48 8b 95 50 fa ff ff 	mov    -0x5b0(%rbp),%rdx
         return this->priv_insert_forward_range_no_capacity(p, n, insert_range_proxy, alloc_version());
    ea17:	48 8b 8d f0 fb ff ff 	mov    -0x410(%rbp),%rcx
    ea1e:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
    ea25:	48 8b b5 10 fc ff ff 	mov    -0x3f0(%rbp),%rsi
    ea2c:	48 89 b5 d0 fb ff ff 	mov    %rsi,-0x430(%rbp)
    ea33:	48 8b b5 18 fc ff ff 	mov    -0x3e8(%rbp),%rsi
    ea3a:	48 89 b5 d8 fb ff ff 	mov    %rsi,-0x428(%rbp)
    ea41:	48 8b bd d0 fb ff ff 	mov    -0x430(%rbp),%rdi
    ea48:	48 8b b5 d8 fb ff ff 	mov    -0x428(%rbp),%rsi
    ea4f:	4c 8d 85 60 fa ff ff 	lea    -0x5a0(%rbp),%r8
    ea56:	4c 89 85 f0 fc ff ff 	mov    %r8,-0x310(%rbp)
    ea5d:	48 89 bd e0 fc ff ff 	mov    %rdi,-0x320(%rbp)
    ea64:	48 89 b5 e8 fc ff ff 	mov    %rsi,-0x318(%rbp)
    ea6b:	48 89 95 d8 fc ff ff 	mov    %rdx,-0x328(%rbp)
    ea72:	48 89 8d d0 fc ff ff 	mov    %rcx,-0x330(%rbp)
    ea79:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
    ea80:	48 8d 85 60 fa ff ff 	lea    -0x5a0(%rbp),%rax
    ea87:	48 89 85 f8 fc ff ff 	mov    %rax,-0x308(%rbp)
    ea8e:	48 8b 85 f8 fc ff ff 	mov    -0x308(%rbp),%rax
      : m_ptr()   //Value initialization to achieve "null iterators" (N3644)
    ea95:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            }
    ea9c:	eb 00                	jmp    ea9e <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0xbbe>
        }
    ea9e:	eb 00                	jmp    eaa0 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0xbc0>
        for (auto i = 0; i < local_zones_.size(); ++i) {
    eaa0:	8b 85 80 fa ff ff    	mov    -0x580(%rbp),%eax
    eaa6:	83 c0 01             	add    $0x1,%eax
    eaa9:	89 85 80 fa ff ff    	mov    %eax,-0x580(%rbp)
    eaaf:	e9 5b f5 ff ff       	jmp    e00f <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE+0x12f>
    eab4:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax

        NodeStates::set_state(nid_, NodeStates::NodeStateType(ztype));
    eabb:	48 8b 08             	mov    (%rax),%rcx
    eabe:	8b 85 9c fa ff ff    	mov    -0x564(%rbp),%eax
    eac4:	48 89 8d 50 fb ff ff 	mov    %rcx,-0x4b0(%rbp)
    eacb:	89 85 4c fb ff ff    	mov    %eax,-0x4b4(%rbp)
        {  NODE_STATES[state].set(nid);  }
    ead1:	8b 85 4c fb ff ff    	mov    -0x4b4(%rbp),%eax
    ead7:	48 8d 0d 4a 9e 02 00 	lea    0x29e4a(%rip),%rcx        # 38928 <_ZN4ours3mem10NodeStates11NODE_STATESE>
    eade:	48 89 8d 60 fb ff ff 	mov    %rcx,-0x4a0(%rbp)
    eae5:	48 89 85 58 fb ff ff 	mov    %rax,-0x4a8(%rbp)
    eaec:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
    eaf3:	48 89 85 68 fb ff ff 	mov    %rax,-0x498(%rbp)
    eafa:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
    eb01:	48 89 85 70 fb ff ff 	mov    %rax,-0x490(%rbp)
    eb08:	48 8b bd 70 fb ff ff 	mov    -0x490(%rbp),%rdi
      return this->m_holder.start()[difference_type(n)];
    eb0f:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
    eb16:	48 c1 e0 03          	shl    $0x3,%rax
    eb1a:	48 01 c7             	add    %rax,%rdi
    eb1d:	48 8b b5 50 fb ff ff 	mov    -0x4b0(%rbp),%rsi
    eb24:	ba 01 00 00 00       	mov    $0x1,%edx
    eb29:	e8 c2 5a ff ff       	call   45f0 <_ZNSt3__16bitsetILm32EE3setB8nn210000Emb>
    eb2e:	48 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%rdi

        this->insert_queue(local_queue_);
    eb35:	48 89 fe             	mov    %rdi,%rsi
    eb38:	48 83 c6 30          	add    $0x30,%rsi
    eb3c:	e8 0f 00 00 00       	call   eb50 <_ZN4ours3mem10ZoneQueues12insert_queueERKN4ustl11collections9StaticVecINS1_7ZoneRefEJLm4EEEE>
    }
    eb41:	48 81 c4 10 06 00 00 	add    $0x610,%rsp
    eb48:	5d                   	pop    %rbp
    eb49:	c3                   	ret
    eb4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000eb50 <_ZN4ours3mem10ZoneQueues12insert_queueERKN4ustl11collections9StaticVecINS1_7ZoneRefEJLm4EEEE>:

        // queue.push_back(zone);
    }

    auto ZoneQueues::insert_queue(LocalQueue const &queue) -> void
    {
    eb50:	55                   	push   %rbp
    eb51:	48 89 e5             	mov    %rsp,%rbp
    eb54:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    eb58:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    eb5c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
        this->priv_insert_queue<NodeAffinity>(queue);
    eb60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    eb64:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    eb68:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        this->priv_insert_queue<ZonePriority>(queue);
    eb6c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    eb70:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    eb74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    eb78:	5d                   	pop    %rbp
    eb79:	c3                   	ret
    eb7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000eb80 <_ZN4ours3mem10ZoneQueues8rev_iterENS1_9QueueTypeE>:
    {}
    eb80:	55                   	push   %rbp
    eb81:	48 89 e5             	mov    %rsp,%rbp
    eb84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    eb88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    eb8c:	89 55 ec             	mov    %edx,-0x14(%rbp)
    eb8f:	0f 0b                	ud2
    eb91:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    eb98:	0f 1f 84 00 00 00 00 
    eb9f:	00 

000000000000eba0 <_ZN4ours3mem6PmNodeC1El>:
    static Gaf GAF_ALLOWED = GAF_BOOT;

    PmNode::PmNode(NodeId nid)
        : id_(nid),
          zone_queues_(nid)
    {
    eba0:	55                   	push   %rbp
    eba1:	48 89 e5             	mov    %rsp,%rbp
    eba4:	48 83 ec 30          	sub    $0x30,%rsp
    eba8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ebac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ebb0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ebb4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    PmNode::PmNode(NodeId nid)
    ebb8:	e8 03 0b 00 00       	call   f6c0 <_ZN4gktl6CanaryILj1315923045EEC2Ev>
    ebbd:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
        : id_(nid),
    ebc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ebc5:	48 89 47 08          	mov    %rax,0x8(%rdi)
    PmNode::PmNode(NodeId nid)
    ebc9:	48 83 c7 18          	add    $0x18,%rdi
    ebcd:	e8 9e 83 ff ff       	call   6f70 <_ZNSt3__16atomicImEC2B8nn210000Ev>
    ebd2:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    ebd6:	48 83 c7 20          	add    $0x20,%rdi
    ebda:	e8 91 83 ff ff       	call   6f70 <_ZNSt3__16atomicImEC2B8nn210000Ev>
    ebdf:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    ebe3:	48 83 c7 28          	add    $0x28,%rdi
    ebe7:	e8 84 83 ff ff       	call   6f70 <_ZNSt3__16atomicImEC2B8nn210000Ev>
    ebec:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    ebf0:	48 83 c7 30          	add    $0x30,%rdi
    ebf4:	e8 17 4a ff ff       	call   3610 <_ZN4ours3mem8NodeMaskC2Ev>
    ebf9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
          zone_queues_(nid)
    ebfd:	48 83 c1 38          	add    $0x38,%rcx
    ec01:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ec05:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    ec09:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ec0d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    ec11:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
        : nid_(nid)
    ec15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ec19:	48 89 07             	mov    %rax,(%rdi)
    ZoneQueues::ZoneQueues(NodeId nid)
    ec1c:	48 83 c7 08          	add    $0x8,%rdi
    ec20:	e8 eb 0f 00 00       	call   fc10 <_ZN4ustl11collections9StaticVecIPN4ours3mem6PmZoneEJLm4EEEC2Ev>
    ec25:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    ec29:	48 83 c7 30          	add    $0x30,%rdi
    ec2d:	e8 0e 10 00 00       	call   fc40 <_ZN4ustl11collections9StaticVecIN4ours3mem10ZoneQueues7ZoneRefEJLm4EEEC2Ev>
    ec32:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    ec36:	48 83 c7 78          	add    $0x78,%rdi
    ec3a:	e8 31 10 00 00       	call   fc70 <_ZN4ustl11collections9StaticVecIN4ours3mem10ZoneQueues7ZoneRefEJLm128EEEC2Ev>
    ec3f:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    ec43:	48 81 c7 80 08 00 00 	add    $0x880,%rdi
    ec4a:	e8 51 10 00 00       	call   fca0 <_ZN4ustl11collections9StaticVecIPN4ours3mem6PmZoneEJLm4ELm32EEEC2Ev>
    ec4f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    PmNode::PmNode(NodeId nid)
    ec53:	48 81 c7 e0 0c 00 00 	add    $0xce0,%rdi
    ec5a:	e8 81 0a 00 00       	call   f6e0 <_ZN4ours3mem10FrameQueueC2Ev>
        DEBUG_ASSERT(!s_node_list[nid]);
    ec5f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    ec63:	48 8d 3d 9e 9b 02 00 	lea    0x29b9e(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
    ec6a:	e8 01 b7 ff ff       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
    ec6f:	48 83 38 00          	cmpq   $0x0,(%rax)
    ec73:	74 05                	je     ec7a <_ZN4ours3mem6PmNodeC1El+0xda>
    ec75:	e8 86 44 ff ff       	call   3100 <_ZN4ours5panicEv>
        s_node_list[nid] = this;
    ec7a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    ec7e:	48 8d 3d 83 9b 02 00 	lea    0x29b83(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
    ec85:	e8 e6 b6 ff ff       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
    ec8a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    ec8e:	48 89 08             	mov    %rcx,(%rax)
    }
    ec91:	48 83 c4 30          	add    $0x30,%rsp
    ec95:	5d                   	pop    %rbp
    ec96:	c3                   	ret
    ec97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ec9e:	00 00 

000000000000eca0 <_ZN4ours3mem6PmNode4initEmm>:

    auto PmNode::init(Pfn start, Pfn end) -> Status
    {
    eca0:	55                   	push   %rbp
    eca1:	48 89 e5             	mov    %rsp,%rbp
    eca4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    ecab:	48 89 7d 80          	mov    %rdi,-0x80(%rbp)
    ecaf:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
    ecb6:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
    ecbd:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    ecc1:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
        canary_.verify();
    ecc8:	e8 53 0a 00 00       	call   f720 <_ZNK4gktl6CanaryILj1315923045EE6verifyEv>
    eccd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
        DEBUG_ASSERT(NodeStates::is_offline(id_));
    ecd4:	48 8b 40 08          	mov    0x8(%rax),%rax
    ecd8:	48 89 45 88          	mov    %rax,-0x78(%rbp)
        {  return !is_online(nid);  }
    ecdc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ece0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
            return is_state(nid, Online);
    ece4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    ece8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    ecec:	c7 45 d4 04 00 00 00 	movl   $0x4,-0x2c(%rbp)
            return NODE_STATES[state].test(nid);
    ecf3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    ecf6:	48 8d 0d 2b 9c 02 00 	lea    0x29c2b(%rip),%rcx        # 38928 <_ZN4ours3mem10NodeStates11NODE_STATESE>
    ecfd:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    ed01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ed05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed09:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ed0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ed11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ed15:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    ed19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ed1d:	48 c1 e0 03          	shl    $0x3,%rax
    ed21:	48 01 c7             	add    %rax,%rdi
    ed24:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    ed28:	e8 43 4a ff ff       	call   3770 <_ZNKSt3__16bitsetILm32EE4testB8nn210000Em>
        {  return !is_online(nid);  }
    ed2d:	34 ff                	xor    $0xff,%al
    ed2f:	a8 01                	test   $0x1,%al
    ed31:	75 05                	jne    ed38 <_ZN4ours3mem6PmNode4initEmm+0x98>
    ed33:	e8 c8 43 ff ff       	call   3100 <_ZN4ours5panicEv>
    ed38:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi

        start_pfn_ = start;
    ed3f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    ed46:	48 89 47 10          	mov    %rax,0x10(%rdi)
        spanned_frames_ = end - start;
    ed4a:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    ed51:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    ed58:	48 29 c6             	sub    %rax,%rsi
    ed5b:	48 83 c7 18          	add    $0x18,%rdi
    ed5f:	e8 6c b1 ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
    ed64:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
        present_frames_ = 0;
    ed6b:	48 83 c7 20          	add    $0x20,%rdi
    ed6f:	31 c0                	xor    %eax,%eax
    ed71:	89 c6                	mov    %eax,%esi
    ed73:	e8 58 b1 ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
    ed78:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax

        NodeStates::set_online(id_);
    ed7f:	48 8b 40 08          	mov    0x8(%rax),%rax
    ed83:	48 89 45 90          	mov    %rax,-0x70(%rbp)
        {  set_state(nid, Online);  }
    ed87:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    ed8b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    ed8f:	c7 45 9c 04 00 00 00 	movl   $0x4,-0x64(%rbp)
        {  NODE_STATES[state].set(nid);  }
    ed96:	8b 45 9c             	mov    -0x64(%rbp),%eax
    ed99:	48 8d 0d 88 9b 02 00 	lea    0x29b88(%rip),%rcx        # 38928 <_ZN4ours3mem10NodeStates11NODE_STATESE>
    eda0:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    eda4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    eda8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    edac:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    edb0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    edb4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    edb8:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    edbc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    edc0:	48 c1 e0 03          	shl    $0x3,%rax
    edc4:	48 01 c7             	add    %rax,%rdi
    edc7:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    edcb:	ba 01 00 00 00       	mov    $0x1,%edx
    edd0:	e8 1b 58 ff ff       	call   45f0 <_ZNSt3__16bitsetILm32EE3setB8nn210000Emb>
        return Status::Ok;
    edd5:	31 c0                	xor    %eax,%eax
    edd7:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    edde:	5d                   	pop    %rbp
    eddf:	c3                   	ret

000000000000ede0 <_ZN4ours3mem6PmNode10share_withEl>:
    }

    auto PmNode::share_with(NodeId nid) -> Status
    {
    ede0:	55                   	push   %rbp
    ede1:	48 89 e5             	mov    %rsp,%rbp
    ede4:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
    edeb:	48 89 7d 80          	mov    %rdi,-0x80(%rbp)
    edef:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
    edf6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    edfa:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
        DEBUG_ASSERT(id_ != nid);
    ee01:	48 8b 40 08          	mov    0x8(%rax),%rax
    ee05:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
    ee0c:	75 05                	jne    ee13 <_ZN4ours3mem6PmNode10share_withEl+0x33>
    ee0e:	e8 ed 42 ff ff       	call   3100 <_ZN4ours5panicEv>
        DEBUG_ASSERT(NodeStates::is_online(nid));
    ee13:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    ee1a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
            return is_state(nid, Online);
    ee1e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    ee22:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    ee26:	c7 45 c4 04 00 00 00 	movl   $0x4,-0x3c(%rbp)
            return NODE_STATES[state].test(nid);
    ee2d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ee30:	48 8d 0d f1 9a 02 00 	lea    0x29af1(%rip),%rcx        # 38928 <_ZN4ours3mem10NodeStates11NODE_STATESE>
    ee37:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    ee3b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ee3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ee43:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ee47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ee4b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ee4f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ee53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ee57:	48 c1 e0 03          	shl    $0x3,%rax
    ee5b:	48 01 c7             	add    %rax,%rdi
    ee5e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    ee62:	e8 09 49 ff ff       	call   3770 <_ZNKSt3__16bitsetILm32EE4testB8nn210000Em>
    ee67:	a8 01                	test   $0x1,%al
    ee69:	75 05                	jne    ee70 <_ZN4ours3mem6PmNode10share_withEl+0x90>
    ee6b:	e8 90 42 ff ff       	call   3100 <_ZN4ours5panicEv>
    ee70:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi

        if (shared_nodes_.test(nid)) {
    ee77:	48 83 c7 30          	add    $0x30,%rdi
    ee7b:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
    ee82:	e8 e9 48 ff ff       	call   3770 <_ZNKSt3__16bitsetILm32EE4testB8nn210000Em>
    ee87:	a8 01                	test   $0x1,%al
    ee89:	75 02                	jne    ee8d <_ZN4ours3mem6PmNode10share_withEl+0xad>
    ee8b:	eb 0c                	jmp    ee99 <_ZN4ours3mem6PmNode10share_withEl+0xb9>
            return Status::InvalidArguments;
    ee8d:	c7 45 8c 04 00 00 00 	movl   $0x4,-0x74(%rbp)
    ee94:	e9 dc 00 00 00       	jmp    ef75 <_ZN4ours3mem6PmNode10share_withEl+0x195>
        }

        auto other_zq = PmNode::node(nid)->zone_queues();
    ee99:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    eea0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
        {  return s_node_list[nid];  }
    eea4:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    eea8:	48 8d 3d 59 99 02 00 	lea    0x29959(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
    eeaf:	e8 bc b4 ff ff       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
    eeb4:	48 89 c1             	mov    %rax,%rcx
    eeb7:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    eebe:	48 8b 09             	mov    (%rcx),%rcx
    eec1:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    eec5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
        auto nid() const -> NodeId
        {  return this->id_;  }

        FORCE_INLINE
        auto zone_queues() -> ZoneQueues *
        {  return &zone_queues_;  }
    eec9:	48 83 c1 38          	add    $0x38,%rcx
    eecd:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)

        auto iterator = zone_queues_.iter(ZoneQueues::Local);
    eed4:	48 83 c0 38          	add    $0x38,%rax
    eed8:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    eedf:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    eee3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    eee7:	c7 45 ac 02 00 00 00 	movl   $0x2,-0x54(%rbp)
    eeee:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    eef5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    eef9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      : m_ptr()   //Value initialization to achieve "null iterators" (N3644)
    eefd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    {  return {}; }
    ef04:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    ef0b:	48 83 c0 08          	add    $0x8,%rax
    ef0f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ef13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ef17:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    ef1e:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
    ef25:	00 00 00 00 
    ef29:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
    ef30:	00 00 00 
    ef33:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
        while (auto zoneref = iterator.move_next()) {
    ef3a:	e8 21 08 00 00       	call   f760 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEE9move_nextEv>
    ef3f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    ef46:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    ef4d:	00 
    ef4e:	74 02                	je     ef52 <_ZN4ours3mem6PmNode10share_withEl+0x172>
    ef50:	eb e1                	jmp    ef33 <_ZN4ours3mem6PmNode10share_withEl+0x153>
    ef52:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
            // other_zq->insert(zoneref->zone, zoneref->type);
        }

        shared_nodes_.set(nid);
    ef59:	48 83 c7 30          	add    $0x30,%rdi
    ef5d:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
    ef64:	ba 01 00 00 00       	mov    $0x1,%edx
    ef69:	e8 82 56 ff ff       	call   45f0 <_ZNSt3__16bitsetILm32EE3setB8nn210000Emb>
        return Status::Ok;
    ef6e:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
    }
    ef75:	8b 45 8c             	mov    -0x74(%rbp),%eax
    ef78:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
    ef7f:	5d                   	pop    %rbp
    ef80:	c3                   	ret
    ef81:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    ef88:	0f 1f 84 00 00 00 00 
    ef8f:	00 

000000000000ef90 <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm>:

        return ustl::err(Status::OutOfMem);
    }

    auto PmNode::alloc_frame(Gaf flags, usize order) -> ustl::Result<PmFrame *, Status>
    {
    ef90:	55                   	push   %rbp
    ef91:	48 89 e5             	mov    %rsp,%rbp
    ef94:	48 81 ec 70 01 00 00 	sub    $0x170,%rsp
    ef9b:	48 89 bd 90 fe ff ff 	mov    %rdi,-0x170(%rbp)
    efa2:	48 89 f8             	mov    %rdi,%rax
    efa5:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    efac:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
    efb3:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
    efba:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
    efc1:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
    efc8:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    efcf:	48 89 bd a0 fe ff ff 	mov    %rdi,-0x160(%rbp)
        canary_.verify();
    efd6:	e8 45 07 00 00       	call   f720 <_ZNK4gktl6CanaryILj1315923045EE6verifyEv>

        if (order > MAX_FRAME_ORDER) {
    efdb:	48 83 bd 50 ff ff ff 	cmpq   $0xa,-0xb0(%rbp)
    efe2:	0a 
    efe3:	76 55                	jbe    f03a <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm+0xaa>
    efe5:	c7 45 88 04 00 00 00 	movl   $0x4,-0x78(%rbp)
    efec:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    eff0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    eff4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    eff8:	48 8d 7d 8c          	lea    -0x74(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    effc:	e8 4f 8b ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    f001:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
    f008:	8b 4d 8c             	mov    -0x74(%rbp),%ecx
            return ustl::err(Status::InvalidArguments);
    f00b:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%rbp)
    f011:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    f015:	48 8d 85 4c ff ff ff 	lea    -0xb4(%rbp),%rax
    f01c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    f020:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    f024:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    f028:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f02c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f030:	e8 db 0e 00 00       	call   ff10 <_ZN4ustl6result14StorageTrivialIPN4ours3mem7PmFrameENS2_6StatusEEC2IJS6_EEENS_7InplaceIJS6_EEEDpOT_>
    f035:	e9 63 01 00 00       	jmp    f19d <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm+0x20d>
    f03a:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
        }

        flags &= GAF_ALLOWED;
    f041:	48 8b 0d c8 23 02 00 	mov    0x223c8(%rip),%rcx        # 31410 <_ZN4ours3memL11GAF_ALLOWEDE>
    f048:	48 8d 95 58 ff ff ff 	lea    -0xa8(%rbp),%rdx
    f04f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    f053:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
USTL_FORCEINLINE USTL_CONSTEXPR
auto operator&=(Enum& lhs, Enum rhs) 
    -> ustl::traits::EnableIfT<UstlEnumBitMaskEnabledV<Enum>, ustl::traits::AddLvalRefT<Enum>>
{
    typedef ustl::traits::UnderlyingTypeT<Enum>     Underlying;
    lhs = lhs & rhs;
    f057:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    f05b:	48 8b 11             	mov    (%rcx),%rdx
    f05e:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    f062:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    f066:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        static_cast<Underlying>(lhs) &
    f06a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
        static_cast<Underlying>(rhs)
    f06e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
        static_cast<Underlying>(lhs) &
    f072:	48 21 ca             	and    %rcx,%rdx
    lhs = lhs & rhs;
    f075:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    f079:	48 89 11             	mov    %rdx,(%rcx)

        auto iterator = zone_queues_.iter(ZoneQueues::NodeAffinity);
    f07c:	48 83 c0 38          	add    $0x38,%rax
    f080:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
    f087:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    f08b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    f092:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
    f099:	00 00 00 
    f09c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
    f0a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f0a4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    {  return {}; }
    f0ab:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    f0b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    f0b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f0ba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    f0c1:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
    f0c8:	00 00 00 00 
    f0cc:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)
    f0d3:	00 00 00 
    f0d6:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
        AllocContext context{iterator, order, NodeStates::NODE_STATES[NodeStates::Online]};
    f0dd:	e8 be 06 00 00       	call   f7a0 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEEC2ERKS9_>
    f0e2:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    f0e9:	48 8d 05 38 98 02 00 	lea    0x29838(%rip),%rax        # 38928 <_ZN4ours3mem10NodeStates11NODE_STATESE>
    f0f0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    f0f4:	48 c7 45 b0 04 00 00 	movq   $0x4,-0x50(%rbp)
    f0fb:	00 
    f0fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    f100:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    f104:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    f108:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    f10c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      return this->m_holder.start()[difference_type(n)];
    f110:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    f114:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
    f118:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    f11f:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
    f126:	48 8d bd f8 fe ff ff 	lea    -0x108(%rbp),%rdi
    f12d:	48 8d b5 d8 fe ff ff 	lea    -0x128(%rbp),%rsi
    f134:	e8 e7 06 00 00       	call   f820 <_ZN4ours3mem12AllocContextC2ENS0_10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS2_7ZoneRefELb0EEEEEmNS0_8NodeMaskE>
        auto frame = this->alloc_frame_core(context.iterator, flags, order);
    f139:	c6 85 cf fe ff ff 00 	movb   $0x0,-0x131(%rbp)
    f140:	48 8d b5 f8 fe ff ff 	lea    -0x108(%rbp),%rsi
    f147:	48 83 c6 10          	add    $0x10,%rsi
    f14b:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
    f152:	e8 49 06 00 00       	call   f7a0 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEEC2ERKS9_>
    f157:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
    f15e:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
    f165:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
    f16c:	4c 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%r8
    f173:	48 8d 95 a8 fe ff ff 	lea    -0x158(%rbp),%rdx
    f17a:	e8 e1 06 00 00       	call   f860 <_ZN4ours3mem6PmNode16alloc_frame_coreIN5boost9container12vec_iteratorIPNS0_10ZoneQueues7ZoneRefELb0EEEEEN4ustl6ResultIPNS0_7PmFrameENS_6StatusEvEENS6_8IteratorIT_EENS0_5gafns3GafEm>

        return frame;
    f17f:	c6 85 cf fe ff ff 01 	movb   $0x1,-0x131(%rbp)
    }
    f186:	f6 85 cf fe ff ff 01 	testb  $0x1,-0x131(%rbp)
    f18d:	75 0c                	jne    f19b <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm+0x20b>
    f18f:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
    f196:	e8 85 d2 ff ff       	call   c420 <_ZN4ustl6ResultIPN4ours3mem7PmFrameENS1_6StatusEvED2Ev>
    f19b:	eb 00                	jmp    f19d <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm+0x20d>
    f19d:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    f1a4:	48 81 c4 70 01 00 00 	add    $0x170,%rsp
    f1ab:	5d                   	pop    %rbp
    f1ac:	c3                   	ret
    f1ad:	0f 1f 00             	nopl   (%rax)

000000000000f1b0 <_ZN4ours3mem6PmNode10free_frameEPNS0_7PmFrameEm>:

    auto PmNode::free_frame(PmFrame *frame, usize order) -> void
    {
    f1b0:	55                   	push   %rbp
    f1b1:	48 89 e5             	mov    %rsp,%rbp
    f1b4:	48 83 ec 70          	sub    $0x70,%rsp
    f1b8:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
    f1bc:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
    f1c0:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
    f1c4:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        auto const ztype = frame->flags().zone_type();
    f1c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    f1cc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    f1d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f1d4:	48 83 c0 18          	add    $0x18,%rax
    f1d8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    f1dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f1e0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f1e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f1e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f1ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
    f1f0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    f1f7:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
    f1f8:	48 c7 45 e8 80 01 00 	movq   $0x180,-0x18(%rbp)
    f1ff:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
    f200:	48 c7 45 e0 07 00 00 	movq   $0x7,-0x20(%rbp)
    f207:	00 
            return Result((values[idx] & mask) >> shift);
    f208:	48 8b 00             	mov    (%rax),%rax
    f20b:	48 25 80 01 00 00    	and    $0x180,%rax
    f211:	48 c1 e8 07          	shr    $0x7,%rax
    f215:	89 45 ac             	mov    %eax,-0x54(%rbp)
        auto const zone = zone_queues_.local_zone(ztype);
    f218:	48 83 c7 38          	add    $0x38,%rdi
    f21c:	8b 75 ac             	mov    -0x54(%rbp),%esi
    f21f:	e8 8c 07 00 00       	call   f9b0 <_ZN4ours3mem10ZoneQueues10local_zoneENS0_8ZoneTypeE>
    f224:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

        DEBUG_ASSERT(zone, "");
    f228:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    f22d:	75 1d                	jne    f24c <_ZN4ours3mem6PmNode10free_frameEPNS0_7PmFrameEm+0x9c>
    f22f:	48 8d 35 15 ff 01 00 	lea    0x1ff15(%rip),%rsi        # 2f14b <.L.str>
    f236:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    f23a:	e8 41 40 ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    f23f:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    f243:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    f247:	e8 e4 3f ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
        zone->free_frame(frame, order);
    f24c:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    f250:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    f254:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    f258:	e8 63 e4 ff ff       	call   d6c0 <_ZN4ours3mem6PmZone10free_frameEPNS0_7PmFrameEm>
    }
    f25d:	48 83 c4 70          	add    $0x70,%rsp
    f261:	5d                   	pop    %rbp
    f262:	c3                   	ret
    f263:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    f26a:	84 00 00 00 00 00 

000000000000f270 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE>:

    auto PmNode::alloc_frames(Gaf flags, usize n, ai_out FrameList<> *list) -> Status
    {
    f270:	55                   	push   %rbp
    f271:	48 89 e5             	mov    %rsp,%rbp
    f274:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    f27b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    f27f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    f283:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    f287:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    f28b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f28f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
        DEBUG_ASSERT(list != nullptr, "");
    f296:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    f29b:	75 1d                	jne    f2ba <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x4a>
    f29d:	48 8d 35 a7 fe 01 00 	lea    0x1fea7(%rip),%rsi        # 2f14b <.L.str>
    f2a4:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    f2a8:	e8 d3 3f ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    f2ad:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    f2b1:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    f2b5:	e8 76 3f ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>

        for (usize order = 0; n > 0; order += 1) {
    f2ba:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
    f2c1:	00 
    f2c2:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    f2c7:	0f 86 d3 00 00 00    	jbe    f3a0 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x130>
            if ((n & 1) == 0) {
    f2cd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    f2d1:	48 83 e0 01          	and    $0x1,%rax
    f2d5:	48 83 f8 00          	cmp    $0x0,%rax
    f2d9:	75 05                	jne    f2e0 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x70>
                continue;
    f2db:	e9 af 00 00 00       	jmp    f38f <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x11f>
    f2e0:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
            }

            if (auto frame = this->alloc_frame(flags, order)) {
    f2e7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    f2eb:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    f2ef:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
    f2f3:	e8 98 fc ff ff       	call   ef90 <_ZN4ours3mem6PmNode11alloc_frameENS0_5gafns3GafEm>
    f2f8:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    f2fc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f300:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f304:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f308:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
    f30c:	48 83 c0 08          	add    $0x8,%rax
    f310:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f314:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        {  return (static_cast<u16>(status_) & static_cast<u16>(Status::HaveValue)) != 0;  }
    f318:	0f b7 00             	movzwl (%rax),%eax
    f31b:	83 e0 01             	and    $0x1,%eax
    f31e:	83 f8 00             	cmp    $0x0,%eax
    f321:	74 25                	je     f348 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0xd8>
                list->push_back(*frame.unwrap());
    f323:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    f327:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    f32b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f32f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f333:	48 8b 30             	mov    (%rax),%rsi
    f336:	e8 a5 e4 ff ff       	call   d7e0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE9push_backERS5_>
                n >>= 1;
    f33b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    f33f:	48 d1 e8             	shr    $1,%rax
    f342:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
            } else {
    f346:	eb 2a                	jmp    f372 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x102>
    f348:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
                this->free_frames(list);
    f34f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    f353:	e8 68 00 00 00       	call   f3c0 <_ZN4ours3mem6PmNode11free_framesEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS6_NS8_16list_member_hookIJEEEXadL_ZNS6_13managed_hook_EEEEEEEE>
    f358:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    f35c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    f360:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
                return frame.unwrap_err();
    f364:	8b 00                	mov    (%rax),%eax
    f366:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    f369:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
    f370:	eb 07                	jmp    f379 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x109>
            if (auto frame = this->alloc_frame(flags, order)) {
    f372:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
    f379:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
    f37d:	e8 9e d0 ff ff       	call   c420 <_ZN4ustl6ResultIPN4ours3mem7PmFrameENS1_6StatusEvED2Ev>
    f382:	8b 45 84             	mov    -0x7c(%rbp),%eax
    f385:	85 c0                	test   %eax,%eax
    f387:	74 04                	je     f38d <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x11d>
    f389:	eb 00                	jmp    f38b <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x11b>
    f38b:	eb 1a                	jmp    f3a7 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x137>
            }
        }
    f38d:	eb 00                	jmp    f38f <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x11f>
        for (usize order = 0; n > 0; order += 1) {
    f38f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    f393:	48 83 c0 01          	add    $0x1,%rax
    f397:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    f39b:	e9 22 ff ff ff       	jmp    f2c2 <_ZN4ours3mem6PmNode12alloc_framesENS0_5gafns3GafEmPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS8_NSA_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEE+0x52>

        return Status::Ok;
    f3a0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    }
    f3a7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    f3aa:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
    f3b1:	5d                   	pop    %rbp
    f3b2:	c3                   	ret
    f3b3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    f3ba:	84 00 00 00 00 00 

000000000000f3c0 <_ZN4ours3mem6PmNode11free_framesEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS6_NS8_16list_member_hookIJEEEXadL_ZNS6_13managed_hook_EEEEEEEE>:

    auto PmNode::free_frames(FrameList<> *list) -> void 
    {
    f3c0:	55                   	push   %rbp
    f3c1:	48 89 e5             	mov    %rsp,%rbp
    f3c4:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
    f3cb:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    f3d2:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
    f3d9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
        using namespace ustl::function;
        auto const reclaimer = bind(&Self::free_frame, this, _1, 0);
    f3e0:	48 8d 0d c9 fd ff ff 	lea    -0x237(%rip),%rcx        # f1b0 <_ZN4ours3mem6PmNode10free_frameEPNS0_7PmFrameEm>
    f3e7:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
    f3ee:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
    f3f5:	00 00 00 00 
    f3f9:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    f400:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    f407:	00 00 00 
    f40a:	48 8d 0d ac 03 02 00 	lea    0x203ac(%rip),%rcx        # 2f7bd <_ZNSt3__112placeholders2_1E>
    f411:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
    f418:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    f41f:	48 8d 95 08 ff ff ff 	lea    -0xf8(%rbp),%rdx
    f426:	4c 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%r8
    f42d:	e8 be 05 00 00       	call   f9f0 <_ZNSt3__14bindB8nn210000IMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEJPS3_RKNS_12placeholders4__phILi1EEEiEEENS_6__bindIT_JDpT0_EEEOSF_DpOSG_>
        while (!list->empty()) {
    f432:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    f439:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    f440:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    f447:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    f44b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
    f44f:	48 83 c0 08          	add    $0x8,%rax
    f453:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    f457:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    f45b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    f45f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    f463:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    f467:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   {  return node_algorithms::unique(this->get_root_node());   }
    f46b:	e8 20 ea ff ff       	call   de90 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE6uniqueEPKNS0_9list_nodeIS3_EE>
    f470:	34 ff                	xor    $0xff,%al
    f472:	a8 01                	test   $0x1,%al
    f474:	75 05                	jne    f47b <_ZN4ours3mem6PmNode11free_framesEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS6_NS8_16list_member_hookIJEEEXadL_ZNS6_13managed_hook_EEEEEEEE+0xbb>
    f476:	e9 42 01 00 00       	jmp    f5bd <_ZN4ours3mem6PmNode11free_framesEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS6_NS8_16list_member_hookIJEEEXadL_ZNS6_13managed_hook_EEEEEEEE+0x1fd>
            list->erase_and_dispose(list->begin(), reclaimer);
    f47b:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
    f482:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    f489:	48 8d 8d f8 fe ff ff 	lea    -0x108(%rbp),%rcx
    f490:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
    f497:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    f49e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    f4a5:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    f4ac:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   { return data_.root_plus_size_.m_header.get_node(); }
    f4b3:	48 83 c1 08          	add    $0x8,%rcx
    f4b7:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
    f4be:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
    f4c5:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
    f4cc:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    f4d3:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    f4d7:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    f4db:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   {  return n->next_;  }
    f4df:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    f4e3:	48 8b 09             	mov    (%rcx),%rcx
    f4e6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    f4ea:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    f4ee:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f4f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f4f6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    f4fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f4fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f502:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f506:	48 8d 95 f8 fe ff ff 	lea    -0x108(%rbp),%rdx
    f50d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    f511:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    f515:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    f519:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f51d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f521:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    f525:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f529:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
    f52d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    f531:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f535:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    f539:	48 8b 09             	mov    (%rcx),%rcx
    f53c:	48 89 08             	mov    %rcx,(%rax)
    f53f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    f546:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    f54d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    f554:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    f55b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    f562:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    f569:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    f570:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    f577:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
    f57e:	48 89 e0             	mov    %rsp,%rax
    f581:	48 89 48 18          	mov    %rcx,0x18(%rax)
    f585:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
    f58c:	48 89 48 10          	mov    %rcx,0x10(%rax)
    f590:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
    f597:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    f59e:	48 89 50 08          	mov    %rdx,0x8(%rax)
    f5a2:	48 89 08             	mov    %rcx,(%rax)
    f5a5:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
    f5ac:	48 8d 95 f8 fe ff ff 	lea    -0x108(%rbp),%rdx
    f5b3:	e8 b8 04 00 00       	call   fa70 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17erase_and_disposeINSt3__16__bindIMNS4_6PmNodeEFvPS5_mEJPSD_RKNSB_12placeholders4__phILi1EEEiEEEEENS0_13list_iteratorIS8_Lb0EEESP_T_>
        while (!list->empty()) {
    f5b8:	e9 75 fe ff ff       	jmp    f432 <_ZN4ours3mem6PmNode11free_framesEPN4ustl11collections9intrusive4ListINS0_7PmFrameEJN5boost9intrusive11member_hookIS6_NS8_16list_member_hookIJEEEXadL_ZNS6_13managed_hook_EEEEEEEE+0x72>
        }
    }
    f5bd:	48 81 c4 50 01 00 00 	add    $0x150,%rsp
    f5c4:	5d                   	pop    %rbp
    f5c5:	c3                   	ret
    f5c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f5cd:	00 00 00 

000000000000f5d0 <__cxx_global_var_init>:
    f5d0:	55                   	push   %rbp
    f5d1:	48 89 e5             	mov    %rsp,%rbp
    NodeStates::Inner       NodeStates::NODE_STATES;
    f5d4:	48 8d 3d 4d 93 02 00 	lea    0x2934d(%rip),%rdi        # 38928 <_ZN4ours3mem10NodeStates11NODE_STATESE>
    f5db:	e8 40 00 00 00       	call   f620 <_ZN4ustl11collections9StaticVecIN4ours3mem8NodeMaskEJLm5EEEC2Ev>
    f5e0:	48 8d 3d 09 00 00 00 	lea    0x9(%rip),%rdi        # f5f0 <__dtor__ZN4ours3mem10NodeStates11NODE_STATESE>
    f5e7:	e8 24 9b 00 00       	call   19110 <atexit>
    f5ec:	5d                   	pop    %rbp
    f5ed:	c3                   	ret
    f5ee:	66 90                	xchg   %ax,%ax

000000000000f5f0 <__dtor__ZN4ours3mem10NodeStates11NODE_STATESE>:
    f5f0:	55                   	push   %rbp
    f5f1:	48 89 e5             	mov    %rsp,%rbp
    f5f4:	48 8d 3d 2d 93 02 00 	lea    0x2932d(%rip),%rdi        # 38928 <_ZN4ours3mem10NodeStates11NODE_STATESE>
    f5fb:	e8 50 00 00 00       	call   f650 <_ZN4ustl11collections9StaticVecIN4ours3mem8NodeMaskEJLm5EEED2Ev>
    f600:	5d                   	pop    %rbp
    f601:	c3                   	ret
    f602:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    f609:	1f 84 00 00 00 00 00 

000000000000f610 <_GLOBAL__sub_I_pm_node.cpp>:
    f610:	55                   	push   %rbp
    f611:	48 89 e5             	mov    %rsp,%rbp
    f614:	e8 b7 ff ff ff       	call   f5d0 <__cxx_global_var_init>
    f619:	5d                   	pop    %rbp
    f61a:	c3                   	ret
    f61b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000f620 <_ZN4ustl11collections9StaticVecIN4ours3mem8NodeMaskEJLm5EEEC2Ev>:
            // forbid c++ exception system.
            boost::container::throw_on_overflow<false>
        > StaticVecOptions;
    
    template <typename T, std::size_t... Capacities>
    struct StaticVec;
    f620:	55                   	push   %rbp
    f621:	48 89 e5             	mov    %rsp,%rbp
    f624:	48 83 ec 10          	sub    $0x10,%rsp
    f628:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    f62c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f630:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f634:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    //!   Nothing.
    //!
    //! @par Complexity
    //!   Constant O(1).
    BOOST_CONTAINER_FORCEINLINE static_vector() BOOST_NOEXCEPT_OR_NOTHROW
        : base_t()
    f638:	e8 23 05 00 00       	call   fb60 <_ZN5boost9container6vectorIN4ours3mem8NodeMaskENS0_3dtl24static_storage_allocatorIS4_Lm5ELm0ELb0EEEvEC2Ev>
    f63d:	48 83 c4 10          	add    $0x10,%rsp
    f641:	5d                   	pop    %rbp
    f642:	c3                   	ret
    f643:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f64a:	00 00 00 
    f64d:	0f 1f 00             	nopl   (%rax)

000000000000f650 <_ZN4ustl11collections9StaticVecIN4ours3mem8NodeMaskEJLm5EEED2Ev>:
    
    template <typename T, std::size_t Capacity>
    struct StaticVec<T, Capacity>
    f650:	55                   	push   %rbp
    f651:	48 89 e5             	mov    %rsp,%rbp
    f654:	48 83 ec 10          	sub    $0x10,%rsp
    f658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f65c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f660:	e8 3b 05 00 00       	call   fba0 <_ZN5boost9container13static_vectorIN4ours3mem8NodeMaskELm5ENS0_17static_vector_optILb0ELm0EEEED2Ev>
    f665:	48 83 c4 10          	add    $0x10,%rsp
    f669:	5d                   	pop    %rbp
    f66a:	c3                   	ret
    f66b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000f670 <_ZN4ours5panicIJiEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>:
    f670:	55                   	push   %rbp
    f671:	48 89 e5             	mov    %rsp,%rbp
    f674:	48 83 ec 60          	sub    $0x60,%rsp
    f678:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    f67c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    f680:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    f684:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f688:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f68c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f690:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f694:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    f698:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    f69c:	e8 df 0a 00 00       	call   10180 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJiEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSA_>
    f6a1:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    f6a5:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    f6a9:	e8 02 0b 00 00       	call   101b0 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJiEEERKNS_18__format_arg_storeIS7_JDpT_EEE>
    f6ae:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    f6b2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f6b6:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    f6ba:	e8 51 3a ff ff       	call   3110 <_ZN4ours8do_panicENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEERKNS0_17basic_format_argsINS0_20basic_format_contextINS0_20back_insert_iteratorINS0_8__format15__output_bufferIcEEEEcEEEE>
    f6bf:	90                   	nop

000000000000f6c0 <_ZN4gktl6CanaryILj1315923045EEC2Ev>:
        {}
    f6c0:	55                   	push   %rbp
    f6c1:	48 89 e5             	mov    %rsp,%rbp
    f6c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f6c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            : magic_(Magic)
    f6cc:	c7 00 65 64 6f 4e    	movl   $0x4e6f6465,(%rax)
        {}
    f6d2:	5d                   	pop    %rbp
    f6d3:	c3                   	ret
    f6d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f6db:	00 00 00 
    f6de:	66 90                	xchg   %ax,%ax

000000000000f6e0 <_ZN4ours3mem10FrameQueueC2Ev>:
#include <ours/mem/pm_frame.hpp>

#include <ustl/collections/static-vec.hpp>

namespace ours::mem {
    class FrameQueue
    f6e0:	55                   	push   %rbp
    f6e1:	48 89 e5             	mov    %rsp,%rbp
    f6e4:	48 83 ec 10          	sub    $0x10,%rsp
    f6e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f6ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f6f0:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    f6f4:	e8 f7 06 00 00       	call   fdf0 <_ZN4ustl11collections9StaticVecINS0_9intrusive4ListIN4ours3mem7PmFrameEJN5boost9intrusive11member_hookIS6_NS8_16list_member_hookIJEEEXadL_ZNS6_13managed_hook_EEEEEEEEJLm11EEEC2Ev>
    f6f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f6fd:	48 81 c7 10 01 00 00 	add    $0x110,%rdi
    f704:	e8 17 07 00 00       	call   fe20 <_ZNSt3__16atomicIjEC2B8nn210000Ev>
    f709:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f70d:	48 81 c7 14 01 00 00 	add    $0x114,%rdi
    f714:	e8 07 07 00 00       	call   fe20 <_ZNSt3__16atomicIjEC2B8nn210000Ev>
    f719:	48 83 c4 10          	add    $0x10,%rsp
    f71d:	5d                   	pop    %rbp
    f71e:	c3                   	ret
    f71f:	90                   	nop

000000000000f720 <_ZNK4gktl6CanaryILj1315923045EE6verifyEv>:
        auto verify() const -> void {
    f720:	55                   	push   %rbp
    f721:	48 89 e5             	mov    %rsp,%rbp
    f724:	48 83 ec 20          	sub    $0x20,%rsp
    f728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f72c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            DEBUG_ASSERT(this->magic_ == Magic, "Error type");
    f730:	81 38 65 64 6f 4e    	cmpl   $0x4e6f6465,(%rax)
    f736:	74 1d                	je     f755 <_ZNK4gktl6CanaryILj1315923045EE6verifyEv+0x35>
    f738:	48 8d 35 9d f7 01 00 	lea    0x1f79d(%rip),%rsi        # 2eedc <.L.str>
    f73f:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    f743:	e8 38 3b ff ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
    f748:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    f74c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    f750:	e8 db 3a ff ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
        }
    f755:	48 83 c4 20          	add    $0x20,%rsp
    f759:	5d                   	pop    %rbp
    f75a:	c3                   	ret
    f75b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000f760 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEE9move_nextEv>:
        {
    f760:	55                   	push   %rbp
    f761:	48 89 e5             	mov    %rsp,%rbp
    f764:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f768:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f76c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f770:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
            while (first != last) {
    f774:	48 89 c8             	mov    %rcx,%rax
    f777:	48 83 c0 08          	add    $0x8,%rax
    f77b:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    f77f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   {  return l.m_ptr != r.m_ptr;  }
    f783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f787:	48 8b 00             	mov    (%rax),%rax
    f78a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    f78e:	48 3b 01             	cmp    (%rcx),%rax
    f791:	74 02                	je     f795 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEE9move_nextEv+0x35>
    f793:	eb db                	jmp    f770 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEE9move_nextEv+0x10>
            return 0;
    f795:	31 c0                	xor    %eax,%eax
    f797:	5d                   	pop    %rbp
    f798:	c3                   	ret
    f799:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f7a0 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEEC2ERKS9_>:
        struct Iterator;
    f7a0:	55                   	push   %rbp
    f7a1:	48 89 e5             	mov    %rsp,%rbp
    f7a4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    f7a8:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    f7ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f7b0:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    f7b4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f7b8:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    f7bc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
      :  m_ptr(other.get_ptr())
    f7c0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    f7c4:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    f7c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f7cc:	48 8b 12             	mov    (%rdx),%rdx
    f7cf:	48 89 11             	mov    %rdx,(%rcx)
    f7d2:	48 89 c2             	mov    %rax,%rdx
    f7d5:	48 83 c2 08          	add    $0x8,%rdx
    f7d9:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    f7dd:	48 83 c1 08          	add    $0x8,%rcx
    f7e1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    f7e5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    f7e9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    f7ed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f7f1:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    f7f5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f7f9:	48 8b 12             	mov    (%rdx),%rdx
    f7fc:	48 89 11             	mov    %rdx,(%rcx)
    f7ff:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    f803:	48 8b 51 10          	mov    0x10(%rcx),%rdx
    f807:	48 89 50 10          	mov    %rdx,0x10(%rax)
    f80b:	8b 49 18             	mov    0x18(%rcx),%ecx
    f80e:	89 48 18             	mov    %ecx,0x18(%rax)
    f811:	5d                   	pop    %rbp
    f812:	c3                   	ret
    f813:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f81a:	00 00 00 
    f81d:	0f 1f 00             	nopl   (%rax)

000000000000f820 <_ZN4ours3mem12AllocContextC2ENS0_10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS2_7ZoneRefELb0EEEEEmNS0_8NodeMaskE>:
        {}
    f820:	55                   	push   %rbp
    f821:	48 89 e5             	mov    %rsp,%rbp
    f824:	48 83 ec 20          	sub    $0x20,%rsp
    f828:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    f82c:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    f830:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    f834:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    f838:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : order(order),
    f83c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f840:	48 89 07             	mov    %rax,(%rdi)
              NodeMask(NodeMask),
    f843:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f847:	48 89 47 08          	mov    %rax,0x8(%rdi)
              iterator(iterator)
    f84b:	48 83 c7 10          	add    $0x10,%rdi
    f84f:	e8 4c ff ff ff       	call   f7a0 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEEC2ERKS9_>
        {}
    f854:	48 83 c4 20          	add    $0x20,%rsp
    f858:	5d                   	pop    %rbp
    f859:	c3                   	ret
    f85a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000f860 <_ZN4ours3mem6PmNode16alloc_frame_coreIN5boost9container12vec_iteratorIPNS0_10ZoneQueues7ZoneRefELb0EEEEEN4ustl6ResultIPNS0_7PmFrameENS_6StatusEvEENS6_8IteratorIT_EENS0_5gafns3GafEm>:
    {
    f860:	55                   	push   %rbp
    f861:	48 89 e5             	mov    %rsp,%rbp
    f864:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
    f86b:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
    f872:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    f879:	48 89 f8             	mov    %rdi,%rax
    f87c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    f883:	48 89 7d a0          	mov    %rdi,-0x60(%rbp)
    f887:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
    f88b:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
    f88f:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
    f893:	4c 89 45 80          	mov    %r8,-0x80(%rbp)
    f897:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
        while (auto zoneref = iter.move_next()) {
    f89e:	e8 bd fe ff ff       	call   f760 <_ZN4ours3mem10ZoneQueues8IteratorIN5boost9container12vec_iteratorIPNS1_7ZoneRefELb0EEEE9move_nextEv>
    f8a3:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    f8aa:	48 83 bd 78 ff ff ff 	cmpq   $0x0,-0x88(%rbp)
    f8b1:	00 
    f8b2:	0f 84 93 00 00 00    	je     f94b <_ZN4ours3mem6PmNode16alloc_frame_coreIN5boost9container12vec_iteratorIPNS0_10ZoneQueues7ZoneRefELb0EEEEEN4ustl6ResultIPNS0_7PmFrameENS_6StatusEvEENS6_8IteratorIT_EENS0_5gafns3GafEm+0xeb>
            auto zone = zoneref->zone;
    f8b8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    f8bf:	48 8b 00             	mov    (%rax),%rax
    f8c2:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
            if (auto frame = zone->alloc_frame(flags, order)) {
    f8c9:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
    f8d0:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
    f8d4:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    f8d8:	e8 33 d7 ff ff       	call   d010 <_ZN4ours3mem6PmZone11alloc_frameENS0_5gafns3GafEm>
    f8dd:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    f8e4:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
    f8eb:	00 
    f8ec:	74 58                	je     f946 <_ZN4ours3mem6PmNode16alloc_frame_coreIN5boost9container12vec_iteratorIPNS0_10ZoneQueues7ZoneRefELb0EEEEEN4ustl6ResultIPNS0_7PmFrameENS_6StatusEvEENS6_8IteratorIT_EENS0_5gafns3GafEm+0xe6>
                return ustl::ok(frame);
    f8ee:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    f8f5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    f8f9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    f8fd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f901:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    f905:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
    f909:	e8 12 0c 00 00       	call   10520 <_ZN4ustl2OkIPN4ours3mem7PmFrameEEC2IJS4_EEEDpOT_>
    f90e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    f915:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    f919:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
    f920:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    f924:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    f92b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f92f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
    f933:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f937:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f93b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    f93f:	e8 0c 0c 00 00       	call   10550 <_ZN4ustl6result14StorageTrivialIPN4ours3mem7PmFrameENS2_6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
    f944:	eb 55                	jmp    f99b <_ZN4ours3mem6PmNode16alloc_frame_coreIN5boost9container12vec_iteratorIPNS0_10ZoneQueues7ZoneRefELb0EEEEEN4ustl6ResultIPNS0_7PmFrameENS_6StatusEvEENS6_8IteratorIT_EENS0_5gafns3GafEm+0x13b>
        while (auto zoneref = iter.move_next()) {
    f946:	e9 4c ff ff ff       	jmp    f897 <_ZN4ours3mem6PmNode16alloc_frame_coreIN5boost9container12vec_iteratorIPNS0_10ZoneQueues7ZoneRefELb0EEEEEN4ustl6ResultIPNS0_7PmFrameENS_6StatusEvEENS6_8IteratorIT_EENS0_5gafns3GafEm+0x37>
    f94b:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%rbp)
    f952:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    f956:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    f95a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    f95e:	48 8d 7d ac          	lea    -0x54(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
    f962:	e8 e9 81 ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
    f967:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    f96e:	8b 4d ac             	mov    -0x54(%rbp),%ecx
        return ustl::err(Status::OutOfMem);
    f971:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%rbp)
    f977:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    f97b:	48 8d 85 5c ff ff ff 	lea    -0xa4(%rbp),%rax
    f982:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    f986:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
    f98a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    f98e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    f992:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    f996:	e8 75 05 00 00       	call   ff10 <_ZN4ustl6result14StorageTrivialIPN4ours3mem7PmFrameENS2_6StatusEEC2IJS6_EEENS_7InplaceIJS6_EEEDpOT_>
    f99b:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    }
    f9a2:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
    f9a9:	5d                   	pop    %rbp
    f9aa:	c3                   	ret
    f9ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000f9b0 <_ZN4ours3mem10ZoneQueues10local_zoneENS0_8ZoneTypeE>:
        {  return local_zones_[ztype]; }
    f9b0:	55                   	push   %rbp
    f9b1:	48 89 e5             	mov    %rsp,%rbp
    f9b4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    f9b8:	89 75 d4             	mov    %esi,-0x2c(%rbp)
    f9bb:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    f9bf:	48 83 c1 08          	add    $0x8,%rcx
    f9c3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    f9c6:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    f9ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f9ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f9d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f9d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f9da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f9de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      return this->m_holder.start()[difference_type(n)];
    f9e2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    f9e6:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
    f9ea:	5d                   	pop    %rbp
    f9eb:	c3                   	ret
    f9ec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000f9f0 <_ZNSt3__14bindB8nn210000IMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEJPS3_RKNS_12placeholders4__phILi1EEEiEEENS_6__bindIT_JDpT0_EEEOSF_DpOSG_>:
template <class _Rp, class _Fp, class... _BoundArgs>
struct is_bind_expression<__bind_r<_Rp, _Fp, _BoundArgs...> > : public true_type {};

template <class _Fp, class... _BoundArgs>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 __bind<_Fp, _BoundArgs...>
bind(_Fp&& __f, _BoundArgs&&... __bound_args) {
    f9f0:	55                   	push   %rbp
    f9f1:	48 89 e5             	mov    %rsp,%rbp
    f9f4:	48 83 ec 50          	sub    $0x50,%rsp
    f9f8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    f9fc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    fa00:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
    fa04:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    fa08:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    fa0c:	4c 89 45 e0          	mov    %r8,-0x20(%rbp)
  typedef __bind<_Fp, _BoundArgs...> type;
  return type(std::forward<_Fp>(__f), std::forward<_BoundArgs>(__bound_args)...);
    fa10:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fa14:	e8 27 05 00 00       	call   ff40 <_ZNSt3__17forwardB8nn210000IMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEEEOT_Ru20__remove_reference_tIS8_E>
    fa19:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    fa1d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fa21:	e8 2a 05 00 00       	call   ff50 <_ZNSt3__17forwardB8nn210000IPN4ours3mem6PmNodeEEEOT_Ru20__remove_reference_tIS5_E>
    fa26:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    fa2a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    fa2e:	e8 2d 05 00 00       	call   ff60 <_ZNSt3__17forwardB8nn210000IRKNS_12placeholders4__phILi1EEEEEOT_Ru20__remove_reference_tIS6_E>
    fa33:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    fa37:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    fa3b:	e8 e0 7f ff ff       	call   7a20 <_ZNSt3__17forwardB8nn210000IiEEOT_Ru20__remove_reference_tIS1_E>
    fa40:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    fa44:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    fa48:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    fa4c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    fa50:	49 89 c0             	mov    %rax,%r8
    fa53:	e8 18 05 00 00       	call   ff70 <_ZNSt3__16__bindIMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEJPS3_RKNS_12placeholders4__phILi1EEEiEEC2B8nn210000IS7_JS8_SD_iETnNS_9enable_ifIXaasr16is_constructibleIS7_T_EE5valuentsr7is_sameIu20__remove_reference_tISH_ESE_EE5valueEiE4typeELi0EEEOSH_DpOT0_>
    fa58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    fa5c:	48 83 c4 50          	add    $0x50,%rsp
    fa60:	5d                   	pop    %rbp
    fa61:	c3                   	ret
    fa62:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    fa69:	00 00 00 
    fa6c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000fa70 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17erase_and_disposeINSt3__16__bindIMNS4_6PmNodeEFvPS5_mEJPSD_RKNSB_12placeholders4__phILi1EEEiEEEEENS0_13list_iteratorIS8_Lb0EEESP_T_>:
   {  return this->erase_and_dispose(const_iterator(i), disposer);   }
    fa70:	55                   	push   %rbp
    fa71:	48 89 e5             	mov    %rsp,%rbp
    fa74:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
    fa7b:	48 89 f8             	mov    %rdi,%rax
    fa7e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    fa85:	48 8d 45 10          	lea    0x10(%rbp),%rax
    fa89:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    fa8d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    fa91:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    fa95:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    fa99:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
    fa9d:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    faa1:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
    faa5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
      :  members_(other.pointed_node(), other.get_value_traits())
    faa9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    faad:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    fab1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   { return members_.nodeptr_; }
    fab5:	48 8b 12             	mov    (%rdx),%rdx
      :  members_(other.pointed_node(), other.get_value_traits())
    fab8:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    fabc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    fac0:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    fac4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    fac8:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    facc:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
    fad3:	00 
    fad4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    fad8:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
    fadc:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    fae0:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    fae4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    fae8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    faec:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    faf0:	48 8b 12             	mov    (%rdx),%rdx
    faf3:	48 89 11             	mov    %rdx,(%rcx)
    faf6:	48 8b 08             	mov    (%rax),%rcx
    faf9:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
    fb00:	48 8b 48 08          	mov    0x8(%rax),%rcx
    fb04:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
    fb0b:	48 8b 48 10          	mov    0x10(%rax),%rcx
    fb0f:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    fb13:	48 8b 40 18          	mov    0x18(%rax),%rax
    fb17:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    fb1b:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
    fb1f:	48 89 e0             	mov    %rsp,%rax
    fb22:	48 89 48 18          	mov    %rcx,0x18(%rax)
    fb26:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    fb2a:	48 89 48 10          	mov    %rcx,0x10(%rax)
    fb2e:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
    fb35:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    fb3c:	48 89 50 08          	mov    %rdx,0x8(%rax)
    fb40:	48 89 08             	mov    %rcx,(%rax)
    fb43:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    fb47:	e8 44 0a 00 00       	call   10590 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17erase_and_disposeINSt3__16__bindIMNS4_6PmNodeEFvPS5_mEJPSD_RKNSB_12placeholders4__phILi1EEEiEEEEENS0_13list_iteratorIS8_Lb0EEENSO_IS8_Lb1EEET_>
    fb4c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    fb53:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
    fb5a:	5d                   	pop    %rbp
    fb5b:	c3                   	ret
    fb5c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000fb60 <_ZN5boost9container6vectorIN4ours3mem8NodeMaskENS0_3dtl24static_storage_allocatorIS4_Lm5ELm0ELb0EEEvEC2Ev>:
   {}
    fb60:	55                   	push   %rbp
    fb61:	48 89 e5             	mov    %rsp,%rbp
    fb64:	48 83 ec 10          	sub    $0x10,%rsp
    fb68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fb6c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      : m_holder()
    fb70:	e8 0b 00 00 00       	call   fb80 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ours3mem8NodeMaskELm5ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>
   {}
    fb75:	48 83 c4 10          	add    $0x10,%rsp
    fb79:	5d                   	pop    %rbp
    fb7a:	c3                   	ret
    fb7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fb80 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ours3mem8NodeMaskELm5ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>:
   {}
    fb80:	55                   	push   %rbp
    fb81:	48 89 e5             	mov    %rsp,%rbp
    fb84:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fb88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fb8c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      : allocator_type(), m_size()
    fb90:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    fb97:	00 
   {}
    fb98:	5d                   	pop    %rbp
    fb99:	c3                   	ret
    fb9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000fba0 <_ZN5boost9container13static_vectorIN4ours3mem8NodeMaskELm5ENS0_17static_vector_optILb0ELm0EEEED2Ev>:
class static_vector
    fba0:	55                   	push   %rbp
    fba1:	48 89 e5             	mov    %rsp,%rbp
    fba4:	48 83 ec 10          	sub    $0x10,%rsp
    fba8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fbac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fbb0:	e8 0b 00 00 00       	call   fbc0 <_ZN5boost9container6vectorIN4ours3mem8NodeMaskENS0_3dtl24static_storage_allocatorIS4_Lm5ELm0ELb0EEEvED2Ev>
    fbb5:	48 83 c4 10          	add    $0x10,%rsp
    fbb9:	5d                   	pop    %rbp
    fbba:	c3                   	ret
    fbbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fbc0 <_ZN5boost9container6vectorIN4ours3mem8NodeMaskENS0_3dtl24static_storage_allocatorIS4_Lm5ELm0ELb0EEEvED2Ev>:
   {
    fbc0:	55                   	push   %rbp
    fbc1:	48 89 e5             	mov    %rsp,%rbp
    fbc4:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
    fbc8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    fbcc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    fbd0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    fbd4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    fbd8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    fbdc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    fbe0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    fbe4:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    fbe8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    fbec:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    fbf0:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    fbf4:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    fbf8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
         (this->get_stored_allocator(), this->priv_raw_begin(), this->m_holder.m_size);
    fbfc:	48 8b 40 28          	mov    0x28(%rax),%rax
    fc00:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    fc04:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    fc08:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   }
    fc0c:	5d                   	pop    %rbp
    fc0d:	c3                   	ret
    fc0e:	66 90                	xchg   %ax,%ax

000000000000fc10 <_ZN4ustl11collections9StaticVecIPN4ours3mem6PmZoneEJLm4EEEC2Ev>:
    struct StaticVec;
    fc10:	55                   	push   %rbp
    fc11:	48 89 e5             	mov    %rsp,%rbp
    fc14:	48 83 ec 10          	sub    $0x10,%rsp
    fc18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fc1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fc20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    fc24:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        : base_t()
    fc28:	e8 93 00 00 00       	call   fcc0 <_ZN5boost9container6vectorIPN4ours3mem6PmZoneENS0_3dtl24static_storage_allocatorIS5_Lm4ELm0ELb0EEEvEC2Ev>
    fc2d:	48 83 c4 10          	add    $0x10,%rsp
    fc31:	5d                   	pop    %rbp
    fc32:	c3                   	ret
    fc33:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    fc3a:	00 00 00 
    fc3d:	0f 1f 00             	nopl   (%rax)

000000000000fc40 <_ZN4ustl11collections9StaticVecIN4ours3mem10ZoneQueues7ZoneRefEJLm4EEEC2Ev>:
    fc40:	55                   	push   %rbp
    fc41:	48 89 e5             	mov    %rsp,%rbp
    fc44:	48 83 ec 10          	sub    $0x10,%rsp
    fc48:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fc4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fc50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    fc54:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fc58:	e8 a3 00 00 00       	call   fd00 <_ZN5boost9container6vectorIN4ours3mem10ZoneQueues7ZoneRefENS0_3dtl24static_storage_allocatorIS5_Lm4ELm0ELb0EEEvEC2Ev>
    fc5d:	48 83 c4 10          	add    $0x10,%rsp
    fc61:	5d                   	pop    %rbp
    fc62:	c3                   	ret
    fc63:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    fc6a:	00 00 00 
    fc6d:	0f 1f 00             	nopl   (%rax)

000000000000fc70 <_ZN4ustl11collections9StaticVecIN4ours3mem10ZoneQueues7ZoneRefEJLm128EEEC2Ev>:
    fc70:	55                   	push   %rbp
    fc71:	48 89 e5             	mov    %rsp,%rbp
    fc74:	48 83 ec 10          	sub    $0x10,%rsp
    fc78:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fc7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fc80:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    fc84:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fc88:	e8 b3 00 00 00       	call   fd40 <_ZN5boost9container6vectorIN4ours3mem10ZoneQueues7ZoneRefENS0_3dtl24static_storage_allocatorIS5_Lm128ELm0ELb0EEEvEC2Ev>
    fc8d:	48 83 c4 10          	add    $0x10,%rsp
    fc91:	5d                   	pop    %rbp
    fc92:	c3                   	ret
    fc93:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    fc9a:	00 00 00 
    fc9d:	0f 1f 00             	nopl   (%rax)

000000000000fca0 <_ZN4ustl11collections9StaticVecIPN4ours3mem6PmZoneEJLm4ELm32EEEC2Ev>:
    fca0:	55                   	push   %rbp
    fca1:	48 89 e5             	mov    %rsp,%rbp
    fca4:	48 83 ec 10          	sub    $0x10,%rsp
    fca8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fcac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fcb0:	e8 cb 00 00 00       	call   fd80 <_ZN4ustl11collections9StaticVecINS1_IPN4ours3mem6PmZoneEJLm32EEEEJLm4EEEC2Ev>
    fcb5:	48 83 c4 10          	add    $0x10,%rsp
    fcb9:	5d                   	pop    %rbp
    fcba:	c3                   	ret
    fcbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fcc0 <_ZN5boost9container6vectorIPN4ours3mem6PmZoneENS0_3dtl24static_storage_allocatorIS5_Lm4ELm0ELb0EEEvEC2Ev>:
   {}
    fcc0:	55                   	push   %rbp
    fcc1:	48 89 e5             	mov    %rsp,%rbp
    fcc4:	48 83 ec 10          	sub    $0x10,%rsp
    fcc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fccc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      : m_holder()
    fcd0:	e8 0b 00 00 00       	call   fce0 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIPN4ours3mem6PmZoneELm4ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>
   {}
    fcd5:	48 83 c4 10          	add    $0x10,%rsp
    fcd9:	5d                   	pop    %rbp
    fcda:	c3                   	ret
    fcdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fce0 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIPN4ours3mem6PmZoneELm4ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>:
   {}
    fce0:	55                   	push   %rbp
    fce1:	48 89 e5             	mov    %rsp,%rbp
    fce4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fce8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fcec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      : allocator_type(), m_size()
    fcf0:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    fcf7:	00 
   {}
    fcf8:	5d                   	pop    %rbp
    fcf9:	c3                   	ret
    fcfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000fd00 <_ZN5boost9container6vectorIN4ours3mem10ZoneQueues7ZoneRefENS0_3dtl24static_storage_allocatorIS5_Lm4ELm0ELb0EEEvEC2Ev>:
   {}
    fd00:	55                   	push   %rbp
    fd01:	48 89 e5             	mov    %rsp,%rbp
    fd04:	48 83 ec 10          	sub    $0x10,%rsp
    fd08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fd0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      : m_holder()
    fd10:	e8 0b 00 00 00       	call   fd20 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ours3mem10ZoneQueues7ZoneRefELm4ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>
   {}
    fd15:	48 83 c4 10          	add    $0x10,%rsp
    fd19:	5d                   	pop    %rbp
    fd1a:	c3                   	ret
    fd1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fd20 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ours3mem10ZoneQueues7ZoneRefELm4ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>:
   {}
    fd20:	55                   	push   %rbp
    fd21:	48 89 e5             	mov    %rsp,%rbp
    fd24:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fd28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fd2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      : allocator_type(), m_size()
    fd30:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
    fd37:	00 
   {}
    fd38:	5d                   	pop    %rbp
    fd39:	c3                   	ret
    fd3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000fd40 <_ZN5boost9container6vectorIN4ours3mem10ZoneQueues7ZoneRefENS0_3dtl24static_storage_allocatorIS5_Lm128ELm0ELb0EEEvEC2Ev>:
   {}
    fd40:	55                   	push   %rbp
    fd41:	48 89 e5             	mov    %rsp,%rbp
    fd44:	48 83 ec 10          	sub    $0x10,%rsp
    fd48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fd4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      : m_holder()
    fd50:	e8 0b 00 00 00       	call   fd60 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ours3mem10ZoneQueues7ZoneRefELm128ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>
   {}
    fd55:	48 83 c4 10          	add    $0x10,%rsp
    fd59:	5d                   	pop    %rbp
    fd5a:	c3                   	ret
    fd5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fd60 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ours3mem10ZoneQueues7ZoneRefELm128ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>:
   {}
    fd60:	55                   	push   %rbp
    fd61:	48 89 e5             	mov    %rsp,%rbp
    fd64:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fd68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fd6c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      : allocator_type(), m_size()
    fd70:	48 c7 80 00 08 00 00 	movq   $0x0,0x800(%rax)
    fd77:	00 00 00 00 
   {}
    fd7b:	5d                   	pop    %rbp
    fd7c:	c3                   	ret
    fd7d:	0f 1f 00             	nopl   (%rax)

000000000000fd80 <_ZN4ustl11collections9StaticVecINS1_IPN4ours3mem6PmZoneEJLm32EEEEJLm4EEEC2Ev>:
    fd80:	55                   	push   %rbp
    fd81:	48 89 e5             	mov    %rsp,%rbp
    fd84:	48 83 ec 10          	sub    $0x10,%rsp
    fd88:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fd8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fd90:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    fd94:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fd98:	e8 13 00 00 00       	call   fdb0 <_ZN5boost9container6vectorIN4ustl11collections9StaticVecIPN4ours3mem6PmZoneEJLm32EEEENS0_3dtl24static_storage_allocatorIS9_Lm4ELm0ELb0EEEvEC2Ev>
    fd9d:	48 83 c4 10          	add    $0x10,%rsp
    fda1:	5d                   	pop    %rbp
    fda2:	c3                   	ret
    fda3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    fdaa:	00 00 00 
    fdad:	0f 1f 00             	nopl   (%rax)

000000000000fdb0 <_ZN5boost9container6vectorIN4ustl11collections9StaticVecIPN4ours3mem6PmZoneEJLm32EEEENS0_3dtl24static_storage_allocatorIS9_Lm4ELm0ELb0EEEvEC2Ev>:
   {}
    fdb0:	55                   	push   %rbp
    fdb1:	48 89 e5             	mov    %rsp,%rbp
    fdb4:	48 83 ec 10          	sub    $0x10,%rsp
    fdb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fdbc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      : m_holder()
    fdc0:	e8 0b 00 00 00       	call   fdd0 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ustl11collections9StaticVecIPN4ours3mem6PmZoneEJLm32EEEELm4ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>
   {}
    fdc5:	48 83 c4 10          	add    $0x10,%rsp
    fdc9:	5d                   	pop    %rbp
    fdca:	c3                   	ret
    fdcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fdd0 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ustl11collections9StaticVecIPN4ours3mem6PmZoneEJLm32EEEELm4ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>:
   {}
    fdd0:	55                   	push   %rbp
    fdd1:	48 89 e5             	mov    %rsp,%rbp
    fdd4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fdd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fddc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      : allocator_type(), m_size()
    fde0:	48 c7 80 20 04 00 00 	movq   $0x0,0x420(%rax)
    fde7:	00 00 00 00 
   {}
    fdeb:	5d                   	pop    %rbp
    fdec:	c3                   	ret
    fded:	0f 1f 00             	nopl   (%rax)

000000000000fdf0 <_ZN4ustl11collections9StaticVecINS0_9intrusive4ListIN4ours3mem7PmFrameEJN5boost9intrusive11member_hookIS6_NS8_16list_member_hookIJEEEXadL_ZNS6_13managed_hook_EEEEEEEEJLm11EEEC2Ev>:
    fdf0:	55                   	push   %rbp
    fdf1:	48 89 e5             	mov    %rsp,%rbp
    fdf4:	48 83 ec 10          	sub    $0x10,%rsp
    fdf8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fdfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fe00:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    fe04:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fe08:	e8 33 00 00 00       	call   fe40 <_ZN5boost9container6vectorIN4ustl11collections9intrusive4ListIN4ours3mem7PmFrameEJNS_9intrusive11member_hookIS8_NS9_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEENS0_3dtl24static_storage_allocatorISE_Lm11ELm0ELb0EEEvEC2Ev>
    fe0d:	48 83 c4 10          	add    $0x10,%rsp
    fe11:	5d                   	pop    %rbp
    fe12:	c3                   	ret
    fe13:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    fe1a:	00 00 00 
    fe1d:	0f 1f 00             	nopl   (%rax)

000000000000fe20 <_ZNSt3__16atomicIjEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI atomic() = default;
    fe20:	55                   	push   %rbp
    fe21:	48 89 e5             	mov    %rsp,%rbp
    fe24:	48 83 ec 10          	sub    $0x10,%rsp
    fe28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fe2c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fe30:	e8 4b 00 00 00       	call   fe80 <_ZNSt3__113__atomic_baseIjLb1EEC2B8nn210000Ev>
    fe35:	48 83 c4 10          	add    $0x10,%rsp
    fe39:	5d                   	pop    %rbp
    fe3a:	c3                   	ret
    fe3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fe40 <_ZN5boost9container6vectorIN4ustl11collections9intrusive4ListIN4ours3mem7PmFrameEJNS_9intrusive11member_hookIS8_NS9_16list_member_hookIJEEEXadL_ZNS8_13managed_hook_EEEEEEEENS0_3dtl24static_storage_allocatorISE_Lm11ELm0ELb0EEEvEC2Ev>:
   {}
    fe40:	55                   	push   %rbp
    fe41:	48 89 e5             	mov    %rsp,%rbp
    fe44:	48 83 ec 10          	sub    $0x10,%rsp
    fe48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fe4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      : m_holder()
    fe50:	e8 0b 00 00 00       	call   fe60 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ustl11collections9intrusive4ListIN4ours3mem7PmFrameEJNS_9intrusive11member_hookISA_NSB_16list_member_hookIJEEEXadL_ZNSA_13managed_hook_EEEEEEEELm11ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>
   {}
    fe55:	48 83 c4 10          	add    $0x10,%rsp
    fe59:	5d                   	pop    %rbp
    fe5a:	c3                   	ret
    fe5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fe60 <_ZN5boost9container19vector_alloc_holderINS0_3dtl24static_storage_allocatorIN4ustl11collections9intrusive4ListIN4ours3mem7PmFrameEJNS_9intrusive11member_hookISA_NSB_16list_member_hookIJEEEXadL_ZNSA_13managed_hook_EEEEEEEELm11ELm0ELb0EEEmNS_11move_detail17integral_constantIjLj0EEEEC2Ev>:
   {}
    fe60:	55                   	push   %rbp
    fe61:	48 89 e5             	mov    %rsp,%rbp
    fe64:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    fe68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fe6c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      : allocator_type(), m_size()
    fe70:	48 c7 80 08 01 00 00 	movq   $0x0,0x108(%rax)
    fe77:	00 00 00 00 
   {}
    fe7b:	5d                   	pop    %rbp
    fe7c:	c3                   	ret
    fe7d:	0f 1f 00             	nopl   (%rax)

000000000000fe80 <_ZNSt3__113__atomic_baseIjLb1EEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 __atomic_base() _NOEXCEPT = default;
    fe80:	55                   	push   %rbp
    fe81:	48 89 e5             	mov    %rsp,%rbp
    fe84:	48 83 ec 10          	sub    $0x10,%rsp
    fe88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fe8c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fe90:	e8 0b 00 00 00       	call   fea0 <_ZNSt3__113__atomic_baseIjLb0EEC2B8nn210000Ev>
    fe95:	48 83 c4 10          	add    $0x10,%rsp
    fe99:	5d                   	pop    %rbp
    fe9a:	c3                   	ret
    fe9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fea0 <_ZNSt3__113__atomic_baseIjLb0EEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr __atomic_base() noexcept(is_nothrow_default_constructible_v<_Tp>) : __a_(_Tp()) {}
    fea0:	55                   	push   %rbp
    fea1:	48 89 e5             	mov    %rsp,%rbp
    fea4:	48 83 ec 10          	sub    $0x10,%rsp
    fea8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    feac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    feb0:	31 c0                	xor    %eax,%eax
    feb2:	31 f6                	xor    %esi,%esi
    feb4:	e8 07 00 00 00       	call   fec0 <_ZNSt3__117__cxx_atomic_implIjNS_22__cxx_atomic_base_implIjEEEC2B8nn210000Ej>
    feb9:	48 83 c4 10          	add    $0x10,%rsp
    febd:	5d                   	pop    %rbp
    febe:	c3                   	ret
    febf:	90                   	nop

000000000000fec0 <_ZNSt3__117__cxx_atomic_implIjNS_22__cxx_atomic_base_implIjEEEC2B8nn210000Ej>:
    fec0:	55                   	push   %rbp
    fec1:	48 89 e5             	mov    %rsp,%rbp
    fec4:	48 83 ec 10          	sub    $0x10,%rsp
    fec8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fecc:	89 75 f4             	mov    %esi,-0xc(%rbp)
    fecf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    fed3:	8b 75 f4             	mov    -0xc(%rbp),%esi
    fed6:	e8 15 00 00 00       	call   fef0 <_ZNSt3__122__cxx_atomic_base_implIjEC2Ej>
    fedb:	48 83 c4 10          	add    $0x10,%rsp
    fedf:	5d                   	pop    %rbp
    fee0:	c3                   	ret
    fee1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    fee8:	00 00 00 
    feeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000fef0 <_ZNSt3__122__cxx_atomic_base_implIjEC2Ej>:
  _LIBCPP_CONSTEXPR explicit __cxx_atomic_base_impl(_Tp __value) _NOEXCEPT : __a_value(__value) {}
    fef0:	55                   	push   %rbp
    fef1:	48 89 e5             	mov    %rsp,%rbp
    fef4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    fef8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    fefb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    feff:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    ff02:	89 08                	mov    %ecx,(%rax)
    ff04:	5d                   	pop    %rbp
    ff05:	c3                   	ret
    ff06:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ff0d:	00 00 00 

000000000000ff10 <_ZN4ustl6result14StorageTrivialIPN4ours3mem7PmFrameENS2_6StatusEEC2IJS6_EEENS_7InplaceIJS6_EEEDpOT_>:
        {}
    ff10:	55                   	push   %rbp
    ff11:	48 89 e5             	mov    %rsp,%rbp
    ff14:	48 83 ec 20          	sub    $0x20,%rsp
    ff18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    ff1c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    ff20:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : error_(static_cast<Args &&>(args)...), 
    ff24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ff28:	8b 00                	mov    (%rax),%eax
    ff2a:	89 07                	mov    %eax,(%rdi)
              status_(Status::HaveError)
    ff2c:	48 83 c7 08          	add    $0x8,%rdi
    ff30:	be 02 00 00 00       	mov    $0x2,%esi
    ff35:	e8 76 7c ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
    ff3a:	48 83 c4 20          	add    $0x20,%rsp
    ff3e:	5d                   	pop    %rbp
    ff3f:	c3                   	ret

000000000000ff40 <_ZNSt3__17forwardB8nn210000IMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEEEOT_Ru20__remove_reference_tIS8_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    ff40:	55                   	push   %rbp
    ff41:	48 89 e5             	mov    %rsp,%rbp
    ff44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    ff48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff4c:	5d                   	pop    %rbp
    ff4d:	c3                   	ret
    ff4e:	66 90                	xchg   %ax,%ax

000000000000ff50 <_ZNSt3__17forwardB8nn210000IPN4ours3mem6PmNodeEEEOT_Ru20__remove_reference_tIS5_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    ff50:	55                   	push   %rbp
    ff51:	48 89 e5             	mov    %rsp,%rbp
    ff54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    ff58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff5c:	5d                   	pop    %rbp
    ff5d:	c3                   	ret
    ff5e:	66 90                	xchg   %ax,%ax

000000000000ff60 <_ZNSt3__17forwardB8nn210000IRKNS_12placeholders4__phILi1EEEEEOT_Ru20__remove_reference_tIS6_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
    ff60:	55                   	push   %rbp
    ff61:	48 89 e5             	mov    %rsp,%rbp
    ff64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
    ff68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff6c:	5d                   	pop    %rbp
    ff6d:	c3                   	ret
    ff6e:	66 90                	xchg   %ax,%ax

000000000000ff70 <_ZNSt3__16__bindIMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEJPS3_RKNS_12placeholders4__phILi1EEEiEEC2B8nn210000IS7_JS8_SD_iETnNS_9enable_ifIXaasr16is_constructibleIS7_T_EE5valuentsr7is_sameIu20__remove_reference_tISH_ESE_EE5valueEiE4typeELi0EEEOSH_DpOT0_>:
      : __f_(std::forward<_Gp>(__f)), __bound_args_(std::forward<_BA>(__bound_args)...) {}
    ff70:	55                   	push   %rbp
    ff71:	48 89 e5             	mov    %rsp,%rbp
    ff74:	48 83 ec 50          	sub    $0x50,%rsp
    ff78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ff7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ff80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    ff84:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    ff88:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    ff8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff90:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    ff94:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ff98:	e8 a3 ff ff ff       	call   ff40 <_ZNSt3__17forwardB8nn210000IMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEEEOT_Ru20__remove_reference_tIS8_E>
    ff9d:	48 89 c2             	mov    %rax,%rdx
    ffa0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ffa4:	48 8b 0a             	mov    (%rdx),%rcx
    ffa7:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    ffab:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ffaf:	48 89 08             	mov    %rcx,(%rax)
    ffb2:	48 83 c0 10          	add    $0x10,%rax
    ffb6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ffba:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ffbe:	e8 8d ff ff ff       	call   ff50 <_ZNSt3__17forwardB8nn210000IPN4ours3mem6PmNodeEEEOT_Ru20__remove_reference_tIS5_E>
    ffc3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    ffc7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    ffcb:	e8 90 ff ff ff       	call   ff60 <_ZNSt3__17forwardB8nn210000IRKNS_12placeholders4__phILi1EEEEEOT_Ru20__remove_reference_tIS6_E>
    ffd0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ffd4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    ffd8:	e8 43 7a ff ff       	call   7a20 <_ZNSt3__17forwardB8nn210000IiEEOT_Ru20__remove_reference_tIS1_E>
    ffdd:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    ffe1:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    ffe5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ffe9:	48 89 c1             	mov    %rax,%rcx
    ffec:	e8 0f 00 00 00       	call   10000 <_ZNSt3__15tupleIJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEC2B8nn210000IJS4_RKS7_iETnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXeqsZT_sZT_EEENS8_17_EnableUTypesCtorIJDpT_EEEEE5valueEiE4typeELi0EEEDpOSG_>
    fff1:	48 83 c4 50          	add    $0x50,%rsp
    fff5:	5d                   	pop    %rbp
    fff6:	c3                   	ret
    fff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    fffe:	00 00 

0000000000010000 <_ZNSt3__15tupleIJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEC2B8nn210000IJS4_RKS7_iETnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXeqsZT_sZT_EEENS8_17_EnableUTypesCtorIJDpT_EEEEE5valueEiE4typeELi0EEEDpOSG_>:
      tuple(_Up&&... __u) noexcept(_And<is_nothrow_constructible<_Tp, _Up>...>::value)
      : __base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),
                typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),
                std::forward<_Up>(__u)...) {}
   10000:	55                   	push   %rbp
   10001:	48 89 e5             	mov    %rsp,%rbp
   10004:	48 83 ec 40          	sub    $0x40,%rsp
   10008:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1000c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10010:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   10014:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   10018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1001c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   10020:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10024:	e8 27 ff ff ff       	call   ff50 <_ZNSt3__17forwardB8nn210000IPN4ours3mem6PmNodeEEEOT_Ru20__remove_reference_tIS5_E>
   10029:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1002d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10031:	e8 2a ff ff ff       	call   ff60 <_ZNSt3__17forwardB8nn210000IRKNS_12placeholders4__phILi1EEEEEOT_Ru20__remove_reference_tIS6_E>
   10036:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1003a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1003e:	e8 dd 79 ff ff       	call   7a20 <_ZNSt3__17forwardB8nn210000IiEEOT_Ru20__remove_reference_tIS1_E>
   10043:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   10047:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1004b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1004f:	48 89 c1             	mov    %rax,%rcx
      : __base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),
   10052:	e8 09 00 00 00       	call   10060 <_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEC2B8nn210000IJLm0ELm1ELm2EEJS6_S9_iETpTnmJEJEJS6_RKS9_iEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_>
                std::forward<_Up>(__u)...) {}
   10057:	48 83 c4 40          	add    $0x40,%rsp
   1005b:	5d                   	pop    %rbp
   1005c:	c3                   	ret
   1005d:	0f 1f 00             	nopl   (%rax)

0000000000010060 <_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEC2B8nn210000IJLm0ELm1ELm2EEJS6_S9_iETpTnmJEJEJS6_RKS9_iEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_>:
      : __tuple_leaf<_Uf, _Tf>(std::forward<_Up>(__u))..., __tuple_leaf<_Ul, _Tl>()... {}
   10060:	55                   	push   %rbp
   10061:	48 89 e5             	mov    %rsp,%rbp
   10064:	48 83 ec 40          	sub    $0x40,%rsp
   10068:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1006c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   10070:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   10074:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   10078:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1007c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   10080:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10084:	e8 c7 fe ff ff       	call   ff50 <_ZNSt3__17forwardB8nn210000IPN4ours3mem6PmNodeEEEOT_Ru20__remove_reference_tIS5_E>
   10089:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1008d:	48 89 c6             	mov    %rax,%rsi
   10090:	e8 4b 00 00 00       	call   100e0 <_ZNSt3__112__tuple_leafILm0EPN4ours3mem6PmNodeELb0EEC2B8nn210000IS4_TnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXntu9__is_sameu14__remove_cvrefIT_ES5_EEEENS_16is_constructibleIS4_JS9_EEEEE5valueEiE4typeELi0EEEOS9_>
   10095:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   10099:	e8 c2 fe ff ff       	call   ff60 <_ZNSt3__17forwardB8nn210000IRKNS_12placeholders4__phILi1EEEEEOT_Ru20__remove_reference_tIS6_E>
   1009e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   100a2:	48 89 c6             	mov    %rax,%rsi
   100a5:	e8 76 00 00 00       	call   10120 <_ZNSt3__112__tuple_leafILm1ENS_12placeholders4__phILi1EEELb1EEC2B8nn210000IRKS3_TnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXntu9__is_sameu14__remove_cvrefIT_ES4_EEEENS_16is_constructibleIS3_JSA_EEEEE5valueEiE4typeELi0EEEOSA_>
   100aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   100ae:	48 83 c0 08          	add    $0x8,%rax
   100b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   100b6:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   100ba:	e8 61 79 ff ff       	call   7a20 <_ZNSt3__17forwardB8nn210000IiEEOT_Ru20__remove_reference_tIS1_E>
   100bf:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   100c3:	48 89 c6             	mov    %rax,%rsi
   100c6:	e8 75 00 00 00       	call   10140 <_ZNSt3__112__tuple_leafILm2EiLb0EEC2B8nn210000IiTnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXntu9__is_sameu14__remove_cvrefIT_ES1_EEEENS_16is_constructibleIiJS5_EEEEE5valueEiE4typeELi0EEEOS5_>
   100cb:	48 83 c4 40          	add    $0x40,%rsp
   100cf:	5d                   	pop    %rbp
   100d0:	c3                   	ret
   100d1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   100d8:	00 00 00 
   100db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000100e0 <_ZNSt3__112__tuple_leafILm0EPN4ours3mem6PmNodeELb0EEC2B8nn210000IS4_TnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXntu9__is_sameu14__remove_cvrefIT_ES5_EEEENS_16is_constructibleIS4_JS9_EEEEE5valueEiE4typeELi0EEEOS9_>:
      : __value_(std::forward<_Tp>(__t)) {
   100e0:	55                   	push   %rbp
   100e1:	48 89 e5             	mov    %rsp,%rbp
   100e4:	48 83 ec 20          	sub    $0x20,%rsp
   100e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   100ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   100f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   100f8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   100fc:	e8 4f fe ff ff       	call   ff50 <_ZNSt3__17forwardB8nn210000IPN4ours3mem6PmNodeEEEOT_Ru20__remove_reference_tIS5_E>
   10101:	48 89 c1             	mov    %rax,%rcx
   10104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10108:	48 8b 09             	mov    (%rcx),%rcx
   1010b:	48 89 08             	mov    %rcx,(%rax)
  }
   1010e:	48 83 c4 20          	add    $0x20,%rsp
   10112:	5d                   	pop    %rbp
   10113:	c3                   	ret
   10114:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1011b:	00 00 00 
   1011e:	66 90                	xchg   %ax,%ax

0000000000010120 <_ZNSt3__112__tuple_leafILm1ENS_12placeholders4__phILi1EEELb1EEC2B8nn210000IRKS3_TnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXntu9__is_sameu14__remove_cvrefIT_ES4_EEEENS_16is_constructibleIS3_JSA_EEEEE5valueEiE4typeELi0EEEOSA_>:
      : _Hp(std::forward<_Tp>(__t)) {}
   10120:	55                   	push   %rbp
   10121:	48 89 e5             	mov    %rsp,%rbp
   10124:	48 83 ec 10          	sub    $0x10,%rsp
   10128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1012c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10130:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10134:	e8 27 fe ff ff       	call   ff60 <_ZNSt3__17forwardB8nn210000IRKNS_12placeholders4__phILi1EEEEEOT_Ru20__remove_reference_tIS6_E>
   10139:	48 83 c4 10          	add    $0x10,%rsp
   1013d:	5d                   	pop    %rbp
   1013e:	c3                   	ret
   1013f:	90                   	nop

0000000000010140 <_ZNSt3__112__tuple_leafILm2EiLb0EEC2B8nn210000IiTnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXntu9__is_sameu14__remove_cvrefIT_ES1_EEEENS_16is_constructibleIiJS5_EEEEE5valueEiE4typeELi0EEEOS5_>:
      : __value_(std::forward<_Tp>(__t)) {
   10140:	55                   	push   %rbp
   10141:	48 89 e5             	mov    %rsp,%rbp
   10144:	48 83 ec 20          	sub    $0x20,%rsp
   10148:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1014c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10154:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10158:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1015c:	e8 bf 78 ff ff       	call   7a20 <_ZNSt3__17forwardB8nn210000IiEEOT_Ru20__remove_reference_tIS1_E>
   10161:	48 89 c1             	mov    %rax,%rcx
   10164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10168:	8b 09                	mov    (%rcx),%ecx
   1016a:	89 08                	mov    %ecx,(%rax)
  }
   1016c:	48 83 c4 20          	add    $0x20,%rsp
   10170:	5d                   	pop    %rbp
   10171:	c3                   	ret
   10172:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10179:	00 00 00 
   1017c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000010180 <_ZNSt3__116make_format_argsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJiEEENS_18__format_arg_storeIT_JDpT0_EEEDpRSA_>:
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI __format_arg_store<_Context, _Args...> make_format_args(_Args&... __args) {
   10180:	55                   	push   %rbp
   10181:	48 89 e5             	mov    %rsp,%rbp
   10184:	48 83 ec 10          	sub    $0x10,%rsp
   10188:	48 89 f8             	mov    %rdi,%rax
   1018b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1018f:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  return std::__format_arg_store<_Context, _Args...>(__args...);
   10193:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   10197:	e8 44 00 00 00       	call   101e0 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJiEEC2B8nn210000ERi>
   1019c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   101a0:	48 83 c4 10          	add    $0x10,%rsp
   101a4:	5d                   	pop    %rbp
   101a5:	c3                   	ret
   101a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   101ad:	00 00 00 

00000000000101b0 <_ZNSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000IJiEEERKNS_18__format_arg_storeIS7_JDpT_EEE>:
      : __size_(sizeof...(_Args)) {
   101b0:	55                   	push   %rbp
   101b1:	48 89 e5             	mov    %rsp,%rbp
   101b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   101b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   101bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101c0:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
        __values_ = __store.__storage.__values_;
   101c7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   101cb:	48 89 48 08          	mov    %rcx,0x8(%rax)
        __types_  = __store.__storage.__types_;
   101cf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   101d3:	48 8b 49 10          	mov    0x10(%rcx),%rcx
   101d7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  }
   101db:	5d                   	pop    %rbp
   101dc:	c3                   	ret
   101dd:	0f 1f 00             	nopl   (%rax)

00000000000101e0 <_ZNSt3__118__format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEJiEEC2B8nn210000ERi>:
  _LIBCPP_HIDE_FROM_ABI __format_arg_store(_Args&... __args) noexcept {
   101e0:	55                   	push   %rbp
   101e1:	48 89 e5             	mov    %rsp,%rbp
   101e4:	48 83 ec 20          	sub    $0x20,%rsp
   101e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   101ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   101f0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   101f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   101f8:	e8 f3 ab ff ff       	call   adf0 <_ZNSt3__18__format25__packed_format_arg_storeINS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEELm1EEC2Ev>
   101fd:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
        __format::__create_packed_storage(__storage.__types_, __storage.__values_, __args...);
   10201:	48 89 f7             	mov    %rsi,%rdi
   10204:	48 83 c7 10          	add    $0x10,%rdi
   10208:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1020c:	e8 0f 00 00 00       	call   10220 <_ZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJiEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_>
  }
   10211:	48 83 c4 20          	add    $0x20,%rsp
   10215:	5d                   	pop    %rbp
   10216:	c3                   	ret
   10217:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1021e:	00 00 

0000000000010220 <_ZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJiEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_>:
__create_packed_storage(uint64_t& __types, __basic_format_arg_value<_Context>* __values, _Args&... __args) noexcept {
   10220:	55                   	push   %rbp
   10221:	48 89 e5             	mov    %rsp,%rbp
   10224:	48 83 ec 40          	sub    $0x40,%rsp
   10228:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1022c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10230:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  int __shift = 0;
   10234:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
      [&] {
   1023b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1023f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   10243:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
   10247:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1024b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1024f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   10253:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   10257:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1025b:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1025f:	e8 0c 00 00 00       	call   10270 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJiEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv>
}
   10264:	48 83 c4 40          	add    $0x40,%rsp
   10268:	5d                   	pop    %rbp
   10269:	c3                   	ret
   1026a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000010270 <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJiEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv>:
      [&] {
   10270:	55                   	push   %rbp
   10271:	48 89 e5             	mov    %rsp,%rbp
   10274:	48 83 ec 40          	sub    $0x40,%rsp
   10278:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1027c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10280:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        basic_format_arg<_Context> __arg = __format::__create_format_arg<_Context>(__args);
   10284:	48 8b 30             	mov    (%rax),%rsi
   10287:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   1028b:	e8 80 00 00 00       	call   10310 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEiEENS_16basic_format_argIT_EERT0_>
   10290:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        if (__shift != 0)
   10294:	48 8b 40 08          	mov    0x8(%rax),%rax
   10298:	83 38 00             	cmpl   $0x0,(%rax)
   1029b:	74 22                	je     102bf <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJiEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv+0x4f>
   1029d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types |= static_cast<uint64_t>(__arg.__type_) << __shift;
   102a1:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
   102a5:	89 ca                	mov    %ecx,%edx
   102a7:	48 8b 48 08          	mov    0x8(%rax),%rcx
   102ab:	8b 09                	mov    (%rcx),%ecx
   102ad:	48 d3 e2             	shl    %cl,%rdx
   102b0:	48 89 d1             	mov    %rdx,%rcx
   102b3:	48 8b 40 10          	mov    0x10(%rax),%rax
   102b7:	48 0b 08             	or     (%rax),%rcx
   102ba:	48 89 08             	mov    %rcx,(%rax)
   102bd:	eb 0f                	jmp    102ce <_ZZNSt3__18__format23__create_packed_storageB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEJiEEEvRmPNS_24__basic_format_arg_valueIT_EEDpRT0_ENKUlvE_clEv+0x5e>
   102bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
          __types = static_cast<uint64_t>(__arg.__type_);
   102c3:	0f b6 4d e0          	movzbl -0x20(%rbp),%ecx
   102c7:	48 8b 40 10          	mov    0x10(%rax),%rax
   102cb:	48 89 08             	mov    %rcx,(%rax)
   102ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        __shift += __packed_arg_t_bits;
   102d2:	48 8b 48 08          	mov    0x8(%rax),%rcx
   102d6:	8b 11                	mov    (%rcx),%edx
   102d8:	83 c2 05             	add    $0x5,%edx
   102db:	89 11                	mov    %edx,(%rcx)
        *__values++ = __arg.__value_;
   102dd:	48 8b 48 18          	mov    0x18(%rax),%rcx
   102e1:	48 8b 01             	mov    (%rcx),%rax
   102e4:	48 89 c2             	mov    %rax,%rdx
   102e7:	48 83 c2 10          	add    $0x10,%rdx
   102eb:	48 89 11             	mov    %rdx,(%rcx)
   102ee:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   102f2:	48 89 08             	mov    %rcx,(%rax)
   102f5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   102f9:	48 89 48 08          	mov    %rcx,0x8(%rax)
      }(),
   102fd:	48 83 c4 40          	add    $0x40,%rsp
   10301:	5d                   	pop    %rbp
   10302:	c3                   	ret
   10303:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1030a:	00 00 00 
   1030d:	0f 1f 00             	nopl   (%rax)

0000000000010310 <_ZNSt3__18__format19__create_format_argB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEiEENS_16basic_format_argIT_EERT0_>:
_LIBCPP_HIDE_FROM_ABI basic_format_arg<_Context> __create_format_arg(_Tp& __value) noexcept {
   10310:	55                   	push   %rbp
   10311:	48 89 e5             	mov    %rsp,%rbp
   10314:	48 83 ec 30          	sub    $0x30,%rsp
   10318:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   1031c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   10320:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  constexpr __arg_t __arg = __format::__determine_arg_t<_Context, _Dp>();
   10324:	c6 45 f7 03          	movb   $0x3,-0x9(%rbp)
    return basic_format_arg<_Context>{__arg, static_cast<int>(__value)};
   10328:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1032c:	8b 30                	mov    (%rax),%esi
   1032e:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   10332:	e8 29 00 00 00       	call   10360 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ei>
   10337:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   1033b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1033f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   10343:	be 03 00 00 00       	mov    $0x3,%esi
   10348:	e8 73 ac ff ff       	call   afc0 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000ENS3_7__arg_tENS_24__basic_format_arg_valueIS7_EE>
   1034d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10351:	48 83 c4 30          	add    $0x30,%rsp
   10355:	5d                   	pop    %rbp
   10356:	c3                   	ret
   10357:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1035e:	00 00 

0000000000010360 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ei>:
  _LIBCPP_HIDE_FROM_ABI __basic_format_arg_value(int __value) noexcept : __int_(__value) {}
   10360:	55                   	push   %rbp
   10361:	48 89 e5             	mov    %rsp,%rbp
   10364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10368:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1036b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1036f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   10372:	89 08                	mov    %ecx,(%rax)
   10374:	5d                   	pop    %rbp
   10375:	c3                   	ret
   10376:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1037d:	00 00 00 

0000000000010380 <_ZN5boost9container3dtl3getILi0EJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEEENS1_8get_implIXT_ENS1_5tupleIJDpT0_EEEE4typeERSE_>:
   static const_type get(const tuple<Head, Values...>& t){ return t.head(); }
};

template<int I, typename... Values>
typename get_impl<I, tuple<Values...> >::type get(tuple<Values...>& t)
{  return get_impl<I, tuple<Values...> >::get(t);  }
   10380:	55                   	push   %rbp
   10381:	48 89 e5             	mov    %rsp,%rbp
   10384:	48 83 ec 10          	sub    $0x10,%rsp
   10388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1038c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   10390:	e8 4b 00 00 00       	call   103e0 <_ZN5boost9container3dtl8get_implILi0ENS1_5tupleIJRPN4ours3mem6PmZoneERNS5_8ZoneTypeEEEEE3getERSB_>
   10395:	48 83 c4 10          	add    $0x10,%rsp
   10399:	5d                   	pop    %rbp
   1039a:	c3                   	ret
   1039b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000103a0 <_ZN5boost9container3dtl3getILi1EJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEEENS1_8get_implIXT_ENS1_5tupleIJDpT0_EEEE4typeERSE_>:
   103a0:	55                   	push   %rbp
   103a1:	48 89 e5             	mov    %rsp,%rbp
   103a4:	48 83 ec 10          	sub    $0x10,%rsp
   103a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   103ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   103b0:	e8 6b 00 00 00       	call   10420 <_ZN5boost9container3dtl8get_implILi1ENS1_5tupleIJRPN4ours3mem6PmZoneERNS5_8ZoneTypeEEEEE3getERSB_>
   103b5:	48 83 c4 10          	add    $0x10,%rsp
   103b9:	5d                   	pop    %rbp
   103ba:	c3                   	ret
   103bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000103c0 <_ZnwmPv21boost_container_new_t>:

struct boost_container_new_t{};

//avoid including <new>
inline void *operator new(std::size_t, void *p, boost_container_new_t)
{  return p;  }
   103c0:	55                   	push   %rbp
   103c1:	48 89 e5             	mov    %rsp,%rbp
   103c4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   103c8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   103cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   103d0:	5d                   	pop    %rbp
   103d1:	c3                   	ret
   103d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   103d9:	00 00 00 
   103dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000103e0 <_ZN5boost9container3dtl8get_implILi0ENS1_5tupleIJRPN4ours3mem6PmZoneERNS5_8ZoneTypeEEEEE3getERSB_>:
   static type       get(tuple<Head, Values...>& t)      { return t.head(); }
   103e0:	55                   	push   %rbp
   103e1:	48 89 e5             	mov    %rsp,%rbp
   103e4:	48 83 ec 10          	sub    $0x10,%rsp
   103e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   103ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   103f0:	e8 0b 00 00 00       	call   10400 <_ZN5boost9container3dtl5tupleIJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEE4headEv>
   103f5:	48 83 c4 10          	add    $0x10,%rsp
   103f9:	5d                   	pop    %rbp
   103fa:	c3                   	ret
   103fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010400 <_ZN5boost9container3dtl5tupleIJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEE4headEv>:
   typename add_reference<Head>::type head()             {  return m_head; }
   10400:	55                   	push   %rbp
   10401:	48 89 e5             	mov    %rsp,%rbp
   10404:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10408:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1040c:	48 8b 40 08          	mov    0x8(%rax),%rax
   10410:	5d                   	pop    %rbp
   10411:	c3                   	ret
   10412:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10419:	00 00 00 
   1041c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000010420 <_ZN5boost9container3dtl8get_implILi1ENS1_5tupleIJRPN4ours3mem6PmZoneERNS5_8ZoneTypeEEEEE3getERSB_>:
   static type get(tuple<Head, Values...>& t)              { return Next::get(t.tail()); }
   10420:	55                   	push   %rbp
   10421:	48 89 e5             	mov    %rsp,%rbp
   10424:	48 83 ec 10          	sub    $0x10,%rsp
   10428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1042c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   10430:	e8 3b 00 00 00       	call   10470 <_ZN5boost9container3dtl5tupleIJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEE4tailEv>
   10435:	48 89 c7             	mov    %rax,%rdi
   10438:	e8 13 00 00 00       	call   10450 <_ZN5boost9container3dtl8get_implILi0ENS1_5tupleIJRN4ours3mem8ZoneTypeEEEEE3getERS8_>
   1043d:	48 83 c4 10          	add    $0x10,%rsp
   10441:	5d                   	pop    %rbp
   10442:	c3                   	ret
   10443:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1044a:	00 00 00 
   1044d:	0f 1f 00             	nopl   (%rax)

0000000000010450 <_ZN5boost9container3dtl8get_implILi0ENS1_5tupleIJRN4ours3mem8ZoneTypeEEEEE3getERS8_>:
   static type       get(tuple<Head, Values...>& t)      { return t.head(); }
   10450:	55                   	push   %rbp
   10451:	48 89 e5             	mov    %rsp,%rbp
   10454:	48 83 ec 10          	sub    $0x10,%rsp
   10458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1045c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   10460:	e8 1b 00 00 00       	call   10480 <_ZN5boost9container3dtl5tupleIJRN4ours3mem8ZoneTypeEEE4headEv>
   10465:	48 83 c4 10          	add    $0x10,%rsp
   10469:	5d                   	pop    %rbp
   1046a:	c3                   	ret
   1046b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010470 <_ZN5boost9container3dtl5tupleIJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEE4tailEv>:
   inherited& tail()             { return *this; }
   10470:	55                   	push   %rbp
   10471:	48 89 e5             	mov    %rsp,%rbp
   10474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1047c:	5d                   	pop    %rbp
   1047d:	c3                   	ret
   1047e:	66 90                	xchg   %ax,%ax

0000000000010480 <_ZN5boost9container3dtl5tupleIJRN4ours3mem8ZoneTypeEEE4headEv>:
   typename add_reference<Head>::type head()             {  return m_head; }
   10480:	55                   	push   %rbp
   10481:	48 89 e5             	mov    %rsp,%rbp
   10484:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10488:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1048c:	48 8b 00             	mov    (%rax),%rax
   1048f:	5d                   	pop    %rbp
   10490:	c3                   	ret
   10491:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10498:	00 00 00 
   1049b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000104a0 <_ZN5boost9container3dtl5tupleIJRPN4ours3mem6PmZoneERNS4_8ZoneTypeEEEC2IS7_JS9_EEEOT_DpOT0_>:
   {}
   104a0:	55                   	push   %rbp
   104a1:	48 89 e5             	mov    %rsp,%rbp
   104a4:	48 83 ec 30          	sub    $0x30,%rsp
   104a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   104ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   104b0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   104b4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   104b8:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
      : inherited(::boost::forward<Args>(args)...), m_head(::boost::forward<U>(u))
   104bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   104c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
         {  return static_cast<T&&>(t);   }
   104c4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   104c8:	e8 23 00 00 00       	call   104f0 <_ZN5boost9container3dtl5tupleIJRN4ours3mem8ZoneTypeEEEC2IS6_JEEEOT_DpOT0_>
   104cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   104d1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   104d5:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   104d9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   104dd:	48 89 48 08          	mov    %rcx,0x8(%rax)
   {}
   104e1:	48 83 c4 30          	add    $0x30,%rsp
   104e5:	5d                   	pop    %rbp
   104e6:	c3                   	ret
   104e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   104ee:	00 00 

00000000000104f0 <_ZN5boost9container3dtl5tupleIJRN4ours3mem8ZoneTypeEEEC2IS6_JEEEOT_DpOT0_>:
   104f0:	55                   	push   %rbp
   104f1:	48 89 e5             	mov    %rsp,%rbp
   104f4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   104f8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   104fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      : inherited(::boost::forward<Args>(args)...), m_head(::boost::forward<U>(u))
   10500:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   10504:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   10508:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1050c:	48 89 08             	mov    %rcx,(%rax)
   {}
   1050f:	5d                   	pop    %rbp
   10510:	c3                   	ret
   10511:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10518:	00 00 00 
   1051b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010520 <_ZN4ustl2OkIPN4ours3mem7PmFrameEEC2IJS4_EEEDpOT_>:
        {}
   10520:	55                   	push   %rbp
   10521:	48 89 e5             	mov    %rsp,%rbp
   10524:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   10528:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1052c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            : value_(ustl::forward<Args>(args)...)
   10530:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   10534:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   10538:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1053c:	48 8b 09             	mov    (%rcx),%rcx
   1053f:	48 89 08             	mov    %rcx,(%rax)
        {}
   10542:	5d                   	pop    %rbp
   10543:	c3                   	ret
   10544:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1054b:	00 00 00 
   1054e:	66 90                	xchg   %ax,%ax

0000000000010550 <_ZN4ustl6result14StorageTrivialIPN4ours3mem7PmFrameENS2_6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>:
        {}
   10550:	55                   	push   %rbp
   10551:	48 89 e5             	mov    %rsp,%rbp
   10554:	48 83 ec 20          	sub    $0x20,%rsp
   10558:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1055c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   10560:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : value_(static_cast<Args &&>(args)...), 
   10564:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10568:	48 8b 00             	mov    (%rax),%rax
   1056b:	48 89 07             	mov    %rax,(%rdi)
              status_(Status::HaveValue)
   1056e:	48 83 c7 08          	add    $0x8,%rdi
   10572:	be 01 00 00 00       	mov    $0x1,%esi
   10577:	e8 34 76 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   1057c:	48 83 c4 20          	add    $0x20,%rsp
   10580:	5d                   	pop    %rbp
   10581:	c3                   	ret
   10582:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10589:	00 00 00 
   1058c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000010590 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem7PmFrameENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17erase_and_disposeINSt3__16__bindIMNS4_6PmNodeEFvPS5_mEJPSD_RKNSB_12placeholders4__phILi1EEEiEEEEENS0_13list_iteratorIS8_Lb0EEENSO_IS8_Lb1EEET_>:
   {
   10590:	55                   	push   %rbp
   10591:	48 89 e5             	mov    %rsp,%rbp
   10594:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
   1059b:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
   105a2:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
   105a9:	48 89 f8             	mov    %rdi,%rax
   105ac:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
   105b3:	48 8d 45 10          	lea    0x10(%rbp),%rax
   105b7:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   105be:	48 89 bd 20 ff ff ff 	mov    %rdi,-0xe0(%rbp)
   105c5:	48 89 b5 18 ff ff ff 	mov    %rsi,-0xe8(%rbp)
   105cc:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
   105d3:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   105da:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
   105e1:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
   105e8:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   { return members_.nodeptr_; }
   105ef:	48 8b 00             	mov    (%rax),%rax
      node_ptr to_erase(i.pointed_node());
   105f2:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   105f9:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
   10600:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
      node_ptr p = node_traits::get_next(members_.nodeptr_);
   10607:	48 8b 08             	mov    (%rax),%rcx
   1060a:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
   10611:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
   10618:	48 8b 09             	mov    (%rcx),%rcx
   1061b:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
      members_.nodeptr_ = p;
   10622:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
   10629:	48 89 08             	mov    %rcx,(%rax)
      node_algorithms::unlink(to_erase);
   1062c:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
   10633:	e8 28 d6 ff ff       	call   dc60 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE6unlinkEPNS0_9list_nodeIS3_EE>
   10638:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
   1063f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   10646:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   1064d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   10654:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1065b:	48 8b 08             	mov    (%rax),%rcx
   1065e:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
   10662:	48 89 08             	mov    %rcx,(%rax)
         node_algorithms::init(to_erase);
   10665:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
   1066c:	e8 5f 34 ff ff       	call   3ad0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE4initEPNS0_9list_nodeIS3_EE>
   10671:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
   10678:	48 8b bd e0 fe ff ff 	mov    -0x120(%rbp),%rdi
   1067f:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
      disposer(this->priv_value_traits().to_value_ptr(to_erase));
   10686:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   1068d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   10694:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   1069b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1069f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   106a3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   106a7:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   106ae:	00 
   106af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   106b3:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   106b7:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   const Parent * const parent = 0;
   106bb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   106c2:	00 
   const char *const member = static_cast<const char*>(static_cast<const void*>(&(parent->*ptr_to_member)));
   106c3:	31 c9                	xor    %ecx,%ecx
   106c5:	48 03 4d e8          	add    -0x18(%rbp),%rcx
   106c9:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   return std::ptrdiff_t(member - static_cast<const char*>(static_cast<const void*>(parent)));
   106cd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
   106d1:	31 c9                	xor    %ecx,%ecx
   106d3:	48 29 d1             	sub    %rdx,%rcx
   106d6:	48 01 c8             	add    %rcx,%rax
   106d9:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   106dd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   106e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   106e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   106e9:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   106f0:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
   106f7:	e8 94 00 00 00       	call   10790 <_ZNSt3__16__bindIMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEJPS3_RKNS_12placeholders4__phILi1EEEiEEclB8nn210000IJS5_EEENS_13__bind_returnIS7_NS_5tupleIJS8_SB_iEEENSH_IJDpOT_EEEXsr22__is_valid_bind_returnIS7_SI_SM_EE5valueEE4typeESL_>
   106fc:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   10703:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
   1070a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   10711:	48 89 bd 70 ff ff ff 	mov    %rdi,-0x90(%rbp)
   10718:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
   1071f:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   10726:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   1072a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   { return members_.nodeptr_; }
   1072e:	48 8b 09             	mov    (%rcx),%rcx
   10731:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   10735:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   10739:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1073d:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   10741:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
   10745:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
   1074c:	00 00 00 00 
   10750:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   10754:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   10758:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
   1075c:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   10760:	48 8d 8d 78 ff ff ff 	lea    -0x88(%rbp),%rcx
   10767:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
   1076b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   1076f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   10773:	48 8b 12             	mov    (%rdx),%rdx
   10776:	48 89 11             	mov    %rdx,(%rcx)
      return i.unconst();
   10779:	48 81 c4 30 01 00 00 	add    $0x130,%rsp
   10780:	5d                   	pop    %rbp
   10781:	c3                   	ret
   10782:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10789:	00 00 00 
   1078c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000010790 <_ZNSt3__16__bindIMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmEJPS3_RKNS_12placeholders4__phILi1EEEiEEclB8nn210000IJS5_EEENS_13__bind_returnIS7_NS_5tupleIJS8_SB_iEEENSH_IJDpOT_EEEXsr22__is_valid_bind_returnIS7_SI_SM_EE5valueEE4typeESL_>:
  operator()(_Args&&... __args) {
   10790:	55                   	push   %rbp
   10791:	48 89 e5             	mov    %rsp,%rbp
   10794:	48 83 ec 30          	sub    $0x30,%rsp
   10798:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1079c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   107a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107a4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    return std::__apply_functor(__f_, __bound_args_, __indices(), tuple<_Args&&...>(std::forward<_Args>(__args)...));
   107a8:	48 83 c0 10          	add    $0x10,%rax
   107ac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   107b0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   107b4:	e8 a7 00 00 00       	call   10860 <_ZNSt3__17forwardB8nn210000IPN4ours3mem7PmFrameEEEOT_Ru20__remove_reference_tIS5_E>
   107b9:	48 89 c6             	mov    %rax,%rsi
   107bc:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   107c0:	e8 ab 00 00 00       	call   10870 <_ZNSt3__15tupleIJOPN4ours3mem7PmFrameEEEC2B8nn210000IJS4_ETnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXeqsZT_sZT_EEENS6_17_EnableUTypesCtorIJDpT_EEEEE5valueEiE4typeELi0EEEDpOSC_>
   107c5:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   107c9:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   107cd:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   107d1:	e8 0a 00 00 00       	call   107e0 <_ZNSt3__115__apply_functorB8nn210000IMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmENS_5tupleIJPS3_NS_12placeholders4__phILi1EEEiEEEJLm0ELm1ELm2EENS8_IJOS5_EEEEENS_13__bind_returnIT_T0_T2_Xsr22__is_valid_bind_returnISH_SI_SJ_EE5valueEE4typeERSH_RSI_NS_15__tuple_indicesIJXspT1_EEEEOSJ_>
   107d6:	48 83 c4 30          	add    $0x30,%rsp
   107da:	5d                   	pop    %rbp
   107db:	c3                   	ret
   107dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000107e0 <_ZNSt3__115__apply_functorB8nn210000IMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmENS_5tupleIJPS3_NS_12placeholders4__phILi1EEEiEEEJLm0ELm1ELm2EENS8_IJOS5_EEEEENS_13__bind_returnIT_T0_T2_Xsr22__is_valid_bind_returnISH_SI_SJ_EE5valueEE4typeERSH_RSI_NS_15__tuple_indicesIJXspT1_EEEEOSJ_>:
__apply_functor(_Fp& __f, _BoundArgs& __bound_args, __tuple_indices<_Indx...>, _Args&& __args) {
   107e0:	55                   	push   %rbp
   107e1:	48 89 e5             	mov    %rsp,%rbp
   107e4:	48 83 ec 40          	sub    $0x40,%rsp
   107e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   107ec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   107f0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  return std::__invoke(__f, std::__mu(std::get<_Indx>(__bound_args), __args)...);
   107f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   107f8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   107fc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10800:	e8 4b 01 00 00       	call   10950 <_ZNSt3__13getB8nn210000ILm0EJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSC_>
   10805:	48 89 c7             	mov    %rax,%rdi
   10808:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1080c:	e8 1f 01 00 00       	call   10930 <_ZNSt3__14__muB8nn210000IPN4ours3mem6PmNodeENS_5tupleIJOPNS2_7PmFrameEEEETnNS_9enable_ifIXaaaantsr18is_bind_expressionIT_EE5valueeqsr14is_placeholderISB_EE5valueLi0Entsr22__is_reference_wrapperISB_EE5valueEiE4typeELi0EEERSB_SE_RT0_>
   10811:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   10815:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10819:	e8 82 01 00 00       	call   109a0 <_ZNSt3__13getB8nn210000ILm1EJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSC_>
   1081e:	48 89 c7             	mov    %rax,%rdi
   10821:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   10825:	e8 46 01 00 00       	call   10970 <_ZNSt3__14__muB8nn210000INS_12placeholders4__phILi1EEENS_5tupleIJOPN4ours3mem7PmFrameEEEETnNS_9enable_ifIXltLi0Esr14is_placeholderIT_EE5valueEiE4typeELi0EEENS_12__mu_return2IXltLi0Esr14is_placeholderISC_EE5valueESC_T0_E4typeERSC_RSG_>
   1082a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1082e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10832:	e8 a9 01 00 00       	call   109e0 <_ZNSt3__13getB8nn210000ILm2EJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSC_>
   10837:	48 89 c7             	mov    %rax,%rdi
   1083a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1083e:	e8 7d 01 00 00       	call   109c0 <_ZNSt3__14__muB8nn210000IiNS_5tupleIJOPN4ours3mem7PmFrameEEEETnNS_9enable_ifIXaaaantsr18is_bind_expressionIT_EE5valueeqsr14is_placeholderIS9_EE5valueLi0Entsr22__is_reference_wrapperIS9_EE5valueEiE4typeELi0EEERS9_SC_RT0_>
   10843:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   10847:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1084b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1084f:	48 89 c1             	mov    %rax,%rcx
   10852:	e8 59 00 00 00       	call   108b0 <_ZNSt3__18__invokeB8nn210000IRMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmERPS3_JS5_RiEvEEDTcldsdeclsr3stdE7declvalIT0_EEclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT1_EEEEOSD_OSC_DpOSE_>
   10857:	48 83 c4 40          	add    $0x40,%rsp
   1085b:	5d                   	pop    %rbp
   1085c:	c3                   	ret
   1085d:	0f 1f 00             	nopl   (%rax)

0000000000010860 <_ZNSt3__17forwardB8nn210000IPN4ours3mem7PmFrameEEEOT_Ru20__remove_reference_tIS5_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   10860:	55                   	push   %rbp
   10861:	48 89 e5             	mov    %rsp,%rbp
   10864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   10868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1086c:	5d                   	pop    %rbp
   1086d:	c3                   	ret
   1086e:	66 90                	xchg   %ax,%ax

0000000000010870 <_ZNSt3__15tupleIJOPN4ours3mem7PmFrameEEEC2B8nn210000IJS4_ETnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXeqsZT_sZT_EEENS6_17_EnableUTypesCtorIJDpT_EEEEE5valueEiE4typeELi0EEEDpOSC_>:
                std::forward<_Up>(__u)...) {}
   10870:	55                   	push   %rbp
   10871:	48 89 e5             	mov    %rsp,%rbp
   10874:	48 83 ec 20          	sub    $0x20,%rsp
   10878:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1087c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10880:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10884:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   10888:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1088c:	e8 cf ff ff ff       	call   10860 <_ZNSt3__17forwardB8nn210000IPN4ours3mem7PmFrameEEEOT_Ru20__remove_reference_tIS5_E>
   10891:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   10895:	48 89 c6             	mov    %rax,%rsi
      : __base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),
   10898:	e8 e3 01 00 00       	call   10a80 <_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJOPN4ours3mem7PmFrameEEEC2B8nn210000IJLm0EEJS7_ETpTnmJEJEJS6_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_>
                std::forward<_Up>(__u)...) {}
   1089d:	48 83 c4 20          	add    $0x20,%rsp
   108a1:	5d                   	pop    %rbp
   108a2:	c3                   	ret
   108a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   108aa:	00 00 00 
   108ad:	0f 1f 00             	nopl   (%rax)

00000000000108b0 <_ZNSt3__18__invokeB8nn210000IRMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmERPS3_JS5_RiEvEEDTcldsdeclsr3stdE7declvalIT0_EEclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT1_EEEEOSD_OSC_DpOSE_>:
               { return ((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...); }
   108b0:	55                   	push   %rbp
   108b1:	48 89 e5             	mov    %rsp,%rbp
   108b4:	48 83 ec 40          	sub    $0x40,%rsp
   108b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   108bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   108c0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   108c4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   108c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   108cc:	48 8b 08             	mov    (%rax),%rcx
   108cf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   108d3:	48 8b 02             	mov    (%rdx),%rax
   108d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   108da:	48 8b 52 08          	mov    0x8(%rdx),%rdx
   108de:	48 01 d1             	add    %rdx,%rcx
   108e1:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   108e5:	48 83 e0 01          	and    $0x1,%rax
   108e9:	48 83 f8 00          	cmp    $0x0,%rax
   108ed:	74 19                	je     10908 <_ZNSt3__18__invokeB8nn210000IRMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmERPS3_JS5_RiEvEEDTcldsdeclsr3stdE7declvalIT0_EEclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT1_EEEEOSD_OSC_DpOSE_+0x58>
   108ef:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   108f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   108f7:	48 8b 00             	mov    (%rax),%rax
   108fa:	48 83 e9 01          	sub    $0x1,%rcx
   108fe:	48 8b 04 08          	mov    (%rax,%rcx,1),%rax
   10902:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   10906:	eb 08                	jmp    10910 <_ZNSt3__18__invokeB8nn210000IRMN4ours3mem6PmNodeEFvPNS2_7PmFrameEmERPS3_JS5_RiEvEEDTcldsdeclsr3stdE7declvalIT0_EEclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT1_EEEEOSD_OSC_DpOSE_+0x60>
   10908:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1090c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   10910:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   10914:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   10918:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1091c:	48 8b 31             	mov    (%rcx),%rsi
   1091f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   10923:	48 63 11             	movslq (%rcx),%rdx
   10926:	ff d0                	call   *%rax
   10928:	48 83 c4 40          	add    $0x40,%rsp
   1092c:	5d                   	pop    %rbp
   1092d:	c3                   	ret
   1092e:	66 90                	xchg   %ax,%ax

0000000000010930 <_ZNSt3__14__muB8nn210000IPN4ours3mem6PmNodeENS_5tupleIJOPNS2_7PmFrameEEEETnNS_9enable_ifIXaaaantsr18is_bind_expressionIT_EE5valueeqsr14is_placeholderISB_EE5valueLi0Entsr22__is_reference_wrapperISB_EE5valueEiE4typeELi0EEERSB_SE_RT0_>:
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _Ti& __mu(_Ti& __ti, _Uj&) {
   10930:	55                   	push   %rbp
   10931:	48 89 e5             	mov    %rsp,%rbp
   10934:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10938:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return __ti;
   1093c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10940:	5d                   	pop    %rbp
   10941:	c3                   	ret
   10942:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10949:	00 00 00 
   1094c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000010950 <_ZNSt3__13getB8nn210000ILm0EJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSC_>:

// get

template <size_t _Ip, class... _Tp>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(tuple<_Tp...>& __t) _NOEXCEPT {
   10950:	55                   	push   %rbp
   10951:	48 89 e5             	mov    %rsp,%rbp
   10954:	48 83 ec 10          	sub    $0x10,%rsp
   10958:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  using type _LIBCPP_NODEBUG = typename tuple_element<_Ip, tuple<_Tp...> >::type;
  return static_cast<__tuple_leaf<_Ip, type>&>(__t.__base_).get();
   1095c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   10960:	e8 9b 00 00 00       	call   10a00 <_ZNSt3__112__tuple_leafILm0EPN4ours3mem6PmNodeELb0EE3getB8nn210000Ev>
   10965:	48 83 c4 10          	add    $0x10,%rsp
   10969:	5d                   	pop    %rbp
   1096a:	c3                   	ret
   1096b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010970 <_ZNSt3__14__muB8nn210000INS_12placeholders4__phILi1EEENS_5tupleIJOPN4ours3mem7PmFrameEEEETnNS_9enable_ifIXltLi0Esr14is_placeholderIT_EE5valueEiE4typeELi0EEENS_12__mu_return2IXltLi0Esr14is_placeholderISC_EE5valueESC_T0_E4typeERSC_RSG_>:
__mu(_Ti&, _Uj& __uj) {
   10970:	55                   	push   %rbp
   10971:	48 89 e5             	mov    %rsp,%rbp
   10974:	48 83 ec 20          	sub    $0x20,%rsp
   10978:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1097c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  const size_t __indx = is_placeholder<_Ti>::value - 1;
   10980:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   10987:	00 
  return std::forward<typename tuple_element<__indx, _Uj>::type>(std::get<__indx>(__uj));
   10988:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1098c:	e8 8f 00 00 00       	call   10a20 <_ZNSt3__13getB8nn210000ILm0EJOPN4ours3mem7PmFrameEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSA_>
   10991:	48 89 c7             	mov    %rax,%rdi
   10994:	e8 77 00 00 00       	call   10a10 <_ZNSt3__17forwardB8nn210000IOPN4ours3mem7PmFrameEEEOT_Ru20__remove_reference_tIS6_E>
   10999:	48 83 c4 20          	add    $0x20,%rsp
   1099d:	5d                   	pop    %rbp
   1099e:	c3                   	ret
   1099f:	90                   	nop

00000000000109a0 <_ZNSt3__13getB8nn210000ILm1EJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSC_>:
get(tuple<_Tp...>& __t) _NOEXCEPT {
   109a0:	55                   	push   %rbp
   109a1:	48 89 e5             	mov    %rsp,%rbp
   109a4:	48 83 ec 10          	sub    $0x10,%rsp
   109a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<__tuple_leaf<_Ip, type>&>(__t.__base_).get();
   109ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   109b0:	e8 ab 00 00 00       	call   10a60 <_ZNSt3__112__tuple_leafILm1ENS_12placeholders4__phILi1EEELb1EE3getB8nn210000Ev>
   109b5:	48 83 c4 10          	add    $0x10,%rsp
   109b9:	5d                   	pop    %rbp
   109ba:	c3                   	ret
   109bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000109c0 <_ZNSt3__14__muB8nn210000IiNS_5tupleIJOPN4ours3mem7PmFrameEEEETnNS_9enable_ifIXaaaantsr18is_bind_expressionIT_EE5valueeqsr14is_placeholderIS9_EE5valueLi0Entsr22__is_reference_wrapperIS9_EE5valueEiE4typeELi0EEERS9_SC_RT0_>:
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _Ti& __mu(_Ti& __ti, _Uj&) {
   109c0:	55                   	push   %rbp
   109c1:	48 89 e5             	mov    %rsp,%rbp
   109c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   109c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return __ti;
   109cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109d0:	5d                   	pop    %rbp
   109d1:	c3                   	ret
   109d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   109d9:	00 00 00 
   109dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000109e0 <_ZNSt3__13getB8nn210000ILm2EJPN4ours3mem6PmNodeENS_12placeholders4__phILi1EEEiEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSC_>:
get(tuple<_Tp...>& __t) _NOEXCEPT {
   109e0:	55                   	push   %rbp
   109e1:	48 89 e5             	mov    %rsp,%rbp
   109e4:	48 83 ec 10          	sub    $0x10,%rsp
   109e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<__tuple_leaf<_Ip, type>&>(__t.__base_).get();
   109ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   109f0:	48 83 c7 08          	add    $0x8,%rdi
   109f4:	e8 77 00 00 00       	call   10a70 <_ZNSt3__112__tuple_leafILm2EiLb0EE3getB8nn210000Ev>
   109f9:	48 83 c4 10          	add    $0x10,%rsp
   109fd:	5d                   	pop    %rbp
   109fe:	c3                   	ret
   109ff:	90                   	nop

0000000000010a00 <_ZNSt3__112__tuple_leafILm0EPN4ours3mem6PmNodeELb0EE3getB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 _Hp& get() _NOEXCEPT { return __value_; }
   10a00:	55                   	push   %rbp
   10a01:	48 89 e5             	mov    %rsp,%rbp
   10a04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10a08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a0c:	5d                   	pop    %rbp
   10a0d:	c3                   	ret
   10a0e:	66 90                	xchg   %ax,%ax

0000000000010a10 <_ZNSt3__17forwardB8nn210000IOPN4ours3mem7PmFrameEEEOT_Ru20__remove_reference_tIS6_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   10a10:	55                   	push   %rbp
   10a11:	48 89 e5             	mov    %rsp,%rbp
   10a14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   10a18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a1c:	5d                   	pop    %rbp
   10a1d:	c3                   	ret
   10a1e:	66 90                	xchg   %ax,%ax

0000000000010a20 <_ZNSt3__13getB8nn210000ILm0EJOPN4ours3mem7PmFrameEEEERNS_13tuple_elementIXT_ENS_5tupleIJDpT0_EEEE4typeERSA_>:
get(tuple<_Tp...>& __t) _NOEXCEPT {
   10a20:	55                   	push   %rbp
   10a21:	48 89 e5             	mov    %rsp,%rbp
   10a24:	48 83 ec 10          	sub    $0x10,%rsp
   10a28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<__tuple_leaf<_Ip, type>&>(__t.__base_).get();
   10a2c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   10a30:	e8 0b 00 00 00       	call   10a40 <_ZNSt3__112__tuple_leafILm0EOPN4ours3mem7PmFrameELb0EE3getB8nn210000Ev>
   10a35:	48 83 c4 10          	add    $0x10,%rsp
   10a39:	5d                   	pop    %rbp
   10a3a:	c3                   	ret
   10a3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010a40 <_ZNSt3__112__tuple_leafILm0EOPN4ours3mem7PmFrameELb0EE3getB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 _Hp& get() _NOEXCEPT { return __value_; }
   10a40:	55                   	push   %rbp
   10a41:	48 89 e5             	mov    %rsp,%rbp
   10a44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10a48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a4c:	48 8b 00             	mov    (%rax),%rax
   10a4f:	5d                   	pop    %rbp
   10a50:	c3                   	ret
   10a51:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10a58:	00 00 00 
   10a5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010a60 <_ZNSt3__112__tuple_leafILm1ENS_12placeholders4__phILi1EEELb1EE3getB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 _Hp& get() _NOEXCEPT { return static_cast<_Hp&>(*this); }
   10a60:	55                   	push   %rbp
   10a61:	48 89 e5             	mov    %rsp,%rbp
   10a64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10a68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a6c:	5d                   	pop    %rbp
   10a6d:	c3                   	ret
   10a6e:	66 90                	xchg   %ax,%ax

0000000000010a70 <_ZNSt3__112__tuple_leafILm2EiLb0EE3getB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 _Hp& get() _NOEXCEPT { return __value_; }
   10a70:	55                   	push   %rbp
   10a71:	48 89 e5             	mov    %rsp,%rbp
   10a74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10a78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a7c:	5d                   	pop    %rbp
   10a7d:	c3                   	ret
   10a7e:	66 90                	xchg   %ax,%ax

0000000000010a80 <_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJOPN4ours3mem7PmFrameEEEC2B8nn210000IJLm0EEJS7_ETpTnmJEJEJS6_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_>:
      : __tuple_leaf<_Uf, _Tf>(std::forward<_Up>(__u))..., __tuple_leaf<_Ul, _Tl>()... {}
   10a80:	55                   	push   %rbp
   10a81:	48 89 e5             	mov    %rsp,%rbp
   10a84:	48 83 ec 20          	sub    $0x20,%rsp
   10a88:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   10a8c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   10a90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10a94:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   10a98:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10a9c:	e8 bf fd ff ff       	call   10860 <_ZNSt3__17forwardB8nn210000IPN4ours3mem7PmFrameEEEOT_Ru20__remove_reference_tIS5_E>
   10aa1:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   10aa5:	48 89 c6             	mov    %rax,%rsi
   10aa8:	e8 13 00 00 00       	call   10ac0 <_ZNSt3__112__tuple_leafILm0EOPN4ours3mem7PmFrameELb0EEC2B8nn210000IS4_TnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXntu9__is_sameu14__remove_cvrefIT_ES6_EEEENS_16is_constructibleIS5_JSA_EEEEE5valueEiE4typeELi0EEEOSA_>
   10aad:	48 83 c4 20          	add    $0x20,%rsp
   10ab1:	5d                   	pop    %rbp
   10ab2:	c3                   	ret
   10ab3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10aba:	00 00 00 
   10abd:	0f 1f 00             	nopl   (%rax)

0000000000010ac0 <_ZNSt3__112__tuple_leafILm0EOPN4ours3mem7PmFrameELb0EEC2B8nn210000IS4_TnNS_9enable_ifIXsr4_AndINS_17integral_constantIbXntu9__is_sameu14__remove_cvrefIT_ES6_EEEENS_16is_constructibleIS5_JSA_EEEEE5valueEiE4typeELi0EEEOSA_>:
      : __value_(std::forward<_Tp>(__t)) {
   10ac0:	55                   	push   %rbp
   10ac1:	48 89 e5             	mov    %rsp,%rbp
   10ac4:	48 83 ec 20          	sub    $0x20,%rsp
   10ac8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10acc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10ad0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ad4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10ad8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10adc:	e8 7f fd ff ff       	call   10860 <_ZNSt3__17forwardB8nn210000IPN4ours3mem7PmFrameEEEOT_Ru20__remove_reference_tIS5_E>
   10ae1:	48 89 c1             	mov    %rax,%rcx
   10ae4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10ae8:	48 89 08             	mov    %rcx,(%rax)
  }
   10aeb:	48 83 c4 20          	add    $0x20,%rsp
   10aef:	5d                   	pop    %rbp
   10af0:	c3                   	ret
   10af1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10af8:	00 00 00 
   10afb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010b00 <_ZN4ours3mem6VmAreaC1EN4ustl2RcINS0_8VmAspaceENS2_12NullDisposerENS2_3mem9AllocatorIS4_EEmEEmmN4arch6paging8MmuFlagsENS0_8VmaFlagsEPKc>:
          aspace_(aspace),
          rights_(rights),
          handler_(),
          set_hook_(),
          list_hook_()
    {}
   10b00:	55                   	push   %rbp
   10b01:	48 89 e5             	mov    %rsp,%rbp
   10b04:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   10b0b:	48 89 b5 68 ff ff ff 	mov    %rsi,-0x98(%rbp)
   10b12:	48 8b 45 10          	mov    0x10(%rbp),%rax
   10b16:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   10b1a:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   10b1e:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   10b22:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
   10b26:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
   10b2a:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
   10b2e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10b32:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   10b39:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   10b3d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   10b41:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10b45:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
   10b4a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   10b4e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10b52:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
        {}
   10b59:	48 83 c7 08          	add    $0x8,%rdi
   10b5d:	48 8d 75 f7          	lea    -0x9(%rbp),%rsi
            : Base1(disposer),
   10b61:	e8 da 09 00 00       	call   11540 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EEC2ERKS1_>
   10b66:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
        {}
   10b6d:	48 83 c7 09          	add    $0x9,%rdi
   10b71:	48 8d 75 f6          	lea    -0xa(%rbp),%rsi
              Base2(allocator),
   10b75:	e8 d6 09 00 00       	call   11550 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem6VmAreaEEELb0EEC2ERKS6_>
   10b7a:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
        {}
   10b81:	48 8d 05 c0 08 02 00 	lea    0x208c0(%rip),%rax        # 31448 <_ZTVN4ustl10RefCounterIN4ours3mem6VmAreaENS_12NullDisposerENS_3mem9AllocatorIS3_EEmEE+0x10>
   10b88:	48 89 07             	mov    %rax,(%rdi)
              weak_counter_(count),
   10b8b:	48 83 c7 10          	add    $0x10,%rdi
   10b8f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   10b93:	e8 c8 09 00 00       	call   11560 <_ZNSt3__16atomicImEC2B8nn210000Em>
   10b98:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
              strong_counter_(count)
   10b9f:	48 83 c7 18          	add    $0x18,%rdi
   10ba3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   10ba7:	e8 b4 09 00 00       	call   11560 <_ZNSt3__16atomicImEC2B8nn210000Em>
   10bac:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   10bb3:	48 8d 05 6e 08 02 00 	lea    0x2086e(%rip),%rax        # 31428 <_ZTVN4ours3mem6VmAreaE+0x10>
   10bba:	48 89 07             	mov    %rax,(%rdi)
    VmArea::VmArea(ustl::Rc<VmAspace> aspace, 
   10bbd:	48 83 c7 20          	add    $0x20,%rdi
   10bc1:	e8 aa 02 00 00       	call   10e70 <_ZN4gktl6CanaryILj1098016097EEC2Ev>
   10bc6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   10bcd:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
          name_(name),
   10bd4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10bd8:	48 89 48 28          	mov    %rcx,0x28(%rax)
          base_(base),
   10bdc:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   10be0:	48 89 48 30          	mov    %rcx,0x30(%rax)
          size_(size),
   10be4:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   10be8:	48 89 48 38          	mov    %rcx,0x38(%rax)
          flags_((flags & VMAF_INIT_ALLOWED)),
   10bec:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   10bf0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   10bf4:	48 c7 45 b8 00 00 0d 	movq   $0xd0000,-0x48(%rbp)
   10bfb:	00 
        static_cast<Underlying>(lhs) &
   10bfc:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   10c00:	48 23 4d b8          	and    -0x48(%rbp),%rcx
   10c04:	48 89 48 40          	mov    %rcx,0x40(%rax)
          rights_(rights),
   10c08:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   10c0c:	48 89 48 48          	mov    %rcx,0x48(%rax)
          handler_(),
   10c10:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
   10c17:	00 
          aspace_(aspace),
   10c18:	48 83 c0 58          	add    $0x58,%rax
   10c1c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   10c20:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   10c24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   10c28:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
            : pointer_(other.pointer_),
   10c2f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   10c33:	48 8b 09             	mov    (%rcx),%rcx
   10c36:	48 89 08             	mov    %rcx,(%rax)
              counter_(other.counter_)
   10c39:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   10c3d:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   10c41:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   10c45:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   10c4a:	74 21                	je     10c6d <_ZN4ours3mem6VmAreaC1EN4ustl2RcINS0_8VmAspaceENS2_12NullDisposerENS2_3mem9AllocatorIS4_EEmEEmmN4arch6paging8MmuFlagsENS0_8VmaFlagsEPKc+0x16d>
   10c4c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
                counter_->inc_strong_ref();
   10c53:	48 8b 40 08          	mov    0x8(%rax),%rax
   10c57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   10c5b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  strong_counter_  += 1;  }
   10c5f:	48 83 c7 18          	add    $0x18,%rdi
   10c63:	be 01 00 00 00       	mov    $0x1,%esi
   10c68:	e8 83 b2 ff ff       	call   bef0 <_ZNSt3__113__atomic_baseImLb1EEpLB8nn210000Em>
   10c6d:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    VmArea::VmArea(ustl::Rc<VmAspace> aspace, 
   10c74:	48 89 f8             	mov    %rdi,%rax
   10c77:	48 83 c0 68          	add    $0x68,%rax
   10c7b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   10c7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
            : pointer_(nullptr),
   10c83:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
              counter_(nullptr)
   10c8a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   10c91:	00 
          set_hook_(),
   10c92:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
   10c99:	31 c0                	xor    %eax,%eax
   10c9b:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
   10ca2:	00 
   10ca3:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
   10caa:	00 
   10cab:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
   10cb2:	00 
   10cb3:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
   10cba:	e8 d1 01 00 00       	call   10e90 <_ZN5boost9intrusive15set_member_hookIJEEC2Ev>
   10cbf:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
          list_hook_()
   10cc6:	48 81 c7 a0 00 00 00 	add    $0xa0,%rdi
   10ccd:	31 c0                	xor    %eax,%eax
   10ccf:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
   10cd6:	00 
   10cd7:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
   10cde:	e8 ed 01 00 00       	call   10ed0 <_ZN5boost9intrusive16list_member_hookIJEEC2Ev>
    {}
   10ce3:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   10cea:	5d                   	pop    %rbp
   10ceb:	c3                   	ret
   10cec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000010cf0 <_ZN4ours3mem6VmArea8activateEv>:

    auto VmArea::activate() -> void
    {
   10cf0:	55                   	push   %rbp
   10cf1:	48 89 e5             	mov    %rsp,%rbp
   10cf4:	48 83 ec 30          	sub    $0x30,%rsp
   10cf8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   10cfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10d00:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        this->flags_ |= VmaFlags::Active;
   10d04:	48 83 c0 40          	add    $0x40,%rax
   10d08:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10d0c:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
   10d13:	00 
    lhs = lhs | rhs;
   10d14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10d18:	48 8b 08             	mov    (%rax),%rcx
   10d1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   10d1f:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   10d23:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        static_cast<Underlying>(lhs) |
   10d27:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   10d2b:	48 0b 4d f0          	or     -0x10(%rbp),%rcx
    lhs = lhs | rhs;
   10d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10d33:	48 89 08             	mov    %rcx,(%rax)
        this->handler_ = std::addressof(G_NORMAL_VMA_HANDLER);
   10d36:	48 8d 3d 83 35 02 00 	lea    0x23583(%rip),%rdi        # 342c0 <_ZN4ours3mem20G_NORMAL_VMA_HANDLERE>
   10d3d:	e8 ce 01 00 00       	call   10f10 <_ZNSt3__19addressofB8nn210000IN4ours3mem13VmAreaHandlerEEEPT_RS4_>
   10d42:	48 89 c1             	mov    %rax,%rcx
   10d45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   10d49:	48 89 48 50          	mov    %rcx,0x50(%rax)
    }
   10d4d:	48 83 c4 30          	add    $0x30,%rsp
   10d51:	5d                   	pop    %rbp
   10d52:	c3                   	ret
   10d53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10d5a:	00 00 00 
   10d5d:	0f 1f 00             	nopl   (%rax)

0000000000010d60 <__cxx_global_var_init>:
   10d60:	55                   	push   %rbp
   10d61:	48 89 e5             	mov    %rsp,%rbp
    VmAreaHandler G_NORMAL_VMA_HANDLER;
   10d64:	48 8d 3d 55 35 02 00 	lea    0x23555(%rip),%rdi        # 342c0 <_ZN4ours3mem20G_NORMAL_VMA_HANDLERE>
   10d6b:	e8 80 00 00 00       	call   10df0 <_ZN4ours3mem13VmAreaHandlerC2Ev>
   10d70:	48 8d 3d 09 00 00 00 	lea    0x9(%rip),%rdi        # 10d80 <__dtor__ZN4ours3mem20G_NORMAL_VMA_HANDLERE>
   10d77:	e8 94 83 00 00       	call   19110 <atexit>
   10d7c:	5d                   	pop    %rbp
   10d7d:	c3                   	ret
   10d7e:	66 90                	xchg   %ax,%ax

0000000000010d80 <__dtor__ZN4ours3mem20G_NORMAL_VMA_HANDLERE>:
   10d80:	55                   	push   %rbp
   10d81:	48 89 e5             	mov    %rsp,%rbp
   10d84:	48 8d 3d 35 35 02 00 	lea    0x23535(%rip),%rdi        # 342c0 <_ZN4ours3mem20G_NORMAL_VMA_HANDLERE>
   10d8b:	e8 a0 00 00 00       	call   10e30 <_ZN4ours3mem13VmAreaHandlerD2Ev>
   10d90:	5d                   	pop    %rbp
   10d91:	c3                   	ret
   10d92:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   10d99:	1f 84 00 00 00 00 00 

0000000000010da0 <__cxx_global_var_init.1>:
   10da0:	55                   	push   %rbp
   10da1:	48 89 e5             	mov    %rsp,%rbp
    VmAreaHandler G_MAPPING_VMA_HANDLER;
   10da4:	48 8d 3d a5 35 02 00 	lea    0x235a5(%rip),%rdi        # 34350 <_ZN4ours3mem21G_MAPPING_VMA_HANDLERE>
   10dab:	e8 40 00 00 00       	call   10df0 <_ZN4ours3mem13VmAreaHandlerC2Ev>
   10db0:	48 8d 3d 09 00 00 00 	lea    0x9(%rip),%rdi        # 10dc0 <__dtor__ZN4ours3mem21G_MAPPING_VMA_HANDLERE>
   10db7:	e8 54 83 00 00       	call   19110 <atexit>
   10dbc:	5d                   	pop    %rbp
   10dbd:	c3                   	ret
   10dbe:	66 90                	xchg   %ax,%ax

0000000000010dc0 <__dtor__ZN4ours3mem21G_MAPPING_VMA_HANDLERE>:
   10dc0:	55                   	push   %rbp
   10dc1:	48 89 e5             	mov    %rsp,%rbp
   10dc4:	48 8d 3d 85 35 02 00 	lea    0x23585(%rip),%rdi        # 34350 <_ZN4ours3mem21G_MAPPING_VMA_HANDLERE>
   10dcb:	e8 60 00 00 00       	call   10e30 <_ZN4ours3mem13VmAreaHandlerD2Ev>
   10dd0:	5d                   	pop    %rbp
   10dd1:	c3                   	ret
   10dd2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   10dd9:	1f 84 00 00 00 00 00 

0000000000010de0 <_GLOBAL__sub_I_vm_area.cpp>:
   10de0:	55                   	push   %rbp
   10de1:	48 89 e5             	mov    %rsp,%rbp
   10de4:	e8 77 ff ff ff       	call   10d60 <__cxx_global_var_init>
   10de9:	e8 b2 ff ff ff       	call   10da0 <__cxx_global_var_init.1>
   10dee:	5d                   	pop    %rbp
   10def:	c3                   	ret

0000000000010df0 <_ZN4ours3mem13VmAreaHandlerC2Ev>:
    };
    USTL_ENABLE_ENUM_BITMASK(VmaFlags);

    /// Specific handler for various regions, to avoid the use of virtual function, 
    /// which would lead many meaningless derived classes.
    struct VmAreaHandler
   10df0:	55                   	push   %rbp
   10df1:	48 89 e5             	mov    %rsp,%rbp
   10df4:	48 83 ec 10          	sub    $0x10,%rsp
   10df8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10dfc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   10e00:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   10e04:	e8 77 05 00 00       	call   11380 <_ZNSt3__18functionIFvvEEC2B8nn210000Ev>
   10e09:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10e0d:	48 83 c7 30          	add    $0x30,%rdi
   10e11:	e8 6a 05 00 00       	call   11380 <_ZNSt3__18functionIFvvEEC2B8nn210000Ev>
   10e16:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10e1a:	48 83 c7 60          	add    $0x60,%rdi
   10e1e:	e8 7d 05 00 00       	call   113a0 <_ZNSt3__18functionIFvPN4ours3mem7VmFaultEEEC2B8nn210000Ev>
   10e23:	48 83 c4 10          	add    $0x10,%rsp
   10e27:	5d                   	pop    %rbp
   10e28:	c3                   	ret
   10e29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000010e30 <_ZN4ours3mem13VmAreaHandlerD2Ev>:
   10e30:	55                   	push   %rbp
   10e31:	48 89 e5             	mov    %rsp,%rbp
   10e34:	48 83 ec 10          	sub    $0x10,%rsp
   10e38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10e3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   10e40:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   10e44:	48 83 c7 60          	add    $0x60,%rdi
   10e48:	e8 b3 05 00 00       	call   11400 <_ZNSt3__18functionIFvPN4ours3mem7VmFaultEEED2Ev>
   10e4d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10e51:	48 83 c7 30          	add    $0x30,%rdi
   10e55:	e8 c6 05 00 00       	call   11420 <_ZNSt3__18functionIFvvEED2Ev>
   10e5a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10e5e:	e8 bd 05 00 00       	call   11420 <_ZNSt3__18functionIFvvEED2Ev>
   10e63:	48 83 c4 10          	add    $0x10,%rsp
   10e67:	5d                   	pop    %rbp
   10e68:	c3                   	ret
   10e69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000010e70 <_ZN4gktl6CanaryILj1098016097EEC2Ev>:
        {}
   10e70:	55                   	push   %rbp
   10e71:	48 89 e5             	mov    %rsp,%rbp
   10e74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10e78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            : magic_(Magic)
   10e7c:	c7 00 61 65 72 41    	movl   $0x41726561,(%rax)
        {}
   10e82:	5d                   	pop    %rbp
   10e83:	c3                   	ret
   10e84:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10e8b:	00 00 00 
   10e8e:	66 90                	xchg   %ax,%ax

0000000000010e90 <_ZN5boost9intrusive15set_member_hookIJEEC2Ev>:
#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED) || defined(BOOST_INTRUSIVE_VARIADIC_TEMPLATES)
template<class ...Options>
#else
template<class O1, class O2, class O3, class O4>
#endif
class set_member_hook
   10e90:	55                   	push   %rbp
   10e91:	48 89 e5             	mov    %rsp,%rbp
   10e94:	48 83 ec 30          	sub    $0x30,%rsp
   10e98:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   10e9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10ea0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   10ea4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   10ea8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10eb0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   10eb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10eb8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   10ebc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   /// @endcond

   BOOST_INTRUSIVE_FORCEINLINE generic_hook() BOOST_NOEXCEPT
   {
      if(hooktags::safemode_or_autounlink){
         node_algorithms::init(this->this_ptr());
   10ec0:	e8 1b 06 00 00       	call   114e0 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE4initEPNS0_11rbtree_nodeIS3_EE>
   10ec5:	48 83 c4 30          	add    $0x30,%rsp
   10ec9:	5d                   	pop    %rbp
   10eca:	c3                   	ret
   10ecb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010ed0 <_ZN5boost9intrusive16list_member_hookIJEEC2Ev>:
#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED) || defined(BOOST_INTRUSIVE_VARIADIC_TEMPLATES)
template<class ...Options>
#else
template<class O1, class O2, class O3>
#endif
class list_member_hook
   10ed0:	55                   	push   %rbp
   10ed1:	48 89 e5             	mov    %rsp,%rbp
   10ed4:	48 83 ec 30          	sub    $0x30,%rsp
   10ed8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   10edc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10ee0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   10ee4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   10ee8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10eec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10ef0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   10ef4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10ef8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   10efc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   10f00:	e8 cb 2b ff ff       	call   3ad0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE4initEPNS0_9list_nodeIS3_EE>
   10f05:	48 83 c4 30          	add    $0x30,%rsp
   10f09:	5d                   	pop    %rbp
   10f0a:	c3                   	ret
   10f0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010f10 <_ZNSt3__19addressofB8nn210000IN4ours3mem13VmAreaHandlerEEEPT_RS4_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
   10f10:	55                   	push   %rbp
   10f11:	48 89 e5             	mov    %rsp,%rbp
   10f14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
   10f18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f1c:	5d                   	pop    %rbp
   10f1d:	c3                   	ret
   10f1e:	66 90                	xchg   %ax,%ax

0000000000010f20 <_ZN4ours3mem6VmAreaD2Ev>:
        typedef ustl::function::Fn<auto (VmFault *) -> void>   PageFaultFn;
        mutable PageFaultFn  fault;
    };

    /// `VmArea` is a representation of a contiguous range of virtual memory space.
    class VmArea
   10f20:	55                   	push   %rbp
   10f21:	48 89 e5             	mov    %rsp,%rbp
   10f24:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
   10f2b:	48 89 bd e0 fe ff ff 	mov    %rdi,-0x120(%rbp)
   10f32:	48 8b bd e0 fe ff ff 	mov    -0x120(%rbp),%rdi
   10f39:	48 89 bd d0 fe ff ff 	mov    %rdi,-0x130(%rbp)
   10f40:	48 8d 05 e1 04 02 00 	lea    0x204e1(%rip),%rax        # 31428 <_ZTVN4ours3mem6VmAreaE+0x10>
   10f47:	48 89 07             	mov    %rax,(%rdi)
   10f4a:	48 81 c7 a0 00 00 00 	add    $0xa0,%rdi
   10f51:	e8 fa 06 00 00       	call   11650 <_ZN5boost9intrusive16list_member_hookIJEED2Ev>
   10f56:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
   10f5d:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
   10f64:	e8 07 07 00 00       	call   11670 <_ZN5boost9intrusive15set_member_hookIJEED2Ev>
   10f69:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
   10f70:	48 83 c0 68          	add    $0x68,%rax
   10f74:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   10f7b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   10f82:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
            if (counter_) {
   10f89:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   10f8e:	0f 84 d8 01 00 00    	je     1116c <_ZN4ours3mem6VmAreaD2Ev+0x24c>
   10f94:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
                if (counter_->strong_count() == 1) {
   10f9b:	48 8b 40 08          	mov    0x8(%rax),%rax
   10f9f:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   10fa6:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
        {  return strong_counter_;  }
   10fad:	48 83 c7 18          	add    $0x18,%rdi
   10fb1:	e8 3a 8e ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   10fb6:	48 83 f8 01          	cmp    $0x1,%rax
   10fba:	0f 85 83 01 00 00    	jne    11143 <_ZN4ours3mem6VmAreaD2Ev+0x223>
   10fc0:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
   10fc7:	48 8b 08             	mov    (%rax),%rcx
   10fca:	48 8b 40 08          	mov    0x8(%rax),%rax
   10fce:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
   10fd5:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
   10fdc:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
   10fe3:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   10fea:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   10ff1:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
            : pointer_(ptr),
   10ff8:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
   10fff:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   11002:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
   11009:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   1100d:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11012:	74 27                	je     1103b <_ZN4ours3mem6VmAreaD2Ev+0x11b>
   11014:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
                counter_->enable_weak();
   1101b:	48 8b 40 08          	mov    0x8(%rax),%rax
   1101f:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   11026:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
        {  weak_counter_  = 1;  }
   1102d:	48 83 c7 10          	add    $0x10,%rdi
   11031:	be 01 00 00 00       	mov    $0x1,%esi
   11036:	e8 95 8e ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   1103b:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
                    counter_->disposer()(pointer_);
   11042:	48 8b 40 08          	mov    0x8(%rax),%rax
   11046:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   1104d:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
        {  return this->Base1::as_ref();  }
   11054:	48 83 c7 08          	add    $0x8,%rdi
   11058:	e8 63 8f ff ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
   1105d:	48 89 c7             	mov    %rax,%rdi
   11060:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
   11067:	48 8b 30             	mov    (%rax),%rsi
   1106a:	31 c0                	xor    %eax,%eax
   1106c:	e8 6f 8d ff ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
   11071:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   11078:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1107f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   11086:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
            if (counter_) {
   1108d:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11092:	0f 84 a9 00 00 00    	je     11141 <_ZN4ours3mem6VmAreaD2Ev+0x221>
   11098:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
                if (counter_->weak_count() == 1) {
   1109f:	48 8b 40 08          	mov    0x8(%rax),%rax
   110a3:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   110aa:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
        {  return weak_counter_;  }
   110b1:	48 83 c7 10          	add    $0x10,%rdi
   110b5:	e8 36 8d ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   110ba:	48 83 f8 01          	cmp    $0x1,%rax
   110be:	75 5e                	jne    1111e <_ZN4ours3mem6VmAreaD2Ev+0x1fe>
   110c0:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
   110c7:	48 8b 40 08          	mov    0x8(%rax),%rax
   110cb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   110cf:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
        {  return this->Base2::as_ref();  }
   110d3:	48 83 c7 09          	add    $0x9,%rdi
   110d7:	e8 e4 05 00 00       	call   116c0 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmObjectEEELb0EE6as_refEv>
   110dc:	48 89 c1             	mov    %rax,%rcx
   110df:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
   110e6:	48 8b 00             	mov    (%rax),%rax
   110e9:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
   110f0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   110f7:	48 c7 85 68 ff ff ff 	movq   $0x1,-0x98(%rbp)
   110fe:	01 00 00 00 
   11102:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
   11109:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
   11110:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   11117:	e8 74 05 00 00       	call   11690 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmObjectEE10deallocateEPS4_m>
                } else {
   1111c:	eb 21                	jmp    1113f <_ZN4ours3mem6VmAreaD2Ev+0x21f>
   1111e:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
                    counter_->dec_weak_ref();
   11125:	48 8b 40 08          	mov    0x8(%rax),%rax
   11129:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   1112d:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
        {  weak_counter_ -= 1;  }
   11131:	48 83 c7 10          	add    $0x10,%rdi
   11135:	be 01 00 00 00       	mov    $0x1,%esi
   1113a:	e8 d1 8e ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   1113f:	eb 00                	jmp    11141 <_ZN4ours3mem6VmAreaD2Ev+0x221>
                } else {
   11141:	eb 27                	jmp    1116a <_ZN4ours3mem6VmAreaD2Ev+0x24a>
   11143:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
                    counter_->dec_strong_ref();
   1114a:	48 8b 40 08          	mov    0x8(%rax),%rax
   1114e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   11155:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
        {  strong_counter_  -= 1;  }
   1115c:	48 83 c7 18          	add    $0x18,%rdi
   11160:	be 01 00 00 00       	mov    $0x1,%esi
   11165:	e8 a6 8e ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   1116a:	eb 00                	jmp    1116c <_ZN4ours3mem6VmAreaD2Ev+0x24c>
   1116c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
   11173:	48 83 c0 58          	add    $0x58,%rax
   11177:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   1117e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   11185:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
            if (counter_) {
   1118c:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11191:	0f 84 90 01 00 00    	je     11327 <_ZN4ours3mem6VmAreaD2Ev+0x407>
   11197:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
                if (counter_->strong_count() == 1) {
   1119e:	48 8b 40 08          	mov    0x8(%rax),%rax
   111a2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   111a6:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
        {  return strong_counter_;  }
   111aa:	48 83 c7 18          	add    $0x18,%rdi
   111ae:	e8 3d 8c ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   111b3:	48 83 f8 01          	cmp    $0x1,%rax
   111b7:	0f 85 47 01 00 00    	jne    11304 <_ZN4ours3mem6VmAreaD2Ev+0x3e4>
   111bd:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
   111c4:	48 8b 08             	mov    (%rax),%rcx
   111c7:	48 8b 40 08          	mov    0x8(%rax),%rax
   111cb:	48 8d 95 08 ff ff ff 	lea    -0xf8(%rbp),%rdx
   111d2:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   111d6:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   111da:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   111de:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   111e2:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
            : pointer_(ptr),
   111e9:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   111ed:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   111f0:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   111f4:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   111f8:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   111fd:	74 21                	je     11220 <_ZN4ours3mem6VmAreaD2Ev+0x300>
   111ff:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
                counter_->enable_weak();
   11206:	48 8b 40 08          	mov    0x8(%rax),%rax
   1120a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1120e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
        {  weak_counter_  = 1;  }
   11212:	48 83 c7 10          	add    $0x10,%rdi
   11216:	be 01 00 00 00       	mov    $0x1,%esi
   1121b:	e8 b0 8c ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   11220:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
                    counter_->disposer()(pointer_);
   11227:	48 8b 40 08          	mov    0x8(%rax),%rax
   1122b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1122f:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
        {  return this->Base1::as_ref();  }
   11233:	48 83 c7 08          	add    $0x8,%rdi
   11237:	e8 84 8d ff ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
   1123c:	48 89 c7             	mov    %rax,%rdi
   1123f:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
   11246:	48 8b 30             	mov    (%rax),%rsi
   11249:	31 c0                	xor    %eax,%eax
   1124b:	e8 90 8b ff ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
   11250:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
   11257:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1125b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1125f:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
            if (counter_) {
   11266:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   1126b:	0f 84 91 00 00 00    	je     11302 <_ZN4ours3mem6VmAreaD2Ev+0x3e2>
   11271:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
                if (counter_->weak_count() == 1) {
   11278:	48 8b 40 08          	mov    0x8(%rax),%rax
   1127c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   11280:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
        {  return weak_counter_;  }
   11284:	48 83 c7 10          	add    $0x10,%rdi
   11288:	e8 63 8b ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   1128d:	48 83 f8 01          	cmp    $0x1,%rax
   11291:	75 4c                	jne    112df <_ZN4ours3mem6VmAreaD2Ev+0x3bf>
   11293:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
   1129a:	48 8b 40 08          	mov    0x8(%rax),%rax
   1129e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   112a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
        {  return this->Base2::as_ref();  }
   112a6:	48 83 c7 09          	add    $0x9,%rdi
   112aa:	e8 51 8d ff ff       	call   a000 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EE6as_refEv>
   112af:	48 89 c1             	mov    %rax,%rcx
   112b2:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   112b9:	48 8b 00             	mov    (%rax),%rax
   112bc:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   112c0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   112c4:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
   112cb:	00 
   112cc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   112d0:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   112d4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   112d8:	e8 f3 8c ff ff       	call   9fd0 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmAspaceEE10deallocateEPS4_m>
                } else {
   112dd:	eb 21                	jmp    11300 <_ZN4ours3mem6VmAreaD2Ev+0x3e0>
   112df:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
                    counter_->dec_weak_ref();
   112e6:	48 8b 40 08          	mov    0x8(%rax),%rax
   112ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   112ee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  weak_counter_ -= 1;  }
   112f2:	48 83 c7 10          	add    $0x10,%rdi
   112f6:	be 01 00 00 00       	mov    $0x1,%esi
   112fb:	e8 10 8d ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   11300:	eb 00                	jmp    11302 <_ZN4ours3mem6VmAreaD2Ev+0x3e2>
                } else {
   11302:	eb 21                	jmp    11325 <_ZN4ours3mem6VmAreaD2Ev+0x405>
   11304:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
                    counter_->dec_strong_ref();
   1130b:	48 8b 40 08          	mov    0x8(%rax),%rax
   1130f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   11313:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        {  strong_counter_  -= 1;  }
   11317:	48 83 c7 18          	add    $0x18,%rdi
   1131b:	be 01 00 00 00       	mov    $0x1,%esi
   11320:	e8 eb 8c ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   11325:	eb 00                	jmp    11327 <_ZN4ours3mem6VmAreaD2Ev+0x407>
   11327:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
   1132e:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   11335:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
        {
   1133c:	48 8d 0d 05 01 02 00 	lea    0x20105(%rip),%rcx        # 31448 <_ZTVN4ustl10RefCounterIN4ours3mem6VmAreaENS_12NullDisposerENS_3mem9AllocatorIS3_EEmEE+0x10>
   11343:	48 89 08             	mov    %rcx,(%rax)
   11346:	48 81 c4 60 01 00 00 	add    $0x160,%rsp
   1134d:	5d                   	pop    %rbp
   1134e:	c3                   	ret
   1134f:	90                   	nop

0000000000011350 <_ZN4ours3mem6VmAreaD0Ev>:
   11350:	55                   	push   %rbp
   11351:	48 89 e5             	mov    %rsp,%rbp
   11354:	48 83 ec 10          	sub    $0x10,%rsp
   11358:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1135c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11360:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   11364:	e8 b7 fb ff ff       	call   10f20 <_ZN4ours3mem6VmAreaD2Ev>
   11369:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1136d:	be b0 00 00 00       	mov    $0xb0,%esi
   11372:	e8 19 7e 00 00       	call   19190 <_ZdlPvm>
   11377:	48 83 c4 10          	add    $0x10,%rsp
   1137b:	5d                   	pop    %rbp
   1137c:	c3                   	ret
   1137d:	0f 1f 00             	nopl   (%rax)

0000000000011380 <_ZNSt3__18functionIFvvEEC2B8nn210000Ev>:
   11380:	55                   	push   %rbp
   11381:	48 89 e5             	mov    %rsp,%rbp
   11384:	48 83 ec 10          	sub    $0x10,%rsp
   11388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1138c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11390:	e8 2b 00 00 00       	call   113c0 <_ZNSt3__110__function12__value_funcIFvvEEC2B8nn210000Ev>
   11395:	48 83 c4 10          	add    $0x10,%rsp
   11399:	5d                   	pop    %rbp
   1139a:	c3                   	ret
   1139b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000113a0 <_ZNSt3__18functionIFvPN4ours3mem7VmFaultEEEC2B8nn210000Ev>:
   113a0:	55                   	push   %rbp
   113a1:	48 89 e5             	mov    %rsp,%rbp
   113a4:	48 83 ec 10          	sub    $0x10,%rsp
   113a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   113ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   113b0:	e8 2b 00 00 00       	call   113e0 <_ZNSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEEC2B8nn210000Ev>
   113b5:	48 83 c4 10          	add    $0x10,%rsp
   113b9:	5d                   	pop    %rbp
   113ba:	c3                   	ret
   113bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000113c0 <_ZNSt3__110__function12__value_funcIFvvEEC2B8nn210000Ev>:
   113c0:	55                   	push   %rbp
   113c1:	48 89 e5             	mov    %rsp,%rbp
   113c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   113c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113cc:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   113d3:	00 
   113d4:	5d                   	pop    %rbp
   113d5:	c3                   	ret
   113d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   113dd:	00 00 00 

00000000000113e0 <_ZNSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEEC2B8nn210000Ev>:
   113e0:	55                   	push   %rbp
   113e1:	48 89 e5             	mov    %rsp,%rbp
   113e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   113e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113ec:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   113f3:	00 
   113f4:	5d                   	pop    %rbp
   113f5:	c3                   	ret
   113f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   113fd:	00 00 00 

0000000000011400 <_ZNSt3__18functionIFvPN4ours3mem7VmFaultEEED2Ev>:
   11400:	55                   	push   %rbp
   11401:	48 89 e5             	mov    %rsp,%rbp
   11404:	48 83 ec 10          	sub    $0x10,%rsp
   11408:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1140c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11410:	e8 2b 00 00 00       	call   11440 <_ZNSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEED2B8nn210000Ev>
   11415:	48 83 c4 10          	add    $0x10,%rsp
   11419:	5d                   	pop    %rbp
   1141a:	c3                   	ret
   1141b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000011420 <_ZNSt3__18functionIFvvEED2Ev>:
   11420:	55                   	push   %rbp
   11421:	48 89 e5             	mov    %rsp,%rbp
   11424:	48 83 ec 10          	sub    $0x10,%rsp
   11428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1142c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11430:	e8 5b 00 00 00       	call   11490 <_ZNSt3__110__function12__value_funcIFvvEED2B8nn210000Ev>
   11435:	48 83 c4 10          	add    $0x10,%rsp
   11439:	5d                   	pop    %rbp
   1143a:	c3                   	ret
   1143b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000011440 <_ZNSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEED2B8nn210000Ev>:
   11440:	55                   	push   %rbp
   11441:	48 89 e5             	mov    %rsp,%rbp
   11444:	48 83 ec 10          	sub    $0x10,%rsp
   11448:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1144c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   11450:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   11454:	48 8b 41 20          	mov    0x20(%rcx),%rax
   11458:	48 39 c8             	cmp    %rcx,%rax
   1145b:	75 10                	jne    1146d <_ZNSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEED2B8nn210000Ev+0x2d>
   1145d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11461:	48 8b 78 20          	mov    0x20(%rax),%rdi
   11465:	48 8b 07             	mov    (%rdi),%rax
   11468:	ff 50 20             	call   *0x20(%rax)
   1146b:	eb 1b                	jmp    11488 <_ZNSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEED2B8nn210000Ev+0x48>
   1146d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11471:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
   11476:	74 0e                	je     11486 <_ZNSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEED2B8nn210000Ev+0x46>
   11478:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1147c:	48 8b 78 20          	mov    0x20(%rax),%rdi
   11480:	48 8b 07             	mov    (%rdi),%rax
   11483:	ff 50 28             	call   *0x28(%rax)
   11486:	eb 00                	jmp    11488 <_ZNSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEED2B8nn210000Ev+0x48>
   11488:	48 83 c4 10          	add    $0x10,%rsp
   1148c:	5d                   	pop    %rbp
   1148d:	c3                   	ret
   1148e:	66 90                	xchg   %ax,%ax

0000000000011490 <_ZNSt3__110__function12__value_funcIFvvEED2B8nn210000Ev>:
   11490:	55                   	push   %rbp
   11491:	48 89 e5             	mov    %rsp,%rbp
   11494:	48 83 ec 10          	sub    $0x10,%rsp
   11498:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1149c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   114a0:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   114a4:	48 8b 41 20          	mov    0x20(%rcx),%rax
   114a8:	48 39 c8             	cmp    %rcx,%rax
   114ab:	75 10                	jne    114bd <_ZNSt3__110__function12__value_funcIFvvEED2B8nn210000Ev+0x2d>
   114ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   114b1:	48 8b 78 20          	mov    0x20(%rax),%rdi
   114b5:	48 8b 07             	mov    (%rdi),%rax
   114b8:	ff 50 20             	call   *0x20(%rax)
   114bb:	eb 1b                	jmp    114d8 <_ZNSt3__110__function12__value_funcIFvvEED2B8nn210000Ev+0x48>
   114bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   114c1:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
   114c6:	74 0e                	je     114d6 <_ZNSt3__110__function12__value_funcIFvvEED2B8nn210000Ev+0x46>
   114c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   114cc:	48 8b 78 20          	mov    0x20(%rax),%rdi
   114d0:	48 8b 07             	mov    (%rdi),%rax
   114d3:	ff 50 28             	call   *0x28(%rax)
   114d6:	eb 00                	jmp    114d8 <_ZNSt3__110__function12__value_funcIFvvEED2B8nn210000Ev+0x48>
   114d8:	48 83 c4 10          	add    $0x10,%rsp
   114dc:	5d                   	pop    %rbp
   114dd:	c3                   	ret
   114de:	66 90                	xchg   %ax,%ax

00000000000114e0 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE4initEPNS0_11rbtree_nodeIS3_EE>:
   //!
   //! <b>Throws</b>: Nothing.
   //!
   //! <b>Nodes</b>: If node is inserted in a tree, this function corrupts the tree.
   static void init(node_ptr n) BOOST_NOEXCEPT
   {
   114e0:	55                   	push   %rbp
   114e1:	48 89 e5             	mov    %rsp,%rbp
   114e4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      NodeTraits::set_parent(n, node_ptr());
   114e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   114ec:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   114f0:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   114f7:	00 

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_parent(node_ptr n)
   {  return n->parent_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_parent(node_ptr n, node_ptr p)
   {  n->parent_ = p;  }
   114f8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   114fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11500:	48 89 08             	mov    %rcx,(%rax)
      NodeTraits::set_left(n, node_ptr());
   11503:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   11507:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1150b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   11512:	00 

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_left(node_ptr n)
   {  return n->left_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_left(node_ptr n, node_ptr l)
   {  n->left_ = l;  }
   11513:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   11517:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1151b:	48 89 48 08          	mov    %rcx,0x8(%rax)
      NodeTraits::set_right(n, node_ptr());
   1151f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   11523:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11527:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1152e:	00 

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_right(node_ptr n)
   {  return n->right_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_right(node_ptr n, node_ptr r)
   {  n->right_ = r;  }
   1152f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   11533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11537:	48 89 48 10          	mov    %rcx,0x10(%rax)
   }
   1153b:	5d                   	pop    %rbp
   1153c:	c3                   	ret
   1153d:	0f 1f 00             	nopl   (%rax)

0000000000011540 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EEC2ERKS1_>:
        {}
   11540:	55                   	push   %rbp
   11541:	48 89 e5             	mov    %rsp,%rbp
   11544:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11548:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1154c:	5d                   	pop    %rbp
   1154d:	c3                   	ret
   1154e:	66 90                	xchg   %ax,%ax

0000000000011550 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem6VmAreaEEELb0EEC2ERKS6_>:
   11550:	55                   	push   %rbp
   11551:	48 89 e5             	mov    %rsp,%rbp
   11554:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11558:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1155c:	5d                   	pop    %rbp
   1155d:	c3                   	ret
   1155e:	66 90                	xchg   %ax,%ax

0000000000011560 <_ZNSt3__16atomicImEC2B8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR atomic(_Tp __d) _NOEXCEPT : __base(__d) {}
   11560:	55                   	push   %rbp
   11561:	48 89 e5             	mov    %rsp,%rbp
   11564:	48 83 ec 10          	sub    $0x10,%rsp
   11568:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1156c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11570:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11574:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   11578:	e8 73 00 00 00       	call   115f0 <_ZNSt3__113__atomic_baseImLb1EEC2B8nn210000Em>
   1157d:	48 83 c4 10          	add    $0x10,%rsp
   11581:	5d                   	pop    %rbp
   11582:	c3                   	ret
   11583:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1158a:	00 00 00 
   1158d:	0f 1f 00             	nopl   (%rax)

0000000000011590 <_ZN4ustl10RefCounterIN4ours3mem6VmAreaENS_12NullDisposerENS_3mem9AllocatorIS3_EEmED2Ev>:
   11590:	55                   	push   %rbp
   11591:	48 89 e5             	mov    %rsp,%rbp
   11594:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11598:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1159c:	48 8d 0d a5 fe 01 00 	lea    0x1fea5(%rip),%rcx        # 31448 <_ZTVN4ustl10RefCounterIN4ours3mem6VmAreaENS_12NullDisposerENS_3mem9AllocatorIS3_EEmEE+0x10>
   115a3:	48 89 08             	mov    %rcx,(%rax)
        }
   115a6:	5d                   	pop    %rbp
   115a7:	c3                   	ret
   115a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   115af:	00 

00000000000115b0 <_ZN4ustl10RefCounterIN4ours3mem6VmAreaENS_12NullDisposerENS_3mem9AllocatorIS3_EEmED0Ev>:
        {
   115b0:	55                   	push   %rbp
   115b1:	48 89 e5             	mov    %rsp,%rbp
   115b4:	48 83 ec 10          	sub    $0x10,%rsp
   115b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   115bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   115c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   115c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115c8:	48 8d 0d 79 fe 01 00 	lea    0x1fe79(%rip),%rcx        # 31448 <_ZTVN4ustl10RefCounterIN4ours3mem6VmAreaENS_12NullDisposerENS_3mem9AllocatorIS3_EEmEE+0x10>
   115cf:	48 89 08             	mov    %rcx,(%rax)
   115d2:	be 20 00 00 00       	mov    $0x20,%esi
   115d7:	e8 b4 7b 00 00       	call   19190 <_ZdlPvm>
        }
   115dc:	48 83 c4 10          	add    $0x10,%rsp
   115e0:	5d                   	pop    %rbp
   115e1:	c3                   	ret
   115e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   115e9:	00 00 00 
   115ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000115f0 <_ZNSt3__113__atomic_baseImLb1EEC2B8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __atomic_base(_Tp __d) _NOEXCEPT : __base(__d) {}
   115f0:	55                   	push   %rbp
   115f1:	48 89 e5             	mov    %rsp,%rbp
   115f4:	48 83 ec 10          	sub    $0x10,%rsp
   115f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   115fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11600:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11604:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   11608:	e8 13 00 00 00       	call   11620 <_ZNSt3__113__atomic_baseImLb0EEC2B8nn210000Em>
   1160d:	48 83 c4 10          	add    $0x10,%rsp
   11611:	5d                   	pop    %rbp
   11612:	c3                   	ret
   11613:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1161a:	00 00 00 
   1161d:	0f 1f 00             	nopl   (%rax)

0000000000011620 <_ZNSt3__113__atomic_baseImLb0EEC2B8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __atomic_base(_Tp __d) _NOEXCEPT : __a_(__d) {}
   11620:	55                   	push   %rbp
   11621:	48 89 e5             	mov    %rsp,%rbp
   11624:	48 83 ec 10          	sub    $0x10,%rsp
   11628:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1162c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11630:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11634:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   11638:	e8 c3 59 ff ff       	call   7000 <_ZNSt3__117__cxx_atomic_implImNS_22__cxx_atomic_base_implImEEEC2B8nn210000Em>
   1163d:	48 83 c4 10          	add    $0x10,%rsp
   11641:	5d                   	pop    %rbp
   11642:	c3                   	ret
   11643:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1164a:	00 00 00 
   1164d:	0f 1f 00             	nopl   (%rax)

0000000000011650 <_ZN5boost9intrusive16list_member_hookIJEED2Ev>:
   11650:	55                   	push   %rbp
   11651:	48 89 e5             	mov    %rsp,%rbp
   11654:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11658:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1165c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11664:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11668:	5d                   	pop    %rbp
   11669:	c3                   	ret
   1166a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000011670 <_ZN5boost9intrusive15set_member_hookIJEED2Ev>:
   11670:	55                   	push   %rbp
   11671:	48 89 e5             	mov    %rsp,%rbp
   11674:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11678:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1167c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11680:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11684:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11688:	5d                   	pop    %rbp
   11689:	c3                   	ret
   1168a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000011690 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmObjectEE10deallocateEPS4_m>:
   11690:	55                   	push   %rbp
   11691:	48 89 e5             	mov    %rsp,%rbp
   11694:	48 83 ec 20          	sub    $0x20,%rsp
   11698:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1169c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   116a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   116a4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   116a8:	e8 43 22 00 00       	call   138f0 <_ZdaPv>
   116ad:	48 83 c4 20          	add    $0x20,%rsp
   116b1:	5d                   	pop    %rbp
   116b2:	c3                   	ret
   116b3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   116ba:	00 00 00 
   116bd:	0f 1f 00             	nopl   (%rax)

00000000000116c0 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmObjectEEELb0EE6as_refEv>:
        {  return this->_data;  }
   116c0:	55                   	push   %rbp
   116c1:	48 89 e5             	mov    %rsp,%rbp
   116c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   116c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116cc:	5d                   	pop    %rbp
   116cd:	c3                   	ret
   116ce:	66 90                	xchg   %ax,%ax

00000000000116d0 <_ZN4ours3mem8VmAspace4initEv>:

    VmAspace::~VmAspace()
    {}

    auto VmAspace::init() -> Status 
    {
   116d0:	55                   	push   %rbp
   116d1:	48 89 e5             	mov    %rsp,%rbp
   116d4:	48 83 ec 20          	sub    $0x20,%rsp
   116d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   116dc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
        auto status = this->arch_.init();
   116e0:	48 83 c7 40          	add    $0x40,%rdi
   116e4:	e8 57 47 ff ff       	call   5e40 <_ZN4ours3mem12ArchVmAspace4initEv>
   116e9:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (status != Status::Ok) {
   116ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   116f0:	74 08                	je     116fa <_ZN4ours3mem8VmAspace4initEv+0x2a>
            return status;
   116f2:	8b 45 ec             	mov    -0x14(%rbp),%eax
   116f5:	89 45 fc             	mov    %eax,-0x4(%rbp)
   116f8:	eb 07                	jmp    11701 <_ZN4ours3mem8VmAspace4initEv+0x31>
        }

        return Status::Ok;
   116fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    }
   11701:	8b 45 fc             	mov    -0x4(%rbp),%eax
   11704:	48 83 c4 20          	add    $0x20,%rsp
   11708:	5d                   	pop    %rbp
   11709:	c3                   	ret
   1170a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000011710 <_ZN4ours3mem8VmAspace18sync_kernel_aspaceEv>:
    {}
   11710:	55                   	push   %rbp
   11711:	48 89 e5             	mov    %rsp,%rbp
   11714:	5d                   	pop    %rbp
   11715:	c3                   	ret
   11716:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1171d:	00 00 00 

0000000000011720 <_ZN4ours3mem8VmAspace13switch_aspaceEPS1_S2_>:
    {}
   11720:	55                   	push   %rbp
   11721:	48 89 e5             	mov    %rsp,%rbp
   11724:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11728:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1172c:	5d                   	pop    %rbp
   1172d:	c3                   	ret
   1172e:	66 90                	xchg   %ax,%ax

0000000000011730 <_ZN4ours3mem8VmAspace5cloneENS0_9VmasFlagsE>:
    {  return nullptr;  }
   11730:	55                   	push   %rbp
   11731:	48 89 e5             	mov    %rsp,%rbp
   11734:	48 89 f8             	mov    %rdi,%rax
   11737:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1173b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1173f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11743:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1174a:	00 
   1174b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
            : pointer_(nullptr),
   1174f:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
              counter_(nullptr)
   11756:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
   1175d:	00 
   1175e:	5d                   	pop    %rbp
   1175f:	c3                   	ret

0000000000011760 <_ZN4ours3mem8VmAspace6createENS0_9VmasFlagsEPKc>:
    {
   11760:	55                   	push   %rbp
   11761:	48 89 e5             	mov    %rsp,%rbp
   11764:	48 83 ec 50          	sub    $0x50,%rsp
   11768:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   1176c:	48 89 f8             	mov    %rdi,%rax
   1176f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   11773:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11777:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1177b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
        if (bool(flags & VmasFlags::User)) {
   1177f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11783:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11787:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1178e:	00 
        static_cast<Underlying>(lhs) &
   1178f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11793:	48 23 45 f0          	and    -0x10(%rbp),%rax
   11797:	48 83 f8 00          	cmp    $0x0,%rax
   1179b:	74 1c                	je     117b9 <_ZN4ours3mem8VmAspace6createENS0_9VmasFlagsEPKc+0x59>
            base = USER_ASPACE_BASE;
   1179d:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
   117a4:	ff ff ff 
   117a7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            size = USER_ASPACE_SIZE;
   117ab:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
   117b2:	00 00 00 
   117b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   117b9:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
        return Self::create(base, size, flags, name);
   117bd:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   117c1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   117c5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   117c9:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
   117cd:	e8 0e 00 00 00       	call   117e0 <_ZN4ours3mem8VmAspace6createEmmNS0_9VmasFlagsEPKc>
   117d2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   117d6:	48 83 c4 50          	add    $0x50,%rsp
   117da:	5d                   	pop    %rbp
   117db:	c3                   	ret
   117dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000117e0 <_ZN4ours3mem8VmAspace6createEmmNS0_9VmasFlagsEPKc>:
    {
   117e0:	55                   	push   %rbp
   117e1:	48 89 e5             	mov    %rsp,%rbp
   117e4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   117eb:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   117ef:	48 89 f8             	mov    %rdi,%rax
   117f2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   117f6:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   117fa:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   117fe:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   11802:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   11806:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
   1180a:	bf 18 01 00 00       	mov    $0x118,%edi
        auto aspace = new Self(base, size, flags, name);
   1180f:	e8 0c 79 00 00       	call   19120 <_Znwm>
   11814:	48 89 c7             	mov    %rax,%rdi
   11817:	48 89 7d 80          	mov    %rdi,-0x80(%rbp)
   1181b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1181f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   11823:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   11827:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
   1182b:	e8 80 00 00 00       	call   118b0 <_ZN4ours3mem8VmAspaceC1EmmNS0_9VmasFlagsEPKc>
   11830:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   11834:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        aspace->init();
   11838:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   1183c:	e8 8f fe ff ff       	call   116d0 <_ZN4ours3mem8VmAspace4initEv>
            ustl::sync::LockGuard guard(Self::ALL_ASPACE_LIST_MUTEX_);
   11841:	48 8d 35 30 71 02 00 	lea    0x27130(%rip),%rsi        # 38978 <_ZN4ours3mem8VmAspace22ALL_ASPACE_LIST_MUTEX_E>
   11848:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
   1184c:	e8 df c0 ff ff       	call   d930 <_ZN4ustl4sync9LockGuardINS0_5MutexEEC2ERS2_>
            Self::ALL_ASPACE_LIST_.push_back(*aspace);
   11851:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   11855:	48 8d 3d 04 71 02 00 	lea    0x27104(%rip),%rdi        # 38960 <_ZN4ours3mem8VmAspace16ALL_ASPACE_LIST_E>
   1185c:	e8 ff 04 00 00       	call   11d60 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE9push_backERS5_>
   11861:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
        }
   11865:	e8 f6 c0 ff ff       	call   d960 <_ZN4ustl4sync9LockGuardINS0_5MutexEED2Ev>
   1186a:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   1186e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
        return ustl::make_rc<VmAspace>(aspace);
   11872:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   11876:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   1187a:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
        return Rc<Base, Args...>(object, object);
   1187e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   11882:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   11886:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1188a:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1188e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   11892:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
            : pointer_(ptr),
   11896:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1189a:	48 89 11             	mov    %rdx,(%rcx)
              counter_(counter)
   1189d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   118a1:	48 89 51 08          	mov    %rdx,0x8(%rcx)
   118a5:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   118ac:	5d                   	pop    %rbp
   118ad:	c3                   	ret
   118ae:	66 90                	xchg   %ax,%ax

00000000000118b0 <_ZN4ours3mem8VmAspaceC1EmmNS0_9VmasFlagsEPKc>:
    {}
   118b0:	55                   	push   %rbp
   118b1:	48 89 e5             	mov    %rsp,%rbp
   118b4:	48 83 ec 70          	sub    $0x70,%rsp
   118b8:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   118bc:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   118c0:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   118c4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   118c8:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
   118cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   118d0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   118d4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   118d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   118dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   118e0:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
   118e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   118e9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   118ed:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
        {}
   118f1:	48 83 c7 08          	add    $0x8,%rdi
   118f5:	48 8d 75 ff          	lea    -0x1(%rbp),%rsi
            : Base1(disposer),
   118f9:	e8 42 fc ff ff       	call   11540 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EEC2ERKS1_>
   118fe:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
        {}
   11902:	48 83 c7 09          	add    $0x9,%rdi
   11906:	48 8d 75 fe          	lea    -0x2(%rbp),%rsi
              Base2(allocator),
   1190a:	e8 d1 14 00 00       	call   12de0 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EEC2ERKS6_>
   1190f:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
        {}
   11913:	48 8d 05 6e fb 01 00 	lea    0x1fb6e(%rip),%rax        # 31488 <_ZTVN4ustl10RefCounterIN4ours3mem8VmAspaceENS_12NullDisposerENS_3mem9AllocatorIS3_EEmEE+0x10>
   1191a:	48 89 07             	mov    %rax,(%rdi)
              weak_counter_(count),
   1191d:	48 83 c7 10          	add    $0x10,%rdi
   11921:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   11925:	e8 36 fc ff ff       	call   11560 <_ZNSt3__16atomicImEC2B8nn210000Em>
   1192a:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
              strong_counter_(count)
   1192e:	48 83 c7 18          	add    $0x18,%rdi
   11932:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   11936:	e8 25 fc ff ff       	call   11560 <_ZNSt3__16atomicImEC2B8nn210000Em>
   1193b:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   1193f:	48 8d 05 22 fb 01 00 	lea    0x1fb22(%rip),%rax        # 31468 <_ZTVN4ours3mem8VmAspaceE+0x10>
   11946:	48 89 07             	mov    %rax,(%rdi)
    VmAspace::VmAspace(VirtAddr base, usize size, VmasFlags flags, char const *name)
   11949:	48 83 c7 20          	add    $0x20,%rdi
   1194d:	e8 fe 4d ff ff       	call   6750 <_ZN4gktl6CanaryILj1885430629EEC2Ev>
   11952:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
          base_(base),
   11956:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1195a:	48 89 47 28          	mov    %rax,0x28(%rdi)
          size_(size),
   1195e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   11962:	48 89 47 30          	mov    %rax,0x30(%rdi)
          flags_(flags),
   11966:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1196a:	48 89 47 38          	mov    %rax,0x38(%rdi)
          arch_(base, size, flags),
   1196e:	48 83 c7 40          	add    $0x40,%rdi
   11972:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   11976:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1197a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1197e:	e8 5d 44 ff ff       	call   5de0 <_ZN4ours3mem12ArchVmAspaceC1EmmNS0_9VmasFlagsE>
   11983:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
          users_(),
   11987:	48 81 c7 a8 00 00 00 	add    $0xa8,%rdi
   1198e:	31 c0                	xor    %eax,%eax
   11990:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
   11996:	e8 85 e4 ff ff       	call   fe20 <_ZNSt3__16atomicIjEC2B8nn210000Ev>
   1199b:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
          refcnt_(1)
   1199f:	48 81 c7 ac 00 00 00 	add    $0xac,%rdi
   119a6:	be 01 00 00 00       	mov    $0x1,%esi
   119ab:	e8 50 04 00 00       	call   11e00 <_ZNSt3__16atomicIjEC2B8nn210000Ej>
   119b0:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    VmAspace::VmAspace(VirtAddr base, usize size, VmasFlags flags, char const *name)
   119b4:	48 81 c7 b0 00 00 00 	add    $0xb0,%rdi
   119bb:	e8 70 04 00 00       	call   11e30 <_ZN4ours3mem10VmRootAreaC2Ev>
   119c0:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   119c4:	48 89 f8             	mov    %rdi,%rax
   119c7:	48 05 f8 00 00 00    	add    $0xf8,%rax
   119cd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   119d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
            : pointer_(nullptr),
   119d5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
              counter_(nullptr)
   119dc:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   119e3:	00 
   119e4:	48 81 c7 08 01 00 00 	add    $0x108,%rdi
   119eb:	e8 e0 f4 ff ff       	call   10ed0 <_ZN5boost9intrusive16list_member_hookIJEEC2Ev>
    {}
   119f0:	48 83 c4 70          	add    $0x70,%rsp
   119f4:	5d                   	pop    %rbp
   119f5:	c3                   	ret
   119f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   119fd:	00 00 00 

0000000000011a00 <_ZN4ours3mem8VmAspaceD1Ev>:
    {}
   11a00:	55                   	push   %rbp
   11a01:	48 89 e5             	mov    %rsp,%rbp
   11a04:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   11a0b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
   11a12:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   11a19:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
   11a20:	48 8d 05 41 fa 01 00 	lea    0x1fa41(%rip),%rax        # 31468 <_ZTVN4ours3mem8VmAspaceE+0x10>
   11a27:	48 89 07             	mov    %rax,(%rdi)
   11a2a:	48 81 c7 08 01 00 00 	add    $0x108,%rdi
   11a31:	e8 1a fc ff ff       	call   11650 <_ZN5boost9intrusive16list_member_hookIJEED2Ev>
   11a36:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   11a3d:	48 05 f8 00 00 00    	add    $0xf8,%rax
   11a43:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   11a47:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   11a4b:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
            if (counter_) {
   11a52:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11a57:	0f 84 90 01 00 00    	je     11bed <_ZN4ours3mem8VmAspaceD1Ev+0x1ed>
   11a5d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
                if (counter_->strong_count() == 1) {
   11a64:	48 8b 40 08          	mov    0x8(%rax),%rax
   11a68:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   11a6c:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
        {  return strong_counter_;  }
   11a70:	48 83 c7 18          	add    $0x18,%rdi
   11a74:	e8 77 83 ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   11a79:	48 83 f8 01          	cmp    $0x1,%rax
   11a7d:	0f 85 47 01 00 00    	jne    11bca <_ZN4ours3mem8VmAspaceD1Ev+0x1ca>
   11a83:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
   11a8a:	48 8b 08             	mov    (%rax),%rcx
   11a8d:	48 8b 40 08          	mov    0x8(%rax),%rax
   11a91:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
   11a98:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   11a9c:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   11aa0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   11aa4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11aa8:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
            : pointer_(ptr),
   11aaf:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   11ab3:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   11ab6:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   11aba:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   11abe:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11ac3:	74 21                	je     11ae6 <_ZN4ours3mem8VmAspaceD1Ev+0xe6>
   11ac5:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
                counter_->enable_weak();
   11acc:	48 8b 40 08          	mov    0x8(%rax),%rax
   11ad0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   11ad4:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
        {  weak_counter_  = 1;  }
   11ad8:	48 83 c7 10          	add    $0x10,%rdi
   11adc:	be 01 00 00 00       	mov    $0x1,%esi
   11ae1:	e8 ea 83 ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   11ae6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
                    counter_->disposer()(pointer_);
   11aed:	48 8b 40 08          	mov    0x8(%rax),%rax
   11af1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   11af5:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
        {  return this->Base1::as_ref();  }
   11af9:	48 83 c7 08          	add    $0x8,%rdi
   11afd:	e8 be 84 ff ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
   11b02:	48 89 c7             	mov    %rax,%rdi
   11b05:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   11b0c:	48 8b 30             	mov    (%rax),%rsi
   11b0f:	31 c0                	xor    %eax,%eax
   11b11:	e8 ca 82 ff ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
   11b16:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   11b1d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   11b21:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   11b25:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
            if (counter_) {
   11b2c:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11b31:	0f 84 91 00 00 00    	je     11bc8 <_ZN4ours3mem8VmAspaceD1Ev+0x1c8>
   11b37:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
                if (counter_->weak_count() == 1) {
   11b3e:	48 8b 40 08          	mov    0x8(%rax),%rax
   11b42:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   11b46:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
        {  return weak_counter_;  }
   11b4a:	48 83 c7 10          	add    $0x10,%rdi
   11b4e:	e8 9d 82 ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   11b53:	48 83 f8 01          	cmp    $0x1,%rax
   11b57:	75 4c                	jne    11ba5 <_ZN4ours3mem8VmAspaceD1Ev+0x1a5>
   11b59:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
   11b60:	48 8b 40 08          	mov    0x8(%rax),%rax
   11b64:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11b68:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
        {  return this->Base2::as_ref();  }
   11b6c:	48 83 c7 09          	add    $0x9,%rdi
   11b70:	e8 db a4 ff ff       	call   c050 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem6VmAreaEEELb0EE6as_refEv>
   11b75:	48 89 c1             	mov    %rax,%rcx
   11b78:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   11b7f:	48 8b 00             	mov    (%rax),%rax
   11b82:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   11b86:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   11b8a:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
   11b91:	00 
   11b92:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   11b96:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   11b9a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   11b9e:	e8 7d a4 ff ff       	call   c020 <_ZN4ustl3mem9AllocatorIN4ours3mem6VmAreaEE10deallocateEPS4_m>
                } else {
   11ba3:	eb 21                	jmp    11bc6 <_ZN4ours3mem8VmAspaceD1Ev+0x1c6>
   11ba5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
                    counter_->dec_weak_ref();
   11bac:	48 8b 40 08          	mov    0x8(%rax),%rax
   11bb0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11bb4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  weak_counter_ -= 1;  }
   11bb8:	48 83 c7 10          	add    $0x10,%rdi
   11bbc:	be 01 00 00 00       	mov    $0x1,%esi
   11bc1:	e8 4a 84 ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   11bc6:	eb 00                	jmp    11bc8 <_ZN4ours3mem8VmAspaceD1Ev+0x1c8>
                } else {
   11bc8:	eb 21                	jmp    11beb <_ZN4ours3mem8VmAspaceD1Ev+0x1eb>
   11bca:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
                    counter_->dec_strong_ref();
   11bd1:	48 8b 40 08          	mov    0x8(%rax),%rax
   11bd5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   11bd9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        {  strong_counter_  -= 1;  }
   11bdd:	48 83 c7 18          	add    $0x18,%rdi
   11be1:	be 01 00 00 00       	mov    $0x1,%esi
   11be6:	e8 25 84 ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   11beb:	eb 00                	jmp    11bed <_ZN4ours3mem8VmAspaceD1Ev+0x1ed>
   11bed:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
   11bf4:	48 81 c7 b0 00 00 00 	add    $0xb0,%rdi
   11bfb:	e8 80 02 00 00       	call   11e80 <_ZN4ours3mem10VmRootAreaD2Ev>
   11c00:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   11c07:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   11c0b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
        {
   11c0f:	48 8d 0d 72 f8 01 00 	lea    0x1f872(%rip),%rcx        # 31488 <_ZTVN4ustl10RefCounterIN4ours3mem8VmAspaceENS_12NullDisposerENS_3mem9AllocatorIS3_EEmEE+0x10>
   11c16:	48 89 08             	mov    %rcx,(%rax)
   11c19:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
   11c20:	5d                   	pop    %rbp
   11c21:	c3                   	ret
   11c22:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   11c29:	1f 84 00 00 00 00 00 

0000000000011c30 <_ZN4ours3mem8VmAspaceD0Ev>:
   11c30:	55                   	push   %rbp
   11c31:	48 89 e5             	mov    %rsp,%rbp
   11c34:	48 83 ec 10          	sub    $0x10,%rsp
   11c38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11c3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11c40:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   11c44:	e8 b7 fd ff ff       	call   11a00 <_ZN4ours3mem8VmAspaceD1Ev>
   11c49:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   11c4d:	be 18 01 00 00       	mov    $0x118,%esi
   11c52:	e8 39 75 00 00       	call   19190 <_ZdlPvm>
   11c57:	48 83 c4 10          	add    $0x10,%rsp
   11c5b:	5d                   	pop    %rbp
   11c5c:	c3                   	ret
   11c5d:	0f 1f 00             	nopl   (%rax)

0000000000011c60 <_ZN4ours3mem8VmAspace5faultEmNS0_8VmfCauseE>:

    auto VmAspace::fault(VirtAddr virt_addr, VmfCause cause) -> void
    {
   11c60:	55                   	push   %rbp
   11c61:	48 89 e5             	mov    %rsp,%rbp
   11c64:	48 83 ec 30          	sub    $0x30,%rsp
   11c68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11c6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11c70:	89 55 dc             	mov    %edx,-0x24(%rbp)
   11c73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11c77:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        // } else {
        //     if (auto fault = root_area_->search_subvma(virt_addr)) {
        //         fault_cache_ = fault.value();
        //     }
        // }
        if (fault_cache_) {
   11c7b:	48 05 f8 00 00 00    	add    $0xf8,%rax
   11c81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11c85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        {  return pointer_ == nullptr;  }
   11c89:	48 83 38 00          	cmpq   $0x0,(%rax)
   11c8d:	75 1e                	jne    11cad <_ZN4ours3mem8VmAspace5faultEmNS0_8VmfCauseE+0x4d>
   11c8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            VmFault vmf;
            fault_cache_->fault(&vmf);
   11c93:	48 05 f8 00 00 00    	add    $0xf8,%rax
   11c99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11c9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        {  return pointer_;  }
   11ca1:	48 8b 38             	mov    (%rax),%rdi
   11ca4:	48 8d 75 db          	lea    -0x25(%rbp),%rsi
   11ca8:	e8 c3 03 00 00       	call   12070 <_ZNK4ours3mem6VmArea5faultEPNS0_7VmFaultE>
        }
    }
   11cad:	48 83 c4 30          	add    $0x30,%rsp
   11cb1:	5d                   	pop    %rbp
   11cb2:	c3                   	ret
   11cb3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   11cba:	00 00 00 
   11cbd:	0f 1f 00             	nopl   (%rax)

0000000000011cc0 <__cxx_global_var_init>:
   11cc0:	55                   	push   %rbp
   11cc1:	48 89 e5             	mov    %rsp,%rbp
    VmAspace::AspaceList VmAspace::ALL_ASPACE_LIST_;
   11cc4:	48 8d 3d 95 6c 02 00 	lea    0x26c95(%rip),%rdi        # 38960 <_ZN4ours3mem8VmAspace16ALL_ASPACE_LIST_E>
   11ccb:	e8 40 00 00 00       	call   11d10 <_ZN4ustl11collections9intrusive4ListIN4ours3mem8VmAspaceEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEEC2Ev>
   11cd0:	48 8d 3d 09 00 00 00 	lea    0x9(%rip),%rdi        # 11ce0 <__dtor__ZN4ours3mem8VmAspace16ALL_ASPACE_LIST_E>
   11cd7:	e8 34 74 00 00       	call   19110 <atexit>
   11cdc:	5d                   	pop    %rbp
   11cdd:	c3                   	ret
   11cde:	66 90                	xchg   %ax,%ax

0000000000011ce0 <__dtor__ZN4ours3mem8VmAspace16ALL_ASPACE_LIST_E>:
   11ce0:	55                   	push   %rbp
   11ce1:	48 89 e5             	mov    %rsp,%rbp
   11ce4:	48 8d 3d 75 6c 02 00 	lea    0x26c75(%rip),%rdi        # 38960 <_ZN4ours3mem8VmAspace16ALL_ASPACE_LIST_E>
   11ceb:	e8 50 00 00 00       	call   11d40 <_ZN4ustl11collections9intrusive4ListIN4ours3mem8VmAspaceEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEED2Ev>
   11cf0:	5d                   	pop    %rbp
   11cf1:	c3                   	ret
   11cf2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   11cf9:	1f 84 00 00 00 00 00 

0000000000011d00 <_GLOBAL__sub_I_vm_aspace.cpp>:
   11d00:	55                   	push   %rbp
   11d01:	48 89 e5             	mov    %rsp,%rbp
   11d04:	e8 b7 ff ff ff       	call   11cc0 <__cxx_global_var_init>
   11d09:	5d                   	pop    %rbp
   11d0a:	c3                   	ret
   11d0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000011d10 <_ZN4ustl11collections9intrusive4ListIN4ours3mem8VmAspaceEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEEC2Ev>:
   11d10:	55                   	push   %rbp
   11d11:	48 89 e5             	mov    %rsp,%rbp
   11d14:	48 83 ec 10          	sub    $0x10,%rsp
   11d18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   11d1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11d20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11d24:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      :  Base()
   11d28:	e8 73 03 00 00       	call   120a0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvEC2Ev>
   11d2d:	48 83 c4 10          	add    $0x10,%rsp
   11d31:	5d                   	pop    %rbp
   11d32:	c3                   	ret
   11d33:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   11d3a:	00 00 00 
   11d3d:	0f 1f 00             	nopl   (%rax)

0000000000011d40 <_ZN4ustl11collections9intrusive4ListIN4ours3mem8VmAspaceEJN5boost9intrusive11member_hookIS5_NS7_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEEED2Ev>:
   11d40:	55                   	push   %rbp
   11d41:	48 89 e5             	mov    %rsp,%rbp
   11d44:	48 83 ec 10          	sub    $0x10,%rsp
   11d48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11d4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11d50:	e8 eb 03 00 00       	call   12140 <_ZN5boost9intrusive4listIN4ours3mem8VmAspaceEJNS0_11member_hookIS4_NS0_16list_member_hookIJEEEXadL_ZNS4_13managed_hook_EEEEEEED2Ev>
   11d55:	48 83 c4 10          	add    $0x10,%rsp
   11d59:	5d                   	pop    %rbp
   11d5a:	c3                   	ret
   11d5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000011d60 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE9push_backERS5_>:
   {
   11d60:	55                   	push   %rbp
   11d61:	48 89 e5             	mov    %rsp,%rbp
   11d64:	48 83 ec 70          	sub    $0x70,%rsp
   11d68:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   11d6c:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   11d70:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11d74:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   11d78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      node_ptr to_insert = priv_value_traits().to_node_ptr(value);
   11d7c:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   11d80:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
         (static_cast<node_reference>(static_cast<hook_reference>(value.*P)));
   11d84:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   11d88:	48 81 c1 08 01 00 00 	add    $0x108,%rcx
   11d8f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   11d93:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   11d97:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   11d9b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   11d9f:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   11da3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   11da7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
   11dab:	48 83 c0 08          	add    $0x8,%rax
   11daf:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   11db3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   11db7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   11dbb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   11dbf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   11dc3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
      node_algorithms::link_before(this->get_root_node(), to_insert);
   11dc7:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   11dcb:	e8 30 c0 ff ff       	call   de00 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE11link_beforeEPNS0_9list_nodeIS3_EES8_>
   11dd0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   11dd4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   11dd8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   11ddc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11de0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   {  ++size_; }
   11de4:	48 8b 08             	mov    (%rax),%rcx
   11de7:	48 83 c1 01          	add    $0x1,%rcx
   11deb:	48 89 08             	mov    %rcx,(%rax)
   }
   11dee:	48 83 c4 70          	add    $0x70,%rsp
   11df2:	5d                   	pop    %rbp
   11df3:	c3                   	ret
   11df4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   11dfb:	00 00 00 
   11dfe:	66 90                	xchg   %ax,%ax

0000000000011e00 <_ZNSt3__16atomicIjEC2B8nn210000Ej>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR atomic(_Tp __d) _NOEXCEPT : __base(__d) {}
   11e00:	55                   	push   %rbp
   11e01:	48 89 e5             	mov    %rsp,%rbp
   11e04:	48 83 ec 10          	sub    $0x10,%rsp
   11e08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11e0c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   11e0f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   11e13:	8b 75 f4             	mov    -0xc(%rbp),%esi
   11e16:	e8 d5 08 00 00       	call   126f0 <_ZNSt3__113__atomic_baseIjLb1EEC2B8nn210000Ej>
   11e1b:	48 83 c4 10          	add    $0x10,%rsp
   11e1f:	5d                   	pop    %rbp
   11e20:	c3                   	ret
   11e21:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   11e28:	00 00 00 
   11e2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000011e30 <_ZN4ours3mem10VmRootAreaC2Ev>:
#include <ours/status.hpp>
#include <ours/mem/vm_area.hpp>

namespace ours::mem {
    /// This class is used to manage the sub-area in a virtual address space.
    class VmRootArea
   11e30:	55                   	push   %rbp
   11e31:	48 89 e5             	mov    %rsp,%rbp
   11e34:	48 83 ec 20          	sub    $0x20,%rsp
   11e38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11e3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e40:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   11e44:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11e48:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi

   //Assert if passed value traits are compatible with the type
   BOOST_STATIC_ASSERT((detail::is_same<typename value_traits::value_type, T>::value));

   BOOST_INTRUSIVE_FORCEINLINE multiset()
      :  Base()
   11e4c:	e8 ff 08 00 00       	call   12750 <_ZN5boost9intrusive13multiset_implINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvmLb1EvEC2Ev>
   11e51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11e55:	48 83 c0 28          	add    $0x28,%rax
   11e59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11e5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            : pointer_(nullptr),
   11e61:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
              counter_(nullptr)
   11e68:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   11e6f:	00 
   11e70:	48 83 c4 20          	add    $0x20,%rsp
   11e74:	5d                   	pop    %rbp
   11e75:	c3                   	ret
   11e76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   11e7d:	00 00 00 

0000000000011e80 <_ZN4ours3mem10VmRootAreaD2Ev>:
   11e80:	55                   	push   %rbp
   11e81:	48 89 e5             	mov    %rsp,%rbp
   11e84:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   11e8b:	48 89 bd 70 ff ff ff 	mov    %rdi,-0x90(%rbp)
   11e92:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   11e99:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   11ea0:	48 83 c0 28          	add    $0x28,%rax
   11ea4:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   11ea8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   11eac:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
            if (counter_) {
   11eb3:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11eb8:	0f 84 90 01 00 00    	je     1204e <_ZN4ours3mem10VmRootAreaD2Ev+0x1ce>
   11ebe:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
                if (counter_->strong_count() == 1) {
   11ec5:	48 8b 40 08          	mov    0x8(%rax),%rax
   11ec9:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   11ecd:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
        {  return strong_counter_;  }
   11ed1:	48 83 c7 18          	add    $0x18,%rdi
   11ed5:	e8 16 7f ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   11eda:	48 83 f8 01          	cmp    $0x1,%rax
   11ede:	0f 85 47 01 00 00    	jne    1202b <_ZN4ours3mem10VmRootAreaD2Ev+0x1ab>
   11ee4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
   11eeb:	48 8b 08             	mov    (%rax),%rcx
   11eee:	48 8b 40 08          	mov    0x8(%rax),%rax
   11ef2:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
   11ef9:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   11efd:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   11f01:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   11f05:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11f09:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
            : pointer_(ptr),
   11f10:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   11f14:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   11f17:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   11f1b:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   11f1f:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11f24:	74 21                	je     11f47 <_ZN4ours3mem10VmRootAreaD2Ev+0xc7>
   11f26:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
                counter_->enable_weak();
   11f2d:	48 8b 40 08          	mov    0x8(%rax),%rax
   11f31:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   11f35:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
        {  weak_counter_  = 1;  }
   11f39:	48 83 c7 10          	add    $0x10,%rdi
   11f3d:	be 01 00 00 00       	mov    $0x1,%esi
   11f42:	e8 89 7f ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   11f47:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
                    counter_->disposer()(pointer_);
   11f4e:	48 8b 40 08          	mov    0x8(%rax),%rax
   11f52:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   11f56:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
        {  return this->Base1::as_ref();  }
   11f5a:	48 83 c7 08          	add    $0x8,%rdi
   11f5e:	e8 5d 80 ff ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
   11f63:	48 89 c7             	mov    %rax,%rdi
   11f66:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   11f6d:	48 8b 30             	mov    (%rax),%rsi
   11f70:	31 c0                	xor    %eax,%eax
   11f72:	e8 69 7e ff ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
   11f77:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
   11f7e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   11f82:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   11f86:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
            if (counter_) {
   11f8d:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   11f92:	0f 84 91 00 00 00    	je     12029 <_ZN4ours3mem10VmRootAreaD2Ev+0x1a9>
   11f98:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
                if (counter_->weak_count() == 1) {
   11f9f:	48 8b 40 08          	mov    0x8(%rax),%rax
   11fa3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   11fa7:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
        {  return weak_counter_;  }
   11fab:	48 83 c7 10          	add    $0x10,%rdi
   11faf:	e8 3c 7e ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   11fb4:	48 83 f8 01          	cmp    $0x1,%rax
   11fb8:	75 4c                	jne    12006 <_ZN4ours3mem10VmRootAreaD2Ev+0x186>
   11fba:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
   11fc1:	48 8b 40 08          	mov    0x8(%rax),%rax
   11fc5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11fc9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
        {  return this->Base2::as_ref();  }
   11fcd:	48 83 c7 09          	add    $0x9,%rdi
   11fd1:	e8 2a 80 ff ff       	call   a000 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EE6as_refEv>
   11fd6:	48 89 c1             	mov    %rax,%rcx
   11fd9:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   11fe0:	48 8b 00             	mov    (%rax),%rax
   11fe3:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   11fe7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   11feb:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
   11ff2:	00 
   11ff3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   11ff7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   11ffb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   11fff:	e8 cc 7f ff ff       	call   9fd0 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmAspaceEE10deallocateEPS4_m>
                } else {
   12004:	eb 21                	jmp    12027 <_ZN4ours3mem10VmRootAreaD2Ev+0x1a7>
   12006:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
                    counter_->dec_weak_ref();
   1200d:	48 8b 40 08          	mov    0x8(%rax),%rax
   12011:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12015:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  weak_counter_ -= 1;  }
   12019:	48 83 c7 10          	add    $0x10,%rdi
   1201d:	be 01 00 00 00       	mov    $0x1,%esi
   12022:	e8 e9 7f ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   12027:	eb 00                	jmp    12029 <_ZN4ours3mem10VmRootAreaD2Ev+0x1a9>
                } else {
   12029:	eb 21                	jmp    1204c <_ZN4ours3mem10VmRootAreaD2Ev+0x1cc>
   1202b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
                    counter_->dec_strong_ref();
   12032:	48 8b 40 08          	mov    0x8(%rax),%rax
   12036:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1203a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        {  strong_counter_  -= 1;  }
   1203e:	48 83 c7 18          	add    $0x18,%rdi
   12042:	be 01 00 00 00       	mov    $0x1,%esi
   12047:	e8 c4 7f ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   1204c:	eb 00                	jmp    1204e <_ZN4ours3mem10VmRootAreaD2Ev+0x1ce>
   1204e:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   12055:	e8 76 09 00 00       	call   129d0 <_ZN5boost9intrusive8multisetIN4ours3mem6VmAreaEJNS0_11member_hookIS4_NS0_15set_member_hookIJEEEXadL_ZNS4_9set_hook_EEEEEEED2Ev>
   1205a:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   12061:	5d                   	pop    %rbp
   12062:	c3                   	ret
   12063:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1206a:	00 00 00 
   1206d:	0f 1f 00             	nopl   (%rax)

0000000000012070 <_ZNK4ours3mem6VmArea5faultEPNS0_7VmFaultE>:

        auto is_anony() const -> bool
        {  return static_cast<bool>(this->flags_ & VmaFlags::Anonymous);  }

        auto fault(VmFault *vmf) const -> void
        {  return handler_->fault(vmf);  }
   12070:	55                   	push   %rbp
   12071:	48 89 e5             	mov    %rsp,%rbp
   12074:	48 83 ec 10          	sub    $0x10,%rsp
   12078:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1207c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   12080:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12084:	48 8b 78 50          	mov    0x50(%rax),%rdi
   12088:	48 83 c7 60          	add    $0x60,%rdi
   1208c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   12090:	e8 ab 0c 00 00       	call   12d40 <_ZNKSt3__18functionIFvPN4ours3mem7VmFaultEEEclES4_>
   12095:	48 83 c4 10          	add    $0x10,%rsp
   12099:	5d                   	pop    %rbp
   1209a:	c3                   	ret
   1209b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000120a0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvEC2Ev>:
   {
   120a0:	55                   	push   %rbp
   120a1:	48 89 e5             	mov    %rsp,%rbp
   120a4:	48 83 ec 60          	sub    $0x60,%rsp
   120a8:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
   120ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   120b0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   120b4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   120b8:	48 8d 45 af          	lea    -0x51(%rbp),%rax
   120bc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   120c0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      BOOST_INTRUSIVE_FORCEINLINE explicit data_t(const value_traits &val_traits)
   120c4:	e8 57 00 00 00       	call   12120 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE14root_plus_sizeC2Ev>
   120c9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   120cd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   120d1:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   120d5:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   120d9:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   120e0:	00 
   120e1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   {  size_ = size; }
   120e5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   120e9:	48 89 11             	mov    %rdx,(%rcx)
   120ec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   120f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
   120f4:	48 83 c0 08          	add    $0x8,%rax
   120f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   120fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12100:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   12104:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12108:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1210c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      node_algorithms::init_header(this->get_root_node());
   12110:	e8 9b 18 ff ff       	call   39b0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE11init_headerEPNS0_9list_nodeIS3_EE>
   }
   12115:	48 83 c4 60          	add    $0x60,%rsp
   12119:	5d                   	pop    %rbp
   1211a:	c3                   	ret
   1211b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000012120 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE14root_plus_sizeC2Ev>:
   struct root_plus_size : public size_traits
   12120:	55                   	push   %rbp
   12121:	48 89 e5             	mov    %rsp,%rbp
   12124:	48 83 ec 10          	sub    $0x10,%rsp
   12128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1212c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   12130:	48 83 c7 08          	add    $0x8,%rdi
   12134:	e8 e7 18 ff ff       	call   3a20 <_ZN5boost9intrusive6detail21default_header_holderINS0_16list_node_traitsIPvEEEC2Ev>
   12139:	48 83 c4 10          	add    $0x10,%rsp
   1213d:	5d                   	pop    %rbp
   1213e:	c3                   	ret
   1213f:	90                   	nop

0000000000012140 <_ZN5boost9intrusive4listIN4ours3mem8VmAspaceEJNS0_11member_hookIS4_NS0_16list_member_hookIJEEEXadL_ZNS4_13managed_hook_EEEEEEED2Ev>:
class list
   12140:	55                   	push   %rbp
   12141:	48 89 e5             	mov    %rsp,%rbp
   12144:	48 83 ec 10          	sub    $0x10,%rsp
   12148:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1214c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   12150:	e8 0b 00 00 00       	call   12160 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvED2Ev>
   12155:	48 83 c4 10          	add    $0x10,%rsp
   12159:	5d                   	pop    %rbp
   1215a:	c3                   	ret
   1215b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000012160 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvED2Ev>:
   {
   12160:	55                   	push   %rbp
   12161:	48 89 e5             	mov    %rsp,%rbp
   12164:	48 83 ec 30          	sub    $0x30,%rsp
   12168:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1216c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   12170:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
         this->clear();
   12174:	e8 37 00 00 00       	call   121b0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE5clearEv>
   12179:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1217d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   12181:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
   12185:	48 83 c0 08          	add    $0x8,%rax
   12189:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1218d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12191:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   12195:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12199:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1219d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
         node_algorithms::init(this->get_root_node());
   121a1:	e8 2a 19 ff ff       	call   3ad0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE4initEPNS0_9list_nodeIS3_EE>
   }
   121a6:	48 83 c4 30          	add    $0x30,%rsp
   121aa:	5d                   	pop    %rbp
   121ab:	c3                   	ret
   121ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000121b0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE5clearEv>:
   {
   121b0:	55                   	push   %rbp
   121b1:	48 89 e5             	mov    %rsp,%rbp
   121b4:	48 83 ec 10          	sub    $0x10,%rsp
   121b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   121bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
         this->clear_and_dispose(detail::null_disposer());
   121c0:	e8 0b 00 00 00       	call   121d0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_>
   }
   121c5:	48 83 c4 10          	add    $0x10,%rsp
   121c9:	5d                   	pop    %rbp
   121ca:	c3                   	ret
   121cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000121d0 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_>:
   {
   121d0:	55                   	push   %rbp
   121d1:	48 89 e5             	mov    %rsp,%rbp
   121d4:	48 81 ec c0 02 00 00 	sub    $0x2c0,%rsp
   121db:	48 89 bd 70 fd ff ff 	mov    %rdi,-0x290(%rbp)
   121e2:	48 8b 85 70 fd ff ff 	mov    -0x290(%rbp),%rax
   121e9:	48 89 85 40 fd ff ff 	mov    %rax,-0x2c0(%rbp)
   121f0:	48 8d 8d 60 fd ff ff 	lea    -0x2a0(%rbp),%rcx
   121f7:	48 89 8d c0 fd ff ff 	mov    %rcx,-0x240(%rbp)
   121fe:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
   12205:	48 8b 8d b8 fd ff ff 	mov    -0x248(%rbp),%rcx
   1220c:	48 89 8d c8 fd ff ff 	mov    %rcx,-0x238(%rbp)
   12213:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
   { return data_.root_plus_size_.m_header.get_node(); }
   1221a:	48 83 c2 08          	add    $0x8,%rdx
   1221e:	48 89 95 d0 fd ff ff 	mov    %rdx,-0x230(%rbp)
   12225:	48 8b 95 d0 fd ff ff 	mov    -0x230(%rbp),%rdx
   1222c:	48 89 95 d8 fd ff ff 	mov    %rdx,-0x228(%rbp)
   12233:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
   1223a:	48 89 95 e0 fd ff ff 	mov    %rdx,-0x220(%rbp)
   12241:	48 8b 95 e0 fd ff ff 	mov    -0x220(%rbp),%rdx
   12248:	48 89 95 98 fe ff ff 	mov    %rdx,-0x168(%rbp)
   1224f:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
   12256:	48 8b 12             	mov    (%rdx),%rdx
   12259:	48 89 8d a8 fe ff ff 	mov    %rcx,-0x158(%rbp)
   12260:	48 8b 8d a8 fe ff ff 	mov    -0x158(%rbp),%rcx
   12267:	48 89 8d f0 fe ff ff 	mov    %rcx,-0x110(%rbp)
   1226e:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
   12275:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
   1227c:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
   12283:	48 89 8d 08 ff ff ff 	mov    %rcx,-0xf8(%rbp)
   1228a:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
   12291:	48 8d b5 60 fd ff ff 	lea    -0x2a0(%rbp),%rsi
   12298:	48 89 b5 d8 fe ff ff 	mov    %rsi,-0x128(%rbp)
   1229f:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
   122a6:	48 89 8d c8 fe ff ff 	mov    %rcx,-0x138(%rbp)
   122ad:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
   122b4:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
   122bb:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
   122c2:	48 89 8d 18 ff ff ff 	mov    %rcx,-0xe8(%rbp)
   122c9:	48 8d 8d c8 fe ff ff 	lea    -0x138(%rbp),%rcx
   122d0:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
   122d7:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
   122de:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
   122e5:	48 8b 12             	mov    (%rdx),%rdx
   122e8:	48 89 11             	mov    %rdx,(%rcx)
   122eb:	48 8d 8d 68 fd ff ff 	lea    -0x298(%rbp),%rcx
   122f2:	48 89 8d 00 fe ff ff 	mov    %rcx,-0x200(%rbp)
   122f9:	48 8d 8d 60 fd ff ff 	lea    -0x2a0(%rbp),%rcx
   12300:	48 89 8d f8 fd ff ff 	mov    %rcx,-0x208(%rbp)
   12307:	48 8b 8d 00 fe ff ff 	mov    -0x200(%rbp),%rcx
      :  members_(other.pointed_node(), other.get_value_traits())
   1230e:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
   12315:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
   1231c:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   { return members_.nodeptr_; }
   12323:	48 8b 12             	mov    (%rdx),%rdx
      :  members_(other.pointed_node(), other.get_value_traits())
   12326:	48 89 95 f0 fd ff ff 	mov    %rdx,-0x210(%rbp)
   1232d:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
   12334:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
   12338:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1233c:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
   12340:	48 c7 85 e8 fd ff ff 	movq   $0x0,-0x218(%rbp)
   12347:	00 00 00 00 
   1234b:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
   12352:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
   12359:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
   12360:	48 8d 8d e8 fd ff ff 	lea    -0x218(%rbp),%rcx
   12367:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
   1236e:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   12375:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
   1237c:	48 8b 12             	mov    (%rdx),%rdx
   1237f:	48 89 11             	mov    %rdx,(%rcx)
   12382:	48 8d 8d 50 fd ff ff 	lea    -0x2b0(%rbp),%rcx
   12389:	48 89 8d 30 fe ff ff 	mov    %rcx,-0x1d0(%rbp)
   12390:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
   12397:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
   1239e:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
   123a5:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
   123ac:	48 83 c1 08          	add    $0x8,%rcx
   123b0:	48 89 8d 40 fe ff ff 	mov    %rcx,-0x1c0(%rbp)
   123b7:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
   123be:	48 89 8d 48 fe ff ff 	mov    %rcx,-0x1b8(%rbp)
   123c5:	48 8b 8d 48 fe ff ff 	mov    -0x1b8(%rbp),%rcx
   123cc:	48 89 8d 50 fe ff ff 	mov    %rcx,-0x1b0(%rbp)
   123d3:	48 8b 8d 50 fe ff ff 	mov    -0x1b0(%rbp),%rcx
   123da:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
   123e1:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   123e8:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
   123ef:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   123f6:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   123fd:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   12404:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   1240b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   12412:	48 8d 95 50 fd ff ff 	lea    -0x2b0(%rbp),%rdx
   12419:	48 89 95 c0 fe ff ff 	mov    %rdx,-0x140(%rbp)
   12420:	48 89 8d b8 fe ff ff 	mov    %rcx,-0x148(%rbp)
   12427:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
   1242e:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
   12435:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   1243c:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
   12443:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   1244a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   12451:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   12458:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   1245f:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
   12466:	48 8b 09             	mov    (%rcx),%rcx
   12469:	48 89 08             	mov    %rcx,(%rax)
   1246c:	48 8d 85 58 fd ff ff 	lea    -0x2a8(%rbp),%rax
   12473:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
   1247a:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
   12481:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
   12488:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
   1248f:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
   12496:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
   1249d:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
   { return members_.nodeptr_; }
   124a4:	48 8b 09             	mov    (%rcx),%rcx
      :  members_(other.pointed_node(), other.get_value_traits())
   124a7:	48 89 8d 10 fe ff ff 	mov    %rcx,-0x1f0(%rbp)
   124ae:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
   124b5:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
   124b9:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   124bd:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   124c1:	48 c7 85 08 fe ff ff 	movq   $0x0,-0x1f8(%rbp)
   124c8:	00 00 00 00 
   124cc:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   124d3:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
   124da:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   124e1:	48 8d 85 08 fe ff ff 	lea    -0x1f8(%rbp),%rax
   124e8:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   124ef:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   124f6:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
   124fd:	48 8b 09             	mov    (%rcx),%rcx
   12500:	48 89 08             	mov    %rcx,(%rax)
   12503:	48 8d 85 68 fd ff ff 	lea    -0x298(%rbp),%rax
   1250a:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
   12511:	48 8d 85 58 fd ff ff 	lea    -0x2a8(%rbp),%rax
   12518:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
   {  return !(l == r); }
   1251f:	48 8b 8d 60 fe ff ff 	mov    -0x1a0(%rbp),%rcx
   12526:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
   1252d:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   12531:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   {  return l.pointed_node() == r.pointed_node();   }
   12535:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   12539:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1253d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   { return members_.nodeptr_; }
   12541:	48 8b 00             	mov    (%rax),%rax
   {  return l.pointed_node() == r.pointed_node();   }
   12544:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   12548:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   1254c:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   12550:	48 3b 01             	cmp    (%rcx),%rax
   12553:	0f 94 c0             	sete   %al
   {  return !(l == r); }
   12556:	34 ff                	xor    $0xff,%al
      while(it != itend){
   12558:	a8 01                	test   $0x1,%al
   1255a:	75 05                	jne    12561 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_+0x391>
   1255c:	e9 e7 00 00 00       	jmp    12648 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_+0x478>
   12561:	48 8d 85 68 fd ff ff 	lea    -0x298(%rbp),%rax
   12568:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
   1256f:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
   { return members_.nodeptr_; }
   12576:	48 8b 00             	mov    (%rax),%rax
         node_ptr to_erase(it.pointed_node());
   12579:	48 89 85 48 fd ff ff 	mov    %rax,-0x2b8(%rbp)
   12580:	48 8d 85 68 fd ff ff 	lea    -0x298(%rbp),%rax
   12587:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
   1258e:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
      node_ptr p = node_traits::get_next(members_.nodeptr_);
   12595:	48 8b 08             	mov    (%rax),%rcx
   12598:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
   1259f:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
   125a6:	48 8b 09             	mov    (%rcx),%rcx
   125a9:	48 89 8d 70 fe ff ff 	mov    %rcx,-0x190(%rbp)
      members_.nodeptr_ = p;
   125b0:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
   125b7:	48 89 08             	mov    %rcx,(%rax)
            node_algorithms::init(to_erase);
   125ba:	48 8b bd 48 fd ff ff 	mov    -0x2b8(%rbp),%rdi
   125c1:	e8 0a 15 ff ff       	call   3ad0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE4initEPNS0_9list_nodeIS3_EE>
   125c6:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
   125cd:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
         disposer(priv_value_traits().to_value_ptr(to_erase));
   125d4:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   125db:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
            (static_cast<Hook*>(boost::movelib::to_raw_pointer(n)), P));
   125e2:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
   125e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   125ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   125f1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   125f5:	48 c7 45 c8 08 01 00 	movq   $0x108,-0x38(%rbp)
   125fc:	00 
   125fd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   12601:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   12605:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   const Parent * const parent = 0;
   12609:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   12610:	00 
   const char *const member = static_cast<const char*>(static_cast<const void*>(&(parent->*ptr_to_member)));
   12611:	31 c9                	xor    %ecx,%ecx
   12613:	48 03 4d f8          	add    -0x8(%rbp),%rcx
   12617:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   return std::ptrdiff_t(member - static_cast<const char*>(static_cast<const void*>(parent)));
   1261b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
   1261f:	31 c9                	xor    %ecx,%ecx
   12621:	48 29 d1             	sub    %rdx,%rcx
   12624:	48 01 c8             	add    %rcx,%rax
   12627:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1262b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1262f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   12633:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   12637:	48 8d bd 7f fd ff ff 	lea    -0x281(%rbp),%rdi
   1263e:	e8 9d 00 00 00       	call   126e0 <_ZN5boost9intrusive6detail13null_disposerclIPN4ours3mem8VmAspaceEEEvT_>
      while(it != itend){
   12643:	e9 bb fe ff ff       	jmp    12503 <_ZN5boost9intrusive9list_implINS0_8mhtraitsIN4ours3mem8VmAspaceENS0_16list_member_hookIJEEEXadL_ZNS5_13managed_hook_EEEEEmLb1EvE17clear_and_disposeINS0_6detail13null_disposerEEEvT_+0x333>
   12648:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
   1264f:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
   12656:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
   { return data_.root_plus_size_.m_header.get_node(); }
   1265d:	48 83 c0 08          	add    $0x8,%rax
   12661:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
   12668:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
   1266f:	48 89 85 a8 fd ff ff 	mov    %rax,-0x258(%rbp)
   12676:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
   1267d:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
   12684:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
      node_algorithms::init_header(this->get_root_node());
   1268b:	e8 20 13 ff ff       	call   39b0 <_ZN5boost9intrusive24circular_list_algorithmsINS0_16list_node_traitsIPvEEE11init_headerEPNS0_9list_nodeIS3_EE>
   12690:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
   12697:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
   1269e:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
   126a5:	48 89 85 90 fd ff ff 	mov    %rax,-0x270(%rbp)
   126ac:	48 c7 85 88 fd ff ff 	movq   $0x0,-0x278(%rbp)
   126b3:	00 00 00 00 
   126b7:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
   126be:	48 8b 8d 88 fd ff ff 	mov    -0x278(%rbp),%rcx
   126c5:	48 89 08             	mov    %rcx,(%rax)
   }
   126c8:	48 81 c4 c0 02 00 00 	add    $0x2c0,%rsp
   126cf:	5d                   	pop    %rbp
   126d0:	c3                   	ret
   126d1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   126d8:	00 00 00 
   126db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000126e0 <_ZN5boost9intrusive6detail13null_disposerclIPN4ours3mem8VmAspaceEEEvT_>:
   126e0:	55                   	push   %rbp
   126e1:	48 89 e5             	mov    %rsp,%rbp
   126e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   126e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   126ec:	5d                   	pop    %rbp
   126ed:	c3                   	ret
   126ee:	66 90                	xchg   %ax,%ax

00000000000126f0 <_ZNSt3__113__atomic_baseIjLb1EEC2B8nn210000Ej>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __atomic_base(_Tp __d) _NOEXCEPT : __base(__d) {}
   126f0:	55                   	push   %rbp
   126f1:	48 89 e5             	mov    %rsp,%rbp
   126f4:	48 83 ec 10          	sub    $0x10,%rsp
   126f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   126fc:	89 75 f4             	mov    %esi,-0xc(%rbp)
   126ff:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   12703:	8b 75 f4             	mov    -0xc(%rbp),%esi
   12706:	e8 15 00 00 00       	call   12720 <_ZNSt3__113__atomic_baseIjLb0EEC2B8nn210000Ej>
   1270b:	48 83 c4 10          	add    $0x10,%rsp
   1270f:	5d                   	pop    %rbp
   12710:	c3                   	ret
   12711:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   12718:	00 00 00 
   1271b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000012720 <_ZNSt3__113__atomic_baseIjLb0EEC2B8nn210000Ej>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __atomic_base(_Tp __d) _NOEXCEPT : __a_(__d) {}
   12720:	55                   	push   %rbp
   12721:	48 89 e5             	mov    %rsp,%rbp
   12724:	48 83 ec 10          	sub    $0x10,%rsp
   12728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1272c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1272f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   12733:	8b 75 f4             	mov    -0xc(%rbp),%esi
   12736:	e8 85 d7 ff ff       	call   fec0 <_ZNSt3__117__cxx_atomic_implIjNS_22__cxx_atomic_base_implIjEEEC2B8nn210000Ej>
   1273b:	48 83 c4 10          	add    $0x10,%rsp
   1273f:	5d                   	pop    %rbp
   12740:	c3                   	ret
   12741:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   12748:	00 00 00 
   1274b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000012750 <_ZN5boost9intrusive13multiset_implINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvmLb1EvEC2Ev>:
   {}
   12750:	55                   	push   %rbp
   12751:	48 89 e5             	mov    %rsp,%rbp
   12754:	48 83 ec 10          	sub    $0x10,%rsp
   12758:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1275c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      :  tree_type()
   12760:	e8 0b 00 00 00       	call   12770 <_ZN5boost9intrusive11bstree_implINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvmLb1ELNS0_10algo_typesE5EvEC2Ev>
   {}
   12765:	48 83 c4 10          	add    $0x10,%rsp
   12769:	5d                   	pop    %rbp
   1276a:	c3                   	ret
   1276b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000012770 <_ZN5boost9intrusive11bstree_implINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvmLb1ELNS0_10algo_typesE5EvEC2Ev>:
   //! <b>Throws</b>: If value_traits::node_traits::node
   //!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)
   //!   or the copy constructor of the key_compare object throws. Basic guarantee.
   bstree_impl()
      :  data_type(key_compare(), value_traits())
   {}
   12770:	55                   	push   %rbp
   12771:	48 89 e5             	mov    %rsp,%rbp
   12774:	48 83 ec 60          	sub    $0x60,%rsp
   12778:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
   1277c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12780:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   12784:	48 8d 45 af          	lea    -0x51(%rbp),%rax
   12788:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1278c:	48 8d 45 ae          	lea    -0x52(%rbp),%rax
   12790:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   12794:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
      : base_type(comp, vtraits)
   12798:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1279c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127a0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   127a4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   127a8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   127ac:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   127b0:	48 89 7d a0          	mov    %rdi,-0x60(%rbp)
   {
   127b4:	48 83 c7 08          	add    $0x8,%rdi
      : base_type(comp, vtraits)
   127b8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   127bc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   127c0:	e8 2b 00 00 00       	call   127f0 <_ZN5boost9intrusive8bstbase2INS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvLNS0_10algo_typesE5EvEC2ERKNSt3__14lessIS5_EERKS8_>
   127c5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   127c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   127cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   127d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   127d5:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   127dc:	00 
   127dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   127e1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   127e5:	48 89 08             	mov    %rcx,(%rax)
   {}
   127e8:	48 83 c4 60          	add    $0x60,%rsp
   127ec:	5d                   	pop    %rbp
   127ed:	c3                   	ret
   127ee:	66 90                	xchg   %ax,%ax

00000000000127f0 <_ZN5boost9intrusive8bstbase2INS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvLNS0_10algo_typesE5EvEC2ERKNSt3__14lessIS5_EERKS8_>:
   {}
   127f0:	55                   	push   %rbp
   127f1:	48 89 e5             	mov    %rsp,%rbp
   127f4:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   127fb:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
   12802:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
   12809:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
   12810:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
      : detail::ebo_functor_holder<value_compare>(value_compare(comp)), treeheader_t(vtraits)
   12817:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   1281e:	48 8d 95 47 ff ff ff 	lea    -0xb9(%rbp),%rdx
   12825:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
   1282c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   12833:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   BOOST_INTRUSIVE_FORCEINLINE tree_value_compare()
      :  base_t()
   {}

   BOOST_INTRUSIVE_FORCEINLINE explicit tree_value_compare(const key_compare &kcomp)
      :  base_t(kcomp)
   1283a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   12841:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   12845:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   12849:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
   12850:	48 8d 85 47 ff ff ff 	lea    -0xb9(%rbp),%rax
   12857:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1285e:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   BOOST_INTRUSIVE_FORCEINLINE explicit ebo_functor_holder(const T &t)
      : T(t)
   {}

   BOOST_INTRUSIVE_FORCEINLINE explicit ebo_functor_holder(BOOST_RV_REF(T) t)
      : T(::boost::move(t))
   12865:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1286c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
         { return static_cast<typename ::boost::move_detail::remove_reference<T>::type &&>(t); }
   12870:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   12874:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
   12878:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1287c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   {}

   BOOST_INTRUSIVE_FORCEINLINE tree_value_compare (const tree_value_compare &x)
      :  base_t(x.base_t::get())
   12880:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   12884:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   12888:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1288c:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   12890:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   12894:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1289b:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
   1289f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   128a3:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   128a7:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
      : holder(vtraits)
   128ae:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   128b2:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   128b6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   128ba:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
      BOOST_INTRUSIVE_FORCEINLINE explicit holder_t(const ValueTraits &vtraits)
   128be:	e8 7d 00 00 00       	call   12940 <_ZN5boost9intrusive6detail21default_header_holderINS0_18rbtree_node_traitsIPvLb0EEEEC2Ev>
   128c3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   128ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   128ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   128d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   128d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   128de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   128e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   128e6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
      node_algorithms::init_header(this->header_ptr());
   128ea:	e8 11 00 00 00       	call   12900 <_ZN5boost9intrusive17rbtree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE11init_headerEPNS0_11rbtree_nodeIS3_EE>
   {}
   128ef:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
   128f6:	5d                   	pop    %rbp
   128f7:	c3                   	ret
   128f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   128ff:	00 

0000000000012900 <_ZN5boost9intrusive17rbtree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE11init_headerEPNS0_11rbtree_nodeIS3_EE>:
   static void init(node_ptr n) BOOST_NOEXCEPT;
   #endif   //#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED

   //! @copydoc ::boost::intrusive::bstree_algorithms::init_header(node_ptr)
   static void init_header(node_ptr header) BOOST_NOEXCEPT
   {
   12900:	55                   	push   %rbp
   12901:	48 89 e5             	mov    %rsp,%rbp
   12904:	48 83 ec 20          	sub    $0x20,%rsp
   12908:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      bstree_algo::init_header(header);
   1290c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   12910:	e8 5b 00 00 00       	call   12970 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE11init_headerEPNS0_11rbtree_nodeIS3_EE>
      NodeTraits::set_color(header, NodeTraits::red());
   12915:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12919:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1291d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

   BOOST_INTRUSIVE_FORCEINLINE static color get_color(node_ptr n)
   {  return n->color_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_color(node_ptr n, color c)
   {  n->color_ = c;  }
   12924:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   12927:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1292b:	89 48 18             	mov    %ecx,0x18(%rax)
   }
   1292e:	48 83 c4 20          	add    $0x20,%rsp
   12932:	5d                   	pop    %rbp
   12933:	c3                   	ret
   12934:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1293b:	00 00 00 
   1293e:	66 90                	xchg   %ax,%ax

0000000000012940 <_ZN5boost9intrusive6detail21default_header_holderINS0_18rbtree_node_traitsIPvLb0EEEEC2Ev>:
   12940:	55                   	push   %rbp
   12941:	48 89 e5             	mov    %rsp,%rbp
   12944:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1294c:	31 c9                	xor    %ecx,%ecx
   1294e:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   12955:	00 
   12956:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   1295d:	00 
   1295e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   12965:	00 
   12966:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1296d:	5d                   	pop    %rbp
   1296e:	c3                   	ret
   1296f:	90                   	nop

0000000000012970 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE11init_headerEPNS0_11rbtree_nodeIS3_EE>:
   //!
   //! <b>Throws</b>: Nothing.
   //!
   //! <b>Nodes</b>: If header is inserted in a tree, this function corrupts the tree.
   static void init_header(node_ptr header) BOOST_NOEXCEPT
   {
   12970:	55                   	push   %rbp
   12971:	48 89 e5             	mov    %rsp,%rbp
   12974:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
      NodeTraits::set_parent(header, node_ptr());
   12978:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1297c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   12980:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   12987:	00 
   {  n->parent_ = p;  }
   12988:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1298c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   12990:	48 89 08             	mov    %rcx,(%rax)
      NodeTraits::set_left(header, header);
   12993:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   12997:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1299b:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1299f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   {  n->left_ = l;  }
   129a3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   129a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129ab:	48 89 48 08          	mov    %rcx,0x8(%rax)
      NodeTraits::set_right(header, header);
   129af:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   129b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   129b7:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   129bb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   {  n->right_ = r;  }
   129bf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   129c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129c7:	48 89 48 10          	mov    %rcx,0x10(%rax)
   }
   129cb:	5d                   	pop    %rbp
   129cc:	c3                   	ret
   129cd:	0f 1f 00             	nopl   (%rax)

00000000000129d0 <_ZN5boost9intrusive8multisetIN4ours3mem6VmAreaEJNS0_11member_hookIS4_NS0_15set_member_hookIJEEEXadL_ZNS4_9set_hook_EEEEEEED2Ev>:
class multiset
   129d0:	55                   	push   %rbp
   129d1:	48 89 e5             	mov    %rsp,%rbp
   129d4:	48 83 ec 10          	sub    $0x10,%rsp
   129d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   129dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   129e0:	e8 0b 00 00 00       	call   129f0 <_ZN5boost9intrusive13multiset_implINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvmLb1EvED2Ev>
   129e5:	48 83 c4 10          	add    $0x10,%rsp
   129e9:	5d                   	pop    %rbp
   129ea:	c3                   	ret
   129eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000129f0 <_ZN5boost9intrusive13multiset_implINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvmLb1EvED2Ev>:
class multiset_impl
   129f0:	55                   	push   %rbp
   129f1:	48 89 e5             	mov    %rsp,%rbp
   129f4:	48 83 ec 10          	sub    $0x10,%rsp
   129f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   129fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   12a00:	e8 0b 00 00 00       	call   12a10 <_ZN5boost9intrusive11bstree_implINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvmLb1ELNS0_10algo_typesE5EvED2Ev>
   12a05:	48 83 c4 10          	add    $0x10,%rsp
   12a09:	5d                   	pop    %rbp
   12a0a:	c3                   	ret
   12a0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000012a10 <_ZN5boost9intrusive11bstree_implINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvmLb1ELNS0_10algo_typesE5EvED2Ev>:
class bstree_impl
   12a10:	55                   	push   %rbp
   12a11:	48 89 e5             	mov    %rsp,%rbp
   12a14:	48 83 ec 10          	sub    $0x10,%rsp
   12a18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12a1c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   12a20:	e8 0b 00 00 00       	call   12a30 <_ZN5boost9intrusive7bstbaseINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvLb1EmLNS0_10algo_typesE5EvED2Ev>
   12a25:	48 83 c4 10          	add    $0x10,%rsp
   12a29:	5d                   	pop    %rbp
   12a2a:	c3                   	ret
   12a2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000012a30 <_ZN5boost9intrusive7bstbaseINS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvLb1EmLNS0_10algo_typesE5EvED2Ev>:
   {
   12a30:	55                   	push   %rbp
   12a31:	48 89 e5             	mov    %rsp,%rbp
   12a34:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
   12a3b:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   12a3f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   12a43:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
            ( this->header_ptr()
   12a4a:	48 89 c1             	mov    %rax,%rcx
   12a4d:	48 83 c1 08          	add    $0x8,%rcx
   12a51:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   12a55:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   12a59:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   12a5d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   12a61:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   12a65:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   12a69:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   12a6d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
               (detail::null_disposer(), &this->get_value_traits()));
   12a71:	48 83 c0 08          	add    $0x8,%rax
   12a75:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   12a79:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   12a7d:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
   12a81:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   12a85:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   12a89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   12a8d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12a91:	48 8d 4d ef          	lea    -0x11(%rbp),%rcx
   12a95:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
                            , node_traits>::type   node_algorithms;
   static const bool safemode_or_autounlink =
      is_safe_autounlink<value_traits::link_mode>::value;

   BOOST_INTRUSIVE_FORCEINLINE node_disposer(F f, const ValueTraits *cont)
      :  base_t(f), traits_(cont)
   12a99:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   12a9d:	48 89 08             	mov    %rcx,(%rax)
   12aa0:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
         node_algorithms::clear_and_dispose
   12aa4:	e8 47 00 00 00       	call   12af0 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE17clear_and_disposeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_>
   12aa9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
         node_algorithms::init(this->header_ptr());
   12ab0:	48 83 c0 08          	add    $0x8,%rax
   12ab4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   12ab8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   12abc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   12ac0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   12ac4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   12ac8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12acc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   12ad0:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   12ad4:	e8 07 ea ff ff       	call   114e0 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE4initEPNS0_11rbtree_nodeIS3_EE>
   }
   12ad9:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
   12ae0:	5d                   	pop    %rbp
   12ae1:	c3                   	ret
   12ae2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   12ae9:	00 00 00 
   12aec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000012af0 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE17clear_and_disposeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_>:
   //!   number of elements of tree target tree when calling this function.
   //!
   //! <b>Throws</b>: Nothing.
   template<class Disposer>
   static void clear_and_dispose(node_ptr header, Disposer disposer) BOOST_NOEXCEPT
   {
   12af0:	55                   	push   %rbp
   12af1:	48 89 e5             	mov    %rsp,%rbp
   12af4:	48 83 ec 40          	sub    $0x40,%rsp
   12af8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   12afc:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   12b00:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
      node_ptr source_root = NodeTraits::get_parent(header);
   12b04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12b08:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   {  return n->parent_;  }
   12b0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b10:	48 8b 00             	mov    (%rax),%rax
   12b13:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if(!source_root)
   12b17:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   12b1c:	75 02                	jne    12b20 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE17clear_and_disposeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_+0x30>
         return;
   12b1e:	eb 2b                	jmp    12b4b <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE17clear_and_disposeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_+0x5b>
   12b20:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
      dispose_subtree(source_root, disposer);
   12b24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   12b28:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   12b2c:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   12b30:	e8 cb 01 00 00       	call   12d00 <_ZN5boost9intrusive6detail13node_disposerINS1_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS7_9set_hook_EEEEELNS0_10algo_typesE5EEC2ERKSC_>
   12b35:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   12b39:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   12b3d:	e8 1e 00 00 00       	call   12b60 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE15dispose_subtreeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_>
      init_header(header);
   12b42:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   12b46:	e8 25 fe ff ff       	call   12970 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE11init_headerEPNS0_11rbtree_nodeIS3_EE>
   }
   12b4b:	48 83 c4 40          	add    $0x40,%rsp
   12b4f:	5d                   	pop    %rbp
   12b50:	c3                   	ret
   12b51:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   12b58:	00 00 00 
   12b5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000012b60 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE15dispose_subtreeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_>:
      return target_sub_root;
   }

   template<class Disposer>
   static void dispose_subtree(node_ptr x, Disposer disposer) BOOST_NOEXCEPT
   {
   12b60:	55                   	push   %rbp
   12b61:	48 89 e5             	mov    %rsp,%rbp
   12b64:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   12b6b:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
   12b72:	48 89 bd 60 ff ff ff 	mov    %rdi,-0xa0(%rbp)
   12b79:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
      while (x){
   12b80:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
   12b87:	00 
   12b88:	0f 84 5c 01 00 00    	je     12cea <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE15dispose_subtreeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_+0x18a>
         node_ptr save(NodeTraits::get_left(x));
   12b8e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   12b95:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   {  return n->left_;  }
   12b99:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   12b9d:	48 8b 40 08          	mov    0x8(%rax),%rax
   12ba1:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
         if (save) {
   12ba8:	48 83 bd 50 ff ff ff 	cmpq   $0x0,-0xb0(%rbp)
   12baf:	00 
   12bb0:	74 67                	je     12c19 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE15dispose_subtreeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_+0xb9>
            // Right rotation
            NodeTraits::set_left(x, NodeTraits::get_right(save));
   12bb2:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
   12bb9:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   12bc0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   {  return n->right_;  }
   12bc4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   12bc8:	48 8b 40 10          	mov    0x10(%rax),%rax
   12bcc:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
   12bd3:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   {  n->left_ = l;  }
   12bda:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   12be1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   12be8:	48 89 48 08          	mov    %rcx,0x8(%rax)
            NodeTraits::set_right(save, x);
   12bec:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
   12bf3:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   12bfa:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
   12bfe:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   {  n->right_ = r;  }
   12c05:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
   12c0c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   12c10:	48 89 48 10          	mov    %rcx,0x10(%rax)
         }
   12c14:	e9 be 00 00 00       	jmp    12cd7 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE15dispose_subtreeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_+0x177>
         else {
            save = NodeTraits::get_right(x);
   12c19:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   12c20:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   {  return n->right_;  }
   12c24:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   12c28:	48 8b 40 10          	mov    0x10(%rax),%rax
   12c2c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
            init(x);
   12c33:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   12c3a:	e8 a1 e8 ff ff       	call   114e0 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE4initEPNS0_11rbtree_nodeIS3_EE>
   12c3f:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
            disposer(x);
   12c46:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   12c4d:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   12c51:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   12c55:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   12c59:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   {}

   BOOST_INTRUSIVE_FORCEINLINE void operator()(node_ptr p)
   {
      BOOST_IF_CONSTEXPR(safemode_or_autounlink)
         node_algorithms::init(p);
   12c60:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   12c64:	e8 77 e8 ff ff       	call   114e0 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE4initEPNS0_11rbtree_nodeIS3_EE>
   12c69:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   12c70:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   12c74:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
      base_t::get()(traits_->to_value_ptr(p));
   12c78:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   12c7c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   12c80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12c84:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   12c88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   12c8c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   12c90:	48 c7 45 c8 80 00 00 	movq   $0x80,-0x38(%rbp)
   12c97:	00 
   12c98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   12c9c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   12ca0:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   const Parent * const parent = 0;
   12ca4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   12cab:	00 
   const char *const member = static_cast<const char*>(static_cast<const void*>(&(parent->*ptr_to_member)));
   12cac:	31 c9                	xor    %ecx,%ecx
   12cae:	48 03 4d f8          	add    -0x8(%rbp),%rcx
   12cb2:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   return std::ptrdiff_t(member - static_cast<const char*>(static_cast<const void*>(parent)));
   12cb6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
   12cba:	31 c9                	xor    %ecx,%ecx
   12cbc:	48 29 d1             	sub    %rdx,%rcx
   12cbf:	48 01 c8             	add    %rcx,%rax
   12cc2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   12cc6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   12cca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   12cce:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   12cd2:	e8 59 00 00 00       	call   12d30 <_ZN5boost9intrusive6detail13null_disposerclIPN4ours3mem6VmAreaEEEvT_>
         }
         x = save;
   12cd7:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   12cde:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
      while (x){
   12ce5:	e9 96 fe ff ff       	jmp    12b80 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE15dispose_subtreeINS0_6detail13node_disposerINS7_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSD_9set_hook_EEEEELNS0_10algo_typesE5EEEEEvPNS0_11rbtree_nodeIS3_EET_+0x20>
      }
   }
   12cea:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
   12cf1:	5d                   	pop    %rbp
   12cf2:	c3                   	ret
   12cf3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   12cfa:	00 00 00 
   12cfd:	0f 1f 00             	nopl   (%rax)

0000000000012d00 <_ZN5boost9intrusive6detail13node_disposerINS1_13null_disposerENS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS7_9set_hook_EEEEELNS0_10algo_typesE5EEC2ERKSC_>:
struct node_disposer
   12d00:	55                   	push   %rbp
   12d01:	48 89 e5             	mov    %rsp,%rbp
   12d04:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   12d08:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   12d0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d10:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   12d14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12d18:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   12d1c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   12d20:	48 8b 09             	mov    (%rcx),%rcx
   12d23:	48 89 08             	mov    %rcx,(%rax)
   12d26:	5d                   	pop    %rbp
   12d27:	c3                   	ret
   12d28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   12d2f:	00 

0000000000012d30 <_ZN5boost9intrusive6detail13null_disposerclIPN4ours3mem6VmAreaEEEvT_>:
   12d30:	55                   	push   %rbp
   12d31:	48 89 e5             	mov    %rsp,%rbp
   12d34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12d38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   12d3c:	5d                   	pop    %rbp
   12d3d:	c3                   	ret
   12d3e:	66 90                	xchg   %ax,%ax

0000000000012d40 <_ZNKSt3__18functionIFvPN4ours3mem7VmFaultEEEclES4_>:
_Rp function<_Rp(_ArgTypes...)>::operator()(_ArgTypes... __arg) const {
   12d40:	55                   	push   %rbp
   12d41:	48 89 e5             	mov    %rsp,%rbp
   12d44:	48 83 ec 20          	sub    $0x20,%rsp
   12d48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12d4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   12d50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d54:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   12d58:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  return __f_(std::forward<_ArgTypes>(__arg)...);
   12d5c:	e8 6f 00 00 00       	call   12dd0 <_ZNSt3__17forwardB8nn210000IPN4ours3mem7VmFaultEEEOT_Ru20__remove_reference_tIS5_E>
   12d61:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   12d65:	48 89 c6             	mov    %rax,%rsi
   12d68:	e8 13 00 00 00       	call   12d80 <_ZNKSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEEclB8nn210000EOS5_>
   12d6d:	48 83 c4 20          	add    $0x20,%rsp
   12d71:	5d                   	pop    %rbp
   12d72:	c3                   	ret
   12d73:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   12d7a:	00 00 00 
   12d7d:	0f 1f 00             	nopl   (%rax)

0000000000012d80 <_ZNKSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEEclB8nn210000EOS5_>:
  _LIBCPP_HIDE_FROM_ABI _Rp operator()(_ArgTypes&&... __args) const {
   12d80:	55                   	push   %rbp
   12d81:	48 89 e5             	mov    %rsp,%rbp
   12d84:	48 83 ec 20          	sub    $0x20,%rsp
   12d88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12d8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   12d90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (__f_ == nullptr)
   12d98:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
   12d9d:	75 05                	jne    12da4 <_ZNKSt3__110__function12__value_funcIFvPN4ours3mem7VmFaultEEEclB8nn210000EOS5_+0x24>
      std::__throw_bad_function_call();
   12d9f:	e8 8c 7c ff ff       	call   aa30 <_ZNSt3__125__throw_bad_function_callB8nn210000Ev>
   12da4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    return (*__f_)(std::forward<_ArgTypes>(__args)...);
   12da8:	48 8b 40 20          	mov    0x20(%rax),%rax
   12dac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   12db0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   12db4:	e8 17 00 00 00       	call   12dd0 <_ZNSt3__17forwardB8nn210000IPN4ours3mem7VmFaultEEEOT_Ru20__remove_reference_tIS5_E>
   12db9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   12dbd:	48 89 c6             	mov    %rax,%rsi
   12dc0:	48 8b 07             	mov    (%rdi),%rax
   12dc3:	ff 50 30             	call   *0x30(%rax)
   12dc6:	48 83 c4 20          	add    $0x20,%rsp
   12dca:	5d                   	pop    %rbp
   12dcb:	c3                   	ret
   12dcc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000012dd0 <_ZNSt3__17forwardB8nn210000IPN4ours3mem7VmFaultEEEOT_Ru20__remove_reference_tIS5_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   12dd0:	55                   	push   %rbp
   12dd1:	48 89 e5             	mov    %rsp,%rbp
   12dd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   12dd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ddc:	5d                   	pop    %rbp
   12ddd:	c3                   	ret
   12dde:	66 90                	xchg   %ax,%ax

0000000000012de0 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EEC2ERKS6_>:
        {}
   12de0:	55                   	push   %rbp
   12de1:	48 89 e5             	mov    %rsp,%rbp
   12de4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12de8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   12dec:	5d                   	pop    %rbp
   12ded:	c3                   	ret
   12dee:	66 90                	xchg   %ax,%ax

0000000000012df0 <_ZN4ustl10RefCounterIN4ours3mem8VmAspaceENS_12NullDisposerENS_3mem9AllocatorIS3_EEmED2Ev>:
        {
   12df0:	55                   	push   %rbp
   12df1:	48 89 e5             	mov    %rsp,%rbp
   12df4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12df8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12dfc:	48 8d 0d 85 e6 01 00 	lea    0x1e685(%rip),%rcx        # 31488 <_ZTVN4ustl10RefCounterIN4ours3mem8VmAspaceENS_12NullDisposerENS_3mem9AllocatorIS3_EEmEE+0x10>
   12e03:	48 89 08             	mov    %rcx,(%rax)
        }
   12e06:	5d                   	pop    %rbp
   12e07:	c3                   	ret
   12e08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   12e0f:	00 

0000000000012e10 <_ZN4ustl10RefCounterIN4ours3mem8VmAspaceENS_12NullDisposerENS_3mem9AllocatorIS3_EEmED0Ev>:
        {
   12e10:	55                   	push   %rbp
   12e11:	48 89 e5             	mov    %rsp,%rbp
   12e14:	48 83 ec 10          	sub    $0x10,%rsp
   12e18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   12e1c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   12e20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12e24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e28:	48 8d 0d 59 e6 01 00 	lea    0x1e659(%rip),%rcx        # 31488 <_ZTVN4ustl10RefCounterIN4ours3mem8VmAspaceENS_12NullDisposerENS_3mem9AllocatorIS3_EEmEE+0x10>
   12e2f:	48 89 08             	mov    %rcx,(%rax)
   12e32:	be 20 00 00 00       	mov    $0x20,%esi
   12e37:	e8 54 63 00 00       	call   19190 <_ZdlPvm>
        }
   12e3c:	48 83 c4 10          	add    $0x10,%rsp
   12e40:	5d                   	pop    %rbp
   12e41:	c3                   	ret
   12e42:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   12e49:	00 00 00 
   12e4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000012e50 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE>:

namespace ours::mem {

    auto VmRootArea::create_subvma(VirtAddr base, usize size, usize align, MmuFlags flags, ustl::Rc<VmObject> *)
        -> ustl::Rc<VmArea>
    {
   12e50:	55                   	push   %rbp
   12e51:	48 89 e5             	mov    %rsp,%rbp
   12e54:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
   12e5b:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
   12e62:	48 89 f8             	mov    %rdi,%rax
   12e65:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   12e6c:	48 8b 45 10          	mov    0x10(%rbp),%rax
   12e70:	48 89 bd 50 ff ff ff 	mov    %rdi,-0xb0(%rbp)
   12e77:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
   12e7e:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
   12e85:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
   12e8c:	4c 89 85 30 ff ff ff 	mov    %r8,-0xd0(%rbp)
   12e93:	4c 89 8d 28 ff ff ff 	mov    %r9,-0xd8(%rbp)
   12e9a:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
        if (auto vma = create_subvma_inner(base, size, align, flags)) {
   12ea1:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
   12ea8:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
   12eaf:	4c 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%r8
   12eb6:	4c 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%r9
   12ebd:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
   12ec4:	e8 27 02 00 00       	call   130f0 <_ZN4ours3mem10VmRootArea19create_subvma_innerEmmmN4arch6paging8MmuFlagsE>
   12ec9:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
   12ed0:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   12ed7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
        {  return pointer_ == nullptr;  }
   12ede:	48 83 38 00          	cmpq   $0x0,(%rax)
   12ee2:	75 1d                	jne    12f01 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0xb1>
   12ee4:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
   12eeb:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   12ef2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
        {  return pointer_;  }
   12ef9:	48 8b 38             	mov    (%rax),%rdi
            vma->activate();
   12efc:	e8 ef dd ff ff       	call   10cf0 <_ZN4ours3mem6VmArea8activateEv>
   12f01:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
   12f08:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   12f0f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   12f16:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
            if (counter_) {
   12f1d:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   12f22:	0f 84 90 01 00 00    	je     130b8 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x268>
   12f28:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
                if (counter_->strong_count() == 1) {
   12f2f:	48 8b 40 08          	mov    0x8(%rax),%rax
   12f33:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   12f37:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
        {  return strong_counter_;  }
   12f3b:	48 83 c7 18          	add    $0x18,%rdi
   12f3f:	e8 ac 6e ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   12f44:	48 83 f8 01          	cmp    $0x1,%rax
   12f48:	0f 85 47 01 00 00    	jne    13095 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x245>
   12f4e:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
   12f55:	48 8b 08             	mov    (%rax),%rcx
   12f58:	48 8b 40 08          	mov    0x8(%rax),%rax
   12f5c:	48 8d 95 68 ff ff ff 	lea    -0x98(%rbp),%rdx
   12f63:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   12f67:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   12f6b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   12f6f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   12f73:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
            : pointer_(ptr),
   12f7a:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   12f7e:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   12f81:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   12f85:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   12f89:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   12f8e:	74 21                	je     12fb1 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x161>
   12f90:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
                counter_->enable_weak();
   12f97:	48 8b 40 08          	mov    0x8(%rax),%rax
   12f9b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   12f9f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
        {  weak_counter_  = 1;  }
   12fa3:	48 83 c7 10          	add    $0x10,%rdi
   12fa7:	be 01 00 00 00       	mov    $0x1,%esi
   12fac:	e8 1f 6f ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   12fb1:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
                    counter_->disposer()(pointer_);
   12fb8:	48 8b 40 08          	mov    0x8(%rax),%rax
   12fbc:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   12fc0:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
        {  return this->Base1::as_ref();  }
   12fc4:	48 83 c7 08          	add    $0x8,%rdi
   12fc8:	e8 f3 6f ff ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
   12fcd:	48 89 c7             	mov    %rax,%rdi
   12fd0:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   12fd7:	48 8b 30             	mov    (%rax),%rsi
   12fda:	31 c0                	xor    %eax,%eax
   12fdc:	e8 ff 6d ff ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
   12fe1:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   12fe8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   12fec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12ff0:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
            if (counter_) {
   12ff7:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   12ffc:	0f 84 91 00 00 00    	je     13093 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x243>
   13002:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
                if (counter_->weak_count() == 1) {
   13009:	48 8b 40 08          	mov    0x8(%rax),%rax
   1300d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   13011:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
        {  return weak_counter_;  }
   13015:	48 83 c7 10          	add    $0x10,%rdi
   13019:	e8 d2 6d ff ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   1301e:	48 83 f8 01          	cmp    $0x1,%rax
   13022:	75 4c                	jne    13070 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x220>
   13024:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
   1302b:	48 8b 40 08          	mov    0x8(%rax),%rax
   1302f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13033:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
        {  return this->Base2::as_ref();  }
   13037:	48 83 c7 09          	add    $0x9,%rdi
   1303b:	e8 10 90 ff ff       	call   c050 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem6VmAreaEEELb0EE6as_refEv>
   13040:	48 89 c1             	mov    %rax,%rcx
   13043:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
   1304a:	48 8b 00             	mov    (%rax),%rax
   1304d:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   13051:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   13055:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
   1305c:	00 
   1305d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   13061:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   13065:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   13069:	e8 b2 8f ff ff       	call   c020 <_ZN4ustl3mem9AllocatorIN4ours3mem6VmAreaEE10deallocateEPS4_m>
                } else {
   1306e:	eb 21                	jmp    13091 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x241>
   13070:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
                    counter_->dec_weak_ref();
   13077:	48 8b 40 08          	mov    0x8(%rax),%rax
   1307b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1307f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  weak_counter_ -= 1;  }
   13083:	48 83 c7 10          	add    $0x10,%rdi
   13087:	be 01 00 00 00       	mov    $0x1,%esi
   1308c:	e8 7f 6f ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   13091:	eb 00                	jmp    13093 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x243>
                } else {
   13093:	eb 21                	jmp    130b6 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x266>
   13095:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
                    counter_->dec_strong_ref();
   1309c:	48 8b 40 08          	mov    0x8(%rax),%rax
   130a0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   130a4:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        {  strong_counter_  -= 1;  }
   130a8:	48 83 c7 18          	add    $0x18,%rdi
   130ac:	be 01 00 00 00       	mov    $0x1,%esi
   130b1:	e8 5a 6f ff ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   130b6:	eb 00                	jmp    130b8 <_ZN4ours3mem10VmRootArea13create_subvmaEmmmN4arch6paging8MmuFlagsEPN4ustl2RcINS0_8VmObjectENS5_12NullDisposerENS5_3mem9AllocatorIS7_EEmEE+0x268>
   130b8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   130bf:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
   130c6:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
   130ca:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
   130d1:	00 
   130d2:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
            : pointer_(nullptr),
   130d6:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
              counter_(nullptr)
   130dd:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
   130e4:	00 
        }

        return nullptr;
   130e5:	48 81 c4 10 01 00 00 	add    $0x110,%rsp
   130ec:	5d                   	pop    %rbp
   130ed:	c3                   	ret
   130ee:	66 90                	xchg   %ax,%ax

00000000000130f0 <_ZN4ours3mem10VmRootArea19create_subvma_innerEmmmN4arch6paging8MmuFlagsE>:
        return std::addressof(*result);
    }

    auto VmRootArea::create_subvma_inner(VirtAddr base, usize size, usize align, MmuFlags flags)
        -> ustl::Rc<VmArea>
    {
   130f0:	55                   	push   %rbp
   130f1:	48 89 e5             	mov    %rsp,%rbp
   130f4:	48 89 f8             	mov    %rdi,%rax
   130f7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   130fb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   130ff:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   13103:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   13107:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
   1310b:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
   1310f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13113:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1311a:	00 
   1311b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
            : pointer_(nullptr),
   1311f:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
              counter_(nullptr)
   13126:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
   1312d:	00 
            // println("range {} is invalid.", range);
            // return nullptr;
        // }

        // range is legal, but maybe it has existed.
        return nullptr;
   1312e:	5d                   	pop    %rbp
   1312f:	c3                   	ret

0000000000013130 <_ZN4ours3mem10VmRootArea14destory_subvmaEmm>:
    {  return Status::Unimplemented;  }
   13130:	55                   	push   %rbp
   13131:	48 89 e5             	mov    %rsp,%rbp
   13134:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13138:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1313c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   13140:	b8 05 00 00 00       	mov    $0x5,%eax
   13145:	5d                   	pop    %rbp
   13146:	c3                   	ret
   13147:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1314e:	00 00 

0000000000013150 <_ZN4ours3mem10VmRootArea14reserve_subvmaEPKcmmN4arch6paging8MmuFlagsE>:
    {  return Status::Unimplemented;  }
   13150:	55                   	push   %rbp
   13151:	48 89 e5             	mov    %rsp,%rbp
   13154:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13158:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1315c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   13160:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   13164:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   13168:	b8 05 00 00 00       	mov    $0x5,%eax
   1316d:	5d                   	pop    %rbp
   1316e:	c3                   	ret
   1316f:	90                   	nop

0000000000013170 <_ZN4ours3mem10VmRootArea11find_subvmaEm>:
    {
   13170:	55                   	push   %rbp
   13171:	48 89 e5             	mov    %rsp,%rbp
   13174:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
   1317b:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
   13182:	48 89 f8             	mov    %rdi,%rax
   13185:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
   1318c:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
   13193:	48 89 b5 c0 fe ff ff 	mov    %rsi,-0x140(%rbp)
   1319a:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
   131a1:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
   131a8:	48 89 b5 88 fe ff ff 	mov    %rsi,-0x178(%rbp)
        auto const comp = [] (VirtAddr x, VmArea const &y)
   131af:	c6 85 b7 fe ff ff 00 	movb   $0x0,-0x149(%rbp)
        auto result = subvma_set_.upper_bound(virt_addr, comp);
   131b6:	48 83 c6 08          	add    $0x8,%rsi
   131ba:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
   131c1:	48 8d 95 b8 fe ff ff 	lea    -0x148(%rbp),%rdx
   131c8:	e8 63 02 00 00       	call   13430 <_ZN5boost9intrusive8bstbase2INS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvLNS0_10algo_typesE5EvE11upper_boundImZNS4_10VmRootArea11find_subvmaEmE3$_0EENS0_13tree_iteratorIS8_Lb0EEERKT_T0_>
   131cd:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
        if (result == subvma_set_.end()) {
   131d4:	48 83 c0 08          	add    $0x8,%rax
   131d8:	48 8d 8d 98 fe ff ff 	lea    -0x168(%rbp),%rcx
   131df:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
   131e6:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   131ed:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
   131f4:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
   131fb:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   13202:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   13209:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   13210:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   13217:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1321e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   13225:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   1322c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   13233:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   13237:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
   {  return detail::uncast(header);   }
   1323b:	e8 c0 05 00 00       	call   13800 <_ZN5boost9intrusive6detailL6uncastIPKNS0_11rbtree_nodeIPvEEEENS1_12uncast_typesIT_E17non_const_pointerERKS9_>
   13240:	48 89 c1             	mov    %rax,%rcx
   13243:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
   1324a:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   13251:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   13258:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   1325f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   13266:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   1326d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   13274:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   1327b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   13282:	48 8d 95 98 fe ff ff 	lea    -0x168(%rbp),%rdx
   13289:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
   13290:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
   13297:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   1329e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   132a5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   132a9:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
   132b0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   132b7:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
   132be:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   132c5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   132c9:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
   132d0:	48 8b 09             	mov    (%rcx),%rcx
   132d3:	48 89 08             	mov    %rcx,(%rax)
   132d6:	48 8d 85 a8 fe ff ff 	lea    -0x158(%rbp),%rax
   132dd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   132e4:	48 8d 85 98 fe ff ff 	lea    -0x168(%rbp),%rax
   132eb:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)

   BOOST_INTRUSIVE_FORCEINLINE bool operator! () const
   {  return !members_.nodeptr_;   }

   BOOST_INTRUSIVE_FORCEINLINE friend bool operator== (const tree_iterator& l, const tree_iterator& r)
   { return l.pointed_node() == r.pointed_node(); }
   132f2:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   132f9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   132fd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   { return members_.nodeptr_; }
   13301:	48 8b 00             	mov    (%rax),%rax
   { return l.pointed_node() == r.pointed_node(); }
   13304:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
   1330b:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
   1330f:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   13313:	48 3b 01             	cmp    (%rcx),%rax
   13316:	75 34                	jne    1334c <_ZN4ours3mem10VmRootArea11find_subvmaEm+0x1dc>
   13318:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
   1331f:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
   13326:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
   1332d:	00 00 00 00 
   13331:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
            : pointer_(nullptr),
   13338:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
              counter_(nullptr)
   1333f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   13346:	00 
            return nullptr;
   13347:	e9 cb 00 00 00       	jmp    13417 <_ZN4ours3mem10VmRootArea11find_subvmaEm+0x2a7>
   1334c:	48 8d 85 a8 fe ff ff 	lea    -0x158(%rbp),%rax
   13353:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   1335a:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   13361:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   13365:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   13369:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1336d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   tree_iterator<value_traits, false> unconst() const
   {  return tree_iterator<value_traits, false>(this->pointed_node(), this->get_value_traits());   }

   private:
   BOOST_INTRUSIVE_FORCEINLINE pointer operator_arrow(detail::false_) const
   { return ValueTraits::to_value_ptr(members_.nodeptr_); }
   13371:	48 8b 00             	mov    (%rax),%rax
   13374:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   13378:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1337c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   13380:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   13384:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   13388:	48 c7 45 c0 80 00 00 	movq   $0x80,-0x40(%rbp)
   1338f:	00 
   13390:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   13394:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   13398:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   const Parent * const parent = 0;
   1339c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   133a3:	00 
   const char *const member = static_cast<const char*>(static_cast<const void*>(&(parent->*ptr_to_member)));
   133a4:	31 c9                	xor    %ecx,%ecx
   133a6:	48 03 4d f0          	add    -0x10(%rbp),%rcx
   133aa:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   return std::ptrdiff_t(member - static_cast<const char*>(static_cast<const void*>(parent)));
   133ae:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
   133b2:	31 c9                	xor    %ecx,%ecx
   133b4:	48 29 d1             	sub    %rdx,%rcx
   133b7:	48 01 c8             	add    %rcx,%rax
   133ba:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   133be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   133c2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   133c6:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
        return std::addressof(*result);
   133ca:	e8 c1 04 00 00       	call   13890 <_ZNSt3__19addressofB8nn210000IN4ours3mem6VmAreaEEEPT_RS4_>
   133cf:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
   133d6:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
   133dd:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   133e4:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
            : pointer_(ptr),
   133eb:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
   133f2:	48 89 08             	mov    %rcx,(%rax)
              counter_()
   133f5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   133fc:	00 
            counter_->enable_strong();
   133fd:	48 8b 40 08          	mov    0x8(%rax),%rax
   13401:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13405:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  strong_counter_  = 1;  }
   13409:	48 83 c7 18          	add    $0x18,%rdi
   1340d:	be 01 00 00 00       	mov    $0x1,%esi
   13412:	e8 b9 6a ff ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   13417:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
    }
   1341e:	48 81 c4 90 01 00 00 	add    $0x190,%rsp
   13425:	5d                   	pop    %rbp
   13426:	c3                   	ret
   13427:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1342e:	00 00 

0000000000013430 <_ZN5boost9intrusive8bstbase2INS0_8mhtraitsIN4ours3mem6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS5_9set_hook_EEEEEvvLNS0_10algo_typesE5EvE11upper_boundImZNS4_10VmRootArea11find_subvmaEmE3$_0EENS0_13tree_iteratorIS8_Lb0EEERKT_T0_>:
   {
   13430:	55                   	push   %rbp
   13431:	48 89 e5             	mov    %rsp,%rbp
   13434:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
   1343b:	48 89 bd d8 fe ff ff 	mov    %rdi,-0x128(%rbp)
   13442:	48 89 f8             	mov    %rdi,%rax
   13445:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   1344c:	48 89 bd 10 ff ff ff 	mov    %rdi,-0xf0(%rbp)
   13453:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
   1345a:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
   13461:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
   13468:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
   1346f:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
   13476:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   1347d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   13484:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1348b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1348f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   13493:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   13497:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
         (this->header_ptr(), key, this->key_node_comp(comp)), this->priv_value_traits_ptr());
   1349b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   134a2:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
   134a9:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
   134b0:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
   134b7:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
   134be:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   134c2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   134c6:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
   134cd:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
   134d1:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
   134d5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   134d9:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   134dd:	48 8d 75 b7          	lea    -0x49(%rbp),%rsi
   134e1:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
   134e5:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      :  base_t(kcomp)
   134e9:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   134ed:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   134f1:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)

   BOOST_INTRUSIVE_FORCEINLINE base_t base() const
   {  return static_cast<const base_t&>(*this); }

   BOOST_INTRUSIVE_FORCEINLINE key_nodeptr_comp(KeyTypeKeyCompare kcomp, const ValueTraits *traits)
      :  base_t(kcomp), traits_(traits)
   134f5:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   134f9:	48 89 32             	mov    %rsi,(%rdx)
   134fc:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
   13503:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   1350a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   13511:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
      return upper_bound_loop(NodeTraits::get_parent(header), detail::uncast(header), key, comp);
   13518:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   1351f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   {  return n->parent_;  }
   13526:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1352d:	48 8b 00             	mov    (%rax),%rax
   13530:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
   13537:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
   1353e:	e8 bd 02 00 00       	call   13800 <_ZN5boost9intrusive6detailL6uncastIPKNS0_11rbtree_nodeIPvEEEENS1_12uncast_typesIT_E17non_const_pointerERKS9_>
   13543:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
   1354a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   13551:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
   13558:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
   1355f:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
   13566:	e8 b5 02 00 00       	call   13820 <_ZN5boost9intrusive6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINS4_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS8_9set_hook_EEEEENS_11move_detail8identityIS8_EEEC2ERKSF_>
   1356b:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
   13572:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
   13579:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
   13580:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   13587:	e8 94 00 00 00       	call   13620 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE16upper_bound_loopImNS0_6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINSA_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSE_9set_hook_EEEEENS_11move_detail8identityISE_EEEEEEPNS0_11rbtree_nodeIS3_EESO_SO_RKT_T0_>
   1358c:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
   13593:	48 8b bd d8 fe ff ff 	mov    -0x128(%rbp),%rdi
   1359a:	48 89 c2             	mov    %rax,%rdx
   1359d:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   135a4:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
   135ab:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
   135b2:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
   135b6:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   135ba:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   135be:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   135c2:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   135c6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   135ca:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
   135d1:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
   135d8:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
   135df:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   135e6:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   135ea:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
   135f1:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   135f5:	48 8d 8d 58 ff ff ff 	lea    -0xa8(%rbp),%rcx
   135fc:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   13600:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   13604:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   13608:	48 8b 12             	mov    (%rdx),%rdx
   1360b:	48 89 11             	mov    %rdx,(%rcx)
      return iterator(node_algorithms::upper_bound
   1360e:	48 81 c4 50 01 00 00 	add    $0x150,%rsp
   13615:	5d                   	pop    %rbp
   13616:	c3                   	ret
   13617:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1361e:	00 00 

0000000000013620 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE16upper_bound_loopImNS0_6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINSA_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSE_9set_hook_EEEEENS_11move_detail8identityISE_EEEEEEPNS0_11rbtree_nodeIS3_EESO_SO_RKT_T0_>:
   }

   template<class KeyType, class KeyNodePtrCompare>
   static node_ptr upper_bound_loop
      (node_ptr x, node_ptr y, const KeyType &key, KeyNodePtrCompare comp)
   {
   13620:	55                   	push   %rbp
   13621:	48 89 e5             	mov    %rsp,%rbp
   13624:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
   1362b:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
   13632:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
   13639:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
   13640:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
   13647:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
      while(x){
   1364e:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)
   13655:	00 
   13656:	0f 84 87 01 00 00    	je     137e3 <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE16upper_bound_loopImNS0_6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINSA_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSE_9set_hook_EEEEENS_11move_detail8identityISE_EEEEEEPNS0_11rbtree_nodeIS3_EESO_SO_RKT_T0_+0x1c3>
   1365c:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
         if(comp(key, x)){
   13663:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   1366a:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
   13671:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   13678:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
   1367f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   13686:	48 c7 85 28 ff ff ff 	movq   $0x0,-0xd8(%rbp)
   1368d:	00 00 00 00 
   13691:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   13698:	48 8d 8d 27 ff ff ff 	lea    -0xd9(%rbp),%rcx
   1369f:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
   136a6:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   136ad:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   136b4:	48 8d 8d 27 ff ff ff 	lea    -0xd9(%rbp),%rcx
   136bb:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   136bf:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   136c3:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
      :  base_t(x.base_t::get())
   136c7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   136cb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   136cf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   136d3:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   136d7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)

   //pred(key, pnode)
   template<class T1, class T2>
   BOOST_INTRUSIVE_FORCEINLINE bool operator()
      (const T1 &t1, const T2 &t2, typename enable_if_c< !is_same_or_nodeptr_convertible<T1>::value && is_same_or_nodeptr_convertible<T2>::value, sfinae_type* >::type = 0) const
   {  return base()(t1, *traits_->to_value_ptr(t2));  }
   136db:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
   136e2:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   136e9:	48 8b 00             	mov    (%rax),%rax
   136ec:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   136f0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   136f4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   136f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   136fc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   13700:	48 c7 45 c8 80 00 00 	movq   $0x80,-0x38(%rbp)
   13707:	00 
   13708:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1370c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   13710:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   const Parent * const parent = 0;
   13714:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1371b:	00 
   const char *const member = static_cast<const char*>(static_cast<const void*>(&(parent->*ptr_to_member)));
   1371c:	31 d2                	xor    %edx,%edx
   1371e:	48 03 55 f8          	add    -0x8(%rbp),%rdx
   13722:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   return std::ptrdiff_t(member - static_cast<const char*>(static_cast<const void*>(parent)));
   13726:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
            static_cast<char*>(static_cast<void*>(member)) - offset_from_pointer_to_member(ptr_to_member)
   1372a:	31 d2                	xor    %edx,%edx
   1372c:	48 29 f2             	sub    %rsi,%rdx
   1372f:	48 01 d0             	add    %rdx,%rax
   13732:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   13736:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1373a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1373e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13742:	48 8d 95 27 ff ff ff 	lea    -0xd9(%rbp),%rdx
   13749:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
   1374d:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
   13754:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1375b:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   13762:	00 00 00 00 
   13766:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1376a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1376e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   {  return this->key_comp()(key1, nonkey2);  }

   template<class U>
   BOOST_INTRUSIVE_FORCEINLINE Ret operator()(const U &nonkey1, const key_type &key2
                                              , typename disable_if_smartref_to<U, ValuePtr>::type* = 0) const
   {  return this->key_comp()(nonkey1, key2);  }
   13772:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   13779:	48 8b 30             	mov    (%rax),%rsi
   1377c:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   13783:	e8 d8 00 00 00       	call   13860 <_ZZN4ours3mem10VmRootArea11find_subvmaEmENK3$_0clEmRKNS0_6VmAreaE>
   13788:	a8 01                	test   $0x1,%al
   1378a:	75 02                	jne    1378e <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE16upper_bound_loopImNS0_6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINSA_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSE_9set_hook_EEEEENS_11move_detail8identityISE_EEEEEEPNS0_11rbtree_nodeIS3_EESO_SO_RKT_T0_+0x16e>
   1378c:	eb 30                	jmp    137be <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE16upper_bound_loopImNS0_6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINSA_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSE_9set_hook_EEEEENS_11move_detail8identityISE_EEEEEEPNS0_11rbtree_nodeIS3_EESO_SO_RKT_T0_+0x19e>
            y = x;
   1378e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   13795:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
            x = NodeTraits::get_left(x);
   1379c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   137a3:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   {  return n->left_;  }
   137aa:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   137b1:	48 8b 40 08          	mov    0x8(%rax),%rax
   137b5:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
         }
   137bc:	eb 20                	jmp    137de <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE16upper_bound_loopImNS0_6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINSA_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSE_9set_hook_EEEEENS_11move_detail8identityISE_EEEEEEPNS0_11rbtree_nodeIS3_EESO_SO_RKT_T0_+0x1be>
         else{
            x = NodeTraits::get_right(x);
   137be:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   137c5:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   {  return n->right_;  }
   137cc:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   137d3:	48 8b 40 10          	mov    0x10(%rax),%rax
   137d7:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
      while(x){
   137de:	e9 6b fe ff ff       	jmp    1364e <_ZN5boost9intrusive17bstree_algorithmsINS0_18rbtree_node_traitsIPvLb0EEEE16upper_bound_loopImNS0_6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINSA_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNSE_9set_hook_EEEEENS_11move_detail8identityISE_EEEEEEPNS0_11rbtree_nodeIS3_EESO_SO_RKT_T0_+0x2e>
         }
      }
      return y;
   137e3:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   137ea:	48 81 c4 10 01 00 00 	add    $0x110,%rsp
   137f1:	5d                   	pop    %rbp
   137f2:	c3                   	ret
   137f3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   137fa:	84 00 00 00 00 00 

0000000000013800 <_ZN5boost9intrusive6detailL6uncastIPKNS0_11rbtree_nodeIPvEEEENS1_12uncast_typesIT_E17non_const_pointerERKS9_>:
};

template<class ConstNodePtr>
static typename uncast_types<ConstNodePtr>::non_const_pointer
   uncast(const ConstNodePtr & ptr)
{
   13800:	55                   	push   %rbp
   13801:	48 89 e5             	mov    %rsp,%rbp
   13804:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   return uncast_types<ConstNodePtr>::non_const_traits::const_cast_from(ptr);
   13808:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1380c:	48 8b 00             	mov    (%rax),%rax
   1380f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

   //! <b>Returns</b>: const_cast<pointer>(uptr)
   //!
   template<class U>
   BOOST_INTRUSIVE_FORCEINLINE static pointer const_cast_from(U *uptr) BOOST_NOEXCEPT
   {  return const_cast<pointer>(uptr);  }
   13813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13817:	5d                   	pop    %rbp
   13818:	c3                   	ret
   13819:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000013820 <_ZN5boost9intrusive6detail16key_nodeptr_compIZN4ours3mem10VmRootArea11find_subvmaEmE3$_0NS0_8mhtraitsINS4_6VmAreaENS0_15set_member_hookIJEEEXadL_ZNS8_9set_hook_EEEEENS_11move_detail8identityIS8_EEEC2ERKSF_>:
struct key_nodeptr_comp
   13820:	55                   	push   %rbp
   13821:	48 89 e5             	mov    %rsp,%rbp
   13824:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   13828:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   1382c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   13830:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   13834:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   13838:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   1383c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
      :  base_t(x.base_t::get())
   13840:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   13844:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   13848:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1384c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   13850:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   13854:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   13858:	48 8b 09             	mov    (%rcx),%rcx
   1385b:	48 89 08             	mov    %rcx,(%rax)
   1385e:	5d                   	pop    %rbp
   1385f:	c3                   	ret

0000000000013860 <_ZZN4ours3mem10VmRootArea11find_subvmaEmENK3$_0clEmRKNS0_6VmAreaE>:
        {  return x < y.base_;  };
   13860:	55                   	push   %rbp
   13861:	48 89 e5             	mov    %rsp,%rbp
   13864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13868:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1386c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   13870:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13874:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   13878:	48 3b 41 30          	cmp    0x30(%rcx),%rax
   1387c:	0f 92 c0             	setb   %al
   1387f:	24 01                	and    $0x1,%al
   13881:	5d                   	pop    %rbp
   13882:	c3                   	ret
   13883:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1388a:	00 00 00 
   1388d:	0f 1f 00             	nopl   (%rax)

0000000000013890 <_ZNSt3__19addressofB8nn210000IN4ours3mem6VmAreaEEEPT_RS4_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
   13890:	55                   	push   %rbp
   13891:	48 89 e5             	mov    %rsp,%rbp
   13894:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
   13898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1389c:	5d                   	pop    %rbp
   1389d:	c3                   	ret
   1389e:	66 90                	xchg   %ax,%ax

00000000000138a0 <_ZnwmmN4ours3mem5gafns3GafE>:

template <int NumBytes>
using ObjectCache = ktl::ObjectCache<u8, PageAllocator, NumBytes>;

auto operator new(usize size, usize align, ours::mem::Gaf gaf) CXX11_NOEXCEPT -> void *
{ ours::panic(__func__); }
   138a0:	55                   	push   %rbp
   138a1:	48 89 e5             	mov    %rsp,%rbp
   138a4:	48 83 ec 30          	sub    $0x30,%rsp
   138a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   138ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   138b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   138b4:	48 8d 35 57 b7 01 00 	lea    0x1b757(%rip),%rsi        # 2f012 <.L__func__._Znwm>
   138bb:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   138bf:	e8 bc f9 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   138c4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   138c8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   138cc:	e8 5f f9 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   138d1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   138d8:	0f 1f 84 00 00 00 00 
   138df:	00 

00000000000138e0 <_ZdlPv>:

auto operator delete(void *ptr) CXX11_NOEXCEPT -> void
{}
   138e0:	55                   	push   %rbp
   138e1:	48 89 e5             	mov    %rsp,%rbp
   138e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   138e8:	5d                   	pop    %rbp
   138e9:	c3                   	ret
   138ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000138f0 <_ZdaPv>:

auto operator delete[](void *ptr) CXX11_NOEXCEPT -> void
   138f0:	55                   	push   %rbp
   138f1:	48 89 e5             	mov    %rsp,%rbp
   138f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   138f8:	5d                   	pop    %rbp
   138f9:	c3                   	ret
   138fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013900 <_ZN4ours4task6Thread5spawnEPKcPFvvE>:
#include <ours/task/thread.hpp>

namespace ours::task {
    auto Thread::spawn(char const *name, ThreadStartEntry entry) -> Self *
    {  return 0;  }
   13900:	55                   	push   %rbp
   13901:	48 89 e5             	mov    %rsp,%rbp
   13904:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13908:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1390c:	31 c0                	xor    %eax,%eax
   1390e:	5d                   	pop    %rbp
   1390f:	c3                   	ret

0000000000013910 <_ZN4ours4task6Thread6resumeEv>:

    auto Thread::resume() -> void
    {}
   13910:	55                   	push   %rbp
   13911:	48 89 e5             	mov    %rsp,%rbp
   13914:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13918:	5d                   	pop    %rbp
   13919:	c3                   	ret
   1391a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013920 <_ZN4ours4task6Thread6detachEv>:

    auto Thread::detach() -> void
    {}
   13920:	55                   	push   %rbp
   13921:	48 89 e5             	mov    %rsp,%rbp
   13924:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13928:	5d                   	pop    %rbp
   13929:	c3                   	ret
   1392a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013930 <_ZN4ours4task6Thread7Current7preemptEv>:

    auto Thread::Current::preempt() -> void {
   13930:	55                   	push   %rbp
   13931:	48 89 e5             	mov    %rsp,%rbp
    }
   13934:	5d                   	pop    %rbp
   13935:	c3                   	ret
   13936:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1393d:	00 00 00 

0000000000013940 <_ZN4oursL18platform_init_acpiEm>:
            return ustl::err(Status::InternalError);
        }
    };

    FORCE_USED
    static auto platform_init_acpi(PhysAddr rsdp) -> void {
   13940:	55                   	push   %rbp
   13941:	48 89 e5             	mov    %rsp,%rbp
   13944:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   1394b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
        DEBUG_ASSERT(!g_acpi_parser, "Duplicated calls");
   1394f:	48 8b 05 42 51 02 00 	mov    0x25142(%rip),%rax        # 38a98 <_ZN4ours13g_acpi_parserE>
   13956:	48 83 f8 00          	cmp    $0x0,%rax
   1395a:	74 1d                	je     13979 <_ZN4oursL18platform_init_acpiEm+0x39>
   1395c:	48 8d 35 bc b6 01 00 	lea    0x1b6bc(%rip),%rsi        # 2f01f <.L.str>
   13963:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
   13967:	e8 14 f9 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   1396c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   13970:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   13974:	e8 b7 f8 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
        PhysToVirt p2v{};
   13979:	31 c0                	xor    %eax,%eax
   1397b:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
   13982:	00 
   13983:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
   13987:	e8 e4 00 00 00       	call   13a70 <_ZN4ours10PhysToVirtC2Ev>
        if (auto acpi_parser = acpi::AcpiParser::from_rsdp(&p2v, rsdp)) {
   1398c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   13990:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
   13997:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
   1399b:	e8 f0 06 00 00       	call   14090 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm>
   139a0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   139a7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   139ab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   139af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   139b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   139b7:	48 83 c0 38          	add    $0x38,%rax
   139bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   139bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        {  return (static_cast<u16>(status_) & static_cast<u16>(Status::HaveValue)) != 0;  }
   139c3:	0f b7 00             	movzwl (%rax),%eax
   139c6:	83 e0 01             	and    $0x1,%eax
   139c9:	83 f8 00             	cmp    $0x0,%eax
   139cc:	74 60                	je     13a2e <_ZN4oursL18platform_init_acpiEm+0xee>
   139ce:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   139d5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   139d9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   139dd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    { return static_cast<typename traits::RemoveRefT<T> &&>(lr); }
   139e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   139e5:	48 8d 0d b4 50 02 00 	lea    0x250b4(%rip),%rcx        # 38aa0 <_ZN4oursL13s_acpi_parserE>
   139ec:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
   139f3:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   139f7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   139fb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   139ff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   13a03:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    template <typename T, int Alignment = alignof(T)>
    union LazyInit {
        template <typename... Args> 
        USTL_FORCEINLINE USTL_CONSTEXPR
        auto init(Args&&... args) -> T *
        {  return new (data()) T(ustl::forward<Args>(args)...);  }
   13a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13a0b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    { return static_cast<T &&>(lr); }
   13a0f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   13a13:	e8 28 03 00 00       	call   13d40 <_ZN4acpi10AcpiParserC2EOS0_>
   13a18:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   13a1f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   13a23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
            s_acpi_parser.init(ustl::move(acpi_parser.unwrap()));
            g_acpi_parser = s_acpi_parser.data();
   13a27:	48 89 05 6a 50 02 00 	mov    %rax,0x2506a(%rip)        # 38a98 <_ZN4ours13g_acpi_parserE>
   13a2e:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
        if (auto acpi_parser = acpi::AcpiParser::from_rsdp(&p2v, rsdp)) {
   13a35:	e8 66 00 00 00       	call   13aa0 <_ZN4ustl6ResultIN4acpi10AcpiParserEN4ours6StatusEvED2Ev>
        }
    }
   13a3a:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
   13a41:	5d                   	pop    %rbp
   13a42:	c3                   	ret
   13a43:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   13a4a:	84 00 00 00 00 00 

0000000000013a50 <_ZN4oursL18platform_init_acpiEv>:

    FORCE_USED
    static auto platform_init_acpi() -> void {
   13a50:	55                   	push   %rbp
   13a51:	48 89 e5             	mov    %rsp,%rbp
    FORCE_INLINE CXX11_CONSTEXPR
    auto global_handoff() -> phys::Handoff & {
        INIT_DATA
        extern phys::Handoff *g_phys_handoff;

        return *g_phys_handoff;
   13a54:	48 8d 05 55 00 02 00 	lea    0x20055(%rip),%rax        # 33ab0 <_ZN4ours14g_phys_handoffE>
   13a5b:	48 8b 00             	mov    (%rax),%rax
        platform_init_acpi(global_handoff().acpi_rsdp);
   13a5e:	48 8b 78 10          	mov    0x10(%rax),%rdi
   13a62:	e8 d9 fe ff ff       	call   13940 <_ZN4oursL18platform_init_acpiEm>
    }
   13a67:	5d                   	pop    %rbp
   13a68:	c3                   	ret
   13a69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000013a70 <_ZN4ours10PhysToVirtC2Ev>:
    struct PhysToVirt: public acpi::IPhysToVirt {
   13a70:	55                   	push   %rbp
   13a71:	48 89 e5             	mov    %rsp,%rbp
   13a74:	48 83 ec 10          	sub    $0x10,%rsp
   13a78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13a7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13a80:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13a84:	e8 37 00 00 00       	call   13ac0 <_ZN4acpi11IPhysToVirtC2Ev>
   13a89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13a8d:	48 8d 0d 14 da 01 00 	lea    0x1da14(%rip),%rcx        # 314a8 <_ZTVN4ours10PhysToVirtE+0x10>
   13a94:	48 89 08             	mov    %rcx,(%rax)
   13a97:	48 83 c4 10          	add    $0x10,%rsp
   13a9b:	5d                   	pop    %rbp
   13a9c:	c3                   	ret
   13a9d:	0f 1f 00             	nopl   (%rax)

0000000000013aa0 <_ZN4ustl6ResultIN4acpi10AcpiParserEN4ours6StatusEvED2Ev>:
    class Result
   13aa0:	55                   	push   %rbp
   13aa1:	48 89 e5             	mov    %rsp,%rbp
   13aa4:	48 83 ec 10          	sub    $0x10,%rsp
   13aa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13aac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13ab0:	e8 4b 03 00 00       	call   13e00 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEED2Ev>
   13ab5:	48 83 c4 10          	add    $0x10,%rsp
   13ab9:	5d                   	pop    %rbp
   13aba:	c3                   	ret
   13abb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000013ac0 <_ZN4acpi11IPhysToVirtC2Ev>:
                return ustl::ok<void const *>(ptr);
   13ac0:	55                   	push   %rbp
   13ac1:	48 89 e5             	mov    %rsp,%rbp
   13ac4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13ac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13acc:	48 8d 0d fd d9 01 00 	lea    0x1d9fd(%rip),%rcx        # 314d0 <_ZTVN4acpi11IPhysToVirtE+0x10>
   13ad3:	48 89 08             	mov    %rcx,(%rax)
   13ad6:	5d                   	pop    %rbp
   13ad7:	c3                   	ret
   13ad8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   13adf:	00 

0000000000013ae0 <_ZN4ours10PhysToVirtD2Ev>:
        virtual ~PhysToVirt() = default;
   13ae0:	55                   	push   %rbp
   13ae1:	48 89 e5             	mov    %rsp,%rbp
   13ae4:	48 83 ec 10          	sub    $0x10,%rsp
   13ae8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13aec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13af0:	e8 8b 01 00 00       	call   13c80 <_ZN4acpi11IPhysToVirtD2Ev>
   13af5:	48 83 c4 10          	add    $0x10,%rsp
   13af9:	5d                   	pop    %rbp
   13afa:	c3                   	ret
   13afb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000013b00 <_ZN4ours10PhysToVirtD0Ev>:
   13b00:	55                   	push   %rbp
   13b01:	48 89 e5             	mov    %rsp,%rbp
   13b04:	48 83 ec 10          	sub    $0x10,%rsp
   13b08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13b0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13b10:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13b14:	e8 c7 ff ff ff       	call   13ae0 <_ZN4ours10PhysToVirtD2Ev>
   13b19:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   13b1d:	be 08 00 00 00       	mov    $0x8,%esi
   13b22:	e8 69 56 00 00       	call   19190 <_ZdlPvm>
   13b27:	48 83 c4 10          	add    $0x10,%rsp
   13b2b:	5d                   	pop    %rbp
   13b2c:	c3                   	ret
   13b2d:	0f 1f 00             	nopl   (%rax)

0000000000013b30 <_ZN4ours10PhysToVirt12phys_to_virtEmm>:
        auto phys_to_virt(PhysAddr addr, usize size) -> ktl::Result<ai_virt void const *> override {
   13b30:	55                   	push   %rbp
   13b31:	48 89 e5             	mov    %rsp,%rbp
   13b34:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   13b3b:	48 89 bd 40 ff ff ff 	mov    %rdi,-0xc0(%rbp)
   13b42:	48 89 f8             	mov    %rdi,%rax
   13b45:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   13b4c:	48 89 7d 80          	mov    %rdi,-0x80(%rbp)
   13b50:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
   13b57:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
   13b5e:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
            if (auto ptr = mem::PhysMap::phys_to_virt<void>(addr)) {
   13b65:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   13b6c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
            return reinterpret_cast<U *>(PhysMap::phys_to_virt(phys_addr));
   13b70:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   13b74:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
   13b78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   13b7c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   13b80:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
   13b87:	00 00 00 
                   reinterpret_cast<PhysAddr>(phys_addr) - kPhysBase < kSize;
   13b8a:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
   13b8e:	73 14                	jae    13ba4 <_ZN4ours10PhysToVirt12phys_to_virtEmm+0x74>
                return VirtAddr(kVirtBase + (phys_addr - kPhysBase));
   13b90:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
   13b97:	ff ff ff 
   13b9a:	48 03 45 c8          	add    -0x38(%rbp),%rax
   13b9e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   13ba2:	eb 08                	jmp    13bac <_ZN4ours10PhysToVirt12phys_to_virtEmm+0x7c>
            return VirtAddr();
   13ba4:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   13bab:	00 
        }
   13bac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   13bb0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   13bb7:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
   13bbe:	00 
   13bbf:	74 58                	je     13c19 <_ZN4ours10PhysToVirt12phys_to_virtEmm+0xe9>
                return ustl::ok<void const *>(ptr);
   13bc1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   13bc8:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   13bcc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   13bd0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13bd4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   13bd8:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
   13bdc:	e8 bf 00 00 00       	call   13ca0 <_ZN4ustl2OkIPKvEC2IJS2_EEEDpOT_>
   13be1:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   13be8:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   13bec:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
   13bf3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   13bf7:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
   13bfe:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   13c02:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
   13c06:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   13c0a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   13c0e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   13c12:	e8 b9 00 00 00       	call   13cd0 <_ZN4ustl6result14StorageTrivialIPKvN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
   13c17:	eb 50                	jmp    13c69 <_ZN4ours10PhysToVirt12phys_to_virtEmm+0x139>
   13c19:	c7 45 b0 09 00 00 00 	movl   $0x9,-0x50(%rbp)
   13c20:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   13c24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13c28:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   13c2c:	48 8d 7d b4          	lea    -0x4c(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
   13c30:	e8 1b 3f ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
   13c35:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   13c3c:	8b 4d b4             	mov    -0x4c(%rbp),%ecx
            return ustl::err(Status::InternalError);
   13c3f:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%rbp)
   13c45:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   13c49:	48 8d 85 54 ff ff ff 	lea    -0xac(%rbp),%rax
   13c50:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   13c54:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   13c58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13c5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13c60:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   13c64:	e8 a7 00 00 00       	call   13d10 <_ZN4ustl6result14StorageTrivialIPKvN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   13c69:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
        }
   13c70:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
   13c77:	5d                   	pop    %rbp
   13c78:	c3                   	ret
   13c79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000013c80 <_ZN4acpi11IPhysToVirtD2Ev>:
            }
   13c80:	55                   	push   %rbp
   13c81:	48 89 e5             	mov    %rsp,%rbp
   13c84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13c88:	5d                   	pop    %rbp
   13c89:	c3                   	ret
   13c8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013c90 <_ZN4acpi11IPhysToVirtD0Ev>:
   13c90:	55                   	push   %rbp
   13c91:	48 89 e5             	mov    %rsp,%rbp
   13c94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13c98:	0f 0b                	ud2
   13c9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013ca0 <_ZN4ustl2OkIPKvEC2IJS2_EEEDpOT_>:
        {}
   13ca0:	55                   	push   %rbp
   13ca1:	48 89 e5             	mov    %rsp,%rbp
   13ca4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13ca8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   13cac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            : value_(ustl::forward<Args>(args)...)
   13cb0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   13cb4:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   13cb8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   13cbc:	48 8b 09             	mov    (%rcx),%rcx
   13cbf:	48 89 08             	mov    %rcx,(%rax)
        {}
   13cc2:	5d                   	pop    %rbp
   13cc3:	c3                   	ret
   13cc4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13ccb:	00 00 00 
   13cce:	66 90                	xchg   %ax,%ax

0000000000013cd0 <_ZN4ustl6result14StorageTrivialIPKvN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>:
        {}
   13cd0:	55                   	push   %rbp
   13cd1:	48 89 e5             	mov    %rsp,%rbp
   13cd4:	48 83 ec 20          	sub    $0x20,%rsp
   13cd8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13cdc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   13ce0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : value_(static_cast<Args &&>(args)...), 
   13ce4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ce8:	48 8b 00             	mov    (%rax),%rax
   13ceb:	48 89 07             	mov    %rax,(%rdi)
              status_(Status::HaveValue)
   13cee:	48 83 c7 08          	add    $0x8,%rdi
   13cf2:	be 01 00 00 00       	mov    $0x1,%esi
   13cf7:	e8 b4 3e ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   13cfc:	48 83 c4 20          	add    $0x20,%rsp
   13d00:	5d                   	pop    %rbp
   13d01:	c3                   	ret
   13d02:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13d09:	00 00 00 
   13d0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000013d10 <_ZN4ustl6result14StorageTrivialIPKvN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>:
        {}
   13d10:	55                   	push   %rbp
   13d11:	48 89 e5             	mov    %rsp,%rbp
   13d14:	48 83 ec 20          	sub    $0x20,%rsp
   13d18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13d1c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   13d20:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : error_(static_cast<Args &&>(args)...), 
   13d24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d28:	8b 00                	mov    (%rax),%eax
   13d2a:	89 07                	mov    %eax,(%rdi)
              status_(Status::HaveError)
   13d2c:	48 83 c7 08          	add    $0x8,%rdi
   13d30:	be 02 00 00 00       	mov    $0x2,%esi
   13d35:	e8 76 3e ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   13d3a:	48 83 c4 20          	add    $0x20,%rsp
   13d3e:	5d                   	pop    %rbp
   13d3f:	c3                   	ret

0000000000013d40 <_ZN4acpi10AcpiParserC2EOS0_>:
            s_acpi_parser.init(ustl::move(acpi_parser.unwrap()));
   13d40:	55                   	push   %rbp
   13d41:	48 89 e5             	mov    %rsp,%rbp
   13d44:	48 83 ec 20          	sub    $0x20,%rsp
   13d48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13d4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   13d50:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13d54:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   13d58:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   13d5c:	e8 5f 00 00 00       	call   13dc0 <_ZN4acpi11IAcpiParserC2ERKS0_>
   13d61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d65:	48 8d 0d ac d7 01 00 	lea    0x1d7ac(%rip),%rcx        # 31518 <_ZTVN4acpi10AcpiParserE>
   13d6c:	48 83 c1 10          	add    $0x10,%rcx
   13d70:	48 89 08             	mov    %rcx,(%rax)
   13d73:	48 83 c0 08          	add    $0x8,%rax
   13d77:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   13d7b:	48 83 c2 08          	add    $0x8,%rdx
   13d7f:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
   13d83:	48 89 48 28          	mov    %rcx,0x28(%rax)
   13d87:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
   13d8b:	48 89 48 20          	mov    %rcx,0x20(%rax)
   13d8f:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
   13d93:	48 89 48 18          	mov    %rcx,0x18(%rax)
   13d97:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
   13d9b:	48 89 48 10          	mov    %rcx,0x10(%rax)
   13d9f:	48 8b 0a             	mov    (%rdx),%rcx
   13da2:	48 8b 52 08          	mov    0x8(%rdx),%rdx
   13da6:	48 89 50 08          	mov    %rdx,0x8(%rax)
   13daa:	48 89 08             	mov    %rcx,(%rax)
   13dad:	48 83 c4 20          	add    $0x20,%rsp
   13db1:	5d                   	pop    %rbp
   13db2:	c3                   	ret
   13db3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13dba:	00 00 00 
   13dbd:	0f 1f 00             	nopl   (%rax)

0000000000013dc0 <_ZN4acpi11IAcpiParserC2ERKS0_>:

   13dc0:	55                   	push   %rbp
   13dc1:	48 89 e5             	mov    %rsp,%rbp
   13dc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13dc8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   13dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13dd0:	48 8d 0d 21 d7 01 00 	lea    0x1d721(%rip),%rcx        # 314f8 <_ZTVN4acpi11IAcpiParserE+0x10>
   13dd7:	48 89 08             	mov    %rcx,(%rax)
   13dda:	5d                   	pop    %rbp
   13ddb:	c3                   	ret
   13ddc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000013de0 <_ZN4acpi11IAcpiParserD2Ev>:
    FORCE_USED
   13de0:	55                   	push   %rbp
   13de1:	48 89 e5             	mov    %rsp,%rbp
   13de4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13de8:	5d                   	pop    %rbp
   13de9:	c3                   	ret
   13dea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013df0 <_ZN4acpi11IAcpiParserD0Ev>:
   13df0:	55                   	push   %rbp
   13df1:	48 89 e5             	mov    %rsp,%rbp
   13df4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13df8:	0f 0b                	ud2
   13dfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013e00 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEED2Ev>:
        {}
   13e00:	55                   	push   %rbp
   13e01:	48 89 e5             	mov    %rsp,%rbp
   13e04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13e08:	5d                   	pop    %rbp
   13e09:	c3                   	ret
   13e0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013e10 <_ZN4ours14acpi_init_numaEv>:

namespace ours {
    static bool s_numa_enabled = true;

    WEAK_LINK
    auto acpi_init_numa() -> Status {
   13e10:	55                   	push   %rbp
   13e11:	48 89 e5             	mov    %rsp,%rbp
        return Status::Unsupported;
   13e14:	b8 06 00 00 00       	mov    $0x6,%eax
   13e19:	5d                   	pop    %rbp
   13e1a:	c3                   	ret
   13e1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000013e20 <_ZN4oursL18platform_init_numaEv>:
    }

    static auto platform_init_numa() -> void {
   13e20:	55                   	push   %rbp
   13e21:	48 89 e5             	mov    %rsp,%rbp
        if (!s_numa_enabled) {
   13e24:	8a 05 90 d7 01 00    	mov    0x1d790(%rip),%al        # 315ba <_ZN4oursL14s_numa_enabledE>
   13e2a:	a8 01                	test   $0x1,%al
   13e2c:	75 02                	jne    13e30 <_ZN4oursL18platform_init_numaEv+0x10>
            return;
   13e2e:	eb 0f                	jmp    13e3f <_ZN4oursL18platform_init_numaEv+0x1f>
        }

        if (Status::Ok != acpi_init_numa()) {
   13e30:	e8 db ff ff ff       	call   13e10 <_ZN4ours14acpi_init_numaEv>
   13e35:	89 c1                	mov    %eax,%ecx
   13e37:	31 c0                	xor    %eax,%eax
   13e39:	39 c8                	cmp    %ecx,%eax
   13e3b:	74 02                	je     13e3f <_ZN4oursL18platform_init_numaEv+0x1f>
            return;
   13e3d:	eb 00                	jmp    13e3f <_ZN4oursL18platform_init_numaEv+0x1f>
        }
    }
   13e3f:	5d                   	pop    %rbp
   13e40:	c3                   	ret
   13e41:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13e48:	00 00 00 
   13e4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000013e50 <_ZSt28__throw_bad_array_new_lengthB8nn210000v>:

#endif // defined(_LIBCPP_ABI_VCRUNTIME) && defined(_HAS_EXCEPTIONS) && _HAS_EXCEPTIONS == 0

[[__noreturn__]] _LIBCPP_EXPORTED_FROM_ABI void __throw_bad_alloc(); // not in C++ spec

[[__noreturn__]] inline _LIBCPP_HIDE_FROM_ABI void __throw_bad_array_new_length() {
   13e50:	55                   	push   %rbp
   13e51:	48 89 e5             	mov    %rsp,%rbp
#if _LIBCPP_HAS_EXCEPTIONS
  throw bad_array_new_length();
#else
  _LIBCPP_VERBOSE_ABORT("bad_array_new_length was thrown in -fno-exceptions mode");
   13e54:	48 8d 3d ef b1 01 00 	lea    0x1b1ef(%rip),%rdi        # 2f04a <.L.str.2>
   13e5b:	31 c0                	xor    %eax,%eax
   13e5d:	e8 6e 3d 00 00       	call   17bd0 <_ZNSt3__122__libcpp_verbose_abortEPKcz>
   13e62:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13e69:	00 00 00 
   13e6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000013e70 <_ZNSt3__124__is_overaligned_for_newB8nn210000Em>:
#  pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

_LIBCPP_CONSTEXPR inline _LIBCPP_HIDE_FROM_ABI bool __is_overaligned_for_new(size_t __align) _NOEXCEPT {
   13e70:	55                   	push   %rbp
   13e71:	48 89 e5             	mov    %rsp,%rbp
   13e74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
#ifdef __STDCPP_DEFAULT_NEW_ALIGNMENT__
  return __align > __STDCPP_DEFAULT_NEW_ALIGNMENT__;
   13e78:	48 83 7d f8 10       	cmpq   $0x10,-0x8(%rbp)
   13e7d:	0f 97 c0             	seta   %al
   13e80:	24 01                	and    $0x1,%al
   13e82:	5d                   	pop    %rbp
   13e83:	c3                   	ret
   13e84:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13e8b:	00 00 00 
   13e8e:	66 90                	xchg   %ax,%ax

0000000000013e90 <_ZNSt3__121__libcpp_operator_newB8nn210000IJmSt11align_val_tEEEPvDpT_>:
  return __align > _LIBCPP_ALIGNOF(max_align_t);
#endif
}

template <class... _Args>
_LIBCPP_HIDE_FROM_ABI void* __libcpp_operator_new(_Args... __args) {
   13e90:	55                   	push   %rbp
   13e91:	48 89 e5             	mov    %rsp,%rbp
   13e94:	48 83 ec 10          	sub    $0x10,%rsp
   13e98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13e9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
#if __has_builtin(__builtin_operator_new) && __has_builtin(__builtin_operator_delete)
  return __builtin_operator_new(__args...);
   13ea0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13ea4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   13ea8:	e8 a3 52 00 00       	call   19150 <_ZnwmSt11align_val_t>
   13ead:	48 83 c4 10          	add    $0x10,%rsp
   13eb1:	5d                   	pop    %rbp
   13eb2:	c3                   	ret
   13eb3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13eba:	00 00 00 
   13ebd:	0f 1f 00             	nopl   (%rax)

0000000000013ec0 <_ZNSt3__121__libcpp_operator_newB8nn210000IJmEEEPvDpT_>:
_LIBCPP_HIDE_FROM_ABI void* __libcpp_operator_new(_Args... __args) {
   13ec0:	55                   	push   %rbp
   13ec1:	48 89 e5             	mov    %rsp,%rbp
   13ec4:	48 83 ec 10          	sub    $0x10,%rsp
   13ec8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_operator_new(__args...);
   13ecc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13ed0:	e8 4b 52 00 00       	call   19120 <_Znwm>
   13ed5:	48 83 c4 10          	add    $0x10,%rsp
   13ed9:	5d                   	pop    %rbp
   13eda:	c3                   	ret
   13edb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000013ee0 <_ZNK4acpi15AcpiTableHeader4sizeEv>:
    static_assert(sizeof(AcpiEntryHeader) == 2);

    /// System description table header.
    struct PACKED AcpiTableHeader {
        CXX11_CONSTEXPR
        auto size() const -> usize {
   13ee0:	55                   	push   %rbp
   13ee1:	48 89 e5             	mov    %rsp,%rbp
   13ee4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13ee8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            return length;
   13eec:	8b 40 04             	mov    0x4(%rax),%eax
   13eef:	5d                   	pop    %rbp
   13ef0:	c3                   	ret
   13ef1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13ef8:	00 00 00 
   13efb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000013f00 <_ZN4acpi13calc_checksumEPKvm>:
#include <acpi/parser.hpp>

namespace acpi {
    auto calc_checksum(void const *buffer, usize len) -> u8 {
   13f00:	55                   	push   %rbp
   13f01:	48 89 e5             	mov    %rsp,%rbp
   13f04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13f08:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        u8 sum = 0;
   13f0c:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
        for (auto i = 0; i < len; ++i) {
   13f10:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
   13f17:	48 63 45 e8          	movslq -0x18(%rbp),%rax
   13f1b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   13f1f:	73 20                	jae    13f41 <_ZN4acpi13calc_checksumEPKvm+0x41>
            sum += reinterpret_cast<char const *>(buffer)[i];
   13f21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f25:	48 63 4d e8          	movslq -0x18(%rbp),%rcx
   13f29:	0f be 0c 08          	movsbl (%rax,%rcx,1),%ecx
   13f2d:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   13f31:	01 c8                	add    %ecx,%eax
   13f33:	88 45 ef             	mov    %al,-0x11(%rbp)
        for (auto i = 0; i < len; ++i) {
   13f36:	8b 45 e8             	mov    -0x18(%rbp),%eax
   13f39:	83 c0 01             	add    $0x1,%eax
   13f3c:	89 45 e8             	mov    %eax,-0x18(%rbp)
   13f3f:	eb d6                	jmp    13f17 <_ZN4acpi13calc_checksumEPKvm+0x17>
        }

        return sum;
   13f41:	8a 45 ef             	mov    -0x11(%rbp),%al
   13f44:	5d                   	pop    %rbp
   13f45:	c3                   	ret
   13f46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13f4d:	00 00 00 

0000000000013f50 <_ZNK4acpi8AcpiRsdp8validateEv>:
        }

        return ustl::ok(rstd);
    }

    auto AcpiRsdp::validate() const -> bool {
   13f50:	55                   	push   %rbp
   13f51:	48 89 e5             	mov    %rsp,%rbp
   13f54:	48 83 ec 40          	sub    $0x40,%rsp
   13f58:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   13f5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13f60:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   13f64:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13f68:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   13f6c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
namespace acpi {
    /// Root system description table pointer.
    struct PACKED AcpiRsdp {
        FORCE_INLINE CXX11_CONSTEXPR
        auto validate_signature() const -> bool {
            return sig1 == SIGNATURE1 || sig2 == SIGNATURE2;
   13f70:	48 8d 35 36 b8 01 00 	lea    0x1b836(%rip),%rsi        # 2f7ad <_ZN4acpi8AcpiRsdp10SIGNATURE1E>
   13f77:	e8 14 18 00 00       	call   15790 <_ZN4acpieqERKNS_13AcpiSignatureES2_>
   13f7c:	88 c1                	mov    %al,%cl
   13f7e:	b0 01                	mov    $0x1,%al
   13f80:	f6 c1 01             	test   $0x1,%cl
   13f83:	88 45 d7             	mov    %al,-0x29(%rbp)
   13f86:	75 17                	jne    13f9f <_ZNK4acpi8AcpiRsdp8validateEv+0x4f>
   13f88:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   13f8c:	48 83 c7 04          	add    $0x4,%rdi
   13f90:	48 8d 35 1a b8 01 00 	lea    0x1b81a(%rip),%rsi        # 2f7b1 <_ZN4acpi8AcpiRsdp10SIGNATURE2E>
   13f97:	e8 f4 17 00 00       	call   15790 <_ZN4acpieqERKNS_13AcpiSignatureES2_>
   13f9c:	88 45 d7             	mov    %al,-0x29(%rbp)
   13f9f:	8a 45 d7             	mov    -0x29(%rbp),%al
        if (!validate_signature()) {
   13fa2:	a8 01                	test   $0x1,%al
   13fa4:	75 06                	jne    13fac <_ZNK4acpi8AcpiRsdp8validateEv+0x5c>
            return false;
   13fa6:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
   13faa:	eb 30                	jmp    13fdc <_ZNK4acpi8AcpiRsdp8validateEv+0x8c>
   13fac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   13fb0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13fb4:	48 c7 45 f0 14 00 00 	movq   $0x14,-0x10(%rbp)
   13fbb:	00 

    auto calc_checksum(void const *buffer, usize len) -> u8;

    FORCE_INLINE CXX11_CONSTEXPR 
    auto validate_checksum(void const *buffer, usize len) -> bool {
        return 0 == calc_checksum(buffer, len);
   13fbc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13fc0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   13fc4:	e8 37 ff ff ff       	call   13f00 <_ZN4acpi13calc_checksumEPKvm>
   13fc9:	0f b6 c8             	movzbl %al,%ecx
        }
        if (!validate_checksum(this, sizeof(*this))) {
   13fcc:	31 c0                	xor    %eax,%eax
   13fce:	39 c8                	cmp    %ecx,%eax
   13fd0:	74 06                	je     13fd8 <_ZNK4acpi8AcpiRsdp8validateEv+0x88>
            return false;
   13fd2:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
   13fd6:	eb 04                	jmp    13fdc <_ZNK4acpi8AcpiRsdp8validateEv+0x8c>
        }

        return true;
   13fd8:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)
    }
   13fdc:	8a 45 e7             	mov    -0x19(%rbp),%al
   13fdf:	24 01                	and    $0x1,%al
   13fe1:	48 83 c4 40          	add    $0x40,%rsp
   13fe5:	5d                   	pop    %rbp
   13fe6:	c3                   	ret
   13fe7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   13fee:	00 00 

0000000000013ff0 <_ZNK4acpi10AcpiRsdpV28validateEv>:

    auto AcpiRsdpV2::validate() const -> bool {
   13ff0:	55                   	push   %rbp
   13ff1:	48 89 e5             	mov    %rsp,%rbp
   13ff4:	48 83 ec 50          	sub    $0x50,%rsp
   13ff8:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   13ffc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14000:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   14004:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   14008:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1400c:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   14010:	48 8d 35 96 b7 01 00 	lea    0x1b796(%rip),%rsi        # 2f7ad <_ZN4acpi8AcpiRsdp10SIGNATURE1E>
   14017:	e8 74 17 00 00       	call   15790 <_ZN4acpieqERKNS_13AcpiSignatureES2_>
   1401c:	88 c1                	mov    %al,%cl
   1401e:	b0 01                	mov    $0x1,%al
   14020:	f6 c1 01             	test   $0x1,%cl
   14023:	88 45 cf             	mov    %al,-0x31(%rbp)
   14026:	75 17                	jne    1403f <_ZNK4acpi10AcpiRsdpV28validateEv+0x4f>
   14028:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1402c:	48 83 c7 04          	add    $0x4,%rdi
   14030:	48 8d 35 7a b7 01 00 	lea    0x1b77a(%rip),%rsi        # 2f7b1 <_ZN4acpi8AcpiRsdp10SIGNATURE2E>
   14037:	e8 54 17 00 00       	call   15790 <_ZN4acpieqERKNS_13AcpiSignatureES2_>
   1403c:	88 45 cf             	mov    %al,-0x31(%rbp)
   1403f:	8a 45 cf             	mov    -0x31(%rbp),%al
        if (!v1.validate_signature()) {
   14042:	a8 01                	test   $0x1,%al
   14044:	75 06                	jne    1404c <_ZNK4acpi10AcpiRsdpV28validateEv+0x5c>
            return false;
   14046:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
   1404a:	eb 37                	jmp    14083 <_ZNK4acpi10AcpiRsdpV28validateEv+0x93>
   1404c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14050:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   14054:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    struct PACKED AcpiRsdpV2 {
        auto validate() const -> bool;

        FORCE_INLINE CXX11_CONSTEXPR
        auto size() const -> usize {
            return length;
   14058:	8b 40 14             	mov    0x14(%rax),%eax
   1405b:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   1405f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14063:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   14067:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1406b:	e8 90 fe ff ff       	call   13f00 <_ZN4acpi13calc_checksumEPKvm>
   14070:	0f b6 c8             	movzbl %al,%ecx
        }
        if (!validate_checksum(this, size())) {
   14073:	31 c0                	xor    %eax,%eax
   14075:	39 c8                	cmp    %ecx,%eax
   14077:	74 06                	je     1407f <_ZNK4acpi10AcpiRsdpV28validateEv+0x8f>
            return false;
   14079:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
   1407d:	eb 04                	jmp    14083 <_ZNK4acpi10AcpiRsdpV28validateEv+0x93>
        }

        return true;
   1407f:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
    }
   14083:	8a 45 df             	mov    -0x21(%rbp),%al
   14086:	24 01                	and    $0x1,%al
   14088:	48 83 c4 50          	add    $0x50,%rsp
   1408c:	5d                   	pop    %rbp
   1408d:	c3                   	ret
   1408e:	66 90                	xchg   %ax,%ax

0000000000014090 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm>:

    auto AcpiParser::from_rsdp(IPhysToVirt *p2v, PhysAddr rsdp_pa) -> ktl::Result<AcpiParser> {
   14090:	55                   	push   %rbp
   14091:	48 89 e5             	mov    %rsp,%rbp
   14094:	48 81 ec 30 04 00 00 	sub    $0x430,%rsp
   1409b:	48 89 bd f8 fb ff ff 	mov    %rdi,-0x408(%rbp)
   140a2:	48 89 f8             	mov    %rdi,%rax
   140a5:	48 89 85 00 fc ff ff 	mov    %rax,-0x400(%rbp)
   140ac:	48 89 bd 78 fd ff ff 	mov    %rdi,-0x288(%rbp)
   140b3:	48 89 b5 70 fd ff ff 	mov    %rsi,-0x290(%rbp)
   140ba:	48 89 95 68 fd ff ff 	mov    %rdx,-0x298(%rbp)
        auto result = get_root_tables(p2v, rsdp_pa);
   140c1:	48 8b b5 70 fd ff ff 	mov    -0x290(%rbp),%rsi
   140c8:	48 8b 95 68 fd ff ff 	mov    -0x298(%rbp),%rdx
   140cf:	48 8d bd 48 fd ff ff 	lea    -0x2b8(%rbp),%rdi
   140d6:	e8 65 08 00 00       	call   14940 <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm>
   140db:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   140e2:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
   140e9:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
   140f0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   140f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   140f8:	48 83 c0 18          	add    $0x18,%rax
   140fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   14100:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
        {  return (static_cast<u16>(status_) & static_cast<u16>(Status::HaveValue)) != 0;  }
   14104:	0f b7 00             	movzwl (%rax),%eax
   14107:	83 e0 01             	and    $0x1,%eax
   1410a:	83 f8 00             	cmp    $0x0,%eax
        if (!result) {
   1410d:	0f 85 87 00 00 00    	jne    1419a <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x10a>
   14113:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   1411a:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
   14121:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
   14128:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   1412f:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   14136:	48 8d bd 94 fd ff ff 	lea    -0x26c(%rbp),%rdi
            return Err<Error>(unwrap_err());
   1413d:	e8 5e 17 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   14142:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
   14149:	8b 8d 94 fd ff ff    	mov    -0x26c(%rbp),%ecx
            return result.err();
   1414f:	89 8d 44 fd ff ff    	mov    %ecx,-0x2bc(%rbp)
   14155:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
   1415c:	48 8d 85 44 fd ff ff 	lea    -0x2bc(%rbp),%rax
   14163:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
   1416a:	48 8b bd a0 fd ff ff 	mov    -0x260(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14171:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
   14178:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   1417f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   14186:	e8 e5 17 00 00       	call   15970 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   1418b:	c7 85 40 fd ff ff 01 	movl   $0x1,-0x2c0(%rbp)
   14192:	00 00 00 
   14195:	e9 88 07 00 00       	jmp    14922 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x892>
   1419a:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   141a1:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
   141a8:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
   141af:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   141b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
        }

        // At first, we are preferred the more new version.
        if (result->xsdt_addr) {
   141b7:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
   141bc:	0f 84 5d 03 00 00    	je     1451f <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x48f>
            auto maybe_xsdt = p2v->phys_to_virt(result->xsdt_addr, sizeof(AcpiXsdt));
   141c2:	48 8b b5 70 fd ff ff 	mov    -0x290(%rbp),%rsi
   141c9:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   141d0:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
   141d7:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
   141de:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   141e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   141e6:	48 8b 50 10          	mov    0x10(%rax),%rdx
   141ea:	48 8b 06             	mov    (%rsi),%rax
   141ed:	48 8d bd 30 fd ff ff 	lea    -0x2d0(%rbp),%rdi
   141f4:	b9 24 00 00 00       	mov    $0x24,%ecx
   141f9:	ff 50 10             	call   *0x10(%rax)
   141fc:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
   14203:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
   1420a:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
   14211:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   14215:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   14219:	48 83 c0 08          	add    $0x8,%rax
   1421d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   14221:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   14225:	0f b7 00             	movzwl (%rax),%eax
   14228:	83 e0 01             	and    $0x1,%eax
   1422b:	83 f8 00             	cmp    $0x0,%eax
            if (!maybe_xsdt) {
   1422e:	0f 85 87 00 00 00    	jne    142bb <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x22b>
   14234:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
   1423b:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
   14242:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
   14249:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   14250:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
   14257:	48 8d bd 34 fe ff ff 	lea    -0x1cc(%rbp),%rdi
            return Err<Error>(unwrap_err());
   1425e:	e8 3d 16 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   14263:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
   1426a:	8b 8d 34 fe ff ff    	mov    -0x1cc(%rbp),%ecx
                return maybe_xsdt.err();
   14270:	89 8d 2c fd ff ff    	mov    %ecx,-0x2d4(%rbp)
   14276:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
   1427d:	48 8d 85 2c fd ff ff 	lea    -0x2d4(%rbp),%rax
   14284:	48 89 85 a8 fd ff ff 	mov    %rax,-0x258(%rbp)
   1428b:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14292:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
   14299:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   142a0:	48 8b b5 58 ff ff ff 	mov    -0xa8(%rbp),%rsi
   142a7:	e8 c4 16 00 00       	call   15970 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   142ac:	c7 85 40 fd ff ff 01 	movl   $0x1,-0x2c0(%rbp)
   142b3:	00 00 00 
   142b6:	e9 46 02 00 00       	jmp    14501 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x471>
   142bb:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
   142c2:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
   142c9:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
            }
            auto xsdt = static_cast<AcpiXsdt const *>(maybe_xsdt.unwrap());
   142d0:	48 8b 00             	mov    (%rax),%rax
   142d3:	48 89 85 20 fd ff ff 	mov    %rax,-0x2e0(%rbp)
            if (validate_table(xsdt)) {
   142da:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
   142e1:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
    }

    template <typename Table>
    FORCE_INLINE 
    auto validate_table(ai_virt Table *table) -> bool {
        if (table->header.sign != Table::SIGNATURE) {
   142e8:	48 8b bd 48 fe ff ff 	mov    -0x1b8(%rbp),%rdi
   142ef:	48 8d 35 bf b4 01 00 	lea    0x1b4bf(%rip),%rsi        # 2f7b5 <_ZN4acpi8AcpiXsdt9SIGNATUREE>
   142f6:	e8 05 14 00 00       	call   15700 <_ZN4acpineERKNS_13AcpiSignatureES2_>
   142fb:	a8 01                	test   $0x1,%al
   142fd:	75 02                	jne    14301 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x271>
   142ff:	eb 09                	jmp    1430a <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x27a>
            return false;
   14301:	c6 85 57 fe ff ff 00 	movb   $0x0,-0x1a9(%rbp)
   14308:	eb 5b                	jmp    14365 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x2d5>
        }
        if (!validate_checksum(table, table->header.size())) {
   1430a:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
   14311:	48 89 85 f0 fb ff ff 	mov    %rax,-0x410(%rbp)
   14318:	48 8b bd 48 fe ff ff 	mov    -0x1b8(%rbp),%rdi
   1431f:	e8 bc fb ff ff       	call   13ee0 <_ZNK4acpi15AcpiTableHeader4sizeEv>
   14324:	48 8b 8d f0 fb ff ff 	mov    -0x410(%rbp),%rcx
   1432b:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
   14332:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
        return 0 == calc_checksum(buffer, len);
   14339:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
   14340:	48 8b b5 58 fe ff ff 	mov    -0x1a8(%rbp),%rsi
   14347:	e8 b4 fb ff ff       	call   13f00 <_ZN4acpi13calc_checksumEPKvm>
   1434c:	0f b6 c8             	movzbl %al,%ecx
        if (!validate_checksum(table, table->header.size())) {
   1434f:	31 c0                	xor    %eax,%eax
        return 0 == calc_checksum(buffer, len);
   14351:	39 c8                	cmp    %ecx,%eax
        if (!validate_checksum(table, table->header.size())) {
   14353:	74 09                	je     1435e <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x2ce>
            return false;
   14355:	c6 85 57 fe ff ff 00 	movb   $0x0,-0x1a9(%rbp)
   1435c:	eb 07                	jmp    14365 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x2d5>
        }

        return true;
   1435e:	c6 85 57 fe ff ff 01 	movb   $0x1,-0x1a9(%rbp)
   14365:	f6 85 57 fe ff ff 01 	testb  $0x1,-0x1a9(%rbp)
   1436c:	75 05                	jne    14373 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x2e3>
   1436e:	e9 84 01 00 00       	jmp    144f7 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x467>
                auto const num_tables = xsdt->header.length / sizeof(u64);
   14373:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
   1437a:	8b 40 04             	mov    0x4(%rax),%eax
   1437d:	c1 e8 03             	shr    $0x3,%eax
   14380:	48 89 85 18 fd ff ff 	mov    %rax,-0x2e8(%rbp)
                return ustl::ok(AcpiParser(p2v, result->rsdp_addr, xsdt, 0, rsdp_pa, num_tables));
   14387:	48 8b bd 70 fd ff ff 	mov    -0x290(%rbp),%rdi
   1438e:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   14395:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
   1439c:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
   143a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   143a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   143ab:	48 8b 30             	mov    (%rax),%rsi
   143ae:	48 8b 95 20 fd ff ff 	mov    -0x2e0(%rbp),%rdx
   143b5:	48 8b 8d 68 fd ff ff 	mov    -0x298(%rbp),%rcx
   143bc:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
   143c3:	4c 8d 85 a8 fc ff ff 	lea    -0x358(%rbp),%r8
   143ca:	4c 89 85 b8 fe ff ff 	mov    %r8,-0x148(%rbp)
   143d1:	48 89 bd b0 fe ff ff 	mov    %rdi,-0x150(%rbp)
   143d8:	48 89 b5 a8 fe ff ff 	mov    %rsi,-0x158(%rbp)
   143df:	48 89 95 a0 fe ff ff 	mov    %rdx,-0x160(%rbp)
   143e6:	48 c7 85 98 fe ff ff 	movq   $0x0,-0x168(%rbp)
   143ed:	00 00 00 00 
   143f1:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
   143f8:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
   143ff:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
   14406:	48 89 bd e8 fb ff ff 	mov    %rdi,-0x418(%rbp)
        AcpiParser(IPhysToVirt *p2v, PhysAddr rsdp_addr, AcpiXsdt const *xsdt, AcpiRsdt const *rsdt,
   1440d:	e8 be 15 00 00       	call   159d0 <_ZN4acpi11IAcpiParserC2Ev>
   14412:	48 8b 85 e8 fb ff ff 	mov    -0x418(%rbp),%rax
              num_tables_(num_tables) {}
   14419:	48 8d 0d 08 d1 01 00 	lea    0x1d108(%rip),%rcx        # 31528 <_ZTVN4acpi10AcpiParserE+0x10>
   14420:	48 89 08             	mov    %rcx,(%rax)
            : p2v_(p2v),
   14423:	48 8b 8d b0 fe ff ff 	mov    -0x150(%rbp),%rcx
   1442a:	48 89 48 08          	mov    %rcx,0x8(%rax)
              rsdt_(rsdt),
   1442e:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
   14435:	48 89 48 10          	mov    %rcx,0x10(%rax)
              xsdt_(xsdt),
   14439:	48 8b 8d a0 fe ff ff 	mov    -0x160(%rbp),%rcx
   14440:	48 89 48 18          	mov    %rcx,0x18(%rax)
              rsdp_paddr_(rsdp_addr),
   14444:	48 8b 8d a8 fe ff ff 	mov    -0x158(%rbp),%rcx
   1444b:	48 89 48 20          	mov    %rcx,0x20(%rax)
              root_table_paddr_(root_table_paddr),
   1444f:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
   14456:	48 89 48 28          	mov    %rcx,0x28(%rax)
              num_tables_(num_tables) {}
   1445a:	48 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%rcx
   14461:	48 89 48 30          	mov    %rcx,0x30(%rax)
   14465:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
   1446c:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
   14473:	48 8d 85 a8 fc ff ff 	lea    -0x358(%rbp),%rax
   1447a:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
   14481:	48 8d 85 a8 fc ff ff 	lea    -0x358(%rbp),%rax
   14488:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1448c:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
   14490:	48 8d bd e0 fc ff ff 	lea    -0x320(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
   14497:	e8 04 15 00 00       	call   159a0 <_ZN4ustl2OkIN4acpi10AcpiParserEEC2IJS2_EEEDpOT_>
   1449c:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
   144a3:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   144aa:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
   144b1:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
   144b8:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
   144bf:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   144c6:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   144ca:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
   144ce:	e8 1d 15 00 00       	call   159f0 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
   144d3:	48 8d bd e0 fc ff ff 	lea    -0x320(%rbp),%rdi
   144da:	e8 a1 11 00 00       	call   15680 <_ZN4ustl2OkIN4acpi10AcpiParserEED2Ev>
   144df:	48 8d bd a8 fc ff ff 	lea    -0x358(%rbp),%rdi
   144e6:	e8 b5 11 00 00       	call   156a0 <_ZN4acpi10AcpiParserD2Ev>
   144eb:	c7 85 40 fd ff ff 01 	movl   $0x1,-0x2c0(%rbp)
   144f2:	00 00 00 
   144f5:	eb 0a                	jmp    14501 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x471>
            }
        }
   144f7:	c7 85 40 fd ff ff 00 	movl   $0x0,-0x2c0(%rbp)
   144fe:	00 00 00 
   14501:	48 8d bd 30 fd ff ff 	lea    -0x2d0(%rbp),%rdi
   14508:	e8 b3 11 00 00       	call   156c0 <_ZN4ustl6ResultIPKvN4ours6StatusEvED2Ev>
   1450d:	8b 85 40 fd ff ff    	mov    -0x2c0(%rbp),%eax
   14513:	85 c0                	test   %eax,%eax
   14515:	0f 85 07 04 00 00    	jne    14922 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x892>
   1451b:	eb 00                	jmp    1451d <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x48d>
   1451d:	eb 00                	jmp    1451f <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x48f>
   1451f:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   14526:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
   1452d:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
   14534:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14538:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

        if (result->rsdt_addr) {
   1453c:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   14541:	0f 84 5d 03 00 00    	je     148a4 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x814>
            auto maybe_rsdt = p2v->phys_to_virt(result->rsdt_addr, sizeof(AcpiRsdt));
   14547:	48 8b b5 70 fd ff ff 	mov    -0x290(%rbp),%rsi
   1454e:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   14555:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
   1455c:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
   14563:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   14567:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1456b:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1456f:	48 8b 06             	mov    (%rsi),%rax
   14572:	48 8d bd 98 fc ff ff 	lea    -0x368(%rbp),%rdi
   14579:	b9 24 00 00 00       	mov    $0x24,%ecx
   1457e:	ff 50 10             	call   *0x10(%rax)
   14581:	48 8d 85 98 fc ff ff 	lea    -0x368(%rbp),%rax
   14588:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
   1458f:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
   14596:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1459a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   1459e:	48 83 c0 08          	add    $0x8,%rax
   145a2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   145a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   145aa:	0f b7 00             	movzwl (%rax),%eax
   145ad:	83 e0 01             	and    $0x1,%eax
   145b0:	83 f8 00             	cmp    $0x0,%eax
            if (!maybe_rsdt) {
   145b3:	0f 85 87 00 00 00    	jne    14640 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x5b0>
   145b9:	48 8d 85 98 fc ff ff 	lea    -0x368(%rbp),%rax
   145c0:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
   145c7:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   145ce:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   145d5:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   145dc:	48 8d bd 24 fe ff ff 	lea    -0x1dc(%rbp),%rdi
            return Err<Error>(unwrap_err());
   145e3:	e8 b8 12 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   145e8:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
   145ef:	8b 8d 24 fe ff ff    	mov    -0x1dc(%rbp),%ecx
                return maybe_rsdt.err();
   145f5:	89 8d 94 fc ff ff    	mov    %ecx,-0x36c(%rbp)
   145fb:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
   14602:	48 8d 85 94 fc ff ff 	lea    -0x36c(%rbp),%rax
   14609:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
   14610:	48 8b bd c0 fd ff ff 	mov    -0x240(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14617:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
   1461e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   14625:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
   1462c:	e8 3f 13 00 00       	call   15970 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   14631:	c7 85 40 fd ff ff 01 	movl   $0x1,-0x2c0(%rbp)
   14638:	00 00 00 
   1463b:	e9 46 02 00 00       	jmp    14886 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x7f6>
   14640:	48 8d 85 98 fc ff ff 	lea    -0x368(%rbp),%rax
   14647:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
   1464e:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
            }
            auto rsdt = static_cast<AcpiRsdt const *>(maybe_rsdt.unwrap());
   14655:	48 8b 00             	mov    (%rax),%rax
   14658:	48 89 85 88 fc ff ff 	mov    %rax,-0x378(%rbp)
            if (validate_table(rsdt)) {
   1465f:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
   14666:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
        if (table->header.sign != Table::SIGNATURE) {
   1466d:	48 8b bd 18 ff ff ff 	mov    -0xe8(%rbp),%rdi
   14674:	48 8d 35 3e b1 01 00 	lea    0x1b13e(%rip),%rsi        # 2f7b9 <_ZN4acpi8AcpiRsdt9SIGNATUREE>
   1467b:	e8 80 10 00 00       	call   15700 <_ZN4acpineERKNS_13AcpiSignatureES2_>
   14680:	a8 01                	test   $0x1,%al
   14682:	75 02                	jne    14686 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x5f6>
   14684:	eb 09                	jmp    1468f <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x5ff>
            return false;
   14686:	c6 85 27 ff ff ff 00 	movb   $0x0,-0xd9(%rbp)
   1468d:	eb 5b                	jmp    146ea <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x65a>
        if (!validate_checksum(table, table->header.size())) {
   1468f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   14696:	48 89 85 e0 fb ff ff 	mov    %rax,-0x420(%rbp)
   1469d:	48 8b bd 18 ff ff ff 	mov    -0xe8(%rbp),%rdi
   146a4:	e8 37 f8 ff ff       	call   13ee0 <_ZNK4acpi15AcpiTableHeader4sizeEv>
   146a9:	48 8b 8d e0 fb ff ff 	mov    -0x420(%rbp),%rcx
   146b0:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
   146b7:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
        return 0 == calc_checksum(buffer, len);
   146be:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
   146c5:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
   146cc:	e8 2f f8 ff ff       	call   13f00 <_ZN4acpi13calc_checksumEPKvm>
   146d1:	0f b6 c8             	movzbl %al,%ecx
        if (!validate_checksum(table, table->header.size())) {
   146d4:	31 c0                	xor    %eax,%eax
        return 0 == calc_checksum(buffer, len);
   146d6:	39 c8                	cmp    %ecx,%eax
        if (!validate_checksum(table, table->header.size())) {
   146d8:	74 09                	je     146e3 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x653>
            return false;
   146da:	c6 85 27 ff ff ff 00 	movb   $0x0,-0xd9(%rbp)
   146e1:	eb 07                	jmp    146ea <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x65a>
        return true;
   146e3:	c6 85 27 ff ff ff 01 	movb   $0x1,-0xd9(%rbp)
   146ea:	f6 85 27 ff ff ff 01 	testb  $0x1,-0xd9(%rbp)
   146f1:	75 05                	jne    146f8 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x668>
   146f3:	e9 84 01 00 00       	jmp    1487c <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x7ec>
                auto const num_tables = rsdt->header.length / sizeof(u32);
   146f8:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
   146ff:	8b 40 04             	mov    0x4(%rax),%eax
   14702:	c1 e8 02             	shr    $0x2,%eax
   14705:	48 89 85 80 fc ff ff 	mov    %rax,-0x380(%rbp)
                return ustl::ok(AcpiParser(p2v, result->rsdp_addr, 0, rsdt, rsdp_pa, num_tables));
   1470c:	48 8b bd 70 fd ff ff 	mov    -0x290(%rbp),%rdi
   14713:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   1471a:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
   14721:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
   14728:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1472c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14730:	48 8b 30             	mov    (%rax),%rsi
   14733:	48 8b 95 88 fc ff ff 	mov    -0x378(%rbp),%rdx
   1473a:	48 8b 8d 68 fd ff ff 	mov    -0x298(%rbp),%rcx
   14741:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
   14748:	4c 8d 85 10 fc ff ff 	lea    -0x3f0(%rbp),%r8
   1474f:	4c 89 85 f0 fe ff ff 	mov    %r8,-0x110(%rbp)
   14756:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
   1475d:	48 89 b5 e0 fe ff ff 	mov    %rsi,-0x120(%rbp)
   14764:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
   1476b:	00 00 00 00 
   1476f:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
   14776:	48 89 8d c8 fe ff ff 	mov    %rcx,-0x138(%rbp)
   1477d:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
   14784:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
   1478b:	48 89 bd d8 fb ff ff 	mov    %rdi,-0x428(%rbp)
        AcpiParser(IPhysToVirt *p2v, PhysAddr rsdp_addr, AcpiXsdt const *xsdt, AcpiRsdt const *rsdt,
   14792:	e8 39 12 00 00       	call   159d0 <_ZN4acpi11IAcpiParserC2Ev>
   14797:	48 8b 85 d8 fb ff ff 	mov    -0x428(%rbp),%rax
              num_tables_(num_tables) {}
   1479e:	48 8d 0d 83 cd 01 00 	lea    0x1cd83(%rip),%rcx        # 31528 <_ZTVN4acpi10AcpiParserE+0x10>
   147a5:	48 89 08             	mov    %rcx,(%rax)
            : p2v_(p2v),
   147a8:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
   147af:	48 89 48 08          	mov    %rcx,0x8(%rax)
              rsdt_(rsdt),
   147b3:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
   147ba:	48 89 48 10          	mov    %rcx,0x10(%rax)
              xsdt_(xsdt),
   147be:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
   147c5:	48 89 48 18          	mov    %rcx,0x18(%rax)
              rsdp_paddr_(rsdp_addr),
   147c9:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
   147d0:	48 89 48 20          	mov    %rcx,0x20(%rax)
              root_table_paddr_(root_table_paddr),
   147d4:	48 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%rcx
   147db:	48 89 48 28          	mov    %rcx,0x28(%rax)
              num_tables_(num_tables) {}
   147df:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
   147e6:	48 89 48 30          	mov    %rcx,0x30(%rax)
   147ea:	48 8d 85 48 fc ff ff 	lea    -0x3b8(%rbp),%rax
   147f1:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
   147f8:	48 8d 85 10 fc ff ff 	lea    -0x3f0(%rbp),%rax
   147ff:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
   14806:	48 8d 85 10 fc ff ff 	lea    -0x3f0(%rbp),%rax
   1480d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   14811:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   14815:	48 8d bd 48 fc ff ff 	lea    -0x3b8(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
   1481c:	e8 7f 11 00 00       	call   159a0 <_ZN4ustl2OkIN4acpi10AcpiParserEEC2IJS2_EEEDpOT_>
   14821:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
   14828:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   1482f:	48 8d 85 48 fc ff ff 	lea    -0x3b8(%rbp),%rax
   14836:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   1483d:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
   14844:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   1484b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1484f:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   14853:	e8 98 11 00 00       	call   159f0 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
   14858:	48 8d bd 48 fc ff ff 	lea    -0x3b8(%rbp),%rdi
   1485f:	e8 1c 0e 00 00       	call   15680 <_ZN4ustl2OkIN4acpi10AcpiParserEED2Ev>
   14864:	48 8d bd 10 fc ff ff 	lea    -0x3f0(%rbp),%rdi
   1486b:	e8 30 0e 00 00       	call   156a0 <_ZN4acpi10AcpiParserD2Ev>
   14870:	c7 85 40 fd ff ff 01 	movl   $0x1,-0x2c0(%rbp)
   14877:	00 00 00 
   1487a:	eb 0a                	jmp    14886 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x7f6>
            }
        }
   1487c:	c7 85 40 fd ff ff 00 	movl   $0x0,-0x2c0(%rbp)
   14883:	00 00 00 
   14886:	48 8d bd 98 fc ff ff 	lea    -0x368(%rbp),%rdi
   1488d:	e8 2e 0e 00 00       	call   156c0 <_ZN4ustl6ResultIPKvN4ours6StatusEvED2Ev>
   14892:	8b 85 40 fd ff ff    	mov    -0x2c0(%rbp),%eax
   14898:	85 c0                	test   %eax,%eax
   1489a:	0f 85 82 00 00 00    	jne    14922 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x892>
   148a0:	eb 00                	jmp    148a2 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x812>
   148a2:	eb 00                	jmp    148a4 <_ZN4acpi10AcpiParser9from_rsdpEPNS_11IPhysToVirtEm+0x814>
   148a4:	c7 85 38 ff ff ff 0b 	movl   $0xb,-0xc8(%rbp)
   148ab:	00 00 00 
   148ae:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
   148b5:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   148bc:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
   148c3:	48 8d bd 3c ff ff ff 	lea    -0xc4(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
   148ca:	e8 81 32 ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
   148cf:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
   148d6:	8b 8d 3c ff ff ff    	mov    -0xc4(%rbp),%ecx

        return ustl::err(Status::NotFound);
   148dc:	89 8d 0c fc ff ff    	mov    %ecx,-0x3f4(%rbp)
   148e2:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   148e9:	48 8d 85 0c fc ff ff 	lea    -0x3f4(%rbp),%rax
   148f0:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   148f7:	48 8b bd d0 fd ff ff 	mov    -0x230(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   148fe:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   14905:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1490c:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
   14913:	e8 58 10 00 00       	call   15970 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   14918:	c7 85 40 fd ff ff 01 	movl   $0x1,-0x2c0(%rbp)
   1491f:	00 00 00 
   14922:	48 8d bd 48 fd ff ff 	lea    -0x2b8(%rbp),%rdi
    }
   14929:	e8 b2 0d 00 00       	call   156e0 <_ZN4ustl6ResultIN4acpi22RootSystemTableDetailsEN4ours6StatusEvED2Ev>
   1492e:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
   14935:	48 81 c4 30 04 00 00 	add    $0x430,%rsp
   1493c:	5d                   	pop    %rbp
   1493d:	c3                   	ret
   1493e:	66 90                	xchg   %ax,%ax

0000000000014940 <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm>:
    static auto get_root_tables(IPhysToVirt *p2v, PhysAddr rsdp_pa) -> ktl::Result<RootSystemTableDetails> {
   14940:	55                   	push   %rbp
   14941:	48 89 e5             	mov    %rsp,%rbp
   14944:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
   1494b:	48 89 bd 18 fe ff ff 	mov    %rdi,-0x1e8(%rbp)
   14952:	48 89 f8             	mov    %rdi,%rax
   14955:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
   1495c:	48 89 bd d0 fe ff ff 	mov    %rdi,-0x130(%rbp)
   14963:	48 89 b5 c8 fe ff ff 	mov    %rsi,-0x138(%rbp)
   1496a:	48 89 95 c0 fe ff ff 	mov    %rdx,-0x140(%rbp)
        auto maybe_rsdp = p2v->phys_to_virt(rsdp_pa, sizeof(AcpiRsdp));
   14971:	48 8b b5 c8 fe ff ff 	mov    -0x138(%rbp),%rsi
   14978:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
   1497f:	48 8b 06             	mov    (%rsi),%rax
   14982:	48 8d bd b0 fe ff ff 	lea    -0x150(%rbp),%rdi
   14989:	b9 14 00 00 00       	mov    $0x14,%ecx
   1498e:	ff 50 10             	call   *0x10(%rax)
   14991:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   14998:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
   1499f:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
   149a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   149aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   149ae:	48 83 c0 08          	add    $0x8,%rax
   149b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   149b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149ba:	0f b7 00             	movzwl (%rax),%eax
   149bd:	83 e0 01             	and    $0x1,%eax
   149c0:	83 f8 00             	cmp    $0x0,%eax
        if (!maybe_rsdp) {
   149c3:	75 7b                	jne    14a40 <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x100>
   149c5:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   149cc:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   149d3:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   149da:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   149de:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   149e2:	48 8d bd ec fe ff ff 	lea    -0x114(%rbp),%rdi
            return Err<Error>(unwrap_err());
   149e9:	e8 b2 0e 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   149ee:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   149f5:	8b 8d ec fe ff ff    	mov    -0x114(%rbp),%ecx
            return maybe_rsdp.err();
   149fb:	89 8d ac fe ff ff    	mov    %ecx,-0x154(%rbp)
   14a01:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   14a08:	48 8d 85 ac fe ff ff 	lea    -0x154(%rbp),%rax
   14a0f:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   14a16:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14a1d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   14a24:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   14a28:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   14a2c:	e8 9f 0d 00 00       	call   157d0 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   14a31:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
   14a38:	00 00 00 
   14a3b:	e9 2e 03 00 00       	jmp    14d6e <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x42e>
   14a40:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   14a47:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   14a4e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
        auto rsdp = static_cast<AcpiRsdp const *>(maybe_rsdp.unwrap());
   14a55:	48 8b 00             	mov    (%rax),%rax
   14a58:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
        if (!rsdp->validate()) {
   14a5f:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
   14a66:	e8 e5 f4 ff ff       	call   13f50 <_ZNK4acpi8AcpiRsdp8validateEv>
   14a6b:	a8 01                	test   $0x1,%al
   14a6d:	75 77                	jne    14ae6 <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x1a6>
   14a6f:	c7 85 00 ff ff ff 0b 	movl   $0xb,-0x100(%rbp)
   14a76:	00 00 00 
   14a79:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
   14a80:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   14a84:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   14a88:	48 8d bd 04 ff ff ff 	lea    -0xfc(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
   14a8f:	e8 bc 30 ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
   14a94:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   14a9b:	8b 8d 04 ff ff ff    	mov    -0xfc(%rbp),%ecx
            return ktl::err(Status::NotFound);
   14aa1:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%rbp)
   14aa7:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   14aae:	48 8d 85 9c fe ff ff 	lea    -0x164(%rbp),%rax
   14ab5:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   14abc:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14ac3:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   14aca:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   14ace:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   14ad2:	e8 f9 0c 00 00       	call   157d0 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   14ad7:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
   14ade:	00 00 00 
   14ae1:	e9 88 02 00 00       	jmp    14d6e <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x42e>
        rstd.rsdp_addr = rsdp_pa;
   14ae6:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
   14aed:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
        rstd.rsdt_addr = rsdp->rsdt_addr;
   14af4:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   14afb:	8b 40 10             	mov    0x10(%rax),%eax
   14afe:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
        if (rsdp->revision >= 2) {
   14b05:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   14b0c:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
   14b10:	83 f8 02             	cmp    $0x2,%eax
   14b13:	0f 8c a6 01 00 00    	jl     14cbf <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x37f>
            auto maybe_xsdp = map_structure<AcpiRsdpV2>(p2v, rsdp_pa);
   14b19:	48 8b b5 c8 fe ff ff 	mov    -0x138(%rbp),%rsi
   14b20:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
   14b27:	48 8d bd 70 fe ff ff 	lea    -0x190(%rbp),%rdi
   14b2e:	e8 3d 08 00 00       	call   15370 <_ZN4acpiL13map_structureINS_10AcpiRsdpV2EEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm>
   14b33:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
   14b3a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   14b41:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   14b48:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   14b4c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   14b50:	48 83 c0 08          	add    $0x8,%rax
   14b54:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   14b58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   14b5c:	0f b7 00             	movzwl (%rax),%eax
   14b5f:	83 e0 01             	and    $0x1,%eax
   14b62:	83 f8 00             	cmp    $0x0,%eax
            if (!maybe_xsdp) {
   14b65:	75 7b                	jne    14be2 <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x2a2>
   14b67:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
   14b6e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   14b75:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   14b7c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   14b80:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   14b84:	48 8d bd 5c ff ff ff 	lea    -0xa4(%rbp),%rdi
            return Err<Error>(unwrap_err());
   14b8b:	e8 10 0d 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   14b90:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   14b97:	8b 8d 5c ff ff ff    	mov    -0xa4(%rbp),%ecx
                return maybe_xsdp.err();
   14b9d:	89 8d 6c fe ff ff    	mov    %ecx,-0x194(%rbp)
   14ba3:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   14baa:	48 8d 85 6c fe ff ff 	lea    -0x194(%rbp),%rax
   14bb1:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   14bb8:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14bbf:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   14bc6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   14bca:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   14bce:	e8 fd 0b 00 00       	call   157d0 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   14bd3:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
   14bda:	00 00 00 
   14bdd:	e9 bf 00 00 00       	jmp    14ca1 <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x361>
   14be2:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
   14be9:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   14bf0:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
            auto xsdp = maybe_xsdp.unwrap();
   14bf7:	48 8b 00             	mov    (%rax),%rax
   14bfa:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
            if (!xsdp->validate()) {
   14c01:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
   14c08:	e8 e3 f3 ff ff       	call   13ff0 <_ZNK4acpi10AcpiRsdpV28validateEv>
   14c0d:	a8 01                	test   $0x1,%al
   14c0f:	75 74                	jne    14c85 <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x345>
   14c11:	c7 85 f8 fe ff ff 0b 	movl   $0xb,-0x108(%rbp)
   14c18:	00 00 00 
   14c1b:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   14c22:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   14c26:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   14c2a:	48 8d bd fc fe ff ff 	lea    -0x104(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
   14c31:	e8 1a 2f ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
   14c36:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   14c3d:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
                return ktl::err(Status::NotFound);
   14c43:	89 8d 5c fe ff ff    	mov    %ecx,-0x1a4(%rbp)
   14c49:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   14c50:	48 8d 85 5c fe ff ff 	lea    -0x1a4(%rbp),%rax
   14c57:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   14c5e:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14c65:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   14c6c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   14c70:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
   14c74:	e8 57 0b 00 00       	call   157d0 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   14c79:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
   14c80:	00 00 00 
   14c83:	eb 1c                	jmp    14ca1 <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x361>
            rstd.xsdt_addr = xsdp->xsdt_addr;
   14c85:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
   14c8c:	48 8b 40 18          	mov    0x18(%rax),%rax
   14c90:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
        } else {
   14c97:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
   14c9e:	00 00 00 
   14ca1:	48 8d bd 70 fe ff ff 	lea    -0x190(%rbp),%rdi
   14ca8:	e8 03 0b 00 00       	call   157b0 <_ZN4ustl6ResultIPKN4acpi10AcpiRsdpV2EN4ours6StatusEvED2Ev>
   14cad:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
   14cb3:	85 c0                	test   %eax,%eax
   14cb5:	0f 85 b3 00 00 00    	jne    14d6e <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x42e>
   14cbb:	eb 00                	jmp    14cbd <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x37d>
   14cbd:	eb 0b                	jmp    14cca <_ZN4acpiL15get_root_tablesEPNS_11IPhysToVirtEm+0x38a>
            rstd.xsdt_addr = 0;
   14cbf:	48 c7 85 90 fe ff ff 	movq   $0x0,-0x170(%rbp)
   14cc6:	00 00 00 00 
        return ustl::ok(rstd);
   14cca:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
   14cd1:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
   14cd8:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
   14cdf:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
   14ce6:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
   14ced:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
    {  return Ok<T>(ustl::forward<T>(t));  }
   14cf4:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
   14cfb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   14d02:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
   14d09:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   14d10:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
   14d17:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   14d1e:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   14d25:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   14d29:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   14d2d:	48 8d bd 40 fe ff ff 	lea    -0x1c0(%rbp),%rdi
   14d34:	e8 a7 0b 00 00       	call   158e0 <_ZN4ustl2OkIN4acpi22RootSystemTableDetailsEEC2IJS2_EEEDpOT_>
   14d39:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   14d40:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   14d44:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
   14d4b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   14d4f:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
   14d53:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   14d57:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   14d5b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   14d5f:	e8 bc 0b 00 00       	call   15920 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>
   14d64:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
   14d6b:	00 00 00 
   14d6e:	48 8d bd b0 fe ff ff 	lea    -0x150(%rbp),%rdi
    }
   14d75:	e8 46 09 00 00       	call   156c0 <_ZN4ustl6ResultIPKvN4ours6StatusEvED2Ev>
   14d7a:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
   14d81:	48 81 c4 f0 01 00 00 	add    $0x1f0,%rsp
   14d88:	5d                   	pop    %rbp
   14d89:	c3                   	ret
   14d8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000014d90 <_ZNK4acpi10AcpiParser19get_table_phys_addrEm>:

    auto AcpiParser::get_table_phys_addr(usize index) const -> PhysAddr {
   14d90:	55                   	push   %rbp
   14d91:	48 89 e5             	mov    %rsp,%rbp
   14d94:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   14d98:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   14d9c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   14da0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
        if (index < num_tables_) {
   14da4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14da8:	48 3b 41 30          	cmp    0x30(%rcx),%rax
   14dac:	73 40                	jae    14dee <_ZNK4acpi10AcpiParser19get_table_phys_addrEm+0x5e>
   14dae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
            return xsdt_ ? xsdt_->addr64[index] : rsdt_->addr32[index];
   14db2:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
   14db7:	74 17                	je     14dd0 <_ZNK4acpi10AcpiParser19get_table_phys_addrEm+0x40>
   14db9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14dbd:	48 8b 40 18          	mov    0x18(%rax),%rax
   14dc1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   14dc5:	48 8b 44 c8 24       	mov    0x24(%rax,%rcx,8),%rax
   14dca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   14dce:	eb 14                	jmp    14de4 <_ZNK4acpi10AcpiParser19get_table_phys_addrEm+0x54>
   14dd0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14dd4:	48 8b 40 10          	mov    0x10(%rax),%rax
   14dd8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   14ddc:	8b 44 88 24          	mov    0x24(%rax,%rcx,4),%eax
   14de0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   14de4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   14de8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   14dec:	eb 08                	jmp    14df6 <_ZNK4acpi10AcpiParser19get_table_phys_addrEm+0x66>
        }
        return 0;
   14dee:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   14df5:	00 
    }
   14df6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14dfa:	5d                   	pop    %rbp
   14dfb:	c3                   	ret
   14dfc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000014e00 <_ZNK4acpi10AcpiParser18get_table_at_indexEm>:

    auto AcpiParser::get_table_at_index(usize index) const -> ktl::Result<AcpiTableHeader const *> {
   14e00:	55                   	push   %rbp
   14e01:	48 89 e5             	mov    %rsp,%rbp
   14e04:	48 83 ec 70          	sub    $0x70,%rsp
   14e08:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
   14e0c:	48 89 f8             	mov    %rdi,%rax
   14e0f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   14e13:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   14e17:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   14e1b:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   14e1f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   14e23:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
        PhysAddr phys_addr = get_table_phys_addr(index);
   14e27:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   14e2b:	e8 60 ff ff ff       	call   14d90 <_ZNK4acpi10AcpiParser19get_table_phys_addrEm>
   14e30:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        if (!phys_addr) {
   14e34:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
   14e39:	75 49                	jne    14e84 <_ZNK4acpi10AcpiParser18get_table_at_indexEm+0x84>
   14e3b:	c7 45 d8 0b 00 00 00 	movl   $0xb,-0x28(%rbp)
   14e42:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   14e46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   14e4a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   14e4e:	48 8d 7d dc          	lea    -0x24(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
   14e52:	e8 f9 2c ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
   14e57:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   14e5b:	8b 4d dc             	mov    -0x24(%rbp),%ecx
            return ustl::err(Status::NotFound);
   14e5e:	89 4d b4             	mov    %ecx,-0x4c(%rbp)
   14e61:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14e65:	48 8d 45 b4          	lea    -0x4c(%rbp),%rax
   14e69:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   14e6d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14e71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14e75:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   14e79:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   14e7d:	e8 ce 0b 00 00       	call   15a50 <_ZN4ustl6result14StorageTrivialIPKN4acpi15AcpiTableHeaderEN4ours6StatusEEC2IJS7_EEENS_7InplaceIJS7_EEEDpOT_>
   14e82:	eb 15                	jmp    14e99 <_ZNK4acpi10AcpiParser18get_table_at_indexEm+0x99>
   14e84:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   14e88:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
        }

        return map_structure<AcpiTableHeader>(p2v_, phys_addr);
   14e8c:	48 8b 70 08          	mov    0x8(%rax),%rsi
   14e90:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14e94:	e8 17 00 00 00       	call   14eb0 <_ZN4acpiL13map_structureINS_15AcpiTableHeaderEEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm>
   14e99:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    }
   14e9d:	48 83 c4 70          	add    $0x70,%rsp
   14ea1:	5d                   	pop    %rbp
   14ea2:	c3                   	ret
   14ea3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   14eaa:	84 00 00 00 00 00 

0000000000014eb0 <_ZN4acpiL13map_structureINS_15AcpiTableHeaderEEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm>:
    static auto map_structure(IPhysToVirt *p2v, PhysAddr phys_addr) -> ktl::Result<T const *> {
   14eb0:	55                   	push   %rbp
   14eb1:	48 89 e5             	mov    %rsp,%rbp
   14eb4:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
   14ebb:	48 89 bd b0 fe ff ff 	mov    %rdi,-0x150(%rbp)
   14ec2:	48 89 f8             	mov    %rdi,%rax
   14ec5:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
   14ecc:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
   14ed3:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
   14eda:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
        auto result = p2v->phys_to_virt(phys_addr, sizeof(T));
   14ee1:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
   14ee8:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
   14eef:	48 8b 06             	mov    (%rsi),%rax
   14ef2:	48 8d bd f8 fe ff ff 	lea    -0x108(%rbp),%rdi
   14ef9:	b9 24 00 00 00       	mov    $0x24,%ecx
   14efe:	ff 50 10             	call   *0x10(%rax)
   14f01:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   14f08:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   14f0f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   14f16:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   14f1a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   14f1e:	48 83 c0 08          	add    $0x8,%rax
   14f22:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   14f26:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14f2a:	0f b7 00             	movzwl (%rax),%eax
   14f2d:	83 e0 01             	and    $0x1,%eax
   14f30:	83 f8 00             	cmp    $0x0,%eax
        if (!result) {
   14f33:	75 7b                	jne    14fb0 <_ZN4acpiL13map_structureINS_15AcpiTableHeaderEEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x100>
   14f35:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   14f3c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   14f43:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   14f4a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   14f4e:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   14f52:	48 8d bd 4c ff ff ff 	lea    -0xb4(%rbp),%rdi
            return Err<Error>(unwrap_err());
   14f59:	e8 42 09 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   14f5e:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
   14f65:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
            return result.err();
   14f6b:	89 8d f4 fe ff ff    	mov    %ecx,-0x10c(%rbp)
   14f71:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   14f78:	48 8d 85 f4 fe ff ff 	lea    -0x10c(%rbp),%rax
   14f7f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   14f86:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   14f8d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   14f94:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   14f98:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
   14f9c:	e8 af 0a 00 00       	call   15a50 <_ZN4ustl6result14StorageTrivialIPKN4acpi15AcpiTableHeaderEN4ours6StatusEEC2IJS7_EEENS_7InplaceIJS7_EEEDpOT_>
   14fa1:	c7 85 f0 fe ff ff 01 	movl   $0x1,-0x110(%rbp)
   14fa8:	00 00 00 
   14fab:	e9 ea 01 00 00       	jmp    1519a <_ZN4acpiL13map_structureINS_15AcpiTableHeaderEEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x2ea>
   14fb0:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   14fb7:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   14fbe:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
        auto header = static_cast<T const *>(result.unwrap());
   14fc5:	48 8b 00             	mov    (%rax),%rax
   14fc8:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
        if (header->size() < sizeof(T)) {
   14fcf:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
   14fd6:	e8 05 ef ff ff       	call   13ee0 <_ZNK4acpi15AcpiTableHeader4sizeEv>
   14fdb:	48 83 f8 24          	cmp    $0x24,%rax
   14fdf:	73 71                	jae    15052 <_ZN4acpiL13map_structureINS_15AcpiTableHeaderEEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x1a2>
   14fe1:	c7 85 60 ff ff ff 09 	movl   $0x9,-0xa0(%rbp)
   14fe8:	00 00 00 
   14feb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   14ff2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   14ff6:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   14ffa:	48 8d bd 64 ff ff ff 	lea    -0x9c(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
   15001:	e8 4a 2b ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
   15006:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
   1500d:	8b 8d 64 ff ff ff    	mov    -0x9c(%rbp),%ecx
            return ustl::err(Status::InternalError);
   15013:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%rbp)
   15019:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1501d:	48 8d 85 e4 fe ff ff 	lea    -0x11c(%rbp),%rax
   15024:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1502b:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   1502f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   15036:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   1503a:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
   1503e:	e8 0d 0a 00 00       	call   15a50 <_ZN4ustl6result14StorageTrivialIPKN4acpi15AcpiTableHeaderEN4ours6StatusEEC2IJS7_EEENS_7InplaceIJS7_EEEDpOT_>
   15043:	c7 85 f0 fe ff ff 01 	movl   $0x1,-0x110(%rbp)
   1504a:	00 00 00 
   1504d:	e9 48 01 00 00       	jmp    1519a <_ZN4acpiL13map_structureINS_15AcpiTableHeaderEEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x2ea>
        result = p2v->phys_to_virt(phys_addr, header->size());
   15052:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   15059:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
   15060:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   15067:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
   1506e:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
   15075:	e8 66 ee ff ff       	call   13ee0 <_ZNK4acpi15AcpiTableHeader4sizeEv>
   1507a:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
   15081:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
   15088:	48 89 c1             	mov    %rax,%rcx
   1508b:	48 8b 06             	mov    (%rsi),%rax
   1508e:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
   15095:	ff 50 10             	call   *0x10(%rax)
   15098:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
   1509f:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
   150a6:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
   150ad:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   150b4:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
   150bb:	e8 00 06 00 00       	call   156c0 <_ZN4ustl6ResultIPKvN4ours6StatusEvED2Ev>
   150c0:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   150c7:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   150ce:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   150d5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   150d9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   150dd:	48 83 c0 08          	add    $0x8,%rax
   150e1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   150e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   150e9:	0f b7 00             	movzwl (%rax),%eax
   150ec:	83 e0 01             	and    $0x1,%eax
   150ef:	83 f8 00             	cmp    $0x0,%eax
        if (!result) {
   150f2:	75 35                	jne    15129 <_ZN4acpiL13map_structureINS_15AcpiTableHeaderEEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x279>
   150f4:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   150fb:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   15102:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   15109:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1510d:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   15111:	48 8d bd 3c ff ff ff 	lea    -0xc4(%rbp),%rdi
            return Err<Error>(unwrap_err());
   15118:	e8 83 07 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   1511d:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
            result.err();
   15123:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
   15129:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15130:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   15137:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
        return ustl::ok(static_cast<T const *>(result.unwrap()));
   1513e:	48 8b 00             	mov    (%rax),%rax
   15141:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   15145:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   15149:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1514d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   15151:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
   15155:	e8 36 09 00 00       	call   15a90 <_ZN4ustl2OkIPKN4acpi15AcpiTableHeaderEEC2IJS4_EEEDpOT_>
   1515a:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
   15161:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   15165:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
   1516c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   15170:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
   15177:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1517b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
   1517f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15183:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15187:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1518b:	e8 30 09 00 00       	call   15ac0 <_ZN4ustl6result14StorageTrivialIPKN4acpi15AcpiTableHeaderEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   15190:	c7 85 f0 fe ff ff 01 	movl   $0x1,-0x110(%rbp)
   15197:	00 00 00 
   1519a:	48 8d bd f8 fe ff ff 	lea    -0x108(%rbp),%rdi
    }
   151a1:	e8 1a 05 00 00       	call   156c0 <_ZN4ustl6ResultIPKvN4ours6StatusEvED2Ev>
   151a6:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
   151ad:	48 81 c4 60 01 00 00 	add    $0x160,%rsp
   151b4:	5d                   	pop    %rbp
   151b5:	c3                   	ret
   151b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   151bd:	00 00 00 

00000000000151c0 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE>:

    auto get_table_by_signature(IAcpiParser const &parser, AcpiSignature signature) -> AcpiTableHeader const * {
   151c0:	55                   	push   %rbp
   151c1:	48 89 e5             	mov    %rsp,%rbp
   151c4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   151cb:	89 75 94             	mov    %esi,-0x6c(%rbp)
   151ce:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
        auto const n = parser.num_tables();
   151d2:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   151d6:	48 8b 07             	mov    (%rdi),%rax
   151d9:	ff 50 10             	call   *0x10(%rax)
   151dc:	48 89 45 80          	mov    %rax,-0x80(%rbp)
        for (auto i = 0; i < n; ++i) {
   151e0:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
   151e7:	00 00 00 
   151ea:	48 63 85 7c ff ff ff 	movslq -0x84(%rbp),%rax
   151f1:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
   151f5:	0f 83 51 01 00 00    	jae    1534c <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x18c>
            auto result = parser.get_table_at_index(i);
   151fb:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
   151ff:	48 63 95 7c ff ff ff 	movslq -0x84(%rbp),%rdx
   15206:	48 8b 06             	mov    (%rsi),%rax
   15209:	48 8d bd 68 ff ff ff 	lea    -0x98(%rbp),%rdi
   15210:	ff 50 18             	call   *0x18(%rax)
   15213:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   1521a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1521e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   15222:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   1522a:	48 83 c0 08          	add    $0x8,%rax
   1522e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15232:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15236:	0f b7 00             	movzwl (%rax),%eax
   15239:	83 e0 01             	and    $0x1,%eax
   1523c:	83 f8 00             	cmp    $0x0,%eax
            if (!result) {
   1523f:	75 0f                	jne    15250 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x90>
   15241:	c7 85 64 ff ff ff 04 	movl   $0x4,-0x9c(%rbp)
   15248:	00 00 00 
                continue;
   1524b:	e9 b9 00 00 00       	jmp    15309 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x149>
   15250:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   15257:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1525b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1525f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   15263:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            }

            if ((*result)->sign != signature) {
   15267:	48 8b 38             	mov    (%rax),%rdi
   1526a:	48 8d 75 94          	lea    -0x6c(%rbp),%rsi
   1526e:	e8 8d 04 00 00       	call   15700 <_ZN4acpineERKNS_13AcpiSignatureES2_>
   15273:	a8 01                	test   $0x1,%al
   15275:	75 02                	jne    15279 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0xb9>
   15277:	eb 0f                	jmp    15288 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0xc8>
   15279:	c7 85 64 ff ff ff 04 	movl   $0x4,-0x9c(%rbp)
   15280:	00 00 00 
                continue;
   15283:	e9 81 00 00 00       	jmp    15309 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x149>
   15288:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   1528f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   15293:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   15297:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1529b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
            }

            if (validate_checksum(*result, (*result)->length)) {
   1529f:	48 8b 08             	mov    (%rax),%rcx
   152a2:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   152a9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   152ad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   152b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   152b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   152b9:	48 8b 00             	mov    (%rax),%rax
   152bc:	8b 40 04             	mov    0x4(%rax),%eax
   152bf:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   152c3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
        return 0 == calc_checksum(buffer, len);
   152c7:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   152cb:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   152cf:	e8 2c ec ff ff       	call   13f00 <_ZN4acpi13calc_checksumEPKvm>
   152d4:	0f b6 c8             	movzbl %al,%ecx
   152d7:	31 c0                	xor    %eax,%eax
   152d9:	39 c8                	cmp    %ecx,%eax
   152db:	75 22                	jne    152ff <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x13f>
   152dd:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   152e4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   152e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
                return result.unwrap();
   152ec:	48 8b 00             	mov    (%rax),%rax
   152ef:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   152f3:	c7 85 64 ff ff ff 01 	movl   $0x1,-0x9c(%rbp)
   152fa:	00 00 00 
   152fd:	eb 0a                	jmp    15309 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x149>
            }
        }
   152ff:	c7 85 64 ff ff ff 00 	movl   $0x0,-0x9c(%rbp)
   15306:	00 00 00 
   15309:	48 8d bd 68 ff ff ff 	lea    -0x98(%rbp),%rdi
   15310:	e8 0b 04 00 00       	call   15720 <_ZN4ustl6ResultIPKN4acpi15AcpiTableHeaderEN4ours6StatusEvED2Ev>
   15315:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
   1531b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
   15321:	85 c0                	test   %eax,%eax
   15323:	74 11                	je     15336 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x176>
   15325:	eb 00                	jmp    15327 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x167>
   15327:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
   1532d:	83 e8 01             	sub    $0x1,%eax
   15330:	74 22                	je     15354 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x194>
   15332:	eb 00                	jmp    15334 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x174>
   15334:	eb 02                	jmp    15338 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x178>
   15336:	eb 00                	jmp    15338 <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x178>
        for (auto i = 0; i < n; ++i) {
   15338:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
   1533e:	83 c0 01             	add    $0x1,%eax
   15341:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
   15347:	e9 9e fe ff ff       	jmp    151ea <_ZN4acpi22get_table_by_signatureERKNS_11IAcpiParserENS_13AcpiSignatureE+0x2a>

        return 0;
   1534c:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
   15353:	00 
    }
   15354:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   15358:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   1535f:	5d                   	pop    %rbp
   15360:	c3                   	ret
   15361:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   15368:	0f 1f 84 00 00 00 00 
   1536f:	00 

0000000000015370 <_ZN4acpiL13map_structureINS_10AcpiRsdpV2EEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm>:
    static auto map_structure(IPhysToVirt *p2v, PhysAddr phys_addr) -> ktl::Result<T const *> {
   15370:	55                   	push   %rbp
   15371:	48 89 e5             	mov    %rsp,%rbp
   15374:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
   1537b:	48 89 bd a0 fe ff ff 	mov    %rdi,-0x160(%rbp)
   15382:	48 89 f8             	mov    %rdi,%rax
   15385:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
   1538c:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
   15393:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
   1539a:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
        auto result = p2v->phys_to_virt(phys_addr, sizeof(T));
   153a1:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
   153a8:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
   153af:	48 8b 06             	mov    (%rsi),%rax
   153b2:	48 8d bd e8 fe ff ff 	lea    -0x118(%rbp),%rdi
   153b9:	b9 24 00 00 00       	mov    $0x24,%ecx
   153be:	ff 50 10             	call   *0x10(%rax)
   153c1:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
   153c8:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   153cf:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   153d6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   153da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   153de:	48 83 c0 08          	add    $0x8,%rax
   153e2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   153e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   153ea:	0f b7 00             	movzwl (%rax),%eax
   153ed:	83 e0 01             	and    $0x1,%eax
   153f0:	83 f8 00             	cmp    $0x0,%eax
        if (!result) {
   153f3:	75 7b                	jne    15470 <_ZN4acpiL13map_structureINS_10AcpiRsdpV2EEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x100>
   153f5:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
   153fc:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   15403:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1540a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1540e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   15412:	48 8d bd 4c ff ff ff 	lea    -0xb4(%rbp),%rdi
            return Err<Error>(unwrap_err());
   15419:	e8 82 04 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   1541e:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   15425:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
            return result.err();
   1542b:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%rbp)
   15431:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   15438:	48 8d 85 e4 fe ff ff 	lea    -0x11c(%rbp),%rax
   1543f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   15446:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   1544d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   15454:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   15458:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   1545c:	e8 9f 03 00 00       	call   15800 <_ZN4ustl6result14StorageTrivialIPKN4acpi10AcpiRsdpV2EN4ours6StatusEEC2IJS7_EEENS_7InplaceIJS7_EEEDpOT_>
   15461:	c7 85 e0 fe ff ff 01 	movl   $0x1,-0x120(%rbp)
   15468:	00 00 00 
   1546b:	e9 e5 01 00 00       	jmp    15655 <_ZN4acpiL13map_structureINS_10AcpiRsdpV2EEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x2e5>
   15470:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
   15477:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   1547e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
        auto header = static_cast<T const *>(result.unwrap());
   15485:	48 8b 00             	mov    (%rax),%rax
   15488:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
        if (header->size() < sizeof(T)) {
   1548f:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
   15496:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   1549d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   154a4:	8b 40 14             	mov    0x14(%rax),%eax
   154a7:	48 83 f8 24          	cmp    $0x24,%rax
   154ab:	73 71                	jae    1551e <_ZN4acpiL13map_structureINS_10AcpiRsdpV2EEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x1ae>
   154ad:	c7 85 60 ff ff ff 09 	movl   $0x9,-0xa0(%rbp)
   154b4:	00 00 00 
   154b7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   154be:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   154c5:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   154cc:	48 8d bd 64 ff ff ff 	lea    -0x9c(%rbp),%rdi
    {  return Err<E>(ustl::forward<E>(e));  }
   154d3:	e8 78 26 ff ff       	call   7b50 <_ZN4ustl3ErrIN4ours6StatusEEC2IJS2_EEEDpOT_>
   154d8:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   154df:	8b 8d 64 ff ff ff    	mov    -0x9c(%rbp),%ecx
            return ustl::err(Status::InternalError);
   154e5:	89 8d d4 fe ff ff    	mov    %ecx,-0x12c(%rbp)
   154eb:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   154ef:	48 8d 85 d4 fe ff ff 	lea    -0x12c(%rbp),%rax
   154f6:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   154fa:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
            : storage_(Inplace<Error>(), ustl::forward<Error>(err.error_))
   154fe:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   15502:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   15506:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   1550a:	e8 f1 02 00 00       	call   15800 <_ZN4ustl6result14StorageTrivialIPKN4acpi10AcpiRsdpV2EN4ours6StatusEEC2IJS7_EEENS_7InplaceIJS7_EEEDpOT_>
   1550f:	c7 85 e0 fe ff ff 01 	movl   $0x1,-0x120(%rbp)
   15516:	00 00 00 
   15519:	e9 37 01 00 00       	jmp    15655 <_ZN4acpiL13map_structureINS_10AcpiRsdpV2EEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x2e5>
        result = p2v->phys_to_virt(phys_addr, header->size());
   1551e:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
   15525:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
   1552c:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
   15533:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   1553a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   15541:	8b 40 14             	mov    0x14(%rax),%eax
   15544:	89 c1                	mov    %eax,%ecx
   15546:	48 8b 06             	mov    (%rsi),%rax
   15549:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
   15550:	ff 50 10             	call   *0x10(%rax)
   15553:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
   1555a:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   15561:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
   15568:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   1556f:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
   15576:	e8 45 01 00 00       	call   156c0 <_ZN4ustl6ResultIPKvN4ours6StatusEvED2Ev>
   1557b:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
   15582:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   15589:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   15590:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        {  return this->storage_.status_.has_value();  }
   15598:	48 83 c0 08          	add    $0x8,%rax
   1559c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   155a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155a4:	0f b7 00             	movzwl (%rax),%eax
   155a7:	83 e0 01             	and    $0x1,%eax
   155aa:	83 f8 00             	cmp    $0x0,%eax
        if (!result) {
   155ad:	75 35                	jne    155e4 <_ZN4acpiL13map_structureINS_10AcpiRsdpV2EEEN4ustl6ResultIPKT_N4ours6StatusEvEEPNS_11IPhysToVirtEm+0x274>
   155af:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
   155b6:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   155bd:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   155c4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   155c8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   155cc:	48 8d bd 3c ff ff ff 	lea    -0xc4(%rbp),%rdi
            return Err<Error>(unwrap_err());
   155d3:	e8 c8 02 00 00       	call   158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>
   155d8:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
            result.err();
   155de:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
   155e4:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
   155eb:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   155f2:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
        return ustl::ok(static_cast<T const *>(result.unwrap()));
   155f9:	48 8b 00             	mov    (%rax),%rax
   155fc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   15600:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   15604:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   15608:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1560c:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    {  return Ok<T>(ustl::forward<T>(t));  }
   15610:	e8 1b 02 00 00       	call   15830 <_ZN4ustl2OkIPKN4acpi10AcpiRsdpV2EEC2IJS4_EEEDpOT_>
   15615:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   1561c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   15620:	48 89 8d b0 fe ff ff 	mov    %rcx,-0x150(%rbp)
   15627:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1562b:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15632:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   15636:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
            : storage_(Inplace<Element>(), ustl::forward<Element>(ok.value_))
   1563a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1563e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   15642:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   15646:	e8 15 02 00 00       	call   15860 <_ZN4ustl6result14StorageTrivialIPKN4acpi10AcpiRsdpV2EN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>
   1564b:	c7 85 e0 fe ff ff 01 	movl   $0x1,-0x120(%rbp)
   15652:	00 00 00 
   15655:	48 8d bd e8 fe ff ff 	lea    -0x118(%rbp),%rdi
    }
   1565c:	e8 5f 00 00 00       	call   156c0 <_ZN4ustl6ResultIPKvN4ours6StatusEvED2Ev>
   15661:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   15668:	48 81 c4 60 01 00 00 	add    $0x160,%rsp
   1566f:	5d                   	pop    %rbp
   15670:	c3                   	ret
   15671:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15678:	00 00 00 
   1567b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000015680 <_ZN4ustl2OkIN4acpi10AcpiParserEED2Ev>:
    struct Ok {
   15680:	55                   	push   %rbp
   15681:	48 89 e5             	mov    %rsp,%rbp
   15684:	48 83 ec 10          	sub    $0x10,%rsp
   15688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1568c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   15690:	e8 0b 00 00 00       	call   156a0 <_ZN4acpi10AcpiParserD2Ev>
   15695:	48 83 c4 10          	add    $0x10,%rsp
   15699:	5d                   	pop    %rbp
   1569a:	c3                   	ret
   1569b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000156a0 <_ZN4acpi10AcpiParserD2Ev>:
    struct AcpiParser: public IAcpiParser {
   156a0:	55                   	push   %rbp
   156a1:	48 89 e5             	mov    %rsp,%rbp
   156a4:	48 83 ec 10          	sub    $0x10,%rsp
   156a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   156ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   156b0:	e8 2b e7 ff ff       	call   13de0 <_ZN4acpi11IAcpiParserD2Ev>
   156b5:	48 83 c4 10          	add    $0x10,%rsp
   156b9:	5d                   	pop    %rbp
   156ba:	c3                   	ret
   156bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000156c0 <_ZN4ustl6ResultIPKvN4ours6StatusEvED2Ev>:
    class Result
   156c0:	55                   	push   %rbp
   156c1:	48 89 e5             	mov    %rsp,%rbp
   156c4:	48 83 ec 10          	sub    $0x10,%rsp
   156c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   156cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   156d0:	e8 5b 03 00 00       	call   15a30 <_ZN4ustl6result14StorageTrivialIPKvN4ours6StatusEED2Ev>
   156d5:	48 83 c4 10          	add    $0x10,%rsp
   156d9:	5d                   	pop    %rbp
   156da:	c3                   	ret
   156db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000156e0 <_ZN4ustl6ResultIN4acpi22RootSystemTableDetailsEN4ours6StatusEvED2Ev>:
   156e0:	55                   	push   %rbp
   156e1:	48 89 e5             	mov    %rsp,%rbp
   156e4:	48 83 ec 10          	sub    $0x10,%rsp
   156e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   156ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   156f0:	e8 4b 03 00 00       	call   15a40 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEED2Ev>
   156f5:	48 83 c4 10          	add    $0x10,%rsp
   156f9:	5d                   	pop    %rbp
   156fa:	c3                   	ret
   156fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000015700 <_ZN4acpineERKNS_13AcpiSignatureES2_>:
        friend bool operator!=(AcpiSignature const &left, AcpiSignature const &right) {
   15700:	55                   	push   %rbp
   15701:	48 89 e5             	mov    %rsp,%rbp
   15704:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15708:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
            return left.value != right.value;
   1570c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15710:	8b 00                	mov    (%rax),%eax
   15712:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   15716:	3b 01                	cmp    (%rcx),%eax
   15718:	0f 95 c0             	setne  %al
   1571b:	24 01                	and    $0x1,%al
   1571d:	5d                   	pop    %rbp
   1571e:	c3                   	ret
   1571f:	90                   	nop

0000000000015720 <_ZN4ustl6ResultIPKN4acpi15AcpiTableHeaderEN4ours6StatusEvED2Ev>:
   15720:	55                   	push   %rbp
   15721:	48 89 e5             	mov    %rsp,%rbp
   15724:	48 83 ec 10          	sub    $0x10,%rsp
   15728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1572c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   15730:	e8 4b 03 00 00       	call   15a80 <_ZN4ustl6result14StorageTrivialIPKN4acpi15AcpiTableHeaderEN4ours6StatusEED2Ev>
   15735:	48 83 c4 10          	add    $0x10,%rsp
   15739:	5d                   	pop    %rbp
   1573a:	c3                   	ret
   1573b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000015740 <_ZN4acpi10AcpiParserD0Ev>:
   15740:	55                   	push   %rbp
   15741:	48 89 e5             	mov    %rsp,%rbp
   15744:	48 83 ec 10          	sub    $0x10,%rsp
   15748:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1574c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   15750:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15754:	e8 47 ff ff ff       	call   156a0 <_ZN4acpi10AcpiParserD2Ev>
   15759:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1575d:	be 38 00 00 00       	mov    $0x38,%esi
   15762:	e8 29 3a 00 00       	call   19190 <_ZdlPvm>
   15767:	48 83 c4 10          	add    $0x10,%rsp
   1576b:	5d                   	pop    %rbp
   1576c:	c3                   	ret
   1576d:	0f 1f 00             	nopl   (%rax)

0000000000015770 <_ZNK4acpi10AcpiParser10num_tablesEv>:
        auto num_tables() const -> usize override {
   15770:	55                   	push   %rbp
   15771:	48 89 e5             	mov    %rsp,%rbp
   15774:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15778:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            return num_tables_;
   1577c:	48 8b 40 30          	mov    0x30(%rax),%rax
   15780:	5d                   	pop    %rbp
   15781:	c3                   	ret
   15782:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15789:	00 00 00 
   1578c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000015790 <_ZN4acpieqERKNS_13AcpiSignatureES2_>:
        friend bool operator==(AcpiSignature const &left, AcpiSignature const &right) {
   15790:	55                   	push   %rbp
   15791:	48 89 e5             	mov    %rsp,%rbp
   15794:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15798:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
            return left.value == right.value;
   1579c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157a0:	8b 00                	mov    (%rax),%eax
   157a2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   157a6:	3b 01                	cmp    (%rcx),%eax
   157a8:	0f 94 c0             	sete   %al
   157ab:	24 01                	and    $0x1,%al
   157ad:	5d                   	pop    %rbp
   157ae:	c3                   	ret
   157af:	90                   	nop

00000000000157b0 <_ZN4ustl6ResultIPKN4acpi10AcpiRsdpV2EN4ours6StatusEvED2Ev>:
   157b0:	55                   	push   %rbp
   157b1:	48 89 e5             	mov    %rsp,%rbp
   157b4:	48 83 ec 10          	sub    $0x10,%rsp
   157b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   157bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   157c0:	e8 0b 01 00 00       	call   158d0 <_ZN4ustl6result14StorageTrivialIPKN4acpi10AcpiRsdpV2EN4ours6StatusEED2Ev>
   157c5:	48 83 c4 10          	add    $0x10,%rsp
   157c9:	5d                   	pop    %rbp
   157ca:	c3                   	ret
   157cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000157d0 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>:
        {}
   157d0:	55                   	push   %rbp
   157d1:	48 89 e5             	mov    %rsp,%rbp
   157d4:	48 83 ec 20          	sub    $0x20,%rsp
   157d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   157dc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   157e0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : error_(static_cast<Args &&>(args)...), 
   157e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   157e8:	8b 00                	mov    (%rax),%eax
   157ea:	89 07                	mov    %eax,(%rdi)
              status_(Status::HaveError)
   157ec:	48 83 c7 18          	add    $0x18,%rdi
   157f0:	be 02 00 00 00       	mov    $0x2,%esi
   157f5:	e8 b6 23 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   157fa:	48 83 c4 20          	add    $0x20,%rsp
   157fe:	5d                   	pop    %rbp
   157ff:	c3                   	ret

0000000000015800 <_ZN4ustl6result14StorageTrivialIPKN4acpi10AcpiRsdpV2EN4ours6StatusEEC2IJS7_EEENS_7InplaceIJS7_EEEDpOT_>:
   15800:	55                   	push   %rbp
   15801:	48 89 e5             	mov    %rsp,%rbp
   15804:	48 83 ec 20          	sub    $0x20,%rsp
   15808:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1580c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   15810:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : error_(static_cast<Args &&>(args)...), 
   15814:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15818:	8b 00                	mov    (%rax),%eax
   1581a:	89 07                	mov    %eax,(%rdi)
              status_(Status::HaveError)
   1581c:	48 83 c7 08          	add    $0x8,%rdi
   15820:	be 02 00 00 00       	mov    $0x2,%esi
   15825:	e8 86 23 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   1582a:	48 83 c4 20          	add    $0x20,%rsp
   1582e:	5d                   	pop    %rbp
   1582f:	c3                   	ret

0000000000015830 <_ZN4ustl2OkIPKN4acpi10AcpiRsdpV2EEC2IJS4_EEEDpOT_>:
        {}
   15830:	55                   	push   %rbp
   15831:	48 89 e5             	mov    %rsp,%rbp
   15834:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15838:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1583c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            : value_(ustl::forward<Args>(args)...)
   15840:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   15844:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   15848:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1584c:	48 8b 09             	mov    (%rcx),%rcx
   1584f:	48 89 08             	mov    %rcx,(%rax)
        {}
   15852:	5d                   	pop    %rbp
   15853:	c3                   	ret
   15854:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1585b:	00 00 00 
   1585e:	66 90                	xchg   %ax,%ax

0000000000015860 <_ZN4ustl6result14StorageTrivialIPKN4acpi10AcpiRsdpV2EN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>:
        {}
   15860:	55                   	push   %rbp
   15861:	48 89 e5             	mov    %rsp,%rbp
   15864:	48 83 ec 20          	sub    $0x20,%rsp
   15868:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1586c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   15870:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : value_(static_cast<Args &&>(args)...), 
   15874:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15878:	48 8b 00             	mov    (%rax),%rax
   1587b:	48 89 07             	mov    %rax,(%rdi)
              status_(Status::HaveValue)
   1587e:	48 83 c7 08          	add    $0x8,%rdi
   15882:	be 01 00 00 00       	mov    $0x1,%esi
   15887:	e8 24 23 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   1588c:	48 83 c4 20          	add    $0x20,%rsp
   15890:	5d                   	pop    %rbp
   15891:	c3                   	ret
   15892:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15899:	00 00 00 
   1589c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000158a0 <_ZN4ustl3ErrIN4ours6StatusEEC2IJRS2_EEEDpOT_>:
        {}
   158a0:	55                   	push   %rbp
   158a1:	48 89 e5             	mov    %rsp,%rbp
   158a4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   158a8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   158ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            : error_(ustl::forward<Args>(args)...)
   158b0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   158b4:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   158b8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   158bc:	8b 09                	mov    (%rcx),%ecx
   158be:	89 08                	mov    %ecx,(%rax)
        {}
   158c0:	5d                   	pop    %rbp
   158c1:	c3                   	ret
   158c2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   158c9:	00 00 00 
   158cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000158d0 <_ZN4ustl6result14StorageTrivialIPKN4acpi10AcpiRsdpV2EN4ours6StatusEED2Ev>:
        {}
   158d0:	55                   	push   %rbp
   158d1:	48 89 e5             	mov    %rsp,%rbp
   158d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   158d8:	5d                   	pop    %rbp
   158d9:	c3                   	ret
   158da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000158e0 <_ZN4ustl2OkIN4acpi22RootSystemTableDetailsEEC2IJS2_EEEDpOT_>:
        {}
   158e0:	55                   	push   %rbp
   158e1:	48 89 e5             	mov    %rsp,%rbp
   158e4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   158e8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   158ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            : value_(ustl::forward<Args>(args)...)
   158f0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   158f4:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   158f8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   158fc:	48 8b 11             	mov    (%rcx),%rdx
   158ff:	48 89 10             	mov    %rdx,(%rax)
   15902:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   15906:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1590a:	48 8b 49 10          	mov    0x10(%rcx),%rcx
   1590e:	48 89 48 10          	mov    %rcx,0x10(%rax)
        {}
   15912:	5d                   	pop    %rbp
   15913:	c3                   	ret
   15914:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1591b:	00 00 00 
   1591e:	66 90                	xchg   %ax,%ax

0000000000015920 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>:
        {}
   15920:	55                   	push   %rbp
   15921:	48 89 e5             	mov    %rsp,%rbp
   15924:	48 83 ec 20          	sub    $0x20,%rsp
   15928:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1592c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   15930:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : value_(static_cast<Args &&>(args)...), 
   15934:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15938:	48 8b 08             	mov    (%rax),%rcx
   1593b:	48 89 0f             	mov    %rcx,(%rdi)
   1593e:	48 8b 48 08          	mov    0x8(%rax),%rcx
   15942:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
   15946:	48 8b 40 10          	mov    0x10(%rax),%rax
   1594a:	48 89 47 10          	mov    %rax,0x10(%rdi)
              status_(Status::HaveValue)
   1594e:	48 83 c7 18          	add    $0x18,%rdi
   15952:	be 01 00 00 00       	mov    $0x1,%esi
   15957:	e8 54 22 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   1595c:	48 83 c4 20          	add    $0x20,%rsp
   15960:	5d                   	pop    %rbp
   15961:	c3                   	ret
   15962:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15969:	00 00 00 
   1596c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000015970 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>:
        {}
   15970:	55                   	push   %rbp
   15971:	48 89 e5             	mov    %rsp,%rbp
   15974:	48 83 ec 20          	sub    $0x20,%rsp
   15978:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1597c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   15980:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : error_(static_cast<Args &&>(args)...), 
   15984:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15988:	8b 00                	mov    (%rax),%eax
   1598a:	89 07                	mov    %eax,(%rdi)
              status_(Status::HaveError)
   1598c:	48 83 c7 38          	add    $0x38,%rdi
   15990:	be 02 00 00 00       	mov    $0x2,%esi
   15995:	e8 16 22 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   1599a:	48 83 c4 20          	add    $0x20,%rsp
   1599e:	5d                   	pop    %rbp
   1599f:	c3                   	ret

00000000000159a0 <_ZN4ustl2OkIN4acpi10AcpiParserEEC2IJS2_EEEDpOT_>:
   159a0:	55                   	push   %rbp
   159a1:	48 89 e5             	mov    %rsp,%rbp
   159a4:	48 83 ec 20          	sub    $0x20,%rsp
   159a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   159ac:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   159b0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : value_(ustl::forward<Args>(args)...)
   159b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   159b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   159bc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   159c0:	e8 7b e3 ff ff       	call   13d40 <_ZN4acpi10AcpiParserC2EOS0_>
        {}
   159c5:	48 83 c4 20          	add    $0x20,%rsp
   159c9:	5d                   	pop    %rbp
   159ca:	c3                   	ret
   159cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000159d0 <_ZN4acpi11IAcpiParserC2Ev>:
    struct IAcpiParser {
   159d0:	55                   	push   %rbp
   159d1:	48 89 e5             	mov    %rsp,%rbp
   159d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   159d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159dc:	48 8d 0d 15 bb 01 00 	lea    0x1bb15(%rip),%rcx        # 314f8 <_ZTVN4acpi11IAcpiParserE+0x10>
   159e3:	48 89 08             	mov    %rcx,(%rax)
   159e6:	5d                   	pop    %rbp
   159e7:	c3                   	ret
   159e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   159ef:	00 

00000000000159f0 <_ZN4ustl6result14StorageTrivialIN4acpi10AcpiParserEN4ours6StatusEEC2IJS3_EEENS_7InplaceIJS3_EEEDpOT_>:
        {}
   159f0:	55                   	push   %rbp
   159f1:	48 89 e5             	mov    %rsp,%rbp
   159f4:	48 83 ec 20          	sub    $0x20,%rsp
   159f8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   159fc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   15a00:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   15a04:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
            : value_(static_cast<Args &&>(args)...), 
   15a08:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   15a0c:	e8 2f e3 ff ff       	call   13d40 <_ZN4acpi10AcpiParserC2EOS0_>
   15a11:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
              status_(Status::HaveValue)
   15a15:	48 83 c7 38          	add    $0x38,%rdi
   15a19:	be 01 00 00 00       	mov    $0x1,%esi
   15a1e:	e8 8d 21 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   15a23:	48 83 c4 20          	add    $0x20,%rsp
   15a27:	5d                   	pop    %rbp
   15a28:	c3                   	ret
   15a29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000015a30 <_ZN4ustl6result14StorageTrivialIPKvN4ours6StatusEED2Ev>:
        {}
   15a30:	55                   	push   %rbp
   15a31:	48 89 e5             	mov    %rsp,%rbp
   15a34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15a38:	5d                   	pop    %rbp
   15a39:	c3                   	ret
   15a3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000015a40 <_ZN4ustl6result14StorageTrivialIN4acpi22RootSystemTableDetailsEN4ours6StatusEED2Ev>:
   15a40:	55                   	push   %rbp
   15a41:	48 89 e5             	mov    %rsp,%rbp
   15a44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15a48:	5d                   	pop    %rbp
   15a49:	c3                   	ret
   15a4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000015a50 <_ZN4ustl6result14StorageTrivialIPKN4acpi15AcpiTableHeaderEN4ours6StatusEEC2IJS7_EEENS_7InplaceIJS7_EEEDpOT_>:
        {}
   15a50:	55                   	push   %rbp
   15a51:	48 89 e5             	mov    %rsp,%rbp
   15a54:	48 83 ec 20          	sub    $0x20,%rsp
   15a58:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15a5c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   15a60:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : error_(static_cast<Args &&>(args)...), 
   15a64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a68:	8b 00                	mov    (%rax),%eax
   15a6a:	89 07                	mov    %eax,(%rdi)
              status_(Status::HaveError)
   15a6c:	48 83 c7 08          	add    $0x8,%rdi
   15a70:	be 02 00 00 00       	mov    $0x2,%esi
   15a75:	e8 36 21 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   15a7a:	48 83 c4 20          	add    $0x20,%rsp
   15a7e:	5d                   	pop    %rbp
   15a7f:	c3                   	ret

0000000000015a80 <_ZN4ustl6result14StorageTrivialIPKN4acpi15AcpiTableHeaderEN4ours6StatusEED2Ev>:
        {}
   15a80:	55                   	push   %rbp
   15a81:	48 89 e5             	mov    %rsp,%rbp
   15a84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15a88:	5d                   	pop    %rbp
   15a89:	c3                   	ret
   15a8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000015a90 <_ZN4ustl2OkIPKN4acpi15AcpiTableHeaderEEC2IJS4_EEEDpOT_>:
   15a90:	55                   	push   %rbp
   15a91:	48 89 e5             	mov    %rsp,%rbp
   15a94:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15a98:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   15a9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            : value_(ustl::forward<Args>(args)...)
   15aa0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   15aa4:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   15aa8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   15aac:	48 8b 09             	mov    (%rcx),%rcx
   15aaf:	48 89 08             	mov    %rcx,(%rax)
        {}
   15ab2:	5d                   	pop    %rbp
   15ab3:	c3                   	ret
   15ab4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15abb:	00 00 00 
   15abe:	66 90                	xchg   %ax,%ax

0000000000015ac0 <_ZN4ustl6result14StorageTrivialIPKN4acpi15AcpiTableHeaderEN4ours6StatusEEC2IJS5_EEENS_7InplaceIJS5_EEEDpOT_>:
        {}
   15ac0:	55                   	push   %rbp
   15ac1:	48 89 e5             	mov    %rsp,%rbp
   15ac4:	48 83 ec 20          	sub    $0x20,%rsp
   15ac8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15acc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   15ad0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
            : value_(static_cast<Args &&>(args)...), 
   15ad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ad8:	48 8b 00             	mov    (%rax),%rax
   15adb:	48 89 07             	mov    %rax,(%rdi)
              status_(Status::HaveValue)
   15ade:	48 83 c7 08          	add    $0x8,%rdi
   15ae2:	be 01 00 00 00       	mov    $0x1,%esi
   15ae7:	e8 c4 20 ff ff       	call   7bb0 <_ZN4ustl6result11StatusFieldC2ENS0_6StatusE>
        {}
   15aec:	48 83 c4 20          	add    $0x20,%rsp
   15af0:	5d                   	pop    %rbp
   15af1:	c3                   	ret
   15af2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15af9:	00 00 00 
   15afc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000015b00 <_ZN4oursL29platform_init_pmm_with_configIJN4ustl5EntryINS1_10KeyValPairINS_3mem15ZoneTypeMatcherILNS4_8ZoneTypeE0EEENS1_6traits16IntegralConstantImLm4096EEEEEEENS2_INS3_INS5_ILS6_1EEENS9_ImLm8388608EEEEEEENS2_INS3_INS5_ILS6_2EEENS9_ImLm16777216EEEEEEEEEEvNS1_8TypeListIJDpT_EEE>:

#include <ustl/array.hpp>

namespace ours {
    template <typename... LinearZoneMaxPfns>
    static auto platform_init_pmm_with_config(ustl::TypeList<LinearZoneMaxPfns...>) -> void {
   15b00:	55                   	push   %rbp
   15b01:	48 89 e5             	mov    %rsp,%rbp
   15b04:	48 83 ec 40          	sub    $0x40,%rsp
        ustl::Array<mem::Pfn, sizeof...(LinearZoneMaxPfns)>  linear_zone_pfns;
        auto handle_item = [&] <mem::ZoneType Type, usize Pfn> (mem::MaxZonePfn<Type, Pfn>) {
   15b08:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   15b0c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   15b10:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
            linear_zone_pfns[Type] = Pfn;
        };

        (handle_item(LinearZoneMaxPfns()), ...);
   15b14:	e8 37 00 00 00       	call   15b50 <_ZZN4oursL29platform_init_pmm_with_configIJN4ustl5EntryINS1_10KeyValPairINS_3mem15ZoneTypeMatcherILNS4_8ZoneTypeE0EEENS1_6traits16IntegralConstantImLm4096EEEEEEENS2_INS3_INS5_ILS6_1EEENS9_ImLm8388608EEEEEEENS2_INS3_INS5_ILS6_2EEENS9_ImLm16777216EEEEEEEEEEvNS1_8TypeListIJDpT_EEEENKUlTnS6_TnmNS2_INS3_INS5_IXT_EEENS9_ImXT0_EEEEEEEE_clILS6_0ELm4096EEEDaSS_>
   15b19:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   15b1d:	e8 5e 00 00 00       	call   15b80 <_ZZN4oursL29platform_init_pmm_with_configIJN4ustl5EntryINS1_10KeyValPairINS_3mem15ZoneTypeMatcherILNS4_8ZoneTypeE0EEENS1_6traits16IntegralConstantImLm4096EEEEEEENS2_INS3_INS5_ILS6_1EEENS9_ImLm8388608EEEEEEENS2_INS3_INS5_ILS6_2EEENS9_ImLm16777216EEEEEEEEEEvNS1_8TypeListIJDpT_EEEENKUlTnS6_TnmNS2_INS3_INS5_IXT_EEENS9_ImXT0_EEEEEEEE_clILS6_1ELm8388608EEEDaSS_>
   15b22:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   15b26:	e8 85 00 00 00       	call   15bb0 <_ZZN4oursL29platform_init_pmm_with_configIJN4ustl5EntryINS1_10KeyValPairINS_3mem15ZoneTypeMatcherILNS4_8ZoneTypeE0EEENS1_6traits16IntegralConstantImLm4096EEEEEEENS2_INS3_INS5_ILS6_1EEENS9_ImLm8388608EEEEEEENS2_INS3_INS5_ILS6_2EEENS9_ImLm16777216EEEEEEEEEEvNS1_8TypeListIJDpT_EEEENKUlTnS6_TnmNS2_INS3_INS5_IXT_EEENS9_ImXT0_EEEEEEEE_clILS6_2ELm16777216EEEDaSS_>
   15b2b:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   15b2f:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi

        mem::init_pmm(linear_zone_pfns);
   15b33:	e8 a8 00 00 00       	call   15be0 <_ZN4ustl5views4SpanImLm18446744073709551615EECI2N5boost4spanImLm18446744073709551615EEEImLm3ETnNSt3__19enable_ifIXsr6detail15span_compatibleImLm18446744073709551615ET_XT0_EEE5valueEiE4typeELi0EEERNS5_5arrayIS7_XT0_EEE>
   15b38:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   15b3c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   15b40:	e8 0b c8 01 00       	call   32350 <_ZN4ours3mem8init_pmmEN4ustl5views4SpanImLm18446744073709551615EEE>
    }
   15b45:	48 83 c4 40          	add    $0x40,%rsp
   15b49:	5d                   	pop    %rbp
   15b4a:	c3                   	ret
   15b4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000015b50 <_ZZN4oursL29platform_init_pmm_with_configIJN4ustl5EntryINS1_10KeyValPairINS_3mem15ZoneTypeMatcherILNS4_8ZoneTypeE0EEENS1_6traits16IntegralConstantImLm4096EEEEEEENS2_INS3_INS5_ILS6_1EEENS9_ImLm8388608EEEEEEENS2_INS3_INS5_ILS6_2EEENS9_ImLm16777216EEEEEEEEEEvNS1_8TypeListIJDpT_EEEENKUlTnS6_TnmNS2_INS3_INS5_IXT_EEENS9_ImXT0_EEEEEEEE_clILS6_0ELm4096EEEDaSS_>:
        auto handle_item = [&] <mem::ZoneType Type, usize Pfn> (mem::MaxZonePfn<Type, Pfn>) {
   15b50:	55                   	push   %rbp
   15b51:	48 89 e5             	mov    %rsp,%rbp
   15b54:	48 83 ec 10          	sub    $0x10,%rsp
   15b58:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15b5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            linear_zone_pfns[Type] = Pfn;
   15b60:	48 8b 38             	mov    (%rax),%rdi
   15b63:	31 c0                	xor    %eax,%eax
   15b65:	31 c0                	xor    %eax,%eax
   15b67:	89 c6                	mov    %eax,%esi
   15b69:	e8 a2 00 00 00       	call   15c10 <_ZNSt3__15arrayImLm3EEixB8nn210000Em>
   15b6e:	48 c7 00 00 10 00 00 	movq   $0x1000,(%rax)
        };
   15b75:	48 83 c4 10          	add    $0x10,%rsp
   15b79:	5d                   	pop    %rbp
   15b7a:	c3                   	ret
   15b7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000015b80 <_ZZN4oursL29platform_init_pmm_with_configIJN4ustl5EntryINS1_10KeyValPairINS_3mem15ZoneTypeMatcherILNS4_8ZoneTypeE0EEENS1_6traits16IntegralConstantImLm4096EEEEEEENS2_INS3_INS5_ILS6_1EEENS9_ImLm8388608EEEEEEENS2_INS3_INS5_ILS6_2EEENS9_ImLm16777216EEEEEEEEEEvNS1_8TypeListIJDpT_EEEENKUlTnS6_TnmNS2_INS3_INS5_IXT_EEENS9_ImXT0_EEEEEEEE_clILS6_1ELm8388608EEEDaSS_>:
        auto handle_item = [&] <mem::ZoneType Type, usize Pfn> (mem::MaxZonePfn<Type, Pfn>) {
   15b80:	55                   	push   %rbp
   15b81:	48 89 e5             	mov    %rsp,%rbp
   15b84:	48 83 ec 10          	sub    $0x10,%rsp
   15b88:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15b8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            linear_zone_pfns[Type] = Pfn;
   15b90:	48 8b 38             	mov    (%rax),%rdi
   15b93:	be 01 00 00 00       	mov    $0x1,%esi
   15b98:	e8 73 00 00 00       	call   15c10 <_ZNSt3__15arrayImLm3EEixB8nn210000Em>
   15b9d:	48 c7 00 00 00 80 00 	movq   $0x800000,(%rax)
        };
   15ba4:	48 83 c4 10          	add    $0x10,%rsp
   15ba8:	5d                   	pop    %rbp
   15ba9:	c3                   	ret
   15baa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000015bb0 <_ZZN4oursL29platform_init_pmm_with_configIJN4ustl5EntryINS1_10KeyValPairINS_3mem15ZoneTypeMatcherILNS4_8ZoneTypeE0EEENS1_6traits16IntegralConstantImLm4096EEEEEEENS2_INS3_INS5_ILS6_1EEENS9_ImLm8388608EEEEEEENS2_INS3_INS5_ILS6_2EEENS9_ImLm16777216EEEEEEEEEEvNS1_8TypeListIJDpT_EEEENKUlTnS6_TnmNS2_INS3_INS5_IXT_EEENS9_ImXT0_EEEEEEEE_clILS6_2ELm16777216EEEDaSS_>:
        auto handle_item = [&] <mem::ZoneType Type, usize Pfn> (mem::MaxZonePfn<Type, Pfn>) {
   15bb0:	55                   	push   %rbp
   15bb1:	48 89 e5             	mov    %rsp,%rbp
   15bb4:	48 83 ec 10          	sub    $0x10,%rsp
   15bb8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15bbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            linear_zone_pfns[Type] = Pfn;
   15bc0:	48 8b 38             	mov    (%rax),%rdi
   15bc3:	be 02 00 00 00       	mov    $0x2,%esi
   15bc8:	e8 43 00 00 00       	call   15c10 <_ZNSt3__15arrayImLm3EEixB8nn210000Em>
   15bcd:	48 c7 00 00 00 00 01 	movq   $0x1000000,(%rax)
        };
   15bd4:	48 83 c4 10          	add    $0x10,%rsp
   15bd8:	5d                   	pop    %rbp
   15bd9:	c3                   	ret
   15bda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000015be0 <_ZN4ustl5views4SpanImLm18446744073709551615EECI2N5boost4spanImLm18446744073709551615EEEImLm3ETnNSt3__19enable_ifIXsr6detail15span_compatibleImLm18446744073709551615ET_XT0_EEE5valueEiE4typeELi0EEERNS5_5arrayIS7_XT0_EEE>:
    template <typename T, std::size_t E = boost::dynamic_extent>
    struct Span
        : public ::boost::span<T, E>
    {
        typedef ::boost::span<T>    Base;
        using Base::Base;
   15be0:	55                   	push   %rbp
   15be1:	48 89 e5             	mov    %rsp,%rbp
   15be4:	48 83 ec 10          	sub    $0x10,%rsp
   15be8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15bec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   15bf0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   15bf4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   15bf8:	e8 33 00 00 00       	call   15c30 <_ZN5boost4spanImLm18446744073709551615EEC2ImLm3ETnNSt3__19enable_ifIXsr6detail15span_compatibleImLm18446744073709551615ET_XT0_EEE5valueEiE4typeELi0EEERNS3_5arrayIS5_XT0_EEE>
   15bfd:	48 83 c4 10          	add    $0x10,%rsp
   15c01:	5d                   	pop    %rbp
   15c02:	c3                   	ret
   15c03:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15c0a:	00 00 00 
   15c0d:	0f 1f 00             	nopl   (%rax)

0000000000015c10 <_ZNSt3__15arrayImLm3EEixB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 reference operator[](size_type __n) _NOEXCEPT {
   15c10:	55                   	push   %rbp
   15c11:	48 89 e5             	mov    %rsp,%rbp
   15c14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15c18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   15c1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return __elems_[__n];
   15c20:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   15c24:	48 c1 e1 03          	shl    $0x3,%rcx
   15c28:	48 01 c8             	add    %rcx,%rax
   15c2b:	5d                   	pop    %rbp
   15c2c:	c3                   	ret
   15c2d:	0f 1f 00             	nopl   (%rax)

0000000000015c30 <_ZN5boost4spanImLm18446744073709551615EEC2ImLm3ETnNSt3__19enable_ifIXsr6detail15span_compatibleImLm18446744073709551615ET_XT0_EEE5valueEiE4typeELi0EEERNS3_5arrayIS5_XT0_EEE>:
        : s_(a.data(), N) { }
   15c30:	55                   	push   %rbp
   15c31:	48 89 e5             	mov    %rsp,%rbp
   15c34:	48 83 ec 20          	sub    $0x20,%rsp
   15c38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15c3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   15c40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c44:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   15c48:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   15c4c:	e8 1f 00 00 00       	call   15c70 <_ZNSt3__15arrayImLm3EE4dataB8nn210000Ev>
   15c51:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   15c55:	48 89 c6             	mov    %rax,%rsi
   15c58:	ba 03 00 00 00       	mov    $0x3,%edx
   15c5d:	e8 1e 00 00 00       	call   15c80 <_ZN5boost6detail10span_storeImLm18446744073709551615EEC2EPmm>
   15c62:	48 83 c4 20          	add    $0x20,%rsp
   15c66:	5d                   	pop    %rbp
   15c67:	c3                   	ret
   15c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   15c6f:	00 

0000000000015c70 <_ZNSt3__15arrayImLm3EE4dataB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 value_type* data() _NOEXCEPT { return __elems_; }
   15c70:	55                   	push   %rbp
   15c71:	48 89 e5             	mov    %rsp,%rbp
   15c74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15c78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c7c:	5d                   	pop    %rbp
   15c7d:	c3                   	ret
   15c7e:	66 90                	xchg   %ax,%ax

0000000000015c80 <_ZN5boost6detail10span_storeImLm18446744073709551615EEC2EPmm>:
        , n(n_) { }
   15c80:	55                   	push   %rbp
   15c81:	48 89 e5             	mov    %rsp,%rbp
   15c84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15c88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   15c8c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   15c90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        : p(p_)
   15c94:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   15c98:	48 89 08             	mov    %rcx,(%rax)
        , n(n_) { }
   15c9b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   15c9f:	48 89 48 08          	mov    %rcx,0x8(%rax)
   15ca3:	5d                   	pop    %rbp
   15ca4:	c3                   	ret
   15ca5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15cac:	00 00 00 
   15caf:	90                   	nop

0000000000015cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>:
    extern InitHook g_init_hook_start[] LINK_NAME("__init_hook_start");
    extern InitHook g_init_hook_end[] LINK_NAME("__init_hook_end");

    InitLevel g_init_level{0};

    auto set_init_level(InitLevel level) -> void {
   15cb0:	55                   	push   %rbp
   15cb1:	48 89 e5             	mov    %rsp,%rbp
   15cb4:	48 83 ec 10          	sub    $0x10,%rsp
   15cb8:	89 7d fc             	mov    %edi,-0x4(%rbp)
        for (auto it = g_init_hook_start; it != g_init_hook_end; ++it) {
   15cbb:	48 8d 05 fe dd 01 00 	lea    0x1ddfe(%rip),%rax        # 33ac0 <_ZN4oursL23GKTL_INIT_HOOK_AcpiInitE>
   15cc2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15cc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15cca:	48 8d 0d 1f de 01 00 	lea    0x1de1f(%rip),%rcx        # 33af0 <__ctors_start>
   15cd1:	48 29 c8             	sub    %rcx,%rax
   15cd4:	74 35                	je     15d0b <_ZN4gktl14set_init_levelENS_9InitLevelE+0x5b>
   15cd6:	eb 00                	jmp    15cd8 <_ZN4gktl14set_init_levelENS_9InitLevelE+0x28>
            if (it->level_ > level || it->level_ < g_init_level) {
   15cd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15cdc:	8b 40 08             	mov    0x8(%rax),%eax
   15cdf:	3b 45 fc             	cmp    -0x4(%rbp),%eax
   15ce2:	77 11                	ja     15cf5 <_ZN4gktl14set_init_levelENS_9InitLevelE+0x45>
   15ce4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15ce8:	8b 40 08             	mov    0x8(%rax),%eax
   15ceb:	8b 0d ef 2d 02 00    	mov    0x22def(%rip),%ecx        # 38ae0 <_ZN4gktl12g_init_levelE>
   15cf1:	39 c8                	cmp    %ecx,%eax
   15cf3:	73 02                	jae    15cf7 <_ZN4gktl14set_init_levelENS_9InitLevelE+0x47>
                continue;
   15cf5:	eb 06                	jmp    15cfd <_ZN4gktl14set_init_levelENS_9InitLevelE+0x4d>
            }

            it->hook_();
   15cf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15cfb:	ff 10                	call   *(%rax)
        for (auto it = g_init_hook_start; it != g_init_hook_end; ++it) {
   15cfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15d01:	48 83 c0 18          	add    $0x18,%rax
   15d05:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15d09:	eb bb                	jmp    15cc6 <_ZN4gktl14set_init_levelENS_9InitLevelE+0x16>
        }

        g_init_level = level;
   15d0b:	8b 45 fc             	mov    -0x4(%rbp),%eax
   15d0e:	89 05 cc 2d 02 00    	mov    %eax,0x22dcc(%rip)        # 38ae0 <_ZN4gktl12g_init_levelE>
    }
   15d14:	48 83 c4 10          	add    $0x10,%rsp
   15d18:	5d                   	pop    %rbp
   15d19:	c3                   	ret
   15d1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000015d20 <_ZN4arch10X86CpuInfo4initEv>:
#include <arch/x86/cpuid.hpp>

#include <ustl/traits/char_traits.hpp>

namespace arch {
    auto X86CpuInfo::init() -> void {
   15d20:	55                   	push   %rbp
   15d21:	48 89 e5             	mov    %rsp,%rbp
   15d24:	53                   	push   %rbx
   15d25:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
   15d2c:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
   15d33:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   15d3a:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
   15d41:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15d48:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   15d4f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%rbp)
   15d56:	00 00 00 
   15d59:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%rbp)
   15d60:	00 00 00 
   15d63:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   15d6a:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
   15d71:	9c                   	pushf
   15d72:	58                   	pop    %rax
   15d73:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
        return state;
   15d7a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
            return ArchCpuState::read()
   15d81:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   15d88:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
   15d8f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   15d96:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%rbp)
   15d9d:	00 00 00 
   15da0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
   15da7:	48 63 8d 74 ff ff ff 	movslq -0x8c(%rbp),%rcx
   15dae:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
   15db5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   15db9:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   15dc0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   15dc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
   15dc8:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   15dcc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   15dd0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   15dd4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   15dd8:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   15ddf:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   15de0:	48 c7 45 b0 00 00 20 	movq   $0x200000,-0x50(%rbp)
   15de7:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   15de8:	48 c7 45 a8 15 00 00 	movq   $0x15,-0x58(%rbp)
   15def:	00 
            values[idx] &= ~mask;
   15df0:	48 8b 11             	mov    (%rcx),%rdx
   15df3:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
   15dfa:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
   15dfd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   15e01:	48 8b 12             	mov    (%rdx),%rdx
   15e04:	48 c1 e2 15          	shl    $0x15,%rdx
   15e08:	48 0b 11             	or     (%rcx),%rdx
   15e0b:	48 89 11             	mov    %rdx,(%rcx)
   15e0e:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   15e12:	48 8b 45 88          	mov    -0x78(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
   15e16:	48 8b 08             	mov    (%rax),%rcx
   15e19:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
   15e1d:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   15e21:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
   15e25:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   15e29:	51                   	push   %rcx
   15e2a:	9d                   	popf
   15e2b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   15e2f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   15e33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15e37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   15e3b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   15e42:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   15e43:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
   15e4a:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   15e4b:	48 c7 45 d8 15 00 00 	movq   $0x15,-0x28(%rbp)
   15e52:	00 
            return Result((values[idx] & mask) >> shift);
   15e53:	48 8b 00             	mov    (%rax),%rax
   15e56:	48 25 00 00 20 00    	and    $0x200000,%rax
   15e5c:	48 c1 e8 15          	shr    $0x15,%rax
   15e60:	48 83 f8 00          	cmp    $0x0,%rax
            DEBUG_ASSERT(has(), "Use cpuid on a unsupported platform");
   15e64:	75 26                	jne    15e8c <_ZN4arch10X86CpuInfo4initEv+0x16c>
   15e66:	48 8d 35 4b 90 01 00 	lea    0x1904b(%rip),%rsi        # 2eeb8 <.L.str>
   15e6d:	48 8d bd 10 ff ff ff 	lea    -0xf0(%rbp),%rdi
   15e74:	e8 07 d4 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   15e79:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
   15e80:	48 8b b5 18 ff ff ff 	mov    -0xe8(%rbp),%rsi
   15e87:	e8 a4 d3 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    	        : "a" (leaf), "c" (subleaf)
   15e8c:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
   15e92:	8b 8d 20 ff ff ff    	mov    -0xe0(%rbp),%ecx
    	    asm volatile("cpuid"
   15e98:	0f a2                	cpuid
   15e9a:	89 c7                	mov    %eax,%edi
   15e9c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
   15ea3:	89 ce                	mov    %ecx,%esi
   15ea5:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
   15eac:	89 39                	mov    %edi,(%rcx)
   15eae:	89 59 04             	mov    %ebx,0x4(%rcx)
   15eb1:	89 71 08             	mov    %esi,0x8(%rcx)
   15eb4:	89 51 0c             	mov    %edx,0xc(%rcx)
        CpuId request;
        request.query(CpuIdLeaf::Vendor);

        dispatch_cpuid(features_.make_cpuid_observer());
   15eb7:	48 83 c0 38          	add    $0x38,%rax
   15ebb:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   15ec2:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
   15ec9:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
            return *this;
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto make_cpuid_observer() -> SelfCpuIdObserver {
            return SelfCpuIdObserver(*this);
   15ed0:	e8 7b 01 00 00       	call   16050 <_ZN4arch13X86CpuFeature17SelfCpuIdObserverC2ERS0_>
   15ed5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   15edc:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   15ee3:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
   15eea:	e8 f1 00 00 00       	call   15fe0 <_ZN4arch14dispatch_cpuidIJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbDpOT_>
   15eef:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15ef6:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   15efd:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
            return *this;
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto ebx() -> u32 {
            return ebx_;
   15f04:	8b 40 04             	mov    0x4(%rax),%eax

        union {
            u32 data[3];
            char str[];
        } vendor_str;
        vendor_str.data[0] = request.ebx();
   15f07:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%rbp)
   15f0d:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15f14:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   15f1b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
            return *this;
        }

        FORCE_INLINE CXX11_CONSTEXPR
        auto edx() -> u32 {
            return edx_;
   15f22:	8b 40 0c             	mov    0xc(%rax),%eax
        vendor_str.data[1] = request.edx();
   15f25:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
   15f2b:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15f32:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   15f39:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
            return ecx_;
   15f40:	8b 40 08             	mov    0x8(%rax),%eax
        vendor_str.data[2] = request.ecx();
   15f43:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)

        typedef ustl::traits::CharTraits<char>  CharTraits;
        for (auto i = 0; i < std::size(kVendorString); ++i) {
   15f49:	c7 85 e0 fe ff ff 00 	movl   $0x0,-0x120(%rbp)
   15f50:	00 00 00 
   15f53:	48 63 85 e0 fe ff ff 	movslq -0x120(%rbp),%rax
   15f5a:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
   15f61:	48 8d 3d 98 b0 01 00 	lea    0x1b098(%rip),%rdi        # 31000 <_ZN4archL13kVendorStringE>
   15f68:	e8 a3 00 00 00       	call   16010 <_ZNSt3__14sizeB8nn210000IPKcLm2EEEmRAT0__KT_>
   15f6d:	48 89 c1             	mov    %rax,%rcx
   15f70:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
   15f77:	48 39 c8             	cmp    %rcx,%rax
   15f7a:	73 4d                	jae    15fc9 <_ZN4arch10X86CpuInfo4initEv+0x2a9>
   15f7c:	48 8d bd e4 fe ff ff 	lea    -0x11c(%rbp),%rdi
            if (!CharTraits::compare(vendor_str.str, kVendorString[i], sizeof(vendor_str))) {
   15f83:	48 63 8d e0 fe ff ff 	movslq -0x120(%rbp),%rcx
   15f8a:	48 8d 05 6f b0 01 00 	lea    0x1b06f(%rip),%rax        # 31000 <_ZN4archL13kVendorStringE>
   15f91:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
   15f95:	48 8b 30             	mov    (%rax),%rsi
   15f98:	ba 0c 00 00 00       	mov    $0xc,%edx
   15f9d:	e8 7e 00 00 00       	call   16020 <_ZNSt3__111char_traitsIcE7compareB8nn210000EPKcS3_m>
   15fa2:	83 f8 00             	cmp    $0x0,%eax
   15fa5:	75 0f                	jne    15fb6 <_ZN4arch10X86CpuInfo4initEv+0x296>
   15fa7:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
                vendor_ = static_cast<Vendor>(i);
   15fae:	8b 8d e0 fe ff ff    	mov    -0x120(%rbp),%ecx
   15fb4:	89 08                	mov    %ecx,(%rax)
            }
        }
   15fb6:	eb 00                	jmp    15fb8 <_ZN4arch10X86CpuInfo4initEv+0x298>
        for (auto i = 0; i < std::size(kVendorString); ++i) {
   15fb8:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
   15fbe:	83 c0 01             	add    $0x1,%eax
   15fc1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%rbp)
   15fc7:	eb 8a                	jmp    15f53 <_ZN4arch10X86CpuInfo4initEv+0x233>
    }
   15fc9:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
   15fd0:	5b                   	pop    %rbx
   15fd1:	5d                   	pop    %rbp
   15fd2:	c3                   	ret
   15fd3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15fda:	00 00 00 
   15fdd:	0f 1f 00             	nopl   (%rax)

0000000000015fe0 <_ZN4arch14dispatch_cpuidIJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbDpOT_>:
    auto dispatch_cpuid(Observers &&...observers) -> bool {
   15fe0:	55                   	push   %rbp
   15fe1:	48 89 e5             	mov    %rsp,%rbp
   15fe4:	48 83 ec 30          	sub    $0x30,%rsp
   15fe8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
        return dispatch_cpuid_0(cpuid, Actions(), ustl::forward<Observers>(observers)...);
   15fec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15ff0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15ff4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   15ff8:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   15ffc:	e8 6f 00 00 00       	call   16070 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_>
   16001:	24 01                	and    $0x1,%al
   16003:	48 83 c4 30          	add    $0x30,%rsp
   16007:	5d                   	pop    %rbp
   16008:	c3                   	ret
   16009:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000016010 <_ZNSt3__14sizeB8nn210000IPKcLm2EEEmRAT0__KT_>:
_LIBCPP_HIDE_FROM_ABI constexpr auto size(const _Cont& __c) noexcept(noexcept(__c.size())) -> decltype(__c.size()) {
  return __c.size();
}

template <class _Tp, size_t _Sz>
_LIBCPP_HIDE_FROM_ABI constexpr size_t size(const _Tp (&)[_Sz]) noexcept {
   16010:	55                   	push   %rbp
   16011:	48 89 e5             	mov    %rsp,%rbp
   16014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return _Sz;
   16018:	b8 02 00 00 00       	mov    $0x2,%eax
   1601d:	5d                   	pop    %rbp
   1601e:	c3                   	ret
   1601f:	90                   	nop

0000000000016020 <_ZNSt3__111char_traitsIcE7compareB8nn210000EPKcS3_m>:
  compare(const char_type* __lhs, const char_type* __rhs, size_t __count) _NOEXCEPT {
   16020:	55                   	push   %rbp
   16021:	48 89 e5             	mov    %rsp,%rbp
   16024:	48 83 ec 20          	sub    $0x20,%rsp
   16028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1602c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16030:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      return __builtin_memcmp(__lhs, __rhs, __count);
   16034:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16038:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1603c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16040:	e8 3b 16 00 00       	call   17680 <memcmp>
   16045:	48 83 c4 20          	add    $0x20,%rsp
   16049:	5d                   	pop    %rbp
   1604a:	c3                   	ret
   1604b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000016050 <_ZN4arch13X86CpuFeature17SelfCpuIdObserverC2ERS0_>:
            {}
   16050:	55                   	push   %rbp
   16051:	48 89 e5             	mov    %rsp,%rbp
   16054:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16058:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1605c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
                : feature_(&feature)
   16060:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   16064:	48 89 08             	mov    %rcx,(%rax)
            {}
   16067:	5d                   	pop    %rbp
   16068:	c3                   	ret
   16069:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000016070 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_>:
    auto dispatch_cpuid_0(CpuId &&cpuid, ustl::TypeList<Actions...>, Observers &&...observers) -> bool {
   16070:	55                   	push   %rbp
   16071:	48 89 e5             	mov    %rsp,%rbp
   16074:	53                   	push   %rbx
   16075:	48 81 ec e8 04 00 00 	sub    $0x4e8,%rsp
   1607c:	48 89 bd 68 fb ff ff 	mov    %rdi,-0x498(%rbp)
   16083:	48 89 b5 60 fb ff ff 	mov    %rsi,-0x4a0(%rbp)
        return ((cpuid.query_safe(Actions::kLeaf, Actions::kSubLeaf) &&
   1608a:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
   16091:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
   16098:	c7 85 84 fe ff ff 01 	movl   $0x1,-0x17c(%rbp)
   1609f:	00 00 00 
   160a2:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
   160a9:	00 00 00 
   160ac:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
   160b3:	48 89 85 58 fb ff ff 	mov    %rax,-0x4a8(%rbp)
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
   160ba:	9c                   	pushf
   160bb:	58                   	pop    %rax
   160bc:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
        return state;
   160c3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
            return ArchCpuState::read()
   160ca:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
   160d1:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
   160d8:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   160df:	c7 85 e4 fe ff ff 01 	movl   $0x1,-0x11c(%rbp)
   160e6:	00 00 00 
   160e9:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
   160f0:	48 63 8d e4 fe ff ff 	movslq -0x11c(%rbp),%rcx
   160f7:	48 89 8d d8 fe ff ff 	mov    %rcx,-0x128(%rbp)
   160fe:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   16105:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
   1610c:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   16113:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
   1611a:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
   16121:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   16128:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
   1612f:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   16136:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1613d:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   16141:	48 c7 85 60 ff ff ff 	movq   $0x200000,-0xa0(%rbp)
   16148:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   1614c:	48 c7 85 58 ff ff ff 	movq   $0x15,-0xa8(%rbp)
   16153:	15 00 00 00 
            values[idx] &= ~mask;
   16157:	48 8b 11             	mov    (%rcx),%rdx
   1615a:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
   16161:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
   16164:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   1616b:	48 8b 12             	mov    (%rdx),%rdx
   1616e:	48 c1 e2 15          	shl    $0x15,%rdx
   16172:	48 0b 11             	or     (%rcx),%rdx
   16175:	48 89 11             	mov    %rdx,(%rcx)
   16178:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   1617f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
   16186:	48 8b 08             	mov    (%rax),%rcx
   16189:	48 89 8d 08 ff ff ff 	mov    %rcx,-0xf8(%rbp)
   16190:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
   16197:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
   1619b:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   1619f:	51                   	push   %rcx
   161a0:	9d                   	popf
   161a1:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   161a8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   161af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   161b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   161b7:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   161be:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   161bf:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
   161c6:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   161c7:	48 c7 45 d8 15 00 00 	movq   $0x15,-0x28(%rbp)
   161ce:	00 
            return Result((values[idx] & mask) >> shift);
   161cf:	48 8b 00             	mov    (%rax),%rax
   161d2:	48 25 00 00 20 00    	and    $0x200000,%rax
   161d8:	48 c1 e8 15          	shr    $0x15,%rax
   161dc:	48 83 f8 00          	cmp    $0x0,%rax
            if (has()) {
   161e0:	0f 84 98 01 00 00    	je     1637e <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x30e>
   161e6:	48 8b 95 58 fb ff ff 	mov    -0x4a8(%rbp),%rdx
                query(leaf, subleaf);
   161ed:	8b 8d 84 fe ff ff    	mov    -0x17c(%rbp),%ecx
   161f3:	8b 85 80 fe ff ff    	mov    -0x180(%rbp),%eax
   161f9:	48 89 95 b0 fe ff ff 	mov    %rdx,-0x150(%rbp)
   16200:	89 8d ac fe ff ff    	mov    %ecx,-0x154(%rbp)
   16206:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
   1620c:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
   16213:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
   1621a:	9c                   	pushf
   1621b:	58                   	pop    %rax
   1621c:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
        return state;
   16223:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
            return ArchCpuState::read()
   1622a:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
   16231:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
   16238:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   1623f:	c7 85 fc fe ff ff 01 	movl   $0x1,-0x104(%rbp)
   16246:	00 00 00 
   16249:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
   16250:	48 63 8d fc fe ff ff 	movslq -0x104(%rbp),%rcx
   16257:	48 89 8d f0 fe ff ff 	mov    %rcx,-0x110(%rbp)
   1625e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   16265:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1626c:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   16273:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
   1627a:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
   16281:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   16285:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   16289:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   1628d:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
   16294:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   16295:	48 c7 45 88 00 00 20 	movq   $0x200000,-0x78(%rbp)
   1629c:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   1629d:	48 c7 45 80 15 00 00 	movq   $0x15,-0x80(%rbp)
   162a4:	00 
            values[idx] &= ~mask;
   162a5:	48 8b 11             	mov    (%rcx),%rdx
   162a8:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
   162af:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
   162b2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   162b6:	48 8b 12             	mov    (%rdx),%rdx
   162b9:	48 c1 e2 15          	shl    $0x15,%rdx
   162bd:	48 0b 11             	or     (%rcx),%rdx
   162c0:	48 89 11             	mov    %rdx,(%rcx)
   162c3:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   162ca:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
   162d1:	48 8b 08             	mov    (%rax),%rcx
   162d4:	48 89 8d 18 ff ff ff 	mov    %rcx,-0xe8(%rbp)
   162db:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
   162e2:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
   162e6:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   162ea:	51                   	push   %rcx
   162eb:	9d                   	popf
   162ec:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   162f3:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   162fa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   162fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   16302:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
   16309:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   1630a:	48 c7 45 c0 00 00 20 	movq   $0x200000,-0x40(%rbp)
   16311:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   16312:	48 c7 45 b8 15 00 00 	movq   $0x15,-0x48(%rbp)
   16319:	00 
            return Result((values[idx] & mask) >> shift);
   1631a:	48 8b 00             	mov    (%rax),%rax
   1631d:	48 25 00 00 20 00    	and    $0x200000,%rax
   16323:	48 c1 e8 15          	shr    $0x15,%rax
   16327:	48 83 f8 00          	cmp    $0x0,%rax
            DEBUG_ASSERT(has(), "Use cpuid on a unsupported platform");
   1632b:	75 26                	jne    16353 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x2e3>
   1632d:	48 8d 35 84 8b 01 00 	lea    0x18b84(%rip),%rsi        # 2eeb8 <.L.str>
   16334:	48 8d bd 98 fe ff ff 	lea    -0x168(%rbp),%rdi
   1633b:	e8 40 cf fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   16340:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
   16347:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
   1634e:	e8 dd ce fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    	        : "a" (leaf), "c" (subleaf)
   16353:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
   16359:	8b 8d a8 fe ff ff    	mov    -0x158(%rbp),%ecx
    	    asm volatile("cpuid"
   1635f:	0f a2                	cpuid
   16361:	89 c6                	mov    %eax,%esi
   16363:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
   1636a:	89 30                	mov    %esi,(%rax)
   1636c:	89 58 04             	mov    %ebx,0x4(%rax)
   1636f:	89 48 08             	mov    %ecx,0x8(%rax)
   16372:	89 50 0c             	mov    %edx,0xc(%rax)
                return true;
   16375:	c6 85 97 fe ff ff 01 	movb   $0x1,-0x169(%rbp)
   1637c:	eb 07                	jmp    16385 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x315>
            return false;
   1637e:	c6 85 97 fe ff ff 00 	movb   $0x0,-0x169(%rbp)
   16385:	31 c0                	xor    %eax,%eax
   16387:	f6 85 97 fe ff ff 01 	testb  $0x1,-0x169(%rbp)
   1638e:	88 85 4f fb ff ff    	mov    %al,-0x4b1(%rbp)
   16394:	75 05                	jne    1639b <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x32b>
   16396:	e9 46 07 00 00       	jmp    16ae1 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0xa71>
                 dispatch_cpuid_1<Actions>(cpuid, ustl::forward<Observers>(observers)...)) && ...);
   1639b:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
   163a2:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
   163a9:	48 89 85 88 fb ff ff 	mov    %rax,-0x478(%rbp)
   163b0:	48 8b b5 88 fb ff ff 	mov    -0x478(%rbp),%rsi
   163b7:	e8 44 07 00 00       	call   16b00 <_ZN4arch16dispatch_cpuid_1INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbRT0_DpOT1_>
   163bc:	88 c1                	mov    %al,%cl
   163be:	31 c0                	xor    %eax,%eax
   163c0:	f6 c1 01             	test   $0x1,%cl
   163c3:	88 85 4f fb ff ff    	mov    %al,-0x4b1(%rbp)
   163c9:	75 05                	jne    163d0 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x360>
   163cb:	e9 11 07 00 00       	jmp    16ae1 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0xa71>
        return ((cpuid.query_safe(Actions::kLeaf, Actions::kSubLeaf) &&
   163d0:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
   163d7:	48 89 85 10 fd ff ff 	mov    %rax,-0x2f0(%rbp)
   163de:	c7 85 0c fd ff ff 07 	movl   $0x7,-0x2f4(%rbp)
   163e5:	00 00 00 
   163e8:	c7 85 08 fd ff ff 00 	movl   $0x0,-0x2f8(%rbp)
   163ef:	00 00 00 
   163f2:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
   163f9:	48 89 85 40 fb ff ff 	mov    %rax,-0x4c0(%rbp)
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
   16400:	9c                   	pushf
   16401:	58                   	pop    %rax
   16402:	48 89 85 50 fd ff ff 	mov    %rax,-0x2b0(%rbp)
        return state;
   16409:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
            return ArchCpuState::read()
   16410:	48 89 85 48 fd ff ff 	mov    %rax,-0x2b8(%rbp)
   16417:	48 8d 85 48 fd ff ff 	lea    -0x2b8(%rbp),%rax
   1641e:	48 89 85 70 fd ff ff 	mov    %rax,-0x290(%rbp)
   16425:	c7 85 6c fd ff ff 01 	movl   $0x1,-0x294(%rbp)
   1642c:	00 00 00 
   1642f:	48 8b 85 70 fd ff ff 	mov    -0x290(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
   16436:	48 63 8d 6c fd ff ff 	movslq -0x294(%rbp),%rcx
   1643d:	48 89 8d 60 fd ff ff 	mov    %rcx,-0x2a0(%rbp)
   16444:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
   1644b:	48 8d 85 60 fd ff ff 	lea    -0x2a0(%rbp),%rax
   16452:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   16459:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
   16460:	48 8b 8d d0 fd ff ff 	mov    -0x230(%rbp),%rcx
   16467:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
   1646e:	48 89 8d f8 fd ff ff 	mov    %rcx,-0x208(%rbp)
   16475:	48 8b 8d 00 fe ff ff 	mov    -0x200(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   1647c:	48 c7 85 f0 fd ff ff 	movq   $0x0,-0x210(%rbp)
   16483:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   16487:	48 c7 85 e8 fd ff ff 	movq   $0x200000,-0x218(%rbp)
   1648e:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   16492:	48 c7 85 e0 fd ff ff 	movq   $0x15,-0x220(%rbp)
   16499:	15 00 00 00 
            values[idx] &= ~mask;
   1649d:	48 8b 11             	mov    (%rcx),%rdx
   164a0:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
   164a7:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
   164aa:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
   164b1:	48 8b 12             	mov    (%rdx),%rdx
   164b4:	48 c1 e2 15          	shl    $0x15,%rdx
   164b8:	48 0b 11             	or     (%rcx),%rdx
   164bb:	48 89 11             	mov    %rdx,(%rcx)
   164be:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
   164c5:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
   164cc:	48 8b 08             	mov    (%rax),%rcx
   164cf:	48 89 8d 90 fd ff ff 	mov    %rcx,-0x270(%rbp)
   164d6:	48 8b 8d 90 fd ff ff 	mov    -0x270(%rbp),%rcx
   164dd:	48 89 8d 38 fe ff ff 	mov    %rcx,-0x1c8(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
   164e4:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
   164eb:	51                   	push   %rcx
   164ec:	9d                   	popf
   164ed:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
   164f4:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   164fb:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
   16502:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   16509:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
   16510:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   16514:	48 c7 85 68 fe ff ff 	movq   $0x200000,-0x198(%rbp)
   1651b:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   1651f:	48 c7 85 60 fe ff ff 	movq   $0x15,-0x1a0(%rbp)
   16526:	15 00 00 00 
            return Result((values[idx] & mask) >> shift);
   1652a:	48 8b 00             	mov    (%rax),%rax
   1652d:	48 25 00 00 20 00    	and    $0x200000,%rax
   16533:	48 c1 e8 15          	shr    $0x15,%rax
   16537:	48 83 f8 00          	cmp    $0x0,%rax
            if (has()) {
   1653b:	0f 84 c2 01 00 00    	je     16703 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x693>
   16541:	48 8b 95 40 fb ff ff 	mov    -0x4c0(%rbp),%rdx
                query(leaf, subleaf);
   16548:	8b 8d 0c fd ff ff    	mov    -0x2f4(%rbp),%ecx
   1654e:	8b 85 08 fd ff ff    	mov    -0x2f8(%rbp),%eax
   16554:	48 89 95 38 fd ff ff 	mov    %rdx,-0x2c8(%rbp)
   1655b:	89 8d 34 fd ff ff    	mov    %ecx,-0x2cc(%rbp)
   16561:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%rbp)
   16567:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   1656e:	48 89 85 38 fb ff ff 	mov    %rax,-0x4c8(%rbp)
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
   16575:	9c                   	pushf
   16576:	58                   	pop    %rax
   16577:	48 89 85 58 fd ff ff 	mov    %rax,-0x2a8(%rbp)
        return state;
   1657e:	48 8b 85 58 fd ff ff 	mov    -0x2a8(%rbp),%rax
            return ArchCpuState::read()
   16585:	48 89 85 40 fd ff ff 	mov    %rax,-0x2c0(%rbp)
   1658c:	48 8d 85 40 fd ff ff 	lea    -0x2c0(%rbp),%rax
   16593:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
   1659a:	c7 85 84 fd ff ff 01 	movl   $0x1,-0x27c(%rbp)
   165a1:	00 00 00 
   165a4:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
   165ab:	48 63 8d 84 fd ff ff 	movslq -0x27c(%rbp),%rcx
   165b2:	48 89 8d 78 fd ff ff 	mov    %rcx,-0x288(%rbp)
   165b9:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   165c0:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
   165c7:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
   165ce:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
   165d5:	48 8b 8d c0 fd ff ff 	mov    -0x240(%rbp),%rcx
   165dc:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
   165e3:	48 89 8d 20 fe ff ff 	mov    %rcx,-0x1e0(%rbp)
   165ea:	48 8b 8d 28 fe ff ff 	mov    -0x1d8(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   165f1:	48 c7 85 18 fe ff ff 	movq   $0x0,-0x1e8(%rbp)
   165f8:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   165fc:	48 c7 85 10 fe ff ff 	movq   $0x200000,-0x1f0(%rbp)
   16603:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   16607:	48 c7 85 08 fe ff ff 	movq   $0x15,-0x1f8(%rbp)
   1660e:	15 00 00 00 
            values[idx] &= ~mask;
   16612:	48 8b 11             	mov    (%rcx),%rdx
   16615:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
   1661c:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
   1661f:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
   16626:	48 8b 12             	mov    (%rdx),%rdx
   16629:	48 c1 e2 15          	shl    $0x15,%rdx
   1662d:	48 0b 11             	or     (%rcx),%rdx
   16630:	48 89 11             	mov    %rdx,(%rcx)
   16633:	48 89 85 a8 fd ff ff 	mov    %rax,-0x258(%rbp)
   1663a:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
   16641:	48 8b 08             	mov    (%rax),%rcx
   16644:	48 89 8d a0 fd ff ff 	mov    %rcx,-0x260(%rbp)
   1664b:	48 8b 8d a0 fd ff ff 	mov    -0x260(%rbp),%rcx
   16652:	48 89 8d 30 fe ff ff 	mov    %rcx,-0x1d0(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
   16659:	48 8b 8d 30 fe ff ff 	mov    -0x1d0(%rbp),%rcx
   16660:	51                   	push   %rcx
   16661:	9d                   	popf
   16662:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
   16669:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
   16670:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
   16677:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   1667e:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
   16685:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   16689:	48 c7 85 48 fe ff ff 	movq   $0x200000,-0x1b8(%rbp)
   16690:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   16694:	48 c7 85 40 fe ff ff 	movq   $0x15,-0x1c0(%rbp)
   1669b:	15 00 00 00 
            return Result((values[idx] & mask) >> shift);
   1669f:	48 8b 00             	mov    (%rax),%rax
   166a2:	48 25 00 00 20 00    	and    $0x200000,%rax
   166a8:	48 c1 e8 15          	shr    $0x15,%rax
   166ac:	48 83 f8 00          	cmp    $0x0,%rax
            DEBUG_ASSERT(has(), "Use cpuid on a unsupported platform");
   166b0:	75 26                	jne    166d8 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x668>
   166b2:	48 8d 35 ff 87 01 00 	lea    0x187ff(%rip),%rsi        # 2eeb8 <.L.str>
   166b9:	48 8d bd 20 fd ff ff 	lea    -0x2e0(%rbp),%rdi
   166c0:	e8 bb cb fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   166c5:	48 8b bd 20 fd ff ff 	mov    -0x2e0(%rbp),%rdi
   166cc:	48 8b b5 28 fd ff ff 	mov    -0x2d8(%rbp),%rsi
   166d3:	e8 58 cb fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    	        : "a" (leaf), "c" (subleaf)
   166d8:	8b 85 34 fd ff ff    	mov    -0x2cc(%rbp),%eax
   166de:	8b 8d 30 fd ff ff    	mov    -0x2d0(%rbp),%ecx
    	    asm volatile("cpuid"
   166e4:	0f a2                	cpuid
   166e6:	89 c6                	mov    %eax,%esi
   166e8:	48 8b 85 38 fb ff ff 	mov    -0x4c8(%rbp),%rax
   166ef:	89 30                	mov    %esi,(%rax)
   166f1:	89 58 04             	mov    %ebx,0x4(%rax)
   166f4:	89 48 08             	mov    %ecx,0x8(%rax)
   166f7:	89 50 0c             	mov    %edx,0xc(%rax)
                return true;
   166fa:	c6 85 1f fd ff ff 01 	movb   $0x1,-0x2e1(%rbp)
   16701:	eb 07                	jmp    1670a <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x69a>
            return false;
   16703:	c6 85 1f fd ff ff 00 	movb   $0x0,-0x2e1(%rbp)
   1670a:	31 c0                	xor    %eax,%eax
   1670c:	f6 85 1f fd ff ff 01 	testb  $0x1,-0x2e1(%rbp)
   16713:	88 85 37 fb ff ff    	mov    %al,-0x4c9(%rbp)
   16719:	75 05                	jne    16720 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x6b0>
   1671b:	e9 b5 03 00 00       	jmp    16ad5 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0xa65>
                 dispatch_cpuid_1<Actions>(cpuid, ustl::forward<Observers>(observers)...)) && ...);
   16720:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
   16727:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
   1672e:	48 89 85 80 fb ff ff 	mov    %rax,-0x480(%rbp)
   16735:	48 8b b5 80 fb ff ff 	mov    -0x480(%rbp),%rsi
   1673c:	e8 ef 03 00 00       	call   16b30 <_ZN4arch16dispatch_cpuid_1INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbRT0_DpOT1_>
   16741:	88 c1                	mov    %al,%cl
   16743:	31 c0                	xor    %eax,%eax
   16745:	f6 c1 01             	test   $0x1,%cl
   16748:	88 85 37 fb ff ff    	mov    %al,-0x4c9(%rbp)
   1674e:	75 05                	jne    16755 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x6e5>
   16750:	e9 80 03 00 00       	jmp    16ad5 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0xa65>
        return ((cpuid.query_safe(Actions::kLeaf, Actions::kSubLeaf) &&
   16755:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
   1675c:	48 89 85 98 fb ff ff 	mov    %rax,-0x468(%rbp)
   16763:	c7 85 94 fb ff ff 07 	movl   $0x7,-0x46c(%rbp)
   1676a:	00 00 00 
   1676d:	c7 85 90 fb ff ff 01 	movl   $0x1,-0x470(%rbp)
   16774:	00 00 00 
   16777:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
   1677e:	48 89 85 28 fb ff ff 	mov    %rax,-0x4d8(%rbp)
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
   16785:	9c                   	pushf
   16786:	58                   	pop    %rax
   16787:	48 89 85 d8 fb ff ff 	mov    %rax,-0x428(%rbp)
        return state;
   1678e:	48 8b 85 d8 fb ff ff 	mov    -0x428(%rbp),%rax
            return ArchCpuState::read()
   16795:	48 89 85 d0 fb ff ff 	mov    %rax,-0x430(%rbp)
   1679c:	48 8d 85 d0 fb ff ff 	lea    -0x430(%rbp),%rax
   167a3:	48 89 85 f8 fb ff ff 	mov    %rax,-0x408(%rbp)
   167aa:	c7 85 f4 fb ff ff 01 	movl   $0x1,-0x40c(%rbp)
   167b1:	00 00 00 
   167b4:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
   167bb:	48 63 8d f4 fb ff ff 	movslq -0x40c(%rbp),%rcx
   167c2:	48 89 8d e8 fb ff ff 	mov    %rcx,-0x418(%rbp)
   167c9:	48 89 85 60 fc ff ff 	mov    %rax,-0x3a0(%rbp)
   167d0:	48 8d 85 e8 fb ff ff 	lea    -0x418(%rbp),%rax
   167d7:	48 89 85 58 fc ff ff 	mov    %rax,-0x3a8(%rbp)
   167de:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
   167e5:	48 8b 8d 58 fc ff ff 	mov    -0x3a8(%rbp),%rcx
   167ec:	48 89 85 88 fc ff ff 	mov    %rax,-0x378(%rbp)
   167f3:	48 89 8d 80 fc ff ff 	mov    %rcx,-0x380(%rbp)
   167fa:	48 8b 8d 88 fc ff ff 	mov    -0x378(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   16801:	48 c7 85 78 fc ff ff 	movq   $0x0,-0x388(%rbp)
   16808:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   1680c:	48 c7 85 70 fc ff ff 	movq   $0x200000,-0x390(%rbp)
   16813:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   16817:	48 c7 85 68 fc ff ff 	movq   $0x15,-0x398(%rbp)
   1681e:	15 00 00 00 
            values[idx] &= ~mask;
   16822:	48 8b 11             	mov    (%rcx),%rdx
   16825:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
   1682c:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
   1682f:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
   16836:	48 8b 12             	mov    (%rdx),%rdx
   16839:	48 c1 e2 15          	shl    $0x15,%rdx
   1683d:	48 0b 11             	or     (%rcx),%rdx
   16840:	48 89 11             	mov    %rdx,(%rcx)
   16843:	48 89 85 20 fc ff ff 	mov    %rax,-0x3e0(%rbp)
   1684a:	48 8b 85 20 fc ff ff 	mov    -0x3e0(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
   16851:	48 8b 08             	mov    (%rax),%rcx
   16854:	48 89 8d 18 fc ff ff 	mov    %rcx,-0x3e8(%rbp)
   1685b:	48 8b 8d 18 fc ff ff 	mov    -0x3e8(%rbp),%rcx
   16862:	48 89 8d c0 fc ff ff 	mov    %rcx,-0x340(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
   16869:	48 8b 8d c0 fc ff ff 	mov    -0x340(%rbp),%rcx
   16870:	51                   	push   %rcx
   16871:	9d                   	popf
   16872:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
   16879:	48 8b 85 38 fc ff ff 	mov    -0x3c8(%rbp),%rax
   16880:	48 89 85 00 fd ff ff 	mov    %rax,-0x300(%rbp)
   16887:	48 8b 85 00 fd ff ff 	mov    -0x300(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   1688e:	48 c7 85 f8 fc ff ff 	movq   $0x0,-0x308(%rbp)
   16895:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   16899:	48 c7 85 f0 fc ff ff 	movq   $0x200000,-0x310(%rbp)
   168a0:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   168a4:	48 c7 85 e8 fc ff ff 	movq   $0x15,-0x318(%rbp)
   168ab:	15 00 00 00 
            return Result((values[idx] & mask) >> shift);
   168af:	48 8b 00             	mov    (%rax),%rax
   168b2:	48 25 00 00 20 00    	and    $0x200000,%rax
   168b8:	48 c1 e8 15          	shr    $0x15,%rax
   168bc:	48 83 f8 00          	cmp    $0x0,%rax
            if (has()) {
   168c0:	0f 84 c2 01 00 00    	je     16a88 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0xa18>
   168c6:	48 8b 95 28 fb ff ff 	mov    -0x4d8(%rbp),%rdx
                query(leaf, subleaf);
   168cd:	8b 8d 94 fb ff ff    	mov    -0x46c(%rbp),%ecx
   168d3:	8b 85 90 fb ff ff    	mov    -0x470(%rbp),%eax
   168d9:	48 89 95 c0 fb ff ff 	mov    %rdx,-0x440(%rbp)
   168e0:	89 8d bc fb ff ff    	mov    %ecx,-0x444(%rbp)
   168e6:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%rbp)
   168ec:	48 8b 85 c0 fb ff ff 	mov    -0x440(%rbp),%rax
   168f3:	48 89 85 20 fb ff ff 	mov    %rax,-0x4e0(%rbp)
        asm ("pushf; pop %0" : "=r"(state) :: "memory");
   168fa:	9c                   	pushf
   168fb:	58                   	pop    %rax
   168fc:	48 89 85 e0 fb ff ff 	mov    %rax,-0x420(%rbp)
        return state;
   16903:	48 8b 85 e0 fb ff ff 	mov    -0x420(%rbp),%rax
            return ArchCpuState::read()
   1690a:	48 89 85 c8 fb ff ff 	mov    %rax,-0x438(%rbp)
   16911:	48 8d 85 c8 fb ff ff 	lea    -0x438(%rbp),%rax
   16918:	48 89 85 10 fc ff ff 	mov    %rax,-0x3f0(%rbp)
   1691f:	c7 85 0c fc ff ff 01 	movl   $0x1,-0x3f4(%rbp)
   16926:	00 00 00 
   16929:	48 8b 85 10 fc ff ff 	mov    -0x3f0(%rbp),%rax
            return static_cast<Self &>(this->Base::template set<I>(val));
   16930:	48 63 8d 0c fc ff ff 	movslq -0x3f4(%rbp),%rcx
   16937:	48 89 8d 00 fc ff ff 	mov    %rcx,-0x400(%rbp)
   1693e:	48 89 85 50 fc ff ff 	mov    %rax,-0x3b0(%rbp)
   16945:	48 8d 85 00 fc ff ff 	lea    -0x400(%rbp),%rax
   1694c:	48 89 85 48 fc ff ff 	mov    %rax,-0x3b8(%rbp)
   16953:	48 8b 85 50 fc ff ff 	mov    -0x3b0(%rbp),%rax
            priv_set<Id>(value, traits::BoolConstant<IsFieldEnabledV<Id>>());
   1695a:	48 8b 8d 48 fc ff ff 	mov    -0x3b8(%rbp),%rcx
   16961:	48 89 85 b0 fc ff ff 	mov    %rax,-0x350(%rbp)
   16968:	48 89 8d a8 fc ff ff 	mov    %rcx,-0x358(%rbp)
   1696f:	48 8b 8d b0 fc ff ff 	mov    -0x350(%rbp),%rcx
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   16976:	48 c7 85 a0 fc ff ff 	movq   $0x0,-0x360(%rbp)
   1697d:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   16981:	48 c7 85 98 fc ff ff 	movq   $0x200000,-0x368(%rbp)
   16988:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   1698c:	48 c7 85 90 fc ff ff 	movq   $0x15,-0x370(%rbp)
   16993:	15 00 00 00 
            values[idx] &= ~mask;
   16997:	48 8b 11             	mov    (%rcx),%rdx
   1699a:	48 81 e2 ff ff df ff 	and    $0xffffffffffdfffff,%rdx
   169a1:	48 89 11             	mov    %rdx,(%rcx)
            values[idx] |= usize(value) << shift;
   169a4:	48 8b 95 a8 fc ff ff 	mov    -0x358(%rbp),%rdx
   169ab:	48 8b 12             	mov    (%rdx),%rdx
   169ae:	48 c1 e2 15          	shl    $0x15,%rdx
   169b2:	48 0b 11             	or     (%rcx),%rdx
   169b5:	48 89 11             	mov    %rdx,(%rcx)
   169b8:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
   169bf:	48 8b 85 30 fc ff ff 	mov    -0x3d0(%rbp),%rax
            Self::write(*static_cast<Derived const *>(this));
   169c6:	48 8b 08             	mov    (%rax),%rcx
   169c9:	48 89 8d 28 fc ff ff 	mov    %rcx,-0x3d8(%rbp)
   169d0:	48 8b 8d 28 fc ff ff 	mov    -0x3d8(%rbp),%rcx
   169d7:	48 89 8d b8 fc ff ff 	mov    %rcx,-0x348(%rbp)
        asm ("push %0; popf" :: "r"(cpustate) : "memory");
   169de:	48 8b 8d b8 fc ff ff 	mov    -0x348(%rbp),%rcx
   169e5:	51                   	push   %rcx
   169e6:	9d                   	popf
   169e7:	48 89 85 40 fc ff ff 	mov    %rax,-0x3c0(%rbp)
   169ee:	48 8b 85 40 fc ff ff 	mov    -0x3c0(%rbp),%rax
   169f5:	48 89 85 e0 fc ff ff 	mov    %rax,-0x320(%rbp)
   169fc:	48 8b 85 e0 fc ff ff 	mov    -0x320(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   16a03:	48 c7 85 d8 fc ff ff 	movq   $0x0,-0x328(%rbp)
   16a0a:	00 00 00 00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   16a0e:	48 c7 85 d0 fc ff ff 	movq   $0x200000,-0x330(%rbp)
   16a15:	00 00 20 00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   16a19:	48 c7 85 c8 fc ff ff 	movq   $0x15,-0x338(%rbp)
   16a20:	15 00 00 00 
            return Result((values[idx] & mask) >> shift);
   16a24:	48 8b 00             	mov    (%rax),%rax
   16a27:	48 25 00 00 20 00    	and    $0x200000,%rax
   16a2d:	48 c1 e8 15          	shr    $0x15,%rax
   16a31:	48 83 f8 00          	cmp    $0x0,%rax
            DEBUG_ASSERT(has(), "Use cpuid on a unsupported platform");
   16a35:	75 26                	jne    16a5d <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0x9ed>
   16a37:	48 8d 35 7a 84 01 00 	lea    0x1847a(%rip),%rsi        # 2eeb8 <.L.str>
   16a3e:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
   16a45:	e8 36 c8 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   16a4a:	48 8b bd a8 fb ff ff 	mov    -0x458(%rbp),%rdi
   16a51:	48 8b b5 b0 fb ff ff 	mov    -0x450(%rbp),%rsi
   16a58:	e8 d3 c7 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    	        : "a" (leaf), "c" (subleaf)
   16a5d:	8b 85 bc fb ff ff    	mov    -0x444(%rbp),%eax
   16a63:	8b 8d b8 fb ff ff    	mov    -0x448(%rbp),%ecx
    	    asm volatile("cpuid"
   16a69:	0f a2                	cpuid
   16a6b:	89 c6                	mov    %eax,%esi
   16a6d:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
   16a74:	89 30                	mov    %esi,(%rax)
   16a76:	89 58 04             	mov    %ebx,0x4(%rax)
   16a79:	89 48 08             	mov    %ecx,0x8(%rax)
   16a7c:	89 50 0c             	mov    %edx,0xc(%rax)
                return true;
   16a7f:	c6 85 a7 fb ff ff 01 	movb   $0x1,-0x459(%rbp)
   16a86:	eb 07                	jmp    16a8f <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0xa1f>
            return false;
   16a88:	c6 85 a7 fb ff ff 00 	movb   $0x0,-0x459(%rbp)
   16a8f:	31 c0                	xor    %eax,%eax
   16a91:	f6 85 a7 fb ff ff 01 	testb  $0x1,-0x459(%rbp)
   16a98:	88 85 1f fb ff ff    	mov    %al,-0x4e1(%rbp)
   16a9e:	75 02                	jne    16aa2 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0xa32>
   16aa0:	eb 27                	jmp    16ac9 <_ZN4arch16dispatch_cpuid_0IRNS_5CpuIdEJNS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS3_ILS4_7ELS5_0EEENS3_ILS4_7ELS5_1EEEEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbOT_N4ustl8TypeListIJDpT0_EEEDpOT1_+0xa59>
                 dispatch_cpuid_1<Actions>(cpuid, ustl::forward<Observers>(observers)...)) && ...);
   16aa2:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
   16aa9:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
   16ab0:	48 89 85 78 fb ff ff 	mov    %rax,-0x488(%rbp)
   16ab7:	48 8b b5 78 fb ff ff 	mov    -0x488(%rbp),%rsi
   16abe:	e8 9d 00 00 00       	call   16b60 <_ZN4arch16dispatch_cpuid_1INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbRT0_DpOT1_>
   16ac3:	88 85 1f fb ff ff    	mov    %al,-0x4e1(%rbp)
   16ac9:	8a 85 1f fb ff ff    	mov    -0x4e1(%rbp),%al
   16acf:	88 85 37 fb ff ff    	mov    %al,-0x4c9(%rbp)
   16ad5:	8a 85 37 fb ff ff    	mov    -0x4c9(%rbp),%al
   16adb:	88 85 4f fb ff ff    	mov    %al,-0x4b1(%rbp)
   16ae1:	8a 85 4f fb ff ff    	mov    -0x4b1(%rbp),%al
        return ((cpuid.query_safe(Actions::kLeaf, Actions::kSubLeaf) &&
   16ae7:	24 01                	and    $0x1,%al
   16ae9:	48 81 c4 e8 04 00 00 	add    $0x4e8,%rsp
   16af0:	5b                   	pop    %rbx
   16af1:	5d                   	pop    %rbp
   16af2:	c3                   	ret
   16af3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16afa:	00 00 00 
   16afd:	0f 1f 00             	nopl   (%rax)

0000000000016b00 <_ZN4arch16dispatch_cpuid_1INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbRT0_DpOT1_>:
    auto dispatch_cpuid_1(CpuId &result, Observers &&...observers) -> bool {
   16b00:	55                   	push   %rbp
   16b01:	48 89 e5             	mov    %rsp,%rbp
   16b04:	48 83 ec 20          	sub    $0x20,%rsp
   16b08:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   16b0c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
        return (dispatch_cpuid_2<Action>(result, ustl::forward<Observers>(observers)), ...);
   16b10:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16b14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16b1c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   16b20:	e8 6b 00 00 00       	call   16b90 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE>
   16b25:	24 01                	and    $0x1,%al
   16b27:	48 83 c4 20          	add    $0x20,%rsp
   16b2b:	5d                   	pop    %rbp
   16b2c:	c3                   	ret
   16b2d:	0f 1f 00             	nopl   (%rax)

0000000000016b30 <_ZN4arch16dispatch_cpuid_1INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbRT0_DpOT1_>:
    auto dispatch_cpuid_1(CpuId &result, Observers &&...observers) -> bool {
   16b30:	55                   	push   %rbp
   16b31:	48 89 e5             	mov    %rsp,%rbp
   16b34:	48 83 ec 20          	sub    $0x20,%rsp
   16b38:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   16b3c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
        return (dispatch_cpuid_2<Action>(result, ustl::forward<Observers>(observers)), ...);
   16b40:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16b44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b48:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16b4c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   16b50:	e8 6b 04 00 00       	call   16fc0 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE>
   16b55:	24 01                	and    $0x1,%al
   16b57:	48 83 c4 20          	add    $0x20,%rsp
   16b5b:	5d                   	pop    %rbp
   16b5c:	c3                   	ret
   16b5d:	0f 1f 00             	nopl   (%rax)

0000000000016b60 <_ZN4arch16dispatch_cpuid_1INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdEJNS_13X86CpuFeature17SelfCpuIdObserverEEEEbRT0_DpOT1_>:
    auto dispatch_cpuid_1(CpuId &result, Observers &&...observers) -> bool {
   16b60:	55                   	push   %rbp
   16b61:	48 89 e5             	mov    %rsp,%rbp
   16b64:	48 83 ec 20          	sub    $0x20,%rsp
   16b68:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   16b6c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
        return (dispatch_cpuid_2<Action>(result, ustl::forward<Observers>(observers)), ...);
   16b70:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16b74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16b7c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   16b80:	e8 7b 07 00 00       	call   17300 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE>
   16b85:	24 01                	and    $0x1,%al
   16b87:	48 83 c4 20          	add    $0x20,%rsp
   16b8b:	5d                   	pop    %rbp
   16b8c:	c3                   	ret
   16b8d:	0f 1f 00             	nopl   (%rax)

0000000000016b90 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE>:
    auto dispatch_cpuid_2(CpuId &result, CpuIdObserver<Observer, ObserveItems...> &&observer) -> bool {
   16b90:	55                   	push   %rbp
   16b91:	48 89 e5             	mov    %rsp,%rbp
   16b94:	48 83 ec 20          	sub    $0x20,%rsp
   16b98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16b9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        return (dispatch_cpuid_3<Action>(result, static_cast<Observer &>(observer), ObserveItems()) && ...);
   16ba0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16ba4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16ba8:	e8 b3 00 00 00       	call   16c60 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   16bad:	88 c1                	mov    %al,%cl
   16baf:	31 c0                	xor    %eax,%eax
   16bb1:	f6 c1 01             	test   $0x1,%cl
   16bb4:	88 45 e9             	mov    %al,-0x17(%rbp)
   16bb7:	75 05                	jne    16bbe <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x2e>
   16bb9:	e9 94 00 00 00       	jmp    16c52 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xc2>
   16bbe:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16bc2:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16bc6:	e8 e5 00 00 00       	call   16cb0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   16bcb:	88 c1                	mov    %al,%cl
   16bcd:	31 c0                	xor    %eax,%eax
   16bcf:	f6 c1 01             	test   $0x1,%cl
   16bd2:	88 45 e8             	mov    %al,-0x18(%rbp)
   16bd5:	75 02                	jne    16bd9 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x49>
   16bd7:	eb 73                	jmp    16c4c <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xbc>
   16bd9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16bdd:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16be1:	e8 1a 01 00 00       	call   16d00 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE1EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   16be6:	88 c1                	mov    %al,%cl
   16be8:	31 c0                	xor    %eax,%eax
   16bea:	f6 c1 01             	test   $0x1,%cl
   16bed:	88 45 e7             	mov    %al,-0x19(%rbp)
   16bf0:	75 02                	jne    16bf4 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x64>
   16bf2:	eb 52                	jmp    16c46 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xb6>
   16bf4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16bf8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16bfc:	e8 1f 01 00 00       	call   16d20 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   16c01:	88 c1                	mov    %al,%cl
   16c03:	31 c0                	xor    %eax,%eax
   16c05:	f6 c1 01             	test   $0x1,%cl
   16c08:	88 45 e6             	mov    %al,-0x1a(%rbp)
   16c0b:	75 02                	jne    16c0f <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x7f>
   16c0d:	eb 31                	jmp    16c40 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xb0>
   16c0f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16c13:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16c17:	e8 24 01 00 00       	call   16d40 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   16c1c:	88 c1                	mov    %al,%cl
   16c1e:	31 c0                	xor    %eax,%eax
   16c20:	f6 c1 01             	test   $0x1,%cl
   16c23:	88 45 e5             	mov    %al,-0x1b(%rbp)
   16c26:	75 02                	jne    16c2a <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x9a>
   16c28:	eb 10                	jmp    16c3a <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerIS4_JLNS_12CpuIdRegTagsE3EEEENS8_IS4_JLS9_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLS9_1EEEENS8_ISC_JLS9_2EEEENS8_ISC_JLS9_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLS9_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xaa>
   16c2a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16c2e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16c32:	e8 29 01 00 00       	call   16d60 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_1EJLNS_12CpuIdRegTagsE0EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   16c37:	88 45 e5             	mov    %al,-0x1b(%rbp)
   16c3a:	8a 45 e5             	mov    -0x1b(%rbp),%al
   16c3d:	88 45 e6             	mov    %al,-0x1a(%rbp)
   16c40:	8a 45 e6             	mov    -0x1a(%rbp),%al
   16c43:	88 45 e7             	mov    %al,-0x19(%rbp)
   16c46:	8a 45 e7             	mov    -0x19(%rbp),%al
   16c49:	88 45 e8             	mov    %al,-0x18(%rbp)
   16c4c:	8a 45 e8             	mov    -0x18(%rbp),%al
   16c4f:	88 45 e9             	mov    %al,-0x17(%rbp)
   16c52:	8a 45 e9             	mov    -0x17(%rbp),%al
   16c55:	24 01                	and    $0x1,%al
   16c57:	48 83 c4 20          	add    $0x20,%rsp
   16c5b:	5d                   	pop    %rbp
   16c5c:	c3                   	ret
   16c5d:	0f 1f 00             	nopl   (%rax)

0000000000016c60 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   16c60:	55                   	push   %rbp
   16c61:	48 89 e5             	mov    %rsp,%rbp
   16c64:	48 83 ec 30          	sub    $0x30,%rsp
   16c68:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16c6c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   16c70:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
                                       result.edx()) && ...);
   16c74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16c78:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16c7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
            return edx_;
   16c80:	8b 40 0c             	mov    0xc(%rax),%eax
   16c83:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   16c87:	89 45 f4             	mov    %eax,-0xc(%rbp)
   16c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
                ustl::copy_bits<kDelta>(feature_->features_, value);
   16c8e:	48 8b 38             	mov    (%rax),%rdi
   16c91:	8b 75 f4             	mov    -0xc(%rbp),%esi
   16c94:	e8 e7 00 00 00       	call   16d80 <_ZN4ustl9copy_bitsILm0ENSt3__16bitsetILm187EEEjEEvRT0_T1_>
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   16c99:	b0 01                	mov    $0x1,%al
   16c9b:	24 01                	and    $0x1,%al
   16c9d:	48 83 c4 30          	add    $0x30,%rsp
   16ca1:	5d                   	pop    %rbp
   16ca2:	c3                   	ret
   16ca3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16caa:	00 00 00 
   16cad:	0f 1f 00             	nopl   (%rax)

0000000000016cb0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   16cb0:	55                   	push   %rbp
   16cb1:	48 89 e5             	mov    %rsp,%rbp
   16cb4:	48 83 ec 30          	sub    $0x30,%rsp
   16cb8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16cbc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   16cc0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
                                       Regs == CpuIdRegTags::Ecx ? result.ecx() :
   16cc4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16cc8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16ccc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
            return ecx_;
   16cd0:	8b 40 08             	mov    0x8(%rax),%eax
   16cd3:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   16cd7:	89 45 f4             	mov    %eax,-0xc(%rbp)
   16cda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cde:	48 8b 38             	mov    (%rax),%rdi
   16ce1:	8b 75 f4             	mov    -0xc(%rbp),%esi
   16ce4:	e8 77 02 00 00       	call   16f60 <_ZN4ustl9copy_bitsILm32ENSt3__16bitsetILm187EEEjEEvRT0_T1_>
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   16ce9:	b0 01                	mov    $0x1,%al
   16ceb:	24 01                	and    $0x1,%al
   16ced:	48 83 c4 30          	add    $0x30,%rsp
   16cf1:	5d                   	pop    %rbp
   16cf2:	c3                   	ret
   16cf3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16cfa:	00 00 00 
   16cfd:	0f 1f 00             	nopl   (%rax)

0000000000016d00 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE1EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   16d00:	55                   	push   %rbp
   16d01:	48 89 e5             	mov    %rsp,%rbp
   16d04:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   16d08:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   16d0c:	b0 01                	mov    $0x1,%al
   16d0e:	24 01                	and    $0x1,%al
   16d10:	5d                   	pop    %rbp
   16d11:	c3                   	ret
   16d12:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16d19:	00 00 00 
   16d1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000016d20 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   16d20:	55                   	push   %rbp
   16d21:	48 89 e5             	mov    %rsp,%rbp
   16d24:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   16d28:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   16d2c:	b0 01                	mov    $0x1,%al
   16d2e:	24 01                	and    $0x1,%al
   16d30:	5d                   	pop    %rbp
   16d31:	c3                   	ret
   16d32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16d39:	00 00 00 
   16d3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000016d40 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   16d40:	55                   	push   %rbp
   16d41:	48 89 e5             	mov    %rsp,%rbp
   16d44:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   16d48:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   16d4c:	b0 01                	mov    $0x1,%al
   16d4e:	24 01                	and    $0x1,%al
   16d50:	5d                   	pop    %rbp
   16d51:	c3                   	ret
   16d52:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16d59:	00 00 00 
   16d5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000016d60 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE1ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_1EJLNS_12CpuIdRegTagsE0EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   16d60:	55                   	push   %rbp
   16d61:	48 89 e5             	mov    %rsp,%rbp
   16d64:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   16d68:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   16d6c:	b0 01                	mov    $0x1,%al
   16d6e:	24 01                	and    $0x1,%al
   16d70:	5d                   	pop    %rbp
   16d71:	c3                   	ret
   16d72:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16d79:	00 00 00 
   16d7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000016d80 <_ZN4ustl9copy_bitsILm0ENSt3__16bitsetILm187EEEjEEvRT0_T1_>:
namespace ustl {
    template <int NBits>
    using BitSet = std::bitset<NBits>;

    template <usize Delta = 0, typename BitSet, typename Integer>
    auto copy_bits(BitSet &bitset, Integer value) -> void {
   16d80:	55                   	push   %rbp
   16d81:	48 89 e5             	mov    %rsp,%rbp
   16d84:	48 83 ec 10          	sub    $0x10,%rsp
   16d88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16d8c:	89 75 f4             	mov    %esi,-0xc(%rbp)
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   16d8f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
   16d96:	83 7d f0 20          	cmpl   $0x20,-0x10(%rbp)
   16d9a:	7d 35                	jge    16dd1 <_ZN4ustl9copy_bitsILm0ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x51>
            if (((1 << i) & value) != 0) {
   16d9c:	8b 4d f0             	mov    -0x10(%rbp),%ecx
   16d9f:	b8 01 00 00 00       	mov    $0x1,%eax
   16da4:	d3 e0                	shl    %cl,%eax
   16da6:	23 45 f4             	and    -0xc(%rbp),%eax
   16da9:	83 f8 00             	cmp    $0x0,%eax
   16dac:	74 16                	je     16dc4 <_ZN4ustl9copy_bitsILm0ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x44>
                bitset.set(Delta + i);
   16dae:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16db2:	48 63 75 f0          	movslq -0x10(%rbp),%rsi
   16db6:	48 83 c6 00          	add    $0x0,%rsi
   16dba:	ba 01 00 00 00       	mov    $0x1,%edx
   16dbf:	e8 1c 00 00 00       	call   16de0 <_ZNSt3__16bitsetILm187EE3setB8nn210000Emb>
            }
        }
   16dc4:	eb 00                	jmp    16dc6 <_ZN4ustl9copy_bitsILm0ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x46>
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   16dc6:	8b 45 f0             	mov    -0x10(%rbp),%eax
   16dc9:	83 c0 01             	add    $0x1,%eax
   16dcc:	89 45 f0             	mov    %eax,-0x10(%rbp)
   16dcf:	eb c5                	jmp    16d96 <_ZN4ustl9copy_bitsILm0ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x16>
    }
   16dd1:	48 83 c4 10          	add    $0x10,%rsp
   16dd5:	5d                   	pop    %rbp
   16dd6:	c3                   	ret
   16dd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   16dde:	00 00 

0000000000016de0 <_ZNSt3__16bitsetILm187EE3setB8nn210000Emb>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bitset<_Size>& bitset<_Size>::set(size_t __pos, bool __val) {
   16de0:	55                   	push   %rbp
   16de1:	48 89 e5             	mov    %rsp,%rbp
   16de4:	48 83 ec 40          	sub    $0x40,%rsp
   16de8:	88 d0                	mov    %dl,%al
   16dea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16dee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16df2:	24 01                	and    $0x1,%al
   16df4:	88 45 ef             	mov    %al,-0x11(%rbp)
   16df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dfb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  if (__pos >= _Size)
   16dff:	48 81 7d f0 bb 00 00 	cmpq   $0xbb,-0x10(%rbp)
   16e06:	00 
   16e07:	72 0c                	jb     16e15 <_ZNSt3__16bitsetILm187EE3setB8nn210000Emb+0x35>
    std::__throw_out_of_range("bitset set argument out of range");
   16e09:	48 8d 3d 87 80 01 00 	lea    0x18087(%rip),%rdi        # 2ee97 <.L.str.2>
   16e10:	e8 bb c9 fe ff       	call   37d0 <_ZNSt3__120__throw_out_of_rangeB8nn210000EPKc>
   16e15:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  (*this)[__pos] = __val;
   16e19:	8a 45 ef             	mov    -0x11(%rbp),%al
   16e1c:	88 45 cf             	mov    %al,-0x31(%rbp)
   16e1f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16e23:	e8 28 00 00 00       	call   16e50 <_ZNSt3__16bitsetILm187EEixB8nn210000Em>
   16e28:	48 89 c1             	mov    %rax,%rcx
   16e2b:	8a 45 cf             	mov    -0x31(%rbp),%al
   16e2e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   16e32:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   16e36:	0f b6 f0             	movzbl %al,%esi
   16e39:	83 e6 01             	and    $0x1,%esi
   16e3c:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   16e40:	e8 4b 00 00 00       	call   16e90 <_ZNSt3__115__bit_referenceINS_8__bitsetILm3ELm187EEELb1EEaSB8nn210000Eb>
   16e45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  return *this;
   16e49:	48 83 c4 40          	add    $0x40,%rsp
   16e4d:	5d                   	pop    %rbp
   16e4e:	c3                   	ret
   16e4f:	90                   	nop

0000000000016e50 <_ZNSt3__16bitsetILm187EEixB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 reference operator[](size_t __p) {
   16e50:	55                   	push   %rbp
   16e51:	48 89 e5             	mov    %rsp,%rbp
   16e54:	48 83 ec 20          	sub    $0x20,%rsp
   16e58:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16e5c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   16e60:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    return __base::__make_ref(__p);
   16e64:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   16e68:	e8 73 00 00 00       	call   16ee0 <_ZNSt3__18__bitsetILm3ELm187EE10__make_refB8nn210000Em>
   16e6d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   16e71:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   16e75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16e79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16e7d:	48 83 c4 20          	add    $0x20,%rsp
   16e81:	5d                   	pop    %rbp
   16e82:	c3                   	ret
   16e83:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16e8a:	00 00 00 
   16e8d:	0f 1f 00             	nopl   (%rax)

0000000000016e90 <_ZNSt3__115__bit_referenceINS_8__bitsetILm3ELm187EEELb1EEaSB8nn210000Eb>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 __bit_reference& operator=(bool __x) _NOEXCEPT {
   16e90:	55                   	push   %rbp
   16e91:	48 89 e5             	mov    %rsp,%rbp
   16e94:	40 88 f0             	mov    %sil,%al
   16e97:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e9b:	24 01                	and    $0x1,%al
   16e9d:	88 45 f7             	mov    %al,-0x9(%rbp)
   16ea0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ea4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (__x)
   16ea8:	f6 45 f7 01          	testb  $0x1,-0x9(%rbp)
   16eac:	74 13                	je     16ec1 <_ZNSt3__115__bit_referenceINS_8__bitsetILm3ELm187EEELb1EEaSB8nn210000Eb+0x31>
   16eae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      *__seg_ |= __mask_;
   16eb2:	48 8b 48 08          	mov    0x8(%rax),%rcx
   16eb6:	48 8b 00             	mov    (%rax),%rax
   16eb9:	48 0b 08             	or     (%rax),%rcx
   16ebc:	48 89 08             	mov    %rcx,(%rax)
   16ebf:	eb 15                	jmp    16ed6 <_ZNSt3__115__bit_referenceINS_8__bitsetILm3ELm187EEELb1EEaSB8nn210000Eb+0x46>
   16ec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      *__seg_ &= ~__mask_;
   16ec5:	48 8b 48 08          	mov    0x8(%rax),%rcx
   16ec9:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
   16ecd:	48 8b 00             	mov    (%rax),%rax
   16ed0:	48 23 08             	and    (%rax),%rcx
   16ed3:	48 89 08             	mov    %rcx,(%rax)
   16ed6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    return *this;
   16eda:	5d                   	pop    %rbp
   16edb:	c3                   	ret
   16edc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000016ee0 <_ZNSt3__18__bitsetILm3ELm187EE10__make_refB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 reference __make_ref(size_t __pos) _NOEXCEPT {
   16ee0:	55                   	push   %rbp
   16ee1:	48 89 e5             	mov    %rsp,%rbp
   16ee4:	48 83 ec 20          	sub    $0x20,%rsp
   16ee8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16eec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   16ef0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    return reference(__first_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);
   16ef4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16ef8:	48 89 c2             	mov    %rax,%rdx
   16efb:	48 c1 ea 06          	shr    $0x6,%rdx
   16eff:	48 8d 34 d1          	lea    (%rcx,%rdx,8),%rsi
   16f03:	88 c1                	mov    %al,%cl
   16f05:	ba 01 00 00 00       	mov    $0x1,%edx
   16f0a:	48 d3 e2             	shl    %cl,%rdx
   16f0d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   16f11:	e8 1a 00 00 00       	call   16f30 <_ZNSt3__115__bit_referenceINS_8__bitsetILm3ELm187EEELb1EEC2B8nn210000EPmm>
   16f16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16f1a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16f1e:	48 83 c4 20          	add    $0x20,%rsp
   16f22:	5d                   	pop    %rbp
   16f23:	c3                   	ret
   16f24:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16f2b:	00 00 00 
   16f2e:	66 90                	xchg   %ax,%ax

0000000000016f30 <_ZNSt3__115__bit_referenceINS_8__bitsetILm3ELm187EEELb1EEC2B8nn210000EPmm>:
        __mask_(__m) {}
   16f30:	55                   	push   %rbp
   16f31:	48 89 e5             	mov    %rsp,%rbp
   16f34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16f38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16f3c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   16f40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      : __seg_(__s),
   16f44:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   16f48:	48 89 08             	mov    %rcx,(%rax)
        __mask_(__m) {}
   16f4b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16f4f:	48 89 48 08          	mov    %rcx,0x8(%rax)
   16f53:	5d                   	pop    %rbp
   16f54:	c3                   	ret
   16f55:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16f5c:	00 00 00 
   16f5f:	90                   	nop

0000000000016f60 <_ZN4ustl9copy_bitsILm32ENSt3__16bitsetILm187EEEjEEvRT0_T1_>:
    auto copy_bits(BitSet &bitset, Integer value) -> void {
   16f60:	55                   	push   %rbp
   16f61:	48 89 e5             	mov    %rsp,%rbp
   16f64:	48 83 ec 10          	sub    $0x10,%rsp
   16f68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16f6c:	89 75 f4             	mov    %esi,-0xc(%rbp)
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   16f6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
   16f76:	83 7d f0 20          	cmpl   $0x20,-0x10(%rbp)
   16f7a:	7d 35                	jge    16fb1 <_ZN4ustl9copy_bitsILm32ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x51>
            if (((1 << i) & value) != 0) {
   16f7c:	8b 4d f0             	mov    -0x10(%rbp),%ecx
   16f7f:	b8 01 00 00 00       	mov    $0x1,%eax
   16f84:	d3 e0                	shl    %cl,%eax
   16f86:	23 45 f4             	and    -0xc(%rbp),%eax
   16f89:	83 f8 00             	cmp    $0x0,%eax
   16f8c:	74 16                	je     16fa4 <_ZN4ustl9copy_bitsILm32ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x44>
                bitset.set(Delta + i);
   16f8e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16f92:	48 63 75 f0          	movslq -0x10(%rbp),%rsi
   16f96:	48 83 c6 20          	add    $0x20,%rsi
   16f9a:	ba 01 00 00 00       	mov    $0x1,%edx
   16f9f:	e8 3c fe ff ff       	call   16de0 <_ZNSt3__16bitsetILm187EE3setB8nn210000Emb>
        }
   16fa4:	eb 00                	jmp    16fa6 <_ZN4ustl9copy_bitsILm32ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x46>
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   16fa6:	8b 45 f0             	mov    -0x10(%rbp),%eax
   16fa9:	83 c0 01             	add    $0x1,%eax
   16fac:	89 45 f0             	mov    %eax,-0x10(%rbp)
   16faf:	eb c5                	jmp    16f76 <_ZN4ustl9copy_bitsILm32ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x16>
    }
   16fb1:	48 83 c4 10          	add    $0x10,%rsp
   16fb5:	5d                   	pop    %rbp
   16fb6:	c3                   	ret
   16fb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   16fbe:	00 00 

0000000000016fc0 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE>:
    auto dispatch_cpuid_2(CpuId &result, CpuIdObserver<Observer, ObserveItems...> &&observer) -> bool {
   16fc0:	55                   	push   %rbp
   16fc1:	48 89 e5             	mov    %rsp,%rbp
   16fc4:	48 83 ec 20          	sub    $0x20,%rsp
   16fc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16fcc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        return (dispatch_cpuid_3<Action>(result, static_cast<Observer &>(observer), ObserveItems()) && ...);
   16fd0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16fd4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16fd8:	e8 b3 00 00 00       	call   17090 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   16fdd:	88 c1                	mov    %al,%cl
   16fdf:	31 c0                	xor    %eax,%eax
   16fe1:	f6 c1 01             	test   $0x1,%cl
   16fe4:	88 45 e9             	mov    %al,-0x17(%rbp)
   16fe7:	75 05                	jne    16fee <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x2e>
   16fe9:	e9 94 00 00 00       	jmp    17082 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xc2>
   16fee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16ff2:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16ff6:	e8 b5 00 00 00       	call   170b0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   16ffb:	88 c1                	mov    %al,%cl
   16ffd:	31 c0                	xor    %eax,%eax
   16fff:	f6 c1 01             	test   $0x1,%cl
   17002:	88 45 e8             	mov    %al,-0x18(%rbp)
   17005:	75 02                	jne    17009 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x49>
   17007:	eb 73                	jmp    1707c <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xbc>
   17009:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1700d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17011:	e8 ba 00 00 00       	call   170d0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE1EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   17016:	88 c1                	mov    %al,%cl
   17018:	31 c0                	xor    %eax,%eax
   1701a:	f6 c1 01             	test   $0x1,%cl
   1701d:	88 45 e7             	mov    %al,-0x19(%rbp)
   17020:	75 02                	jne    17024 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x64>
   17022:	eb 52                	jmp    17076 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xb6>
   17024:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17028:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1702c:	e8 ef 00 00 00       	call   17120 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   17031:	88 c1                	mov    %al,%cl
   17033:	31 c0                	xor    %eax,%eax
   17035:	f6 c1 01             	test   $0x1,%cl
   17038:	88 45 e6             	mov    %al,-0x1a(%rbp)
   1703b:	75 02                	jne    1703f <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x7f>
   1703d:	eb 31                	jmp    17070 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xb0>
   1703f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17043:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17047:	e8 24 01 00 00       	call   17170 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   1704c:	88 c1                	mov    %al,%cl
   1704e:	31 c0                	xor    %eax,%eax
   17050:	f6 c1 01             	test   $0x1,%cl
   17053:	88 45 e5             	mov    %al,-0x1b(%rbp)
   17056:	75 02                	jne    1705a <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x9a>
   17058:	eb 10                	jmp    1706a <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_IS4_JLSA_1EEEENS8_IS4_JLSA_2EEEENS8_IS4_JLSA_3EEEENS8_INS1_ILS2_7ELS3_1EEEJLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xaa>
   1705a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1705e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17062:	e8 59 01 00 00       	call   171c0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_1EJLNS_12CpuIdRegTagsE0EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   17067:	88 45 e5             	mov    %al,-0x1b(%rbp)
   1706a:	8a 45 e5             	mov    -0x1b(%rbp),%al
   1706d:	88 45 e6             	mov    %al,-0x1a(%rbp)
   17070:	8a 45 e6             	mov    -0x1a(%rbp),%al
   17073:	88 45 e7             	mov    %al,-0x19(%rbp)
   17076:	8a 45 e7             	mov    -0x19(%rbp),%al
   17079:	88 45 e8             	mov    %al,-0x18(%rbp)
   1707c:	8a 45 e8             	mov    -0x18(%rbp),%al
   1707f:	88 45 e9             	mov    %al,-0x17(%rbp)
   17082:	8a 45 e9             	mov    -0x17(%rbp),%al
   17085:	24 01                	and    $0x1,%al
   17087:	48 83 c4 20          	add    $0x20,%rsp
   1708b:	5d                   	pop    %rbp
   1708c:	c3                   	ret
   1708d:	0f 1f 00             	nopl   (%rax)

0000000000017090 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   17090:	55                   	push   %rbp
   17091:	48 89 e5             	mov    %rsp,%rbp
   17094:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17098:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   1709c:	b0 01                	mov    $0x1,%al
   1709e:	24 01                	and    $0x1,%al
   170a0:	5d                   	pop    %rbp
   170a1:	c3                   	ret
   170a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   170a9:	00 00 00 
   170ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000170b0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   170b0:	55                   	push   %rbp
   170b1:	48 89 e5             	mov    %rsp,%rbp
   170b4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   170b8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   170bc:	b0 01                	mov    $0x1,%al
   170be:	24 01                	and    $0x1,%al
   170c0:	5d                   	pop    %rbp
   170c1:	c3                   	ret
   170c2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   170c9:	00 00 00 
   170cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000170d0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE1EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   170d0:	55                   	push   %rbp
   170d1:	48 89 e5             	mov    %rsp,%rbp
   170d4:	48 83 ec 30          	sub    $0x30,%rsp
   170d8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   170dc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   170e0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
                                       Regs == CpuIdRegTags::Ebx ? result.ebx() :
   170e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   170e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   170ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
            return ebx_;
   170f0:	8b 40 04             	mov    0x4(%rax),%eax
   170f3:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   170f7:	89 45 f4             	mov    %eax,-0xc(%rbp)
   170fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   170fe:	48 8b 38             	mov    (%rax),%rdi
   17101:	8b 75 f4             	mov    -0xc(%rbp),%esi
   17104:	e8 d7 00 00 00       	call   171e0 <_ZN4ustl9copy_bitsILm64ENSt3__16bitsetILm187EEEjEEvRT0_T1_>
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   17109:	b0 01                	mov    $0x1,%al
   1710b:	24 01                	and    $0x1,%al
   1710d:	48 83 c4 30          	add    $0x30,%rsp
   17111:	5d                   	pop    %rbp
   17112:	c3                   	ret
   17113:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1711a:	00 00 00 
   1711d:	0f 1f 00             	nopl   (%rax)

0000000000017120 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   17120:	55                   	push   %rbp
   17121:	48 89 e5             	mov    %rsp,%rbp
   17124:	48 83 ec 30          	sub    $0x30,%rsp
   17128:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1712c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   17130:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
                                       Regs == CpuIdRegTags::Ecx ? result.ecx() :
   17134:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17138:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1713c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
            return ecx_;
   17140:	8b 40 08             	mov    0x8(%rax),%eax
   17143:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   17147:	89 45 f4             	mov    %eax,-0xc(%rbp)
   1714a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1714e:	48 8b 38             	mov    (%rax),%rdi
   17151:	8b 75 f4             	mov    -0xc(%rbp),%esi
   17154:	e8 e7 00 00 00       	call   17240 <_ZN4ustl9copy_bitsILm96ENSt3__16bitsetILm187EEEjEEvRT0_T1_>
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   17159:	b0 01                	mov    $0x1,%al
   1715b:	24 01                	and    $0x1,%al
   1715d:	48 83 c4 30          	add    $0x30,%rsp
   17161:	5d                   	pop    %rbp
   17162:	c3                   	ret
   17163:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1716a:	00 00 00 
   1716d:	0f 1f 00             	nopl   (%rax)

0000000000017170 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   17170:	55                   	push   %rbp
   17171:	48 89 e5             	mov    %rsp,%rbp
   17174:	48 83 ec 30          	sub    $0x30,%rsp
   17178:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1717c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   17180:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
                                       result.edx()) && ...);
   17184:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17188:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1718c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
            return edx_;
   17190:	8b 40 0c             	mov    0xc(%rax),%eax
   17193:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   17197:	89 45 f4             	mov    %eax,-0xc(%rbp)
   1719a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1719e:	48 8b 38             	mov    (%rax),%rdi
   171a1:	8b 75 f4             	mov    -0xc(%rbp),%esi
   171a4:	e8 f7 00 00 00       	call   172a0 <_ZN4ustl9copy_bitsILm128ENSt3__16bitsetILm187EEEjEEvRT0_T1_>
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   171a9:	b0 01                	mov    $0x1,%al
   171ab:	24 01                	and    $0x1,%al
   171ad:	48 83 c4 30          	add    $0x30,%rsp
   171b1:	5d                   	pop    %rbp
   171b2:	c3                   	ret
   171b3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   171ba:	00 00 00 
   171bd:	0f 1f 00             	nopl   (%rax)

00000000000171c0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE0EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_1EJLNS_12CpuIdRegTagsE0EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   171c0:	55                   	push   %rbp
   171c1:	48 89 e5             	mov    %rsp,%rbp
   171c4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   171c8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   171cc:	b0 01                	mov    $0x1,%al
   171ce:	24 01                	and    $0x1,%al
   171d0:	5d                   	pop    %rbp
   171d1:	c3                   	ret
   171d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   171d9:	00 00 00 
   171dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000171e0 <_ZN4ustl9copy_bitsILm64ENSt3__16bitsetILm187EEEjEEvRT0_T1_>:
    auto copy_bits(BitSet &bitset, Integer value) -> void {
   171e0:	55                   	push   %rbp
   171e1:	48 89 e5             	mov    %rsp,%rbp
   171e4:	48 83 ec 10          	sub    $0x10,%rsp
   171e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   171ec:	89 75 f4             	mov    %esi,-0xc(%rbp)
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   171ef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
   171f6:	83 7d f0 20          	cmpl   $0x20,-0x10(%rbp)
   171fa:	7d 35                	jge    17231 <_ZN4ustl9copy_bitsILm64ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x51>
            if (((1 << i) & value) != 0) {
   171fc:	8b 4d f0             	mov    -0x10(%rbp),%ecx
   171ff:	b8 01 00 00 00       	mov    $0x1,%eax
   17204:	d3 e0                	shl    %cl,%eax
   17206:	23 45 f4             	and    -0xc(%rbp),%eax
   17209:	83 f8 00             	cmp    $0x0,%eax
   1720c:	74 16                	je     17224 <_ZN4ustl9copy_bitsILm64ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x44>
                bitset.set(Delta + i);
   1720e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17212:	48 63 75 f0          	movslq -0x10(%rbp),%rsi
   17216:	48 83 c6 40          	add    $0x40,%rsi
   1721a:	ba 01 00 00 00       	mov    $0x1,%edx
   1721f:	e8 bc fb ff ff       	call   16de0 <_ZNSt3__16bitsetILm187EE3setB8nn210000Emb>
        }
   17224:	eb 00                	jmp    17226 <_ZN4ustl9copy_bitsILm64ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x46>
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   17226:	8b 45 f0             	mov    -0x10(%rbp),%eax
   17229:	83 c0 01             	add    $0x1,%eax
   1722c:	89 45 f0             	mov    %eax,-0x10(%rbp)
   1722f:	eb c5                	jmp    171f6 <_ZN4ustl9copy_bitsILm64ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x16>
    }
   17231:	48 83 c4 10          	add    $0x10,%rsp
   17235:	5d                   	pop    %rbp
   17236:	c3                   	ret
   17237:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1723e:	00 00 

0000000000017240 <_ZN4ustl9copy_bitsILm96ENSt3__16bitsetILm187EEEjEEvRT0_T1_>:
    auto copy_bits(BitSet &bitset, Integer value) -> void {
   17240:	55                   	push   %rbp
   17241:	48 89 e5             	mov    %rsp,%rbp
   17244:	48 83 ec 10          	sub    $0x10,%rsp
   17248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1724c:	89 75 f4             	mov    %esi,-0xc(%rbp)
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   1724f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
   17256:	83 7d f0 20          	cmpl   $0x20,-0x10(%rbp)
   1725a:	7d 35                	jge    17291 <_ZN4ustl9copy_bitsILm96ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x51>
            if (((1 << i) & value) != 0) {
   1725c:	8b 4d f0             	mov    -0x10(%rbp),%ecx
   1725f:	b8 01 00 00 00       	mov    $0x1,%eax
   17264:	d3 e0                	shl    %cl,%eax
   17266:	23 45 f4             	and    -0xc(%rbp),%eax
   17269:	83 f8 00             	cmp    $0x0,%eax
   1726c:	74 16                	je     17284 <_ZN4ustl9copy_bitsILm96ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x44>
                bitset.set(Delta + i);
   1726e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17272:	48 63 75 f0          	movslq -0x10(%rbp),%rsi
   17276:	48 83 c6 60          	add    $0x60,%rsi
   1727a:	ba 01 00 00 00       	mov    $0x1,%edx
   1727f:	e8 5c fb ff ff       	call   16de0 <_ZNSt3__16bitsetILm187EE3setB8nn210000Emb>
        }
   17284:	eb 00                	jmp    17286 <_ZN4ustl9copy_bitsILm96ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x46>
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   17286:	8b 45 f0             	mov    -0x10(%rbp),%eax
   17289:	83 c0 01             	add    $0x1,%eax
   1728c:	89 45 f0             	mov    %eax,-0x10(%rbp)
   1728f:	eb c5                	jmp    17256 <_ZN4ustl9copy_bitsILm96ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x16>
    }
   17291:	48 83 c4 10          	add    $0x10,%rsp
   17295:	5d                   	pop    %rbp
   17296:	c3                   	ret
   17297:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1729e:	00 00 

00000000000172a0 <_ZN4ustl9copy_bitsILm128ENSt3__16bitsetILm187EEEjEEvRT0_T1_>:
    auto copy_bits(BitSet &bitset, Integer value) -> void {
   172a0:	55                   	push   %rbp
   172a1:	48 89 e5             	mov    %rsp,%rbp
   172a4:	48 83 ec 10          	sub    $0x10,%rsp
   172a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   172ac:	89 75 f4             	mov    %esi,-0xc(%rbp)
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   172af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
   172b6:	83 7d f0 20          	cmpl   $0x20,-0x10(%rbp)
   172ba:	7d 38                	jge    172f4 <_ZN4ustl9copy_bitsILm128ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x54>
            if (((1 << i) & value) != 0) {
   172bc:	8b 4d f0             	mov    -0x10(%rbp),%ecx
   172bf:	b8 01 00 00 00       	mov    $0x1,%eax
   172c4:	d3 e0                	shl    %cl,%eax
   172c6:	23 45 f4             	and    -0xc(%rbp),%eax
   172c9:	83 f8 00             	cmp    $0x0,%eax
   172cc:	74 19                	je     172e7 <_ZN4ustl9copy_bitsILm128ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x47>
                bitset.set(Delta + i);
   172ce:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   172d2:	48 63 75 f0          	movslq -0x10(%rbp),%rsi
   172d6:	48 81 c6 80 00 00 00 	add    $0x80,%rsi
   172dd:	ba 01 00 00 00       	mov    $0x1,%edx
   172e2:	e8 f9 fa ff ff       	call   16de0 <_ZNSt3__16bitsetILm187EE3setB8nn210000Emb>
        }
   172e7:	eb 00                	jmp    172e9 <_ZN4ustl9copy_bitsILm128ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x49>
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   172e9:	8b 45 f0             	mov    -0x10(%rbp),%eax
   172ec:	83 c0 01             	add    $0x1,%eax
   172ef:	89 45 f0             	mov    %eax,-0x10(%rbp)
   172f2:	eb c2                	jmp    172b6 <_ZN4ustl9copy_bitsILm128ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x16>
    }
   172f4:	48 83 c4 10          	add    $0x10,%rsp
   172f8:	5d                   	pop    %rbp
   172f9:	c3                   	ret
   172fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000017300 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE>:
    auto dispatch_cpuid_2(CpuId &result, CpuIdObserver<Observer, ObserveItems...> &&observer) -> bool {
   17300:	55                   	push   %rbp
   17301:	48 89 e5             	mov    %rsp,%rbp
   17304:	48 83 ec 20          	sub    $0x20,%rsp
   17308:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1730c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        return (dispatch_cpuid_3<Action>(result, static_cast<Observer &>(observer), ObserveItems()) && ...);
   17310:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17314:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17318:	e8 b3 00 00 00       	call   173d0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   1731d:	88 c1                	mov    %al,%cl
   1731f:	31 c0                	xor    %eax,%eax
   17321:	f6 c1 01             	test   $0x1,%cl
   17324:	88 45 e9             	mov    %al,-0x17(%rbp)
   17327:	75 05                	jne    1732e <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x2e>
   17329:	e9 94 00 00 00       	jmp    173c2 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xc2>
   1732e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17332:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17336:	e8 b5 00 00 00       	call   173f0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   1733b:	88 c1                	mov    %al,%cl
   1733d:	31 c0                	xor    %eax,%eax
   1733f:	f6 c1 01             	test   $0x1,%cl
   17342:	88 45 e8             	mov    %al,-0x18(%rbp)
   17345:	75 02                	jne    17349 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x49>
   17347:	eb 73                	jmp    173bc <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xbc>
   17349:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1734d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17351:	e8 ba 00 00 00       	call   17410 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE1EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   17356:	88 c1                	mov    %al,%cl
   17358:	31 c0                	xor    %eax,%eax
   1735a:	f6 c1 01             	test   $0x1,%cl
   1735d:	88 45 e7             	mov    %al,-0x19(%rbp)
   17360:	75 02                	jne    17364 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x64>
   17362:	eb 52                	jmp    173b6 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xb6>
   17364:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17368:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1736c:	e8 bf 00 00 00       	call   17430 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   17371:	88 c1                	mov    %al,%cl
   17373:	31 c0                	xor    %eax,%eax
   17375:	f6 c1 01             	test   $0x1,%cl
   17378:	88 45 e6             	mov    %al,-0x1a(%rbp)
   1737b:	75 02                	jne    1737f <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x7f>
   1737d:	eb 31                	jmp    173b0 <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xb0>
   1737f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17383:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17387:	e8 c4 00 00 00       	call   17450 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   1738c:	88 c1                	mov    %al,%cl
   1738e:	31 c0                	xor    %eax,%eax
   17390:	f6 c1 01             	test   $0x1,%cl
   17393:	88 45 e5             	mov    %al,-0x1b(%rbp)
   17396:	75 02                	jne    1739a <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0x9a>
   17398:	eb 10                	jmp    173aa <_ZN4arch16dispatch_cpuid_2INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdENS_13X86CpuFeature17SelfCpuIdObserverEJNS_21CpuIdObserveItemInnerINS1_ILS2_1ELS3_0EEEJLNS_12CpuIdRegTagsE3EEEENS8_IS9_JLSA_2EEEENS8_INS1_ILS2_7ELS3_0EEEJLSA_1EEEENS8_ISD_JLSA_2EEEENS8_ISD_JLSA_3EEEENS8_IS4_JLSA_0EEEEEEEbRT0_ONS_13CpuIdObserverIT1_JDpT2_EEE+0xaa>
   1739a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1739e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   173a2:	e8 c9 00 00 00       	call   17470 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_1EJLNS_12CpuIdRegTagsE0EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>
   173a7:	88 45 e5             	mov    %al,-0x1b(%rbp)
   173aa:	8a 45 e5             	mov    -0x1b(%rbp),%al
   173ad:	88 45 e6             	mov    %al,-0x1a(%rbp)
   173b0:	8a 45 e6             	mov    -0x1a(%rbp),%al
   173b3:	88 45 e7             	mov    %al,-0x19(%rbp)
   173b6:	8a 45 e7             	mov    -0x19(%rbp),%al
   173b9:	88 45 e8             	mov    %al,-0x18(%rbp)
   173bc:	8a 45 e8             	mov    -0x18(%rbp),%al
   173bf:	88 45 e9             	mov    %al,-0x17(%rbp)
   173c2:	8a 45 e9             	mov    -0x17(%rbp),%al
   173c5:	24 01                	and    $0x1,%al
   173c7:	48 83 c4 20          	add    $0x20,%rsp
   173cb:	5d                   	pop    %rbp
   173cc:	c3                   	ret
   173cd:	0f 1f 00             	nopl   (%rax)

00000000000173d0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   173d0:	55                   	push   %rbp
   173d1:	48 89 e5             	mov    %rsp,%rbp
   173d4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   173d8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   173dc:	b0 01                	mov    $0x1,%al
   173de:	24 01                	and    $0x1,%al
   173e0:	5d                   	pop    %rbp
   173e1:	c3                   	ret
   173e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   173e9:	00 00 00 
   173ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000173f0 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_1ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   173f0:	55                   	push   %rbp
   173f1:	48 89 e5             	mov    %rsp,%rbp
   173f4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   173f8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   173fc:	b0 01                	mov    $0x1,%al
   173fe:	24 01                	and    $0x1,%al
   17400:	5d                   	pop    %rbp
   17401:	c3                   	ret
   17402:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17409:	00 00 00 
   1740c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017410 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE1EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   17410:	55                   	push   %rbp
   17411:	48 89 e5             	mov    %rsp,%rbp
   17414:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17418:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   1741c:	b0 01                	mov    $0x1,%al
   1741e:	24 01                	and    $0x1,%al
   17420:	5d                   	pop    %rbp
   17421:	c3                   	ret
   17422:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17429:	00 00 00 
   1742c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017430 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE2EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   17430:	55                   	push   %rbp
   17431:	48 89 e5             	mov    %rsp,%rbp
   17434:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17438:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   1743c:	b0 01                	mov    $0x1,%al
   1743e:	24 01                	and    $0x1,%al
   17440:	5d                   	pop    %rbp
   17441:	c3                   	ret
   17442:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17449:	00 00 00 
   1744c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017450 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_0EJLNS_12CpuIdRegTagsE3EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   17450:	55                   	push   %rbp
   17451:	48 89 e5             	mov    %rsp,%rbp
   17454:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17458:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
            return true;
   1745c:	b0 01                	mov    $0x1,%al
   1745e:	24 01                	and    $0x1,%al
   17460:	5d                   	pop    %rbp
   17461:	c3                   	ret
   17462:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17469:	00 00 00 
   1746c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017470 <_ZN4arch16dispatch_cpuid_3INS_11CpuIdActionILNS_9CpuIdLeafE7ELNS_12CpuIdSubLeafE1EEENS_5CpuIdERNS_13X86CpuFeature17SelfCpuIdObserverELS2_7ELS3_1EJLNS_12CpuIdRegTagsE0EEEEbRT0_OT1_NS_21CpuIdObserveItemInnerINS1_IXT2_EXT3_EEEJXspT4_EEEE>:
                          CpuIdObserveItem<Leaf, SubLeaf, Regs...>) -> bool {
   17470:	55                   	push   %rbp
   17471:	48 89 e5             	mov    %rsp,%rbp
   17474:	48 83 ec 30          	sub    $0x30,%rsp
   17478:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   1747c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   17480:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
                                       Regs == CpuIdRegTags::Eax ? result.eax() :
   17484:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17488:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1748c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            return eax_;
   17490:	8b 00                	mov    (%rax),%eax
   17492:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   17496:	89 45 ec             	mov    %eax,-0x14(%rbp)
   17499:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1749d:	48 8b 38             	mov    (%rax),%rdi
   174a0:	8b 75 ec             	mov    -0x14(%rbp),%esi
   174a3:	e8 18 00 00 00       	call   174c0 <_ZN4ustl9copy_bitsILm160ENSt3__16bitsetILm187EEEjEEvRT0_T1_>
        return (observer.template observe<Leaf, SubLeaf, Regs>(
   174a8:	b0 01                	mov    $0x1,%al
   174aa:	24 01                	and    $0x1,%al
   174ac:	48 83 c4 30          	add    $0x30,%rsp
   174b0:	5d                   	pop    %rbp
   174b1:	c3                   	ret
   174b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   174b9:	00 00 00 
   174bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000174c0 <_ZN4ustl9copy_bitsILm160ENSt3__16bitsetILm187EEEjEEvRT0_T1_>:
    auto copy_bits(BitSet &bitset, Integer value) -> void {
   174c0:	55                   	push   %rbp
   174c1:	48 89 e5             	mov    %rsp,%rbp
   174c4:	48 83 ec 10          	sub    $0x10,%rsp
   174c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   174cc:	89 75 f4             	mov    %esi,-0xc(%rbp)
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   174cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
   174d6:	83 7d f0 20          	cmpl   $0x20,-0x10(%rbp)
   174da:	7d 38                	jge    17514 <_ZN4ustl9copy_bitsILm160ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x54>
            if (((1 << i) & value) != 0) {
   174dc:	8b 4d f0             	mov    -0x10(%rbp),%ecx
   174df:	b8 01 00 00 00       	mov    $0x1,%eax
   174e4:	d3 e0                	shl    %cl,%eax
   174e6:	23 45 f4             	and    -0xc(%rbp),%eax
   174e9:	83 f8 00             	cmp    $0x0,%eax
   174ec:	74 19                	je     17507 <_ZN4ustl9copy_bitsILm160ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x47>
                bitset.set(Delta + i);
   174ee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   174f2:	48 63 75 f0          	movslq -0x10(%rbp),%rsi
   174f6:	48 81 c6 a0 00 00 00 	add    $0xa0,%rsi
   174fd:	ba 01 00 00 00       	mov    $0x1,%edx
   17502:	e8 d9 f8 ff ff       	call   16de0 <_ZNSt3__16bitsetILm187EE3setB8nn210000Emb>
        }
   17507:	eb 00                	jmp    17509 <_ZN4ustl9copy_bitsILm160ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x49>
        for (auto i = 0; i < ustl::NumericLimits<Integer>::DIGITS; ++i) {
   17509:	8b 45 f0             	mov    -0x10(%rbp),%eax
   1750c:	83 c0 01             	add    $0x1,%eax
   1750f:	89 45 f0             	mov    %eax,-0x10(%rbp)
   17512:	eb c2                	jmp    174d6 <_ZN4ustl9copy_bitsILm160ENSt3__16bitsetILm187EEEjEEvRT0_T1_+0x16>
    }
   17514:	48 83 c4 10          	add    $0x10,%rsp
   17518:	5d                   	pop    %rbp
   17519:	c3                   	ret
   1751a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000017520 <memcpy>:
#include <cstring>
#include <ours/config.hpp>
#include <ours/types.hpp>

NO_MANGLE WEAK_LINK
auto memcpy(void *d, void const *s, size_t n) -> void * {
   17520:	55                   	push   %rbp
   17521:	48 89 e5             	mov    %rsp,%rbp
   17524:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17528:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1752c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    auto md = static_cast<char *>(d);
   17530:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17534:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    auto ms = static_cast<char const *>(s);
   17538:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1753c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    for (size_t i = 0; i < n; ++i) {
   17540:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   17547:	00 
   17548:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1754c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   17550:	73 24                	jae    17576 <memcpy+0x56>
        md[i] = ms[i];
   17552:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17556:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1755a:	8a 14 08             	mov    (%rax,%rcx,1),%dl
   1755d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17561:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   17565:	88 14 08             	mov    %dl,(%rax,%rcx,1)
    for (size_t i = 0; i < n; ++i) {
   17568:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1756c:	48 83 c0 01          	add    $0x1,%rax
   17570:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   17574:	eb d2                	jmp    17548 <memcpy+0x28>
    }

    return d;
   17576:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1757a:	5d                   	pop    %rbp
   1757b:	c3                   	ret
   1757c:	0f 1f 40 00          	nopl   0x0(%rax)
}

NO_MANGLE WEAK_LINK
auto memmove(void *d, void const *s, size_t n) -> void * {
   17580:	55                   	push   %rbp
   17581:	48 89 e5             	mov    %rsp,%rbp
   17584:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17588:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1758c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    auto md = static_cast<char *>(d);
   17590:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17594:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    auto ms = static_cast<char const *>(s);
   17598:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1759c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    if (size_t(ms) > size_t(md)) {
   175a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   175a4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   175a8:	48 39 c8             	cmp    %rcx,%rax
   175ab:	76 38                	jbe    175e5 <memcpy+0xc5>
        for (size_t i = 0; i < n; ++i) {
   175ad:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   175b4:	00 
   175b5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   175b9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   175bd:	73 24                	jae    175e3 <memcpy+0xc3>
            md[i]= ms[i];
   175bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   175c3:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   175c7:	8a 14 08             	mov    (%rax,%rcx,1),%dl
   175ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   175ce:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   175d2:	88 14 08             	mov    %dl,(%rax,%rcx,1)
        for (size_t i = 0; i < n; ++i) {
   175d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   175d9:	48 83 c0 01          	add    $0x1,%rax
   175dd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   175e1:	eb d2                	jmp    175b5 <memcpy+0x95>
        }
    } else {
   175e3:	eb 3d                	jmp    17622 <memcpy+0x102>
        for (size_t i = n; i > 0; --i) {
   175e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175e9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   175ed:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   175f2:	76 2c                	jbe    17620 <memcpy+0x100>
            md[i - 1]= ms[i - 1];
   175f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   175f8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   175fc:	48 83 e9 01          	sub    $0x1,%rcx
   17600:	8a 14 08             	mov    (%rax,%rcx,1),%dl
   17603:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17607:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1760b:	48 83 e9 01          	sub    $0x1,%rcx
   1760f:	88 14 08             	mov    %dl,(%rax,%rcx,1)
        for (size_t i = n; i > 0; --i) {
   17612:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17616:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   1761a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1761e:	eb cd                	jmp    175ed <memcpy+0xcd>
   17620:	eb 00                	jmp    17622 <memcpy+0x102>
        }
    }

    return d;
   17622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17626:	5d                   	pop    %rbp
   17627:	c3                   	ret
   17628:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1762f:	00 

0000000000017630 <memset>:
}

NO_MANGLE WEAK_LINK
auto memset(void *s, int c, size_t n) -> void * {
   17630:	55                   	push   %rbp
   17631:	48 89 e5             	mov    %rsp,%rbp
   17634:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17638:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1763b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    auto md = static_cast<u8 *>(s);
   1763f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17643:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    for (auto i = 0; i < n; ++i) {
   17647:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
   1764e:	48 63 45 dc          	movslq -0x24(%rbp),%rax
   17652:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   17656:	73 1b                	jae    17673 <memset+0x43>
        md[i] = c;
   17658:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1765b:	88 c2                	mov    %al,%dl
   1765d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17661:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   17665:	88 14 08             	mov    %dl,(%rax,%rcx,1)
    for (auto i = 0; i < n; ++i) {
   17668:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1766b:	83 c0 01             	add    $0x1,%eax
   1766e:	89 45 dc             	mov    %eax,-0x24(%rbp)
   17671:	eb db                	jmp    1764e <memset+0x1e>
    }

    return s;
   17673:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17677:	5d                   	pop    %rbp
   17678:	c3                   	ret
   17679:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000017680 <memcmp>:
}

NO_MANGLE WEAK_LINK
auto memcmp(void const *x, void const *y, size_t n) -> int {
   17680:	55                   	push   %rbp
   17681:	48 89 e5             	mov    %rsp,%rbp
   17684:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17688:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1768c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    auto p1 = static_cast<char const *>(x);
   17690:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17694:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    auto p2 = static_cast<char const *>(y);
   17698:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1769c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    for (size_t i = 0; i < n; i++) {
   176a0:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
   176a7:	00 
   176a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   176ac:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   176b0:	73 4b                	jae    176fd <memcmp+0x7d>
        if (p1[i] != p2[i]) {
   176b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   176b6:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   176ba:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   176be:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   176c2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   176c6:	0f be 0c 11          	movsbl (%rcx,%rdx,1),%ecx
   176ca:	39 c8                	cmp    %ecx,%eax
   176cc:	74 1f                	je     176ed <memcmp+0x6d>
            return (p1[i] - p2[i]);
   176ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   176d2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   176d6:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   176da:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   176de:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   176e2:	0f be 0c 11          	movsbl (%rcx,%rdx,1),%ecx
   176e6:	29 c8                	sub    %ecx,%eax
   176e8:	89 45 fc             	mov    %eax,-0x4(%rbp)
   176eb:	eb 17                	jmp    17704 <memcmp+0x84>
        }
    }
   176ed:	eb 00                	jmp    176ef <memcmp+0x6f>
    for (size_t i = 0; i < n; i++) {
   176ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   176f3:	48 83 c0 01          	add    $0x1,%rax
   176f7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   176fb:	eb ab                	jmp    176a8 <memcmp+0x28>

    return 0;
   176fd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
}
   17704:	8b 45 fc             	mov    -0x4(%rbp),%eax
   17707:	5d                   	pop    %rbp
   17708:	c3                   	ret
   17709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000017710 <memchr>:

WEAK_LINK
auto memchr(void const *str, int c, size_t n) noexcept -> void const * {
   17710:	55                   	push   %rbp
   17711:	48 89 e5             	mov    %rsp,%rbp
   17714:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17718:	89 75 ec             	mov    %esi,-0x14(%rbp)
   1771b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    auto p = static_cast<char const *>(str);
   1771f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17723:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    for (size_t i = 0; i < n; i++) {
   17727:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   1772e:	00 
   1772f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17733:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   17737:	73 30                	jae    17769 <memchr+0x59>
        if (p[i] == (char)c) {
   17739:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1773d:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   17741:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   17745:	8b 4d ec             	mov    -0x14(%rbp),%ecx
   17748:	0f be c9             	movsbl %cl,%ecx
   1774b:	39 c8                	cmp    %ecx,%eax
   1774d:	75 0a                	jne    17759 <memchr+0x49>
            return (void *)p;
   1774f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17753:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   17757:	eb 18                	jmp    17771 <memchr+0x61>
        }
    }
   17759:	eb 00                	jmp    1775b <memchr+0x4b>
    for (size_t i = 0; i < n; i++) {
   1775b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1775f:	48 83 c0 01          	add    $0x1,%rax
   17763:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   17767:	eb c6                	jmp    1772f <memchr+0x1f>

    return NULL;
   17769:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   17770:	00 
}
   17771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17775:	5d                   	pop    %rbp
   17776:	c3                   	ret
   17777:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1777e:	00 00 

0000000000017780 <strlen>:

NO_MANGLE WEAK_LINK
auto strlen(char const *p) -> size_t {
   17780:	55                   	push   %rbp
   17781:	48 89 e5             	mov    %rsp,%rbp
   17784:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    size_t n = 0;
   17788:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1778f:	00 
    while (*p++ != 0) {
   17790:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17794:	48 89 c1             	mov    %rax,%rcx
   17797:	48 83 c1 01          	add    $0x1,%rcx
   1779b:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   1779f:	0f be 00             	movsbl (%rax),%eax
   177a2:	83 f8 00             	cmp    $0x0,%eax
   177a5:	74 0e                	je     177b5 <strlen+0x35>
        n += 1;
   177a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   177ab:	48 83 c0 01          	add    $0x1,%rax
   177af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    while (*p++ != 0) {
   177b3:	eb db                	jmp    17790 <strlen+0x10>
    }
    return n;
   177b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   177b9:	5d                   	pop    %rbp
   177ba:	c3                   	ret
   177bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000177c0 <_ZNSt9exceptionD1Ev>:
namespace std {
    // Must explicit instanilization
    template class basic_string<char>;

    exception::~exception() noexcept
    {}
   177c0:	55                   	push   %rbp
   177c1:	48 89 e5             	mov    %rsp,%rbp
   177c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   177c8:	5d                   	pop    %rbp
   177c9:	c3                   	ret
   177ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000177d0 <_ZNSt9exceptionD0Ev>:
   177d0:	55                   	push   %rbp
   177d1:	48 89 e5             	mov    %rsp,%rbp
   177d4:	48 83 ec 10          	sub    $0x10,%rsp
   177d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   177dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   177e0:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   177e4:	e8 d7 ff ff ff       	call   177c0 <_ZNSt9exceptionD1Ev>
   177e9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   177ed:	be 08 00 00 00       	mov    $0x8,%esi
   177f2:	e8 99 19 00 00       	call   19190 <_ZdlPvm>
   177f7:	48 83 c4 10          	add    $0x10,%rsp
   177fb:	5d                   	pop    %rbp
   177fc:	c3                   	ret
   177fd:	0f 1f 00             	nopl   (%rax)

0000000000017800 <_ZNKSt9exception4whatEv>:

    auto exception::what()  const noexcept -> char const *
    {  return "ours not exception";  }
   17800:	55                   	push   %rbp
   17801:	48 89 e5             	mov    %rsp,%rbp
   17804:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17808:	48 8d 05 8d 78 01 00 	lea    0x1788d(%rip),%rax        # 2f09c <.L.str>
   1780f:	5d                   	pop    %rbp
   17810:	c3                   	ret
   17811:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   17818:	0f 1f 84 00 00 00 00 
   1781f:	00 

0000000000017820 <_ZNSt13runtime_errorC1EPKc>:

    runtime_error::runtime_error(char const *)
#ifdef _LIBCPP_VERSION
        : __imp_("")
#endif
    {}
   17820:	55                   	push   %rbp
   17821:	48 89 e5             	mov    %rsp,%rbp
   17824:	48 83 ec 20          	sub    $0x20,%rsp
   17828:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1782c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17830:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17834:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    runtime_error::runtime_error(char const *)
   17838:	e8 d3 12 00 00       	call   18b10 <_ZNSt9exceptionC2B8nn210000Ev>
   1783d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    {}
   17841:	48 8d 05 10 9d 01 00 	lea    0x19d10(%rip),%rax        # 31558 <_ZTVSt13runtime_error+0x10>
   17848:	48 89 07             	mov    %rax,(%rdi)
        : __imp_("")
   1784b:	48 83 c7 08          	add    $0x8,%rdi
   1784f:	48 8d 35 f5 78 01 00 	lea    0x178f5(%rip),%rsi        # 2f14b <.L.str>
   17856:	e8 15 01 00 00       	call   17970 <_ZNSt3__118__libcpp_refstringC2EPKc>
    {}
   1785b:	48 83 c4 20          	add    $0x20,%rsp
   1785f:	5d                   	pop    %rbp
   17860:	c3                   	ret
   17861:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   17868:	0f 1f 84 00 00 00 00 
   1786f:	00 

0000000000017870 <_ZNSt13runtime_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE>:

    runtime_error::runtime_error(string const &)
#ifdef _LIBCPP_VERSION
        : __imp_("")
#endif
    {}
   17870:	55                   	push   %rbp
   17871:	48 89 e5             	mov    %rsp,%rbp
   17874:	48 83 ec 20          	sub    $0x20,%rsp
   17878:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1787c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17880:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17884:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    runtime_error::runtime_error(string const &)
   17888:	e8 83 12 00 00       	call   18b10 <_ZNSt9exceptionC2B8nn210000Ev>
   1788d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    {}
   17891:	48 8d 05 c0 9c 01 00 	lea    0x19cc0(%rip),%rax        # 31558 <_ZTVSt13runtime_error+0x10>
   17898:	48 89 07             	mov    %rax,(%rdi)
        : __imp_("")
   1789b:	48 83 c7 08          	add    $0x8,%rdi
   1789f:	48 8d 35 a5 78 01 00 	lea    0x178a5(%rip),%rsi        # 2f14b <.L.str>
   178a6:	e8 c5 00 00 00       	call   17970 <_ZNSt3__118__libcpp_refstringC2EPKc>
    {}
   178ab:	48 83 c4 20          	add    $0x20,%rsp
   178af:	5d                   	pop    %rbp
   178b0:	c3                   	ret
   178b1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   178b8:	0f 1f 84 00 00 00 00 
   178bf:	00 

00000000000178c0 <_ZNSt13runtime_errorD1Ev>:

    runtime_error::~runtime_error() noexcept
    {}
   178c0:	55                   	push   %rbp
   178c1:	48 89 e5             	mov    %rsp,%rbp
   178c4:	48 83 ec 10          	sub    $0x10,%rsp
   178c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   178cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   178d0:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   178d4:	48 83 c7 08          	add    $0x8,%rdi
   178d8:	e8 a3 00 00 00       	call   17980 <_ZNSt3__118__libcpp_refstringD2Ev>
   178dd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   178e1:	e8 da fe ff ff       	call   177c0 <_ZNSt9exceptionD1Ev>
   178e6:	48 83 c4 10          	add    $0x10,%rsp
   178ea:	5d                   	pop    %rbp
   178eb:	c3                   	ret
   178ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000178f0 <_ZNSt13runtime_errorD0Ev>:
   178f0:	55                   	push   %rbp
   178f1:	48 89 e5             	mov    %rsp,%rbp
   178f4:	48 83 ec 10          	sub    $0x10,%rsp
   178f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   178fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17900:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17904:	e8 b7 ff ff ff       	call   178c0 <_ZNSt13runtime_errorD1Ev>
   17909:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1790d:	be 10 00 00 00       	mov    $0x10,%esi
   17912:	e8 79 18 00 00       	call   19190 <_ZdlPvm>
   17917:	48 83 c4 10          	add    $0x10,%rsp
   1791b:	5d                   	pop    %rbp
   1791c:	c3                   	ret
   1791d:	0f 1f 00             	nopl   (%rax)

0000000000017920 <_ZNKSt13runtime_error4whatEv>:

    auto runtime_error::what() const noexcept -> char const *
    {  return "ours not exception";  }
   17920:	55                   	push   %rbp
   17921:	48 89 e5             	mov    %rsp,%rbp
   17924:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17928:	48 8d 05 6d 77 01 00 	lea    0x1776d(%rip),%rax        # 2f09c <.L.str>
   1792f:	5d                   	pop    %rbp
   17930:	c3                   	ret
   17931:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   17938:	0f 1f 84 00 00 00 00 
   1793f:	00 

0000000000017940 <_ZSt24__throw_out_of_range_fmtPKcz>:

    auto __throw_out_of_range_fmt(char const *fmt, ...) -> void
    { ours::panic(fmt);  }
   17940:	55                   	push   %rbp
   17941:	48 89 e5             	mov    %rsp,%rbp
   17944:	48 83 ec 20          	sub    $0x20,%rsp
   17948:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1794c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   17950:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   17954:	e8 27 b9 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17959:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1795d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17961:	e8 ca b8 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17966:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1796d:	00 00 00 

0000000000017970 <_ZNSt3__118__libcpp_refstringC2EPKc>:
inline namespace __1 {
#define TO_CHARS_ATTRS \
    _LIBCPP_AVAILABILITY_TO_CHARS_FLOATING_POINT _LIBCPP_EXPORTED_FROM_ABI 

    __libcpp_refstring::__libcpp_refstring(char const *)
    {}
   17970:	55                   	push   %rbp
   17971:	48 89 e5             	mov    %rsp,%rbp
   17974:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17978:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1797c:	5d                   	pop    %rbp
   1797d:	c3                   	ret
   1797e:	66 90                	xchg   %ax,%ax

0000000000017980 <_ZNSt3__118__libcpp_refstringD2Ev>:

    __libcpp_refstring::~__libcpp_refstring()
    {}
   17980:	55                   	push   %rbp
   17981:	48 89 e5             	mov    %rsp,%rbp
   17984:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17988:	5d                   	pop    %rbp
   17989:	c3                   	ret
   1798a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000017990 <_ZNSt3__18to_charsEPcS0_f>:
#define GLIBCXX_NOEXCEPT noexcept
#endif
    // The functions bottom should never be used, because kernel be unable to use float point number.
    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, float __value) GLIBCXX_NOEXCEPT  
    { ours::panic(__func__);  }
   17990:	55                   	push   %rbp
   17991:	48 89 e5             	mov    %rsp,%rbp
   17994:	48 83 ec 20          	sub    $0x20,%rsp
   17998:	d9 45 10             	flds   0x10(%rbp)
   1799b:	dd d8                	fstp   %st(0)
   1799d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   179a1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   179a5:	48 8d 35 03 77 01 00 	lea    0x17703(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   179ac:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   179b0:	e8 cb b8 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   179b5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   179b9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   179bd:	e8 6e b8 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   179c2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   179c9:	1f 84 00 00 00 00 00 

00000000000179d0 <_ZNSt3__18to_charsEPcS0_d>:

    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, double __value) GLIBCXX_NOEXCEPT  
    { ours::panic(__func__);  }
   179d0:	55                   	push   %rbp
   179d1:	48 89 e5             	mov    %rsp,%rbp
   179d4:	48 83 ec 20          	sub    $0x20,%rsp
   179d8:	dd 45 10             	fldl   0x10(%rbp)
   179db:	dd d8                	fstp   %st(0)
   179dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   179e1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   179e5:	48 8d 35 c3 76 01 00 	lea    0x176c3(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   179ec:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   179f0:	e8 8b b8 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   179f5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   179f9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   179fd:	e8 2e b8 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17a02:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   17a09:	1f 84 00 00 00 00 00 

0000000000017a10 <_ZNSt3__18to_charsEPcS0_e>:

    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, long double __value) GLIBCXX_NOEXCEPT  
    { ours::panic(__func__);  }
   17a10:	55                   	push   %rbp
   17a11:	48 89 e5             	mov    %rsp,%rbp
   17a14:	48 83 ec 30          	sub    $0x30,%rsp
   17a18:	db 6d 10             	fldt   0x10(%rbp)
   17a1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17a1f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17a23:	db 7d e0             	fstpt  -0x20(%rbp)
   17a26:	48 8d 35 82 76 01 00 	lea    0x17682(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   17a2d:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   17a31:	e8 4a b8 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17a36:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   17a3a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   17a3e:	e8 ed b7 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17a43:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   17a4a:	84 00 00 00 00 00 

0000000000017a50 <_ZNSt3__18to_charsEPcS0_fNS_12chars_formatE>:

    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, float __value, chars_format __fmt) GLIBCXX_NOEXCEPT  
    { ours::panic(__func__);  }
   17a50:	55                   	push   %rbp
   17a51:	48 89 e5             	mov    %rsp,%rbp
   17a54:	48 83 ec 30          	sub    $0x30,%rsp
   17a58:	d9 45 10             	flds   0x10(%rbp)
   17a5b:	dd d8                	fstp   %st(0)
   17a5d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17a61:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17a65:	89 55 ec             	mov    %edx,-0x14(%rbp)
   17a68:	48 8d 35 40 76 01 00 	lea    0x17640(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   17a6f:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   17a73:	e8 08 b8 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17a78:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   17a7c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   17a80:	e8 ab b7 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17a85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   17a8c:	00 00 00 00 

0000000000017a90 <_ZNSt3__18to_charsEPcS0_dNS_12chars_formatE>:

    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, double __value, chars_format __fmt) GLIBCXX_NOEXCEPT  
    { ours::panic(__func__);  }
   17a90:	55                   	push   %rbp
   17a91:	48 89 e5             	mov    %rsp,%rbp
   17a94:	48 83 ec 30          	sub    $0x30,%rsp
   17a98:	dd 45 10             	fldl   0x10(%rbp)
   17a9b:	dd d8                	fstp   %st(0)
   17a9d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17aa1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17aa5:	89 55 ec             	mov    %edx,-0x14(%rbp)
   17aa8:	48 8d 35 00 76 01 00 	lea    0x17600(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   17aaf:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   17ab3:	e8 c8 b7 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17ab8:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   17abc:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   17ac0:	e8 6b b7 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17ac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   17acc:	00 00 00 00 

0000000000017ad0 <_ZNSt3__18to_charsEPcS0_eNS_12chars_formatE>:

    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, long double __value, chars_format __fmt)GLIBCXX_NOEXCEPT   
    { ours::panic(__func__);  }
   17ad0:	55                   	push   %rbp
   17ad1:	48 89 e5             	mov    %rsp,%rbp
   17ad4:	48 83 ec 40          	sub    $0x40,%rsp
   17ad8:	db 6d 10             	fldt   0x10(%rbp)
   17adb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17adf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17ae3:	db 7d e0             	fstpt  -0x20(%rbp)
   17ae6:	89 55 dc             	mov    %edx,-0x24(%rbp)
   17ae9:	48 8d 35 bf 75 01 00 	lea    0x175bf(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   17af0:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
   17af4:	e8 87 b7 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17af9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   17afd:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   17b01:	e8 2a b7 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17b06:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17b0d:	00 00 00 

0000000000017b10 <_ZNSt3__18to_charsEPcS0_fNS_12chars_formatEi>:

    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, float __value, chars_format __fmt, int __precision)GLIBCXX_NOEXCEPT    
    { ours::panic(__func__);  }
   17b10:	55                   	push   %rbp
   17b11:	48 89 e5             	mov    %rsp,%rbp
   17b14:	48 83 ec 30          	sub    $0x30,%rsp
   17b18:	d9 45 10             	flds   0x10(%rbp)
   17b1b:	dd d8                	fstp   %st(0)
   17b1d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b21:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17b25:	89 55 ec             	mov    %edx,-0x14(%rbp)
   17b28:	89 4d e8             	mov    %ecx,-0x18(%rbp)
   17b2b:	48 8d 35 7d 75 01 00 	lea    0x1757d(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   17b32:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   17b36:	e8 45 b7 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17b3b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   17b3f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   17b43:	e8 e8 b6 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17b48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   17b4f:	00 

0000000000017b50 <_ZNSt3__18to_charsEPcS0_dNS_12chars_formatEi>:

    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, double __value, chars_format __fmt, int __precision)GLIBCXX_NOEXCEPT     
    { ours::panic(__func__);  }
   17b50:	55                   	push   %rbp
   17b51:	48 89 e5             	mov    %rsp,%rbp
   17b54:	48 83 ec 30          	sub    $0x30,%rsp
   17b58:	dd 45 10             	fldl   0x10(%rbp)
   17b5b:	dd d8                	fstp   %st(0)
   17b5d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b61:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17b65:	89 55 ec             	mov    %edx,-0x14(%rbp)
   17b68:	89 4d e8             	mov    %ecx,-0x18(%rbp)
   17b6b:	48 8d 35 3d 75 01 00 	lea    0x1753d(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   17b72:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   17b76:	e8 05 b7 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17b7b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   17b7f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   17b83:	e8 a8 b6 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17b88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   17b8f:	00 

0000000000017b90 <_ZNSt3__18to_charsEPcS0_eNS_12chars_formatEi>:

    TO_CHARS_ATTRS 
    to_chars_result to_chars(char* __first, char* __last, long double __value, chars_format __fmt, int __precision)GLIBCXX_NOEXCEPT      
    { ours::panic(__func__);  }
   17b90:	55                   	push   %rbp
   17b91:	48 89 e5             	mov    %rsp,%rbp
   17b94:	48 83 ec 40          	sub    $0x40,%rsp
   17b98:	db 6d 10             	fldt   0x10(%rbp)
   17b9b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b9f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17ba3:	db 7d e0             	fstpt  -0x20(%rbp)
   17ba6:	89 55 dc             	mov    %edx,-0x24(%rbp)
   17ba9:	89 4d d8             	mov    %ecx,-0x28(%rbp)
   17bac:	48 8d 35 fc 74 01 00 	lea    0x174fc(%rip),%rsi        # 2f0af <.L__func__._ZNSt3__18to_charsEPcS0_f>
   17bb3:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
   17bb7:	e8 c4 b6 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17bbc:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   17bc0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   17bc4:	e8 67 b6 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17bc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000017bd0 <_ZNSt3__122__libcpp_verbose_abortEPKcz>:

    [[noreturn]]
    void __libcpp_verbose_abort(char const* format, ...) noexcept
    { 
   17bd0:	55                   	push   %rbp
   17bd1:	48 89 e5             	mov    %rsp,%rbp
   17bd4:	48 83 ec 20          	sub    $0x20,%rsp
   17bd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        ours::panic(format); 
   17bdc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   17be0:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   17be4:	e8 97 b6 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   17be9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   17bed:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17bf1:	e8 3a b6 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   17bf6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17bfd:	00 00 00 

0000000000017c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>:

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 bool __invariants() const;

private:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS bool
  __is_long() const _NOEXCEPT {
   17c00:	55                   	push   %rbp
   17c01:	48 89 e5             	mov    %rsp,%rbp
   17c04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    if (__libcpp_is_constant_evaluated() && __builtin_constant_p(__rep_.__l.__is_long_)) {
      return __rep_.__l.__is_long_;
    }
    return __rep_.__s.__is_long_;
   17c0c:	8a 00                	mov    (%rax),%al
   17c0e:	24 01                	and    $0x1,%al
   17c10:	3c 00                	cmp    $0x0,%al
   17c12:	0f 95 c0             	setne  %al
   17c15:	24 01                	and    $0x1,%al
   17c17:	5d                   	pop    %rbp
   17c18:	c3                   	ret
   17c19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000017c20 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__annotate_newB8nn210000Em>:
#    endif
    std::__annotate_contiguous_container<_Allocator>(data(), data() + capacity() + 1, __old_mid, __new_mid);
#  endif
  }

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __annotate_new(size_type __current_size) const _NOEXCEPT {
   17c20:	55                   	push   %rbp
   17c21:	48 89 e5             	mov    %rsp,%rbp
   17c24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    (void)__current_size;
#  if _LIBCPP_HAS_ASAN && _LIBCPP_INSTRUMENTED_WITH_ASAN
    if (!__libcpp_is_constant_evaluated())
      __annotate_contiguous_container(data() + capacity() + 1, data() + __current_size + 1);
#  endif
  }
   17c2c:	5d                   	pop    %rbp
   17c2d:	c3                   	ret
   17c2e:	66 90                	xchg   %ax,%ax

0000000000017c30 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeB8nn210000Ev>:
  __get_short_size() const _NOEXCEPT {
   17c30:	55                   	push   %rbp
   17c31:	48 89 e5             	mov    %rsp,%rbp
   17c34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return __rep_.__s.__size_;
   17c3c:	8a 00                	mov    (%rax),%al
   17c3e:	d0 e8                	shr    $1,%al
   17c40:	0f b6 c0             	movzbl %al,%eax
   17c43:	5d                   	pop    %rbp
   17c44:	c3                   	ret
   17c45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17c4c:	00 00 00 
   17c4f:	90                   	nop

0000000000017c50 <_ZNSt3__112__to_addressB8nn210000IKcEEPT_S3_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp* __to_address(_Tp* __p) _NOEXCEPT {
   17c50:	55                   	push   %rbp
   17c51:	48 89 e5             	mov    %rsp,%rbp
   17c54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __p;
   17c58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c5c:	5d                   	pop    %rbp
   17c5d:	c3                   	ret
   17c5e:	66 90                	xchg   %ax,%ax

0000000000017c60 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_pointer __get_long_pointer() const _NOEXCEPT {
   17c60:	55                   	push   %rbp
   17c61:	48 89 e5             	mov    %rsp,%rbp
   17c64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return _LIBCPP_ASAN_VOLATILE_WRAPPER(__rep_.__l.__data_);
   17c6c:	48 8b 40 10          	mov    0x10(%rax),%rax
   17c70:	5d                   	pop    %rbp
   17c71:	c3                   	ret
   17c72:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17c79:	00 00 00 
   17c7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017c80 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type __get_long_size() const _NOEXCEPT {
   17c80:	55                   	push   %rbp
   17c81:	48 89 e5             	mov    %rsp,%rbp
   17c84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return __rep_.__l.__size_;
   17c8c:	48 8b 40 08          	mov    0x8(%rax),%rax
   17c90:	5d                   	pop    %rbp
   17c91:	c3                   	ret
   17c92:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17c99:	00 00 00 
   17c9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017ca0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type size() const _NOEXCEPT {
   17ca0:	55                   	push   %rbp
   17ca1:	48 89 e5             	mov    %rsp,%rbp
   17ca4:	48 83 ec 20          	sub    $0x20,%rsp
   17ca8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17cac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17cb0:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    return __is_long() ? __get_long_size() : __get_short_size();
   17cb4:	e8 47 ff ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   17cb9:	a8 01                	test   $0x1,%al
   17cbb:	75 02                	jne    17cbf <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev+0x1f>
   17cbd:	eb 0f                	jmp    17cce <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev+0x2e>
   17cbf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17cc3:	e8 b8 ff ff ff       	call   17c80 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeB8nn210000Ev>
   17cc8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17ccc:	eb 0d                	jmp    17cdb <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev+0x3b>
   17cce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17cd2:	e8 59 ff ff ff       	call   17c30 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeB8nn210000Ev>
   17cd7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17cdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17cdf:	48 83 c4 20          	add    $0x20,%rsp
   17ce3:	5d                   	pop    %rbp
   17ce4:	c3                   	ret
   17ce5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17cec:	00 00 00 
   17cef:	90                   	nop

0000000000017cf0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm>:
    -> basic_string<ranges::range_value_t<_Range>, char_traits<ranges::range_value_t<_Range>>, _Allocator>;
#  endif

template <class _CharT, class _Traits, class _Allocator>
_LIBCPP_CONSTEXPR_SINCE_CXX20 void
basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz) {
   17cf0:	55                   	push   %rbp
   17cf1:	48 89 e5             	mov    %rsp,%rbp
   17cf4:	48 83 ec 50          	sub    $0x50,%rsp
   17cf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17cfc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17d00:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   17d04:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17d08:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  if (__libcpp_is_constant_evaluated())
    __rep_ = __rep();
  if (__sz > max_size())
   17d0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17d10:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   17d14:	e8 97 02 00 00       	call   17fb0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeB8nn210000Ev>
   17d19:	48 89 c1             	mov    %rax,%rcx
   17d1c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17d20:	48 39 c8             	cmp    %rcx,%rax
   17d23:	76 05                	jbe    17d2a <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm+0x3a>
    this->__throw_length_error();
   17d25:	e8 26 03 00 00       	call   18050 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE20__throw_length_errorB8nn210000Ev>
  pointer __p;
  if (__fits_in_sso(__sz)) {
   17d2a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   17d2e:	e8 1d 0b 00 00       	call   18850 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__fits_in_ssoB8nn210000Em>
   17d33:	a8 01                	test   $0x1,%al
   17d35:	75 02                	jne    17d39 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm+0x49>
   17d37:	eb 1c                	jmp    17d55 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm+0x65>
   17d39:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    __set_short_size(__sz);
   17d3d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   17d41:	e8 1a 02 00 00       	call   17f60 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeB8nn210000Em>
   17d46:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    __p = __get_short_pointer();
   17d4a:	e8 f1 01 00 00       	call   17f40 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerB8nn210000Ev>
   17d4f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  } else {
   17d53:	eb 5d                	jmp    17db2 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm+0xc2>
    auto __allocation = std::__allocate_at_least(__alloc_, __recommend(__sz) + 1);
   17d55:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   17d59:	e8 92 03 00 00       	call   180f0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendB8nn210000Em>
   17d5e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   17d62:	48 89 c6             	mov    %rax,%rsi
   17d65:	48 83 c6 01          	add    $0x1,%rsi
   17d69:	e8 42 03 00 00       	call   180b0 <_ZNSt3__119__allocate_at_leastB8nn210000INS_9allocatorIcEEEEDaRT_m>
   17d6e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   17d72:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    __p               = __allocation.ptr;
   17d76:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17d7a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    __begin_lifetime(__p, __allocation.count);
   17d7e:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   17d82:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   17d86:	e8 c5 03 00 00       	call   18150 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__begin_lifetimeB8nn210000EPcm>
   17d8b:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    __set_long_pointer(__p);
   17d8f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   17d93:	e8 88 04 00 00       	call   18220 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerB8nn210000EPc>
   17d98:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    __set_long_cap(__allocation.count);
   17d9c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   17da0:	e8 2b 04 00 00       	call   181d0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capB8nn210000Em>
   17da5:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    __set_long_size(__sz);
   17da9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   17dad:	e8 6e 01 00 00       	call   17f20 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeB8nn210000Em>
  }
  traits_type::copy(std::__to_address(__p), __s, __sz);
   17db2:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   17db6:	e8 d5 03 00 00       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   17dbb:	48 89 c7             	mov    %rax,%rdi
   17dbe:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17dc2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17dc6:	e8 95 03 00 00       	call   18160 <_ZNSt3__111char_traitsIcE4copyB8nn210000EPcPKcm>
  traits_type::assign(__p[__sz], value_type());
   17dcb:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   17dcf:	48 03 7d e8          	add    -0x18(%rbp),%rdi
   17dd3:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
   17dd7:	48 8d 75 cf          	lea    -0x31(%rbp),%rsi
   17ddb:	e8 b0 01 00 00       	call   17f90 <_ZNSt3__111char_traitsIcE6assignB8nn210000ERcRKc>
   17de0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  __annotate_new(__sz);
   17de4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   17de8:	e8 33 fe ff ff       	call   17c20 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__annotate_newB8nn210000Em>
}
   17ded:	48 83 c4 50          	add    $0x50,%rsp
   17df1:	5d                   	pop    %rbp
   17df2:	c3                   	ret
   17df3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17dfa:	00 00 00 
   17dfd:	0f 1f 00             	nopl   (%rax)

0000000000017e00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const value_type* data() const _NOEXCEPT {
   17e00:	55                   	push   %rbp
   17e01:	48 89 e5             	mov    %rsp,%rbp
   17e04:	48 83 ec 10          	sub    $0x10,%rsp
   17e08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17e0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return std::__to_address(__get_pointer());
   17e10:	e8 1b 0d 00 00       	call   18b30 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev>
   17e15:	48 89 c7             	mov    %rax,%rdi
   17e18:	e8 33 fe ff ff       	call   17c50 <_ZNSt3__112__to_addressB8nn210000IKcEEPT_S3_>
   17e1d:	48 83 c4 10          	add    $0x10,%rsp
   17e21:	5d                   	pop    %rbp
   17e22:	c3                   	ret
   17e23:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17e2a:	00 00 00 
   17e2d:	0f 1f 00             	nopl   (%rax)

0000000000017e30 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev>:
  inline _LIBCPP_CONSTEXPR_SINCE_CXX20 ~basic_string() {
   17e30:	55                   	push   %rbp
   17e31:	48 89 e5             	mov    %rsp,%rbp
   17e34:	48 83 ec 20          	sub    $0x20,%rsp
   17e38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17e3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17e40:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    __annotate_delete();
   17e44:	e8 47 00 00 00       	call   17e90 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__annotate_deleteB8nn210000Ev>
   17e49:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    if (__is_long())
   17e4d:	e8 ae fd ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   17e52:	a8 01                	test   $0x1,%al
   17e54:	75 02                	jne    17e58 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev+0x28>
   17e56:	eb 26                	jmp    17e7e <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev+0x4e>
   17e58:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
      __alloc_traits::deallocate(__alloc_, __get_long_pointer(), __get_long_cap());
   17e5c:	e8 6f 00 00 00       	call   17ed0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerB8nn210000Ev>
   17e61:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17e65:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17e69:	e8 82 00 00 00       	call   17ef0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capB8nn210000Ev>
   17e6e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17e72:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   17e76:	48 89 c2             	mov    %rax,%rdx
   17e79:	e8 22 00 00 00       	call   17ea0 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE10deallocateB8nn210000ERS2_Pcm>
  }
   17e7e:	48 83 c4 20          	add    $0x20,%rsp
   17e82:	5d                   	pop    %rbp
   17e83:	c3                   	ret
   17e84:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17e8b:	00 00 00 
   17e8e:	66 90                	xchg   %ax,%ax

0000000000017e90 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__annotate_deleteB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __annotate_delete() const _NOEXCEPT {
   17e90:	55                   	push   %rbp
   17e91:	48 89 e5             	mov    %rsp,%rbp
   17e94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  }
   17e98:	5d                   	pop    %rbp
   17e99:	c3                   	ret
   17e9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000017ea0 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE10deallocateB8nn210000ERS2_Pcm>:
    }
  }
#endif

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 static void
  deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT {
   17ea0:	55                   	push   %rbp
   17ea1:	48 89 e5             	mov    %rsp,%rbp
   17ea4:	48 83 ec 20          	sub    $0x20,%rsp
   17ea8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17eac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17eb0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    __a.deallocate(__p, __n);
   17eb4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17eb8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17ebc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17ec0:	e8 0b 0d 00 00       	call   18bd0 <_ZNSt3__19allocatorIcE10deallocateB8nn210000EPcm>
  }
   17ec5:	48 83 c4 20          	add    $0x20,%rsp
   17ec9:	5d                   	pop    %rbp
   17eca:	c3                   	ret
   17ecb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000017ed0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 pointer __get_long_pointer() _NOEXCEPT {
   17ed0:	55                   	push   %rbp
   17ed1:	48 89 e5             	mov    %rsp,%rbp
   17ed4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ed8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return _LIBCPP_ASAN_VOLATILE_WRAPPER(__rep_.__l.__data_);
   17edc:	48 8b 40 10          	mov    0x10(%rax),%rax
   17ee0:	5d                   	pop    %rbp
   17ee1:	c3                   	ret
   17ee2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17ee9:	00 00 00 
   17eec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017ef0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type __get_long_cap() const _NOEXCEPT {
   17ef0:	55                   	push   %rbp
   17ef1:	48 89 e5             	mov    %rsp,%rbp
   17ef4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ef8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return __rep_.__l.__cap_ * __endian_factor;
   17efc:	48 8b 00             	mov    (%rax),%rax
   17eff:	48 d1 e8             	shr    $1,%rax
   17f02:	48 d1 e0             	shl    $1,%rax
   17f05:	5d                   	pop    %rbp
   17f06:	c3                   	ret
   17f07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   17f0e:	00 00 

0000000000017f10 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_increaseB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __annotate_increase(size_type __n) const _NOEXCEPT {
   17f10:	55                   	push   %rbp
   17f11:	48 89 e5             	mov    %rsp,%rbp
   17f14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  }
   17f1c:	5d                   	pop    %rbp
   17f1d:	c3                   	ret
   17f1e:	66 90                	xchg   %ax,%ax

0000000000017f20 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __set_long_size(size_type __s) _NOEXCEPT {
   17f20:	55                   	push   %rbp
   17f21:	48 89 e5             	mov    %rsp,%rbp
   17f24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17f2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    __rep_.__l.__size_ = __s;
   17f30:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17f34:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   17f38:	5d                   	pop    %rbp
   17f39:	c3                   	ret
   17f3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000017f40 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerB8nn210000Ev>:
  __get_short_pointer() _NOEXCEPT {
   17f40:	55                   	push   %rbp
   17f41:	48 89 e5             	mov    %rsp,%rbp
   17f44:	48 83 ec 10          	sub    $0x10,%rsp
   17f48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return _LIBCPP_ASAN_VOLATILE_WRAPPER(pointer_traits<pointer>::pointer_to(__rep_.__s.__data_[0]));
   17f50:	48 83 c7 01          	add    $0x1,%rdi
   17f54:	e8 67 0d 00 00       	call   18cc0 <_ZNSt3__114pointer_traitsIPcE10pointer_toB8nn210000ERc>
   17f59:	48 83 c4 10          	add    $0x10,%rsp
   17f5d:	5d                   	pop    %rbp
   17f5e:	c3                   	ret
   17f5f:	90                   	nop

0000000000017f60 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeB8nn210000Em>:
  __set_short_size(size_type __s) _NOEXCEPT {
   17f60:	55                   	push   %rbp
   17f61:	48 89 e5             	mov    %rsp,%rbp
   17f64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17f6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    __rep_.__s.__size_    = __s;
   17f70:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17f74:	88 ca                	mov    %cl,%dl
   17f76:	8a 08                	mov    (%rax),%cl
   17f78:	80 e2 7f             	and    $0x7f,%dl
   17f7b:	d0 e2                	shl    $1,%dl
   17f7d:	80 e1 01             	and    $0x1,%cl
   17f80:	08 d1                	or     %dl,%cl
   17f82:	88 08                	mov    %cl,(%rax)
    __rep_.__s.__is_long_ = false;
   17f84:	8a 08                	mov    (%rax),%cl
   17f86:	80 e1 fe             	and    $0xfe,%cl
   17f89:	80 c9 00             	or     $0x0,%cl
   17f8c:	88 08                	mov    %cl,(%rax)
  }
   17f8e:	5d                   	pop    %rbp
   17f8f:	c3                   	ret

0000000000017f90 <_ZNSt3__111char_traitsIcE6assignB8nn210000ERcRKc>:
    { ours::panic(__func__);  }
   17f90:	55                   	push   %rbp
   17f91:	48 89 e5             	mov    %rsp,%rbp
   17f94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

   17f9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17fa0:	8a 08                	mov    (%rax),%cl
   17fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fa6:	88 08                	mov    %cl,(%rax)
    TO_CHARS_ATTRS 
   17fa8:	5d                   	pop    %rbp
   17fa9:	c3                   	ret
   17faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000017fb0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type max_size() const _NOEXCEPT {
   17fb0:	55                   	push   %rbp
   17fb1:	48 89 e5             	mov    %rsp,%rbp
   17fb4:	48 83 ec 40          	sub    $0x40,%rsp
   17fb8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17fbc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    if (size_type __m = __alloc_traits::max_size(__alloc_); __m <= std::numeric_limits<size_type>::max() / 2) {
   17fc0:	e8 2b 0d 00 00       	call   18cf0 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE8max_sizeB8nn210000IS2_TnNS_9enable_ifIXnt16__has_max_size_vIKT_EEiE4typeELi0EEEmRKS2_>
   17fc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17fc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17fcd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   17fd1:	e8 7a 29 ff ff       	call   a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>
   17fd6:	48 89 c1             	mov    %rax,%rcx
   17fd9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17fdd:	48 d1 e9             	shr    $1,%rcx
   17fe0:	48 39 c8             	cmp    %rcx,%rax
   17fe3:	77 26                	ja     1800b <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeB8nn210000Ev+0x5b>
      size_type __res = __m - __alignment;
   17fe5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17fe9:	48 83 e8 08          	sub    $0x8,%rax
   17fed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        __res &= ~size_type(1);
   17ff1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17ff5:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
   17ff9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      return __res - 1;
   17ffd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18001:	48 83 e8 01          	sub    $0x1,%rax
   18005:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18009:	eb 37                	jmp    18042 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeB8nn210000Ev+0x92>
      bool __uses_lsb = __endian_factor == 2;
   1800b:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
      return __uses_lsb ? __m - __alignment - 1 : (__m / 2) - __alignment - 1;
   1800f:	f6 45 df 01          	testb  $0x1,-0x21(%rbp)
   18013:	74 12                	je     18027 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeB8nn210000Ev+0x77>
   18015:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18019:	48 83 e8 08          	sub    $0x8,%rax
   1801d:	48 83 e8 01          	sub    $0x1,%rax
   18021:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   18025:	eb 13                	jmp    1803a <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeB8nn210000Ev+0x8a>
   18027:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1802b:	48 d1 e8             	shr    $1,%rax
   1802e:	48 83 e8 08          	sub    $0x8,%rax
   18032:	48 83 e8 01          	sub    $0x1,%rax
   18036:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1803a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1803e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   18042:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18046:	48 83 c4 40          	add    $0x40,%rsp
   1804a:	5d                   	pop    %rbp
   1804b:	c3                   	ret
   1804c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000018050 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE20__throw_length_errorB8nn210000Ev>:
  [[__noreturn__]] _LIBCPP_HIDE_FROM_ABI static void __throw_length_error() {
   18050:	55                   	push   %rbp
   18051:	48 89 e5             	mov    %rsp,%rbp
    std::__throw_length_error("basic_string");
   18054:	48 8d 3d 71 70 01 00 	lea    0x17071(%rip),%rdi        # 2f0cc <.L.str.5>
   1805b:	e8 10 10 00 00       	call   19070 <_ZNSt3__120__throw_length_errorB8nn210000EPKc>

0000000000018060 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type capacity() const _NOEXCEPT {
   18060:	55                   	push   %rbp
   18061:	48 89 e5             	mov    %rsp,%rbp
   18064:	48 83 ec 20          	sub    $0x20,%rsp
   18068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1806c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18070:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    return (__is_long() ? __get_long_cap() : static_cast<size_type>(__min_cap)) - 1;
   18074:	e8 87 fb ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   18079:	a8 01                	test   $0x1,%al
   1807b:	75 02                	jne    1807f <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityB8nn210000Ev+0x1f>
   1807d:	eb 0f                	jmp    1808e <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityB8nn210000Ev+0x2e>
   1807f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18083:	e8 68 fe ff ff       	call   17ef0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capB8nn210000Ev>
   18088:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1808c:	eb 0b                	jmp    18099 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityB8nn210000Ev+0x39>
   1808e:	b8 17 00 00 00       	mov    $0x17,%eax
   18093:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   18097:	eb 00                	jmp    18099 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityB8nn210000Ev+0x39>
   18099:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1809d:	48 83 e8 01          	sub    $0x1,%rax
   180a1:	48 83 c4 20          	add    $0x20,%rsp
   180a5:	5d                   	pop    %rbp
   180a6:	c3                   	ret
   180a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   180ae:	00 00 

00000000000180b0 <_ZNSt3__119__allocate_at_leastB8nn210000INS_9allocatorIcEEEEDaRT_m>:
_LIBCPP_BEGIN_NAMESPACE_STD

#if _LIBCPP_STD_VER >= 23

template <class _Alloc>
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr auto __allocate_at_least(_Alloc& __alloc, size_t __n) {
   180b0:	55                   	push   %rbp
   180b1:	48 89 e5             	mov    %rsp,%rbp
   180b4:	48 83 ec 20          	sub    $0x20,%rsp
   180b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   180bc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return std::allocator_traits<_Alloc>::allocate_at_least(__alloc, __n);
   180c0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   180c4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   180c8:	e8 43 0c 00 00       	call   18d10 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE17allocate_at_leastB8nn210000IS2_EENS_17allocation_resultIPcmEERT_m>
   180cd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   180d1:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   180d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   180d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   180dd:	48 83 c4 20          	add    $0x20,%rsp
   180e1:	5d                   	pop    %rbp
   180e2:	c3                   	ret
   180e3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   180ea:	00 00 00 
   180ed:	0f 1f 00             	nopl   (%rax)

00000000000180f0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendB8nn210000Em>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type __recommend(size_type __s) _NOEXCEPT {
   180f0:	55                   	push   %rbp
   180f1:	48 89 e5             	mov    %rsp,%rbp
   180f4:	48 83 ec 20          	sub    $0x20,%rsp
   180f8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    if (__s < __min_cap) {
   180fc:	48 83 7d f0 17       	cmpq   $0x17,-0x10(%rbp)
   18101:	73 0a                	jae    1810d <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendB8nn210000Em+0x1d>
      return static_cast<size_type>(__min_cap) - 1;
   18103:	48 c7 45 f8 16 00 00 	movq   $0x16,-0x8(%rbp)
   1810a:	00 
   1810b:	eb 38                	jmp    18145 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendB8nn210000Em+0x55>
    const size_type __boundary = sizeof(value_type) < __alignment ? __alignment / sizeof(value_type) : __endian_factor;
   1810d:	48 c7 45 e8 08 00 00 	movq   $0x8,-0x18(%rbp)
   18114:	00 
    size_type __guess          = __align_it<__boundary>(__s + 1) - 1;
   18115:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18119:	48 83 c7 01          	add    $0x1,%rdi
   1811d:	e8 1e 0d 00 00       	call   18e40 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__align_itB8nn210000ILm8EEEmm>
   18122:	48 83 e8 01          	sub    $0x1,%rax
   18126:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (__guess == __min_cap)
   1812a:	48 83 7d e0 17       	cmpq   $0x17,-0x20(%rbp)
   1812f:	75 0c                	jne    1813d <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendB8nn210000Em+0x4d>
      __guess += __endian_factor;
   18131:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18135:	48 83 c0 02          	add    $0x2,%rax
   18139:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    return __guess;
   1813d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18141:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   18145:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18149:	48 83 c4 20          	add    $0x20,%rsp
   1814d:	5d                   	pop    %rbp
   1814e:	c3                   	ret
   1814f:	90                   	nop

0000000000018150 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__begin_lifetimeB8nn210000EPcm>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __begin_lifetime(pointer __begin, size_type __n) {
   18150:	55                   	push   %rbp
   18151:	48 89 e5             	mov    %rsp,%rbp
   18154:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18158:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  }
   1815c:	5d                   	pop    %rbp
   1815d:	c3                   	ret
   1815e:	66 90                	xchg   %ax,%ax

0000000000018160 <_ZNSt3__111char_traitsIcE4copyB8nn210000EPcPKcm>:
   18160:	55                   	push   %rbp
   18161:	48 89 e5             	mov    %rsp,%rbp
   18164:	48 83 ec 20          	sub    $0x20,%rsp
   18168:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1816c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18170:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   18174:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18178:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1817c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18180:	e8 db 0c 00 00       	call   18e60 <_ZNSt3__119__constexpr_memmoveB8nn210000IcKcEEPT_S3_PT0_NS_15__element_countE>
   18185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18189:	48 83 c4 20          	add    $0x20,%rsp
   1818d:	5d                   	pop    %rbp
   1818e:	c3                   	ret
   1818f:	90                   	nop

0000000000018190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp* __to_address(_Tp* __p) _NOEXCEPT {
   18190:	55                   	push   %rbp
   18191:	48 89 e5             	mov    %rsp,%rbp
   18194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __p;
   18198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1819c:	5d                   	pop    %rbp
   1819d:	c3                   	ret
   1819e:	66 90                	xchg   %ax,%ax

00000000000181a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 value_type* data() _NOEXCEPT {
   181a0:	55                   	push   %rbp
   181a1:	48 89 e5             	mov    %rsp,%rbp
   181a4:	48 83 ec 10          	sub    $0x10,%rsp
   181a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   181ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return std::__to_address(__get_pointer());
   181b0:	e8 8b 01 00 00       	call   18340 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev>
   181b5:	48 89 c7             	mov    %rax,%rdi
   181b8:	e8 d3 ff ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   181bd:	48 83 c4 10          	add    $0x10,%rsp
   181c1:	5d                   	pop    %rbp
   181c2:	c3                   	ret
   181c3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   181ca:	00 00 00 
   181cd:	0f 1f 00             	nopl   (%rax)

00000000000181d0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __set_long_cap(size_type __s) _NOEXCEPT {
   181d0:	55                   	push   %rbp
   181d1:	48 89 e5             	mov    %rsp,%rbp
   181d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   181d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   181dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    __rep_.__l.__cap_     = __s / __endian_factor;
   181e0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   181e4:	48 d1 ea             	shr    $1,%rdx
   181e7:	48 8b 08             	mov    (%rax),%rcx
   181ea:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
   181f1:	ff ff 7f 
   181f4:	48 21 f2             	and    %rsi,%rdx
   181f7:	48 d1 e2             	shl    $1,%rdx
   181fa:	48 83 e1 01          	and    $0x1,%rcx
   181fe:	48 09 d1             	or     %rdx,%rcx
   18201:	48 89 08             	mov    %rcx,(%rax)
    __rep_.__l.__is_long_ = true;
   18204:	48 8b 08             	mov    (%rax),%rcx
   18207:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
   1820b:	48 83 c9 01          	or     $0x1,%rcx
   1820f:	48 89 08             	mov    %rcx,(%rax)
  }
   18212:	5d                   	pop    %rbp
   18213:	c3                   	ret
   18214:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1821b:	00 00 00 
   1821e:	66 90                	xchg   %ax,%ax

0000000000018220 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerB8nn210000EPc>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __set_long_pointer(pointer __p) _NOEXCEPT {
   18220:	55                   	push   %rbp
   18221:	48 89 e5             	mov    %rsp,%rbp
   18224:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18228:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1822c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    __rep_.__l.__data_ = __p;
   18230:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18234:	48 89 48 10          	mov    %rcx,0x10(%rax)
  }
   18238:	5d                   	pop    %rbp
   18239:	c3                   	ret
   1823a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000018240 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm>:
}
// append

template <class _CharT, class _Traits, class _Allocator>
_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n) {
   18240:	55                   	push   %rbp
   18241:	48 89 e5             	mov    %rsp,%rbp
   18244:	48 83 ec 50          	sub    $0x50,%rsp
   18248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1824c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18250:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   18254:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18258:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::append received nullptr");
  size_type __cap = capacity();
   1825c:	e8 ff fd ff ff       	call   18060 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityB8nn210000Ev>
   18261:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   18265:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  size_type __sz  = size();
   18269:	e8 32 fa ff ff       	call   17ca0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev>
   1826e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  if (__cap - __sz >= __n) {
   18272:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18276:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
   1827a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1827e:	72 6e                	jb     182ee <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm+0xae>
    if (__n) {
   18280:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   18285:	74 65                	je     182ec <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm+0xac>
   18287:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      __annotate_increase(__n);
   1828b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1828f:	e8 7c fc ff ff       	call   17f10 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_increaseB8nn210000Em>
   18294:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      value_type* __p = std::__to_address(__get_pointer());
   18298:	e8 a3 00 00 00       	call   18340 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev>
   1829d:	48 89 c7             	mov    %rax,%rdi
   182a0:	e8 eb fe ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   182a5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      traits_type::copy(__p + __sz, __s, __n);
   182a9:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   182ad:	48 03 7d d8          	add    -0x28(%rbp),%rdi
   182b1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   182b5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   182b9:	e8 a2 fe ff ff       	call   18160 <_ZNSt3__111char_traitsIcE4copyB8nn210000EPcPKcm>
   182be:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      __sz += __n;
   182c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   182c6:	48 03 45 d8          	add    -0x28(%rbp),%rax
   182ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      __set_size(__sz);
   182ce:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   182d2:	e8 b9 00 00 00       	call   18390 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeB8nn210000Em>
      traits_type::assign(__p[__sz], value_type());
   182d7:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   182db:	48 03 7d d8          	add    -0x28(%rbp),%rdi
   182df:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
   182e3:	48 8d 75 cf          	lea    -0x31(%rbp),%rsi
   182e7:	e8 a4 fc ff ff       	call   17f90 <_ZNSt3__111char_traitsIcE6assignB8nn210000ERcRKc>
    }
  } else
   182ec:	eb 3a                	jmp    18328 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm+0xe8>
   182ee:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);
   182f2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   182f6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   182fa:	48 03 55 e8          	add    -0x18(%rbp),%rdx
   182fe:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   18302:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   18306:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
   1830a:	4c 8b 4d e8          	mov    -0x18(%rbp),%r9
   1830e:	4c 8b 55 f0          	mov    -0x10(%rbp),%r10
   18312:	31 c0                	xor    %eax,%eax
   18314:	48 89 e0             	mov    %rsp,%rax
   18317:	4c 89 50 08          	mov    %r10,0x8(%rax)
   1831b:	4c 89 08             	mov    %r9,(%rax)
   1831e:	31 c0                	xor    %eax,%eax
   18320:	41 89 c1             	mov    %eax,%r9d
   18323:	e8 b8 00 00 00       	call   183e0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc>
   18328:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  return *this;
   1832c:	48 83 c4 50          	add    $0x50,%rsp
   18330:	5d                   	pop    %rbp
   18331:	c3                   	ret
   18332:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18339:	00 00 00 
   1833c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000018340 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 pointer __get_pointer() _NOEXCEPT {
   18340:	55                   	push   %rbp
   18341:	48 89 e5             	mov    %rsp,%rbp
   18344:	48 83 ec 20          	sub    $0x20,%rsp
   18348:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1834c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18350:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    return __is_long() ? __get_long_pointer() : __get_short_pointer();
   18354:	e8 a7 f8 ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   18359:	a8 01                	test   $0x1,%al
   1835b:	75 02                	jne    1835f <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev+0x1f>
   1835d:	eb 0f                	jmp    1836e <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev+0x2e>
   1835f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18363:	e8 68 fb ff ff       	call   17ed0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerB8nn210000Ev>
   18368:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1836c:	eb 0d                	jmp    1837b <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev+0x3b>
   1836e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18372:	e8 c9 fb ff ff       	call   17f40 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerB8nn210000Ev>
   18377:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1837b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1837f:	48 83 c4 20          	add    $0x20,%rsp
   18383:	5d                   	pop    %rbp
   18384:	c3                   	ret
   18385:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1838c:	00 00 00 
   1838f:	90                   	nop

0000000000018390 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __set_size(size_type __s) _NOEXCEPT {
   18390:	55                   	push   %rbp
   18391:	48 89 e5             	mov    %rsp,%rbp
   18394:	48 83 ec 20          	sub    $0x20,%rsp
   18398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1839c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   183a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   183a4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if (__is_long())
   183a8:	e8 53 f8 ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   183ad:	a8 01                	test   $0x1,%al
   183af:	75 02                	jne    183b3 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeB8nn210000Em+0x23>
   183b1:	eb 0f                	jmp    183c2 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeB8nn210000Em+0x32>
   183b3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
      __set_long_size(__s);
   183b7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   183bb:	e8 60 fb ff ff       	call   17f20 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeB8nn210000Em>
   183c0:	eb 0d                	jmp    183cf <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__set_sizeB8nn210000Em+0x3f>
   183c2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
      __set_short_size(__s);
   183c6:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   183ca:	e8 91 fb ff ff       	call   17f60 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeB8nn210000Em>
  }
   183cf:	48 83 c4 20          	add    $0x20,%rsp
   183d3:	5d                   	pop    %rbp
   183d4:	c3                   	ret
   183d5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   183dc:	00 00 00 
   183df:	90                   	nop

00000000000183e0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc>:
    const value_type* __p_new_stuff) {
   183e0:	55                   	push   %rbp
   183e1:	48 89 e5             	mov    %rsp,%rbp
   183e4:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   183eb:	48 8b 45 18          	mov    0x18(%rbp),%rax
   183ef:	48 8b 45 10          	mov    0x10(%rbp),%rax
   183f3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   183f7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   183fb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   183ff:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   18403:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   18407:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
   1840b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1840f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  size_type __ms = max_size();
   18416:	e8 95 fb ff ff       	call   17fb0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeB8nn210000Ev>
   1841b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (__delta_cap > __ms - __old_cap)
   1841f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18423:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   18427:	48 2b 4d f0          	sub    -0x10(%rbp),%rcx
   1842b:	48 39 c8             	cmp    %rcx,%rax
   1842e:	76 05                	jbe    18435 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc+0x55>
    __throw_length_error();
   18430:	e8 1b fc ff ff       	call   18050 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE20__throw_length_errorB8nn210000Ev>
   18435:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  pointer __old_p = __get_pointer();
   1843c:	e8 ff fe ff ff       	call   18340 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev>
   18441:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __old_cap < __ms / 2 - __alignment ? __recommend(std::max(__old_cap + __delta_cap, 2 * __old_cap)) : __ms;
   18445:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18449:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1844d:	48 d1 e9             	shr    $1,%rcx
   18450:	48 83 e9 08          	sub    $0x8,%rcx
   18454:	48 39 c8             	cmp    %rcx,%rax
   18457:	73 35                	jae    1848e <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc+0xae>
   18459:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1845d:	48 03 45 e8          	add    -0x18(%rbp),%rax
   18461:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   18465:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18469:	48 d1 e0             	shl    $1,%rax
   1846c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   18470:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   18474:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
   18478:	e8 13 26 ff ff       	call   aa90 <_ZNSt3__13maxB8nn210000ImEERKT_S3_S3_>
   1847d:	48 8b 38             	mov    (%rax),%rdi
   18480:	e8 6b fc ff ff       	call   180f0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendB8nn210000Em>
   18485:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   1848c:	eb 0b                	jmp    18499 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc+0xb9>
   1848e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18492:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   18499:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   184a0:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  size_type __cap =
   184a7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  __annotate_delete();
   184ab:	e8 e0 f9 ff ff       	call   17e90 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__annotate_deleteB8nn210000Ev>
   184b0:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   184b7:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
  auto __guard      = std::__make_scope_guard(__annotate_new_size(*this));
   184bb:	e8 10 06 00 00       	call   18ad0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeC2B8nn210000ERS5_>
   184c0:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   184c4:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
   184c8:	e8 b3 05 00 00       	call   18a80 <_ZNSt3__118__make_scope_guardB8nn210000INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEEENS_13__scope_guardIT_EES9_>
   184cd:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  auto __allocation = std::__allocate_at_least(__alloc_, __cap + 1);
   184d4:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   184d8:	48 83 c6 01          	add    $0x1,%rsi
   184dc:	e8 cf fb ff ff       	call   180b0 <_ZNSt3__119__allocate_at_leastB8nn210000INS_9allocatorIcEEEEDaRT_m>
   184e1:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   184e5:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  pointer __p       = __allocation.ptr;
   184e9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   184ed:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  __begin_lifetime(__p, __allocation.count);
   184f1:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   184f5:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
   184f9:	e8 52 fc ff ff       	call   18150 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__begin_lifetimeB8nn210000EPcm>
  if (__n_copy != 0)
   184fe:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   18503:	74 2c                	je     18531 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc+0x151>
    traits_type::copy(std::__to_address(__p), std::__to_address(__old_p), __n_copy);
   18505:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   18509:	e8 82 fc ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   1850e:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   18515:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   18519:	e8 72 fc ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   1851e:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
   18525:	48 89 c6             	mov    %rax,%rsi
   18528:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1852c:	e8 2f fc ff ff       	call   18160 <_ZNSt3__111char_traitsIcE4copyB8nn210000EPcPKcm>
  if (__n_add != 0)
   18531:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
   18536:	74 1d                	je     18555 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc+0x175>
    traits_type::copy(std::__to_address(__p) + __n_copy, __p_new_stuff, __n_add);
   18538:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   1853c:	e8 4f fc ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   18541:	48 89 c7             	mov    %rax,%rdi
   18544:	48 03 7d d8          	add    -0x28(%rbp),%rdi
   18548:	48 8b 75 18          	mov    0x18(%rbp),%rsi
   1854c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
   18550:	e8 0b fc ff ff       	call   18160 <_ZNSt3__111char_traitsIcE4copyB8nn210000EPcPKcm>
  size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
   18555:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18559:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
   1855d:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
   18561:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  if (__sec_cp_sz != 0)
   18568:	48 83 bd 78 ff ff ff 	cmpq   $0x0,-0x88(%rbp)
   1856f:	00 
   18570:	74 3f                	je     185b1 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc+0x1d1>
        std::__to_address(__p) + __n_copy + __n_add, std::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
   18572:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   18576:	e8 15 fc ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   1857b:	48 03 45 d8          	add    -0x28(%rbp),%rax
   1857f:	48 03 45 10          	add    0x10(%rbp),%rax
   18583:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   1858a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1858e:	e8 fd fb ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   18593:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
   1859a:	48 89 c6             	mov    %rax,%rsi
   1859d:	48 03 75 d8          	add    -0x28(%rbp),%rsi
   185a1:	48 03 75 d0          	add    -0x30(%rbp),%rsi
   185a5:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    traits_type::copy(
   185ac:	e8 af fb ff ff       	call   18160 <_ZNSt3__111char_traitsIcE4copyB8nn210000EPcPKcm>
  if (__old_cap + 1 != __min_cap)
   185b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   185b5:	48 83 c0 01          	add    $0x1,%rax
   185b9:	48 83 f8 17          	cmp    $0x17,%rax
   185bd:	74 18                	je     185d7 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc+0x1f7>
   185bf:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    __alloc_traits::deallocate(__alloc_, __old_p, __old_cap + 1);
   185c6:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   185ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   185ce:	48 83 c2 01          	add    $0x1,%rdx
   185d2:	e8 c9 f8 ff ff       	call   17ea0 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE10deallocateB8nn210000ERS2_Pcm>
   185d7:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  __set_long_pointer(__p);
   185de:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   185e2:	e8 39 fc ff ff       	call   18220 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerB8nn210000EPc>
   185e7:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  __set_long_cap(__allocation.count);
   185ee:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
   185f2:	e8 d9 fb ff ff       	call   181d0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capB8nn210000Em>
   185f7:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  __old_sz = __n_copy + __n_add + __sec_cp_sz;
   185fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18602:	48 03 45 10          	add    0x10(%rbp),%rax
   18606:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
   1860d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  __set_long_size(__old_sz);
   18611:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   18615:	e8 06 f9 ff ff       	call   17f20 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeB8nn210000Em>
  traits_type::assign(__p[__old_sz], value_type());
   1861a:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   1861e:	48 03 7d e0          	add    -0x20(%rbp),%rdi
   18622:	c6 85 77 ff ff ff 00 	movb   $0x0,-0x89(%rbp)
   18629:	48 8d b5 77 ff ff ff 	lea    -0x89(%rbp),%rsi
   18630:	e8 5b f9 ff ff       	call   17f90 <_ZNSt3__111char_traitsIcE6assignB8nn210000ERcRKc>
   18635:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
}
   18639:	e8 b2 04 00 00       	call   18af0 <_ZNSt3__113__scope_guardINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEED2B8nn210000Ev>
   1863e:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   18645:	5d                   	pop    %rbp
   18646:	c3                   	ret
   18647:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1864e:	00 00 

0000000000018650 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc>:
  return append(__sv.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s) {
   18650:	55                   	push   %rbp
   18651:	48 89 e5             	mov    %rsp,%rbp
   18654:	48 83 ec 20          	sub    $0x20,%rsp
   18658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1865c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18660:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18664:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::append received nullptr");
  return append(__s, traits_type::length(__s));
   18668:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1866c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   18670:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18674:	e8 e7 ac fe ff       	call   3360 <_ZNSt3__111char_traitsIcE6lengthB8nn210000EPKc>
   18679:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1867d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   18681:	48 89 c2             	mov    %rax,%rdx
   18684:	e8 b7 fb ff ff       	call   18240 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm>
   18689:	48 83 c4 20          	add    $0x20,%rsp
   1868d:	5d                   	pop    %rbp
   1868e:	c3                   	ret
   1868f:	90                   	nop

0000000000018690 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__grow_by_without_replaceB8nn210000Emmmmmm>:
    size_type __n_add) {
   18690:	55                   	push   %rbp
   18691:	48 89 e5             	mov    %rsp,%rbp
   18694:	48 83 ec 50          	sub    $0x50,%rsp
   18698:	48 8b 45 10          	mov    0x10(%rbp),%rax
   1869c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   186a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   186a4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   186a8:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   186ac:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   186b0:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
   186b4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   186b8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  __annotate_delete();
   186bc:	e8 cf f7 ff ff       	call   17e90 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__annotate_deleteB8nn210000Ev>
   186c1:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   186c5:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  auto __guard = std::__make_scope_guard(__annotate_new_size(*this));
   186c9:	e8 02 04 00 00       	call   18ad0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeC2B8nn210000ERS5_>
   186ce:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   186d2:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
   186d6:	e8 a5 03 00 00       	call   18a80 <_ZNSt3__118__make_scope_guardB8nn210000INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEEENS_13__scope_guardIT_EES9_>
   186db:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  __grow_by(__old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
   186df:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   186e3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   186e7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   186eb:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
   186ef:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
   186f3:	4c 8b 55 10          	mov    0x10(%rbp),%r10
   186f7:	48 89 e0             	mov    %rsp,%rax
   186fa:	4c 89 10             	mov    %r10,(%rax)
   186fd:	e8 be 01 00 00       	call   188c0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm>
   18702:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  __set_long_size(__old_sz - __n_del + __n_add);
   18706:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1870a:	48 2b 75 d0          	sub    -0x30(%rbp),%rsi
   1870e:	48 03 75 10          	add    0x10(%rbp),%rsi
   18712:	e8 09 f8 ff ff       	call   17f20 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeB8nn210000Em>
   18717:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
}
   1871b:	e8 d0 03 00 00       	call   18af0 <_ZNSt3__113__scope_guardINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEED2B8nn210000Ev>
   18720:	48 83 c4 50          	add    $0x50,%rsp
   18724:	5d                   	pop    %rbp
   18725:	c3                   	ret
   18726:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1872d:	00 00 00 

0000000000018730 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc>:
_LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c) {
   18730:	55                   	push   %rbp
   18731:	48 89 e5             	mov    %rsp,%rbp
   18734:	48 83 ec 40          	sub    $0x40,%rsp
   18738:	40 88 f0             	mov    %sil,%al
   1873b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1873f:	88 45 f7             	mov    %al,-0x9(%rbp)
   18742:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18746:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  bool __is_short = !__is_long();
   1874a:	e8 b1 f4 ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   1874f:	34 ff                	xor    $0xff,%al
   18751:	24 01                	and    $0x1,%al
   18753:	88 45 f6             	mov    %al,-0xa(%rbp)
  if (__is_short) {
   18756:	f6 45 f6 01          	testb  $0x1,-0xa(%rbp)
   1875a:	74 17                	je     18773 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc+0x43>
   1875c:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    __cap = __min_cap - 1;
   18760:	48 c7 45 e8 16 00 00 	movq   $0x16,-0x18(%rbp)
   18767:	00 
    __sz  = __get_short_size();
   18768:	e8 c3 f4 ff ff       	call   17c30 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__get_short_sizeB8nn210000Ev>
   1876d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  } else {
   18771:	eb 1e                	jmp    18791 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc+0x61>
   18773:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    __cap = __get_long_cap() - 1;
   18777:	e8 74 f7 ff ff       	call   17ef0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capB8nn210000Ev>
   1877c:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   18780:	48 83 e8 01          	sub    $0x1,%rax
   18784:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __sz  = __get_long_size();
   18788:	e8 f3 f4 ff ff       	call   17c80 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeB8nn210000Ev>
   1878d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (__sz == __cap) {
   18791:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18795:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18799:	75 2f                	jne    187ca <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc+0x9a>
   1879b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    __grow_by_without_replace(__cap, 1, __sz, __sz, 0);
   1879f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   187a3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   187a7:	4c 8b 45 e0          	mov    -0x20(%rbp),%r8
   187ab:	31 c0                	xor    %eax,%eax
   187ad:	48 89 e0             	mov    %rsp,%rax
   187b0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   187b7:	31 c0                	xor    %eax,%eax
   187b9:	41 89 c1             	mov    %eax,%r9d
   187bc:	ba 01 00 00 00       	mov    $0x1,%edx
   187c1:	e8 ca fe ff ff       	call   18690 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__grow_by_without_replaceB8nn210000Emmmmmm>
    __is_short = false; // the string is always long after __grow_by
   187c6:	c6 45 f6 00          	movb   $0x0,-0xa(%rbp)
   187ca:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   187ce:	be 01 00 00 00       	mov    $0x1,%esi
  __annotate_increase(1);
   187d3:	e8 38 f7 ff ff       	call   17f10 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_increaseB8nn210000Em>
  if (__is_short) {
   187d8:	f6 45 f6 01          	testb  $0x1,-0xa(%rbp)
   187dc:	74 24                	je     18802 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc+0xd2>
   187de:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    __p = __get_short_pointer() + __sz;
   187e2:	e8 59 f7 ff ff       	call   17f40 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerB8nn210000Ev>
   187e7:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   187eb:	48 03 45 e0          	add    -0x20(%rbp),%rax
   187ef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    __set_short_size(__sz + 1);
   187f3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   187f7:	48 83 c6 01          	add    $0x1,%rsi
   187fb:	e8 60 f7 ff ff       	call   17f60 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeB8nn210000Em>
  } else {
   18800:	eb 22                	jmp    18824 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc+0xf4>
   18802:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    __p = __get_long_pointer() + __sz;
   18806:	e8 c5 f6 ff ff       	call   17ed0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerB8nn210000Ev>
   1880b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1880f:	48 03 45 e0          	add    -0x20(%rbp),%rax
   18813:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    __set_long_size(__sz + 1);
   18817:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1881b:	48 83 c6 01          	add    $0x1,%rsi
   1881f:	e8 fc f6 ff ff       	call   17f20 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeB8nn210000Em>
  traits_type::assign(*__p, __c);
   18824:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   18828:	48 8d 75 f7          	lea    -0x9(%rbp),%rsi
   1882c:	e8 5f f7 ff ff       	call   17f90 <_ZNSt3__111char_traitsIcE6assignB8nn210000ERcRKc>
  traits_type::assign(*++__p, value_type());
   18831:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   18835:	48 83 c7 01          	add    $0x1,%rdi
   18839:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1883d:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
   18841:	48 8d 75 d7          	lea    -0x29(%rbp),%rsi
   18845:	e8 46 f7 ff ff       	call   17f90 <_ZNSt3__111char_traitsIcE6assignB8nn210000ERcRKc>
}
   1884a:	48 83 c4 40          	add    $0x40,%rsp
   1884e:	5d                   	pop    %rbp
   1884f:	c3                   	ret

0000000000018850 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__fits_in_ssoB8nn210000Em>:
  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI static bool __fits_in_sso(size_type __sz) { return __sz < __min_cap; }
   18850:	55                   	push   %rbp
   18851:	48 89 e5             	mov    %rsp,%rbp
   18854:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18858:	48 83 7d f8 17       	cmpq   $0x17,-0x8(%rbp)
   1885d:	0f 92 c0             	setb   %al
   18860:	24 01                	and    $0x1,%al
   18862:	5d                   	pop    %rbp
   18863:	c3                   	ret
   18864:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1886b:	00 00 00 
   1886e:	66 90                	xchg   %ax,%ax

0000000000018870 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 operator __self_view() const _NOEXCEPT {
   18870:	55                   	push   %rbp
   18871:	48 89 e5             	mov    %rsp,%rbp
   18874:	48 83 ec 30          	sub    $0x30,%rsp
   18878:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1887c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   18880:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    return __self_view(typename __self_view::__assume_valid(), data(), size());
   18884:	e8 77 f5 ff ff       	call   17e00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataB8nn210000Ev>
   18889:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   1888d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   18891:	e8 0a f4 ff ff       	call   17ca0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev>
   18896:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1889a:	48 89 c2             	mov    %rax,%rdx
   1889d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   188a1:	e8 0a 07 00 00       	call   18fb0 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ENS3_14__assume_validEPKcm>
   188a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   188aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   188ae:	48 83 c4 30          	add    $0x30,%rsp
   188b2:	5d                   	pop    %rbp
   188b3:	c3                   	ret
   188b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   188bb:	00 00 00 
   188be:	66 90                	xchg   %ax,%ax

00000000000188c0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm>:
    size_type __n_add) {
   188c0:	55                   	push   %rbp
   188c1:	48 89 e5             	mov    %rsp,%rbp
   188c4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   188cb:	48 8b 45 10          	mov    0x10(%rbp),%rax
   188cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   188d3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   188d7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   188db:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   188df:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   188e3:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
   188e7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   188eb:	48 89 7d 80          	mov    %rdi,-0x80(%rbp)
  size_type __ms = max_size();
   188ef:	e8 bc f6 ff ff       	call   17fb0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeB8nn210000Ev>
   188f4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (__delta_cap > __ms - __old_cap)
   188f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   188fc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   18900:	48 2b 4d f0          	sub    -0x10(%rbp),%rcx
   18904:	48 39 c8             	cmp    %rcx,%rax
   18907:	76 05                	jbe    1890e <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm+0x4e>
    this->__throw_length_error();
   18909:	e8 42 f7 ff ff       	call   18050 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE20__throw_length_errorB8nn210000Ev>
   1890e:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  pointer __old_p = __get_pointer();
   18912:	e8 29 fa ff ff       	call   18340 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev>
   18917:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __old_cap < __ms / 2 - __alignment ? __recommend(std::max(__old_cap + __delta_cap, 2 * __old_cap)) : __ms;
   1891b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1891f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   18923:	48 d1 e9             	shr    $1,%rcx
   18926:	48 83 e9 08          	sub    $0x8,%rcx
   1892a:	48 39 c8             	cmp    %rcx,%rax
   1892d:	73 35                	jae    18964 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm+0xa4>
   1892f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18933:	48 03 45 e8          	add    -0x18(%rbp),%rax
   18937:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1893b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1893f:	48 d1 e0             	shl    $1,%rax
   18942:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   18946:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   1894a:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
   1894e:	e8 3d 21 ff ff       	call   aa90 <_ZNSt3__13maxB8nn210000ImEERKT_S3_S3_>
   18953:	48 8b 38             	mov    (%rax),%rdi
   18956:	e8 95 f7 ff ff       	call   180f0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendB8nn210000Em>
   1895b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   18962:	eb 0b                	jmp    1896f <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm+0xaf>
   18964:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18968:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1896f:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   18973:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  size_type __cap =
   1897a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  auto __allocation = std::__allocate_at_least(__alloc_, __cap + 1);
   1897e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   18982:	48 83 c6 01          	add    $0x1,%rsi
   18986:	e8 25 f7 ff ff       	call   180b0 <_ZNSt3__119__allocate_at_leastB8nn210000INS_9allocatorIcEEEEDaRT_m>
   1898b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1898f:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  pointer __p       = __allocation.ptr;
   18993:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   18997:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  __begin_lifetime(__p, __allocation.count);
   1899b:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   1899f:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   189a3:	e8 a8 f7 ff ff       	call   18150 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__begin_lifetimeB8nn210000EPcm>
  if (__n_copy != 0)
   189a8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   189ad:	74 2c                	je     189db <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm+0x11b>
    traits_type::copy(std::__to_address(__p), std::__to_address(__old_p), __n_copy);
   189af:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   189b3:	e8 d8 f7 ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   189b8:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   189bf:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   189c3:	e8 c8 f7 ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   189c8:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
   189cf:	48 89 c6             	mov    %rax,%rsi
   189d2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   189d6:	e8 85 f7 ff ff       	call   18160 <_ZNSt3__111char_traitsIcE4copyB8nn210000EPcPKcm>
  size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
   189db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   189df:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
   189e3:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
   189e7:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  if (__sec_cp_sz != 0)
   189eb:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
   189f0:	74 3c                	je     18a2e <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm+0x16e>
        std::__to_address(__p) + __n_copy + __n_add, std::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
   189f2:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   189f6:	e8 95 f7 ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   189fb:	48 03 45 d8          	add    -0x28(%rbp),%rax
   189ff:	48 03 45 10          	add    0x10(%rbp),%rax
   18a03:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   18a0a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   18a0e:	e8 7d f7 ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   18a13:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   18a1a:	48 89 c6             	mov    %rax,%rsi
   18a1d:	48 03 75 d8          	add    -0x28(%rbp),%rsi
   18a21:	48 03 75 d0          	add    -0x30(%rbp),%rsi
   18a25:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    traits_type::copy(
   18a29:	e8 32 f7 ff ff       	call   18160 <_ZNSt3__111char_traitsIcE4copyB8nn210000EPcPKcm>
  if (__old_cap + 1 != __min_cap)
   18a2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18a32:	48 83 c0 01          	add    $0x1,%rax
   18a36:	48 83 f8 17          	cmp    $0x17,%rax
   18a3a:	74 15                	je     18a51 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm+0x191>
   18a3c:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    __alloc_traits::deallocate(__alloc_, __old_p, __old_cap + 1);
   18a40:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   18a44:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18a48:	48 83 c2 01          	add    $0x1,%rdx
   18a4c:	e8 4f f4 ff ff       	call   17ea0 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE10deallocateB8nn210000ERS2_Pcm>
   18a51:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  __set_long_pointer(__p);
   18a55:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
   18a59:	e8 c2 f7 ff ff       	call   18220 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerB8nn210000EPc>
   18a5e:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  __set_long_cap(__allocation.count);
   18a62:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   18a66:	e8 65 f7 ff ff       	call   181d0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capB8nn210000Em>
}
   18a6b:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   18a72:	5d                   	pop    %rbp
   18a73:	c3                   	ret
   18a74:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18a7b:	00 00 00 
   18a7e:	66 90                	xchg   %ax,%ax

0000000000018a80 <_ZNSt3__118__make_scope_guardB8nn210000INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEEENS_13__scope_guardIT_EES9_>:
  __scope_guard(__scope_guard&&) = delete;
#endif
};

template <class _Func>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 __scope_guard<_Func> __make_scope_guard(_Func __func) {
   18a80:	55                   	push   %rbp
   18a81:	48 89 e5             	mov    %rsp,%rbp
   18a84:	48 83 ec 30          	sub    $0x30,%rsp
   18a88:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   18a8c:	48 89 f8             	mov    %rdi,%rax
   18a8f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18a93:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18a97:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18a9b:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  return __scope_guard<_Func>(std::move(__func));
   18a9f:	e8 3c 05 00 00       	call   18fe0 <_ZNSt3__14moveB8nn210000IRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEEEOu20__remove_reference_tIT_EOS9_>
   18aa4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   18aa8:	48 8b 00             	mov    (%rax),%rax
   18aab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   18aaf:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   18ab3:	e8 38 05 00 00       	call   18ff0 <_ZNSt3__113__scope_guardINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEEC2B8nn210000ES7_>
   18ab8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18abc:	48 83 c4 30          	add    $0x30,%rsp
   18ac0:	5d                   	pop    %rbp
   18ac1:	c3                   	ret
   18ac2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18ac9:	00 00 00 
   18acc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000018ad0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeC2B8nn210000ERS5_>:
    _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 __annotate_new_size(basic_string& __str) : __str_(__str) {}
   18ad0:	55                   	push   %rbp
   18ad1:	48 89 e5             	mov    %rsp,%rbp
   18ad4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18ad8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18adc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ae0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18ae4:	48 89 08             	mov    %rcx,(%rax)
   18ae7:	5d                   	pop    %rbp
   18ae8:	c3                   	ret
   18ae9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000018af0 <_ZNSt3__113__scope_guardINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEED2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 ~__scope_guard() { __func_(); }
   18af0:	55                   	push   %rbp
   18af1:	48 89 e5             	mov    %rsp,%rbp
   18af4:	48 83 ec 10          	sub    $0x10,%rsp
   18af8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18afc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18b00:	e8 2b 05 00 00       	call   19030 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeclB8nn210000Ev>
   18b05:	48 83 c4 10          	add    $0x10,%rsp
   18b09:	5d                   	pop    %rbp
   18b0a:	c3                   	ret
   18b0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000018b10 <_ZNSt9exceptionC2B8nn210000Ev>:
// On all other platforms, we define our own std::exception and std::bad_exception types
// regardless of whether exceptions are turned on as a language feature.

class _LIBCPP_EXPORTED_FROM_ABI exception {
public:
  _LIBCPP_HIDE_FROM_ABI exception() _NOEXCEPT {}
   18b10:	55                   	push   %rbp
   18b11:	48 89 e5             	mov    %rsp,%rbp
   18b14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18b18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18b1c:	48 8d 0d 5d 8a 01 00 	lea    0x18a5d(%rip),%rcx        # 31580 <_ZTVSt9exception+0x10>
   18b23:	48 89 08             	mov    %rcx,(%rax)
   18b26:	5d                   	pop    %rbp
   18b27:	c3                   	ret
   18b28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   18b2f:	00 

0000000000018b30 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_pointer __get_pointer() const _NOEXCEPT {
   18b30:	55                   	push   %rbp
   18b31:	48 89 e5             	mov    %rsp,%rbp
   18b34:	48 83 ec 20          	sub    $0x20,%rsp
   18b38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18b3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18b40:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    return __is_long() ? __get_long_pointer() : __get_short_pointer();
   18b44:	e8 b7 f0 ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   18b49:	a8 01                	test   $0x1,%al
   18b4b:	75 02                	jne    18b4f <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev+0x1f>
   18b4d:	eb 0f                	jmp    18b5e <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev+0x2e>
   18b4f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18b53:	e8 08 f1 ff ff       	call   17c60 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerB8nn210000Ev>
   18b58:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   18b5c:	eb 0d                	jmp    18b6b <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerB8nn210000Ev+0x3b>
   18b5e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18b62:	e8 19 00 00 00       	call   18b80 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerB8nn210000Ev>
   18b67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   18b6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18b6f:	48 83 c4 20          	add    $0x20,%rsp
   18b73:	5d                   	pop    %rbp
   18b74:	c3                   	ret
   18b75:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18b7c:	00 00 00 
   18b7f:	90                   	nop

0000000000018b80 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerB8nn210000Ev>:
  __get_short_pointer() const _NOEXCEPT {
   18b80:	55                   	push   %rbp
   18b81:	48 89 e5             	mov    %rsp,%rbp
   18b84:	48 83 ec 10          	sub    $0x10,%rsp
   18b88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18b8c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return _LIBCPP_ASAN_VOLATILE_WRAPPER(pointer_traits<const_pointer>::pointer_to(__rep_.__s.__data_[0]));
   18b90:	48 83 c7 01          	add    $0x1,%rdi
   18b94:	e8 07 00 00 00       	call   18ba0 <_ZNSt3__114pointer_traitsIPKcE10pointer_toB8nn210000ERS1_>
   18b99:	48 83 c4 10          	add    $0x10,%rsp
   18b9d:	5d                   	pop    %rbp
   18b9e:	c3                   	ret
   18b9f:	90                   	nop

0000000000018ba0 <_ZNSt3__114pointer_traitsIPKcE10pointer_toB8nn210000ERS1_>:
  pointer_to(__conditional_t<is_void<element_type>::value, __nat, element_type>& __r) _NOEXCEPT {
   18ba0:	55                   	push   %rbp
   18ba1:	48 89 e5             	mov    %rsp,%rbp
   18ba4:	48 83 ec 10          	sub    $0x10,%rsp
   18ba8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::addressof(__r);
   18bac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18bb0:	e8 0b 00 00 00       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   18bb5:	48 83 c4 10          	add    $0x10,%rsp
   18bb9:	5d                   	pop    %rbp
   18bba:	c3                   	ret
   18bbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000018bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
   18bc0:	55                   	push   %rbp
   18bc1:	48 89 e5             	mov    %rsp,%rbp
   18bc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
   18bc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18bcc:	5d                   	pop    %rbp
   18bcd:	c3                   	ret
   18bce:	66 90                	xchg   %ax,%ax

0000000000018bd0 <_ZNSt3__19allocatorIcE10deallocateB8nn210000EPcm>:
    static_assert(sizeof(_Tp) >= 0, "cannot allocate memory for an incomplete type");
    return {allocate(__n), __n};
  }
#endif

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void deallocate(_Tp* __p, size_t __n) _NOEXCEPT {
   18bd0:	55                   	push   %rbp
   18bd1:	48 89 e5             	mov    %rsp,%rbp
   18bd4:	48 83 ec 20          	sub    $0x20,%rsp
   18bd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18bdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18be0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if (__libcpp_is_constant_evaluated()) {
      ::operator delete(__p);
    } else {
      std::__libcpp_deallocate<_Tp>(__p, __element_count(__n));
   18be4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18be8:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   18bec:	ba 01 00 00 00       	mov    $0x1,%edx
   18bf1:	e8 0a 00 00 00       	call   18c00 <_ZNSt3__119__libcpp_deallocateB8nn210000IcEEvPNS_15__type_identityIT_E4typeENS_15__element_countEm>
    }
  }
   18bf6:	48 83 c4 20          	add    $0x20,%rsp
   18bfa:	5d                   	pop    %rbp
   18bfb:	c3                   	ret
   18bfc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000018c00 <_ZNSt3__119__libcpp_deallocateB8nn210000IcEEvPNS_15__type_identityIT_E4typeENS_15__element_countEm>:
#  define _LIBCPP_ONLY_IF_SIZED_DEALLOCATION(...) /* nothing */
#endif

template <class _Tp>
inline _LIBCPP_HIDE_FROM_ABI void __libcpp_deallocate(
    __type_identity_t<_Tp>* __ptr, __element_count __n, size_t __align = _LIBCPP_ALIGNOF(_Tp)) _NOEXCEPT {
   18c00:	55                   	push   %rbp
   18c01:	48 89 e5             	mov    %rsp,%rbp
   18c04:	48 83 ec 30          	sub    $0x30,%rsp
   18c08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18c0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18c10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  size_t __size = static_cast<size_t>(__n) * sizeof(_Tp);
   18c14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18c18:	48 c1 e0 00          	shl    $0x0,%rax
   18c1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  (void)__size;
#if !_LIBCPP_HAS_ALIGNED_ALLOCATION
  (void)__align;
  return std::__libcpp_operator_delete(__ptr _LIBCPP_ONLY_IF_SIZED_DEALLOCATION(, __size));
#else
  if (__is_overaligned_for_new(__align)) {
   18c20:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   18c24:	e8 47 b2 ff ff       	call   13e70 <_ZNSt3__124__is_overaligned_for_newB8nn210000Em>
   18c29:	a8 01                	test   $0x1,%al
   18c2b:	75 02                	jne    18c2f <_ZNSt3__119__libcpp_deallocateB8nn210000IcEEvPNS_15__type_identityIT_E4typeENS_15__element_countEm+0x2f>
   18c2d:	eb 1b                	jmp    18c4a <_ZNSt3__119__libcpp_deallocateB8nn210000IcEEvPNS_15__type_identityIT_E4typeENS_15__element_countEm+0x4a>
    const align_val_t __align_val = static_cast<align_val_t>(__align);
   18c2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18c33:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    return std::__libcpp_operator_delete(__ptr _LIBCPP_ONLY_IF_SIZED_DEALLOCATION(, __size), __align_val);
   18c37:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18c3b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   18c3f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18c43:	e8 18 00 00 00       	call   18c60 <_ZNSt3__124__libcpp_operator_deleteB8nn210000IJPcmSt11align_val_tEEEvDpT_>
   18c48:	eb 0d                	jmp    18c57 <_ZNSt3__119__libcpp_deallocateB8nn210000IcEEvPNS_15__type_identityIT_E4typeENS_15__element_countEm+0x57>
  } else {
    return std::__libcpp_operator_delete(__ptr _LIBCPP_ONLY_IF_SIZED_DEALLOCATION(, __size));
   18c4a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18c4e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   18c52:	e8 39 00 00 00       	call   18c90 <_ZNSt3__124__libcpp_operator_deleteB8nn210000IJPcmEEEvDpT_>
  }
#endif
}
   18c57:	48 83 c4 30          	add    $0x30,%rsp
   18c5b:	5d                   	pop    %rbp
   18c5c:	c3                   	ret
   18c5d:	0f 1f 00             	nopl   (%rax)

0000000000018c60 <_ZNSt3__124__libcpp_operator_deleteB8nn210000IJPcmSt11align_val_tEEEvDpT_>:
_LIBCPP_HIDE_FROM_ABI void __libcpp_operator_delete(_Args... __args) _NOEXCEPT {
   18c60:	55                   	push   %rbp
   18c61:	48 89 e5             	mov    %rsp,%rbp
   18c64:	48 83 ec 20          	sub    $0x20,%rsp
   18c68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18c6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18c70:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  __builtin_operator_delete(__args...);
   18c74:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18c78:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   18c7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18c80:	e8 1b 05 00 00       	call   191a0 <_ZdlPvmSt11align_val_t>
}
   18c85:	48 83 c4 20          	add    $0x20,%rsp
   18c89:	5d                   	pop    %rbp
   18c8a:	c3                   	ret
   18c8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000018c90 <_ZNSt3__124__libcpp_operator_deleteB8nn210000IJPcmEEEvDpT_>:
_LIBCPP_HIDE_FROM_ABI void __libcpp_operator_delete(_Args... __args) _NOEXCEPT {
   18c90:	55                   	push   %rbp
   18c91:	48 89 e5             	mov    %rsp,%rbp
   18c94:	48 83 ec 10          	sub    $0x10,%rsp
   18c98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18c9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  __builtin_operator_delete(__args...);
   18ca0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18ca4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   18ca8:	e8 e3 04 00 00       	call   19190 <_ZdlPvm>
}
   18cad:	48 83 c4 10          	add    $0x10,%rsp
   18cb1:	5d                   	pop    %rbp
   18cb2:	c3                   	ret
   18cb3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18cba:	00 00 00 
   18cbd:	0f 1f 00             	nopl   (%rax)

0000000000018cc0 <_ZNSt3__114pointer_traitsIPcE10pointer_toB8nn210000ERc>:
  pointer_to(__conditional_t<is_void<element_type>::value, __nat, element_type>& __r) _NOEXCEPT {
   18cc0:	55                   	push   %rbp
   18cc1:	48 89 e5             	mov    %rsp,%rbp
   18cc4:	48 83 ec 10          	sub    $0x10,%rsp
   18cc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::addressof(__r);
   18ccc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18cd0:	e8 0b 00 00 00       	call   18ce0 <_ZNSt3__19addressofB8nn210000IcEEPT_RS1_>
   18cd5:	48 83 c4 10          	add    $0x10,%rsp
   18cd9:	5d                   	pop    %rbp
   18cda:	c3                   	ret
   18cdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000018ce0 <_ZNSt3__19addressofB8nn210000IcEEPT_RS1_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
   18ce0:	55                   	push   %rbp
   18ce1:	48 89 e5             	mov    %rsp,%rbp
   18ce4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
   18ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18cec:	5d                   	pop    %rbp
   18ced:	c3                   	ret
   18cee:	66 90                	xchg   %ax,%ax

0000000000018cf0 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE8max_sizeB8nn210000IS2_TnNS_9enable_ifIXnt16__has_max_size_vIKT_EEiE4typeELi0EEEmRKS2_>:
    _LIBCPP_SUPPRESS_DEPRECATED_PUSH
    return __a.max_size();
    _LIBCPP_SUPPRESS_DEPRECATED_POP
  }
  template <class _Ap = _Alloc, __enable_if_t<!__has_max_size_v<const _Ap>, int> = 0>
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 static size_type max_size(const allocator_type&) _NOEXCEPT {
   18cf0:	55                   	push   %rbp
   18cf1:	48 89 e5             	mov    %rsp,%rbp
   18cf4:	48 83 ec 10          	sub    $0x10,%rsp
   18cf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return numeric_limits<size_type>::max() / sizeof(value_type);
   18cfc:	e8 4f 1c ff ff       	call   a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>
   18d01:	48 c1 e8 00          	shr    $0x0,%rax
   18d05:	48 83 c4 10          	add    $0x10,%rsp
   18d09:	5d                   	pop    %rbp
   18d0a:	c3                   	ret
   18d0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000018d10 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE17allocate_at_leastB8nn210000IS2_EENS_17allocation_resultIPcmEERT_m>:
  allocate_at_least(_Ap& __alloc, size_type __n) {
   18d10:	55                   	push   %rbp
   18d11:	48 89 e5             	mov    %rsp,%rbp
   18d14:	48 83 ec 20          	sub    $0x20,%rsp
   18d18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18d1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return __alloc.allocate_at_least(__n);
   18d20:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   18d24:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   18d28:	e8 23 00 00 00       	call   18d50 <_ZNSt3__19allocatorIcE17allocate_at_leastB8nn210000Em>
   18d2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   18d31:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   18d35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18d39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   18d3d:	48 83 c4 20          	add    $0x20,%rsp
   18d41:	5d                   	pop    %rbp
   18d42:	c3                   	ret
   18d43:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18d4a:	00 00 00 
   18d4d:	0f 1f 00             	nopl   (%rax)

0000000000018d50 <_ZNSt3__19allocatorIcE17allocate_at_leastB8nn210000Em>:
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr allocation_result<_Tp*> allocate_at_least(size_t __n) {
   18d50:	55                   	push   %rbp
   18d51:	48 89 e5             	mov    %rsp,%rbp
   18d54:	48 83 ec 20          	sub    $0x20,%rsp
   18d58:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18d5c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   18d60:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    return {allocate(__n), __n};
   18d64:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   18d68:	e8 23 00 00 00       	call   18d90 <_ZNSt3__19allocatorIcE8allocateB8nn210000Em>
   18d6d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   18d71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18d75:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18d79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18d7d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   18d81:	48 83 c4 20          	add    $0x20,%rsp
   18d85:	5d                   	pop    %rbp
   18d86:	c3                   	ret
   18d87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   18d8e:	00 00 

0000000000018d90 <_ZNSt3__19allocatorIcE8allocateB8nn210000Em>:
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _Tp* allocate(size_t __n) {
   18d90:	55                   	push   %rbp
   18d91:	48 89 e5             	mov    %rsp,%rbp
   18d94:	48 83 ec 20          	sub    $0x20,%rsp
   18d98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18d9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18da0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    if (__n > allocator_traits<allocator>::max_size(*this))
   18da4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18da8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   18dac:	e8 3f ff ff ff       	call   18cf0 <_ZNSt3__116allocator_traitsINS_9allocatorIcEEE8max_sizeB8nn210000IS2_TnNS_9enable_ifIXnt16__has_max_size_vIKT_EEiE4typeELi0EEEmRKS2_>
   18db1:	48 89 c1             	mov    %rax,%rcx
   18db4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18db8:	48 39 c8             	cmp    %rcx,%rax
   18dbb:	76 05                	jbe    18dc2 <_ZNSt3__19allocatorIcE8allocateB8nn210000Em+0x32>
      std::__throw_bad_array_new_length();
   18dbd:	e8 8e b0 ff ff       	call   13e50 <_ZSt28__throw_bad_array_new_lengthB8nn210000v>
      return std::__libcpp_allocate<_Tp>(__element_count(__n));
   18dc2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18dc6:	be 01 00 00 00       	mov    $0x1,%esi
   18dcb:	e8 10 00 00 00       	call   18de0 <_ZNSt3__117__libcpp_allocateB8nn210000IcEEPT_NS_15__element_countEm>
   18dd0:	48 83 c4 20          	add    $0x20,%rsp
   18dd4:	5d                   	pop    %rbp
   18dd5:	c3                   	ret
   18dd6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18ddd:	00 00 00 

0000000000018de0 <_ZNSt3__117__libcpp_allocateB8nn210000IcEEPT_NS_15__element_countEm>:
__libcpp_allocate(__element_count __n, size_t __align = _LIBCPP_ALIGNOF(_Tp)) {
   18de0:	55                   	push   %rbp
   18de1:	48 89 e5             	mov    %rsp,%rbp
   18de4:	48 83 ec 30          	sub    $0x30,%rsp
   18de8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   18dec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  size_t __size = static_cast<size_t>(__n) * sizeof(_Tp);
   18df0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18df4:	48 c1 e0 00          	shl    $0x0,%rax
   18df8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (__is_overaligned_for_new(__align)) {
   18dfc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   18e00:	e8 6b b0 ff ff       	call   13e70 <_ZNSt3__124__is_overaligned_for_newB8nn210000Em>
   18e05:	a8 01                	test   $0x1,%al
   18e07:	75 02                	jne    18e0b <_ZNSt3__117__libcpp_allocateB8nn210000IcEEPT_NS_15__element_countEm+0x2b>
   18e09:	eb 1b                	jmp    18e26 <_ZNSt3__117__libcpp_allocateB8nn210000IcEEPT_NS_15__element_countEm+0x46>
    const align_val_t __align_val = static_cast<align_val_t>(__align);
   18e0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18e0f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    return static_cast<_Tp*>(std::__libcpp_operator_new(__size, __align_val));
   18e13:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   18e17:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   18e1b:	e8 70 b0 ff ff       	call   13e90 <_ZNSt3__121__libcpp_operator_newB8nn210000IJmSt11align_val_tEEEPvDpT_>
   18e20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18e24:	eb 0d                	jmp    18e33 <_ZNSt3__117__libcpp_allocateB8nn210000IcEEPT_NS_15__element_countEm+0x53>
  return static_cast<_Tp*>(std::__libcpp_operator_new(__size));
   18e26:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   18e2a:	e8 91 b0 ff ff       	call   13ec0 <_ZNSt3__121__libcpp_operator_newB8nn210000IJmEEEPvDpT_>
   18e2f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   18e33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e37:	48 83 c4 30          	add    $0x30,%rsp
   18e3b:	5d                   	pop    %rbp
   18e3c:	c3                   	ret
   18e3d:	0f 1f 00             	nopl   (%rax)

0000000000018e40 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__align_itB8nn210000ILm8EEEmm>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type __align_it(size_type __s) _NOEXCEPT {
   18e40:	55                   	push   %rbp
   18e41:	48 89 e5             	mov    %rsp,%rbp
   18e44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return (__s + (__a - 1)) & ~(__a - 1);
   18e48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e4c:	48 83 c0 07          	add    $0x7,%rax
   18e50:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
   18e54:	5d                   	pop    %rbp
   18e55:	c3                   	ret
   18e56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18e5d:	00 00 00 

0000000000018e60 <_ZNSt3__119__constexpr_memmoveB8nn210000IcKcEEPT_S3_PT0_NS_15__element_countE>:
__constexpr_memmove(_Tp* __dest, _Up* __src, __element_count __n) {
   18e60:	55                   	push   %rbp
   18e61:	48 89 e5             	mov    %rsp,%rbp
   18e64:	48 83 ec 20          	sub    $0x20,%rsp
   18e68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18e6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18e70:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  size_t __count = static_cast<size_t>(__n);
   18e74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18e78:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  } else if (__count > 0) {
   18e7c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   18e81:	76 1d                	jbe    18ea0 <_ZNSt3__119__constexpr_memmoveB8nn210000IcKcEEPT_S3_PT0_NS_15__element_countE+0x40>
    ::__builtin_memmove(__dest, __src, (__count - 1) * sizeof(_Tp) + __datasizeof_v<_Tp>);
   18e83:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   18e87:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   18e8b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   18e8f:	48 83 ea 01          	sub    $0x1,%rdx
   18e93:	48 c1 e2 00          	shl    $0x0,%rdx
   18e97:	48 83 c2 01          	add    $0x1,%rdx
   18e9b:	e8 20 03 00 00       	call   191c0 <memmove>
  return __dest;
   18ea0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ea4:	48 83 c4 20          	add    $0x20,%rsp
   18ea8:	5d                   	pop    %rbp
   18ea9:	c3                   	ret
   18eaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000018eb0 <_ZNSt3__16fill_nB8nn210000IPcmcEET_S2_T0_RKT1_>:
fill_n(_OutputIterator __first, _Size __n, const _Tp& __value) {
   18eb0:	55                   	push   %rbp
   18eb1:	48 89 e5             	mov    %rsp,%rbp
   18eb4:	48 83 ec 20          	sub    $0x20,%rsp
   18eb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18ebc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18ec0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  return std::__fill_n(__first, std::__convert_to_integral(__n), __value);
   18ec4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ec8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18ecc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   18ed0:	e8 6b 00 00 00       	call   18f40 <_ZNSt3__121__convert_to_integralB8nn210000Em>
   18ed5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   18ed9:	48 89 c6             	mov    %rax,%rsi
   18edc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18ee0:	e8 0b 00 00 00       	call   18ef0 <_ZNSt3__18__fill_nB8nn210000IPcmcEET_S2_T0_RKT1_>
   18ee5:	48 83 c4 20          	add    $0x20,%rsp
   18ee9:	5d                   	pop    %rbp
   18eea:	c3                   	ret
   18eeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000018ef0 <_ZNSt3__18__fill_nB8nn210000IPcmcEET_S2_T0_RKT1_>:
__fill_n(_OutputIterator __first, _Size __n, const _Tp& __value) {
   18ef0:	55                   	push   %rbp
   18ef1:	48 89 e5             	mov    %rsp,%rbp
   18ef4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18ef8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18efc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  for (; __n > 0; ++__first, (void)--__n)
   18f00:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   18f05:	76 26                	jbe    18f2d <_ZNSt3__18__fill_nB8nn210000IPcmcEET_S2_T0_RKT1_+0x3d>
    *__first = __value;
   18f07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18f0b:	8a 08                	mov    (%rax),%cl
   18f0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f11:	88 08                	mov    %cl,(%rax)
  for (; __n > 0; ++__first, (void)--__n)
   18f13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f17:	48 83 c0 01          	add    $0x1,%rax
   18f1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18f1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18f23:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   18f27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   18f2b:	eb d3                	jmp    18f00 <_ZNSt3__18__fill_nB8nn210000IPcmcEET_S2_T0_RKT1_+0x10>
  return __first;
   18f2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f31:	5d                   	pop    %rbp
   18f32:	c3                   	ret
   18f33:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18f3a:	00 00 00 
   18f3d:	0f 1f 00             	nopl   (%rax)

0000000000018f40 <_ZNSt3__121__convert_to_integralB8nn210000Em>:

inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR unsigned long __convert_to_integral(unsigned long __val) {
   18f40:	55                   	push   %rbp
   18f41:	48 89 e5             	mov    %rsp,%rbp
   18f44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __val;
   18f48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f4c:	5d                   	pop    %rbp
   18f4d:	c3                   	ret
   18f4e:	66 90                	xchg   %ax,%ax

0000000000018f50 <_ZNSt3__17forwardB8nn210000IRPKcEEOT_Ru20__remove_reference_tIS4_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   18f50:	55                   	push   %rbp
   18f51:	48 89 e5             	mov    %rsp,%rbp
   18f54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   18f58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f5c:	5d                   	pop    %rbp
   18f5d:	c3                   	ret
   18f5e:	66 90                	xchg   %ax,%ax

0000000000018f60 <_ZNSt3__17forwardB8nn210000IRKcEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   18f60:	55                   	push   %rbp
   18f61:	48 89 e5             	mov    %rsp,%rbp
   18f64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   18f68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f6c:	5d                   	pop    %rbp
   18f6d:	c3                   	ret
   18f6e:	66 90                	xchg   %ax,%ax

0000000000018f70 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4sizeB8nn210000Ev>:
  _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_HIDE_FROM_ABI const_reverse_iterator crend() const _NOEXCEPT {
    return const_reverse_iterator(cbegin());
  }

  // [string.view.capacity], capacity
  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI size_type size() const _NOEXCEPT { return __size_; }
   18f70:	55                   	push   %rbp
   18f71:	48 89 e5             	mov    %rsp,%rbp
   18f74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f7c:	48 8b 40 08          	mov    0x8(%rax),%rax
   18f80:	5d                   	pop    %rbp
   18f81:	c3                   	ret
   18f82:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18f89:	00 00 00 
   18f8c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000018f90 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4dataB8nn210000Ev>:

  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI const_reference back() const _NOEXCEPT {
    return _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(!empty(), "string_view::back(): string is empty"), __data_[__size_ - 1];
  }

  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI const_pointer data() const _NOEXCEPT { return __data_; }
   18f90:	55                   	push   %rbp
   18f91:	48 89 e5             	mov    %rsp,%rbp
   18f94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f9c:	48 8b 00             	mov    (%rax),%rax
   18f9f:	5d                   	pop    %rbp
   18fa0:	c3                   	ret
   18fa1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18fa8:	00 00 00 
   18fab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000018fb0 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ENS3_14__assume_validEPKcm>:
  // for use within the class, when the class invariants already guarantee the resulting object is valid. The compiler
  // usually cannot eliminate the redundant checks because it does not know class invariants.
  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI
  basic_string_view(__assume_valid, const _CharT* __s, size_type __len) _NOEXCEPT
      : __data_(__s),
        __size_(__len) {}
   18fb0:	55                   	push   %rbp
   18fb1:	48 89 e5             	mov    %rsp,%rbp
   18fb4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   18fb8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   18fbc:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   18fc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      : __data_(__s),
   18fc4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   18fc8:	48 89 08             	mov    %rcx,(%rax)
        __size_(__len) {}
   18fcb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   18fcf:	48 89 48 08          	mov    %rcx,0x8(%rax)
   18fd3:	5d                   	pop    %rbp
   18fd4:	c3                   	ret
   18fd5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   18fdc:	00 00 00 
   18fdf:	90                   	nop

0000000000018fe0 <_ZNSt3__14moveB8nn210000IRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEEEOu20__remove_reference_tIT_EOS9_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   18fe0:	55                   	push   %rbp
   18fe1:	48 89 e5             	mov    %rsp,%rbp
   18fe4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   18fe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18fec:	5d                   	pop    %rbp
   18fed:	c3                   	ret
   18fee:	66 90                	xchg   %ax,%ax

0000000000018ff0 <_ZNSt3__113__scope_guardINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEEC2B8nn210000ES7_>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR explicit __scope_guard(_Func __func) : __func_(std::move(__func)) {}
   18ff0:	55                   	push   %rbp
   18ff1:	48 89 e5             	mov    %rsp,%rbp
   18ff4:	48 83 ec 20          	sub    $0x20,%rsp
   18ff8:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   18ffc:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   19000:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19004:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   19008:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   1900c:	e8 cf ff ff ff       	call   18fe0 <_ZNSt3__14moveB8nn210000IRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeEEEOu20__remove_reference_tIT_EOS9_>
   19011:	48 89 c1             	mov    %rax,%rcx
   19014:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19018:	48 8b 09             	mov    (%rcx),%rcx
   1901b:	48 89 08             	mov    %rcx,(%rax)
   1901e:	48 83 c4 20          	add    $0x20,%rsp
   19022:	5d                   	pop    %rbp
   19023:	c3                   	ret
   19024:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1902b:	00 00 00 
   1902e:	66 90                	xchg   %ax,%ax

0000000000019030 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__annotate_new_sizeclB8nn210000Ev>:
    _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void operator()() { __str_.__annotate_new(__str_.size()); }
   19030:	55                   	push   %rbp
   19031:	48 89 e5             	mov    %rsp,%rbp
   19034:	48 83 ec 10          	sub    $0x10,%rsp
   19038:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1903c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19040:	48 8b 08             	mov    (%rax),%rcx
   19043:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   19047:	48 8b 38             	mov    (%rax),%rdi
   1904a:	e8 51 ec ff ff       	call   17ca0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev>
   1904f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   19053:	48 89 c6             	mov    %rax,%rsi
   19056:	e8 c5 eb ff ff       	call   17c20 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__annotate_newB8nn210000Em>
   1905b:	48 83 c4 10          	add    $0x10,%rsp
   1905f:	5d                   	pop    %rbp
   19060:	c3                   	ret
   19061:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19068:	00 00 00 
   1906b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000019070 <_ZNSt3__120__throw_length_errorB8nn210000EPKc>:
[[__noreturn__]] inline _LIBCPP_HIDE_FROM_ABI void __throw_length_error(const char* __msg) {
   19070:	55                   	push   %rbp
   19071:	48 89 e5             	mov    %rsp,%rbp
   19074:	48 83 ec 10          	sub    $0x10,%rsp
   19078:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  _LIBCPP_VERBOSE_ABORT("length_error was thrown in -fno-exceptions mode with message \"%s\"", __msg);
   1907c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   19080:	48 8d 3d 52 60 01 00 	lea    0x16052(%rip),%rdi        # 2f0d9 <.L.str.6>
   19087:	31 c0                	xor    %eax,%eax
   19089:	e8 42 eb ff ff       	call   17bd0 <_ZNSt3__122__libcpp_verbose_abortEPKcz>
   1908e:	66 90                	xchg   %ax,%ax

0000000000019090 <_purecall>:
#include <boost/assert/source_location.hpp>

void *__dso_handle;

extern "C" {
    auto __cdecl _purecall() -> void {}
   19090:	55                   	push   %rbp
   19091:	48 89 e5             	mov    %rsp,%rbp
   19094:	5d                   	pop    %rbp
   19095:	c3                   	ret
   19096:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1909d:	00 00 00 

00000000000190a0 <__cxa_pure_virtual>:
    auto __cxa_pure_virtual() -> void {}
   190a0:	55                   	push   %rbp
   190a1:	48 89 e5             	mov    %rsp,%rbp
   190a4:	5d                   	pop    %rbp
   190a5:	c3                   	ret
   190a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   190ad:	00 00 00 

00000000000190b0 <__cxa_atexit>:
    auto __cxa_atexit(void (*dtor) (void *), void *arg, void *dso) -> void {}
   190b0:	55                   	push   %rbp
   190b1:	48 89 e5             	mov    %rsp,%rbp
   190b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   190b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   190bc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   190c0:	5d                   	pop    %rbp
   190c1:	c3                   	ret
   190c2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   190c9:	1f 84 00 00 00 00 00 

00000000000190d0 <__cxa_finalize>:
    auto __cxa_finalize(void *f) -> void {}
   190d0:	55                   	push   %rbp
   190d1:	48 89 e5             	mov    %rsp,%rbp
   190d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   190d8:	5d                   	pop    %rbp
   190d9:	c3                   	ret
   190da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000190e0 <__cxa_guard_acquire>:

    /* guard variables */
    /* The ABI requires a 64-bit type.  */
    __extension__ typedef int guard __attribute__((mode(__DI__)));

    auto __cxa_guard_acquire(guard *g) -> int { return 0; }
   190e0:	55                   	push   %rbp
   190e1:	48 89 e5             	mov    %rsp,%rbp
   190e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   190e8:	31 c0                	xor    %eax,%eax
   190ea:	5d                   	pop    %rbp
   190eb:	c3                   	ret
   190ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000190f0 <__cxa_guard_release>:
    void __cxa_guard_release(guard *g) {}
   190f0:	55                   	push   %rbp
   190f1:	48 89 e5             	mov    %rsp,%rbp
   190f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   190f8:	5d                   	pop    %rbp
   190f9:	c3                   	ret
   190fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000019100 <__cxa_guard_abort>:
    void __cxa_guard_abort(guard *) {}
   19100:	55                   	push   %rbp
   19101:	48 89 e5             	mov    %rsp,%rbp
   19104:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19108:	5d                   	pop    %rbp
   19109:	c3                   	ret
   1910a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000019110 <atexit>:
    
    int atexit(void (*func)(void)) noexcept { return 0; }
   19110:	55                   	push   %rbp
   19111:	48 89 e5             	mov    %rsp,%rbp
   19114:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19118:	31 c0                	xor    %eax,%eax
   1911a:	5d                   	pop    %rbp
   1911b:	c3                   	ret
   1911c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000019120 <_Znwm>:

#include <new>

[[gnu::weak]]
auto operator new(std::size_t) -> void *
{  ours::panic(__func__);  }
   19120:	55                   	push   %rbp
   19121:	48 89 e5             	mov    %rsp,%rbp
   19124:	48 83 ec 20          	sub    $0x20,%rsp
   19128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1912c:	48 8d 35 df 5e 01 00 	lea    0x15edf(%rip),%rsi        # 2f012 <.L__func__._Znwm>
   19133:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   19137:	e8 44 a1 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   1913c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   19140:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   19144:	e8 e7 a0 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   19149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000019150 <_ZnwmSt11align_val_t>:

[[gnu::weak]]
auto operator new(std::size_t, std::align_val_t) -> void *
{  ours::panic(__func__);  }
   19150:	55                   	push   %rbp
   19151:	48 89 e5             	mov    %rsp,%rbp
   19154:	48 83 ec 20          	sub    $0x20,%rsp
   19158:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1915c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19160:	48 8d 35 ab 5e 01 00 	lea    0x15eab(%rip),%rsi        # 2f012 <.L__func__._Znwm>
   19167:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1916b:	e8 10 a1 fe ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   19170:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   19174:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   19178:	e8 b3 a0 fe ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   1917d:	0f 1f 00             	nopl   (%rax)

[[gnu::weak]]
auto operator delete(void *) -> void
{}
   19180:	55                   	push   %rbp
   19181:	48 89 e5             	mov    %rsp,%rbp
   19184:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19188:	5d                   	pop    %rbp
   19189:	c3                   	ret
   1918a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000019190 <_ZdlPvm>:

[[gnu::weak]]
auto operator delete(void *, std::size_t) -> void
{}
   19190:	55                   	push   %rbp
   19191:	48 89 e5             	mov    %rsp,%rbp
   19194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19198:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1919c:	5d                   	pop    %rbp
   1919d:	c3                   	ret
   1919e:	66 90                	xchg   %ax,%ax

00000000000191a0 <_ZdlPvmSt11align_val_t>:

[[gnu::weak]]
auto operator delete(void *, std::size_t, std::align_val_t) -> void
{}
   191a0:	55                   	push   %rbp
   191a1:	48 89 e5             	mov    %rsp,%rbp
   191a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   191a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   191ac:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   191b0:	5d                   	pop    %rbp
   191b1:	c3                   	ret
   191b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   191b9:	00 00 00 
   191bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000191c0 <memmove>:
#include <cstring>
#include <ours/config.hpp>

NO_MANGLE
auto memmove(void *d, void const *s, size_t n) -> void * {
   191c0:	55                   	push   %rbp
   191c1:	48 89 e5             	mov    %rsp,%rbp
   191c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   191c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   191cc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    auto p = static_cast<char const *>(s);
   191d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   191d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    auto q = static_cast<char *>(d);
   191d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   191dc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (q < p) {
   191e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   191e4:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   191e8:	73 1d                	jae    19207 <memmove+0x47>
		__asm__  volatile("cld; rep; movsb"
   191ea:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   191ee:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   191f2:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   191f6:	fc                   	cld
   191f7:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
   191f9:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   191fd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   19201:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
			     : "+c" (n), "+S"(p), "+D"(q));
	} else {
   19205:	eb 3c                	jmp    19243 <memmove+0x83>
		p += (n - 1);
   19207:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1920b:	48 83 e8 01          	sub    $0x1,%rax
   1920f:	48 03 45 e0          	add    -0x20(%rbp),%rax
   19213:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		q += (n - 1);
   19217:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1921b:	48 83 e8 01          	sub    $0x1,%rax
   1921f:	48 03 45 d8          	add    -0x28(%rbp),%rax
   19223:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		__asm__ volatile("std; rep; movsb; cld"
   19227:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1922b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1922f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   19233:	fd                   	std
   19234:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
   19236:	fc                   	cld
   19237:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1923b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1923f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
			     : "+c" (n), "+S"(p), "+D"(q));
	}

    return d;
   19243:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19247:	5d                   	pop    %rbp
   19248:	c3                   	ret
   19249:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000019250 <_ZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE>:
            arch::outb(port_, s[i]);
        }
    }

    auto log_impl(Logger &logger, Level level, ustl::views::StringView fmt, ustl::fmt::FormatArgs const &args) -> void
    {
   19250:	55                   	push   %rbp
   19251:	48 89 e5             	mov    %rsp,%rbp
   19254:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
   1925b:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   1925f:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   19263:	48 89 7d 90          	mov    %rdi,-0x70(%rbp)
   19267:	89 75 8c             	mov    %esi,-0x74(%rbp)
   1926a:	4c 89 45 80          	mov    %r8,-0x80(%rbp)
        logger.log({ 
   1926e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   19272:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
            .level = level,
   19279:	8b 45 8c             	mov    -0x74(%rbp),%eax
        logger.log({ 
   1927c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
            .args = args,
   19282:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   19286:	48 8b 41 10          	mov    0x10(%rcx),%rax
   1928a:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   19291:	48 8b 01             	mov    (%rcx),%rax
   19294:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   19298:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
   1929f:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
            .fmtstr = fmt,
   192a6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   192aa:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   192ae:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
   192b5:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
        logger.log({ 
   192bc:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
        });
   192c3:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
   192ca:	00 00 00 00 
   192ce:	e8 7d 02 00 00       	call   19550 <_ZNSt3__115source_locationC2B8nn210000Ev>
   192d3:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
        logger.log({ 
   192da:	48 8b 07             	mov    (%rdi),%rax
   192dd:	48 8b 40 18          	mov    0x18(%rax),%rax
   192e1:	48 8d b5 48 ff ff ff 	lea    -0xb8(%rbp),%rsi
   192e8:	ff d0                	call   *%rax

        switch (level) {
   192ea:	8b 45 8c             	mov    -0x74(%rbp),%eax
   192ed:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   192f4:	48 83 e8 05          	sub    $0x5,%rax
   192f8:	0f 87 87 00 00 00    	ja     19385 <_ZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE+0x135>
   192fe:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
   19305:	48 8d 05 7c 57 01 00 	lea    0x1577c(%rip),%rax        # 2ea88 <_ZNSt3__16__itoa11__pow10_128E+0x2a8>
   1930c:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   19310:	48 01 c8             	add    %rcx,%rax
   19313:	ff e0                	jmp    *%rax
        #define STR(S) S, sizeof(S)
            case Level::Status:
                write(STR("[status]: "));
   19315:	48 8d 3d ff 5d 01 00 	lea    0x15dff(%rip),%rdi        # 2f11b <.L.str>
   1931c:	be 0b 00 00 00       	mov    $0xb,%esi
   19321:	e8 7a 01 00 00       	call   194a0 <_ZN5logz4L5writeEPKci>
                break;
   19326:	eb 5d                	jmp    19385 <_ZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE+0x135>
            case Level::Warn:
                write(STR("[warn]: "));
   19328:	48 8d 3d f7 5d 01 00 	lea    0x15df7(%rip),%rdi        # 2f126 <.L.str.1>
   1932f:	be 09 00 00 00       	mov    $0x9,%esi
   19334:	e8 67 01 00 00       	call   194a0 <_ZN5logz4L5writeEPKci>
                break;
   19339:	eb 4a                	jmp    19385 <_ZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE+0x135>
            case Level::Info:
                write(STR("[info]: "));
   1933b:	48 8d 3d ed 5d 01 00 	lea    0x15ded(%rip),%rdi        # 2f12f <.L.str.2>
   19342:	be 09 00 00 00       	mov    $0x9,%esi
   19347:	e8 54 01 00 00       	call   194a0 <_ZN5logz4L5writeEPKci>
                break;
   1934c:	eb 37                	jmp    19385 <_ZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE+0x135>
            case Level::Debug:
                write(STR("[debug]: "));
   1934e:	48 8d 3d e3 5d 01 00 	lea    0x15de3(%rip),%rdi        # 2f138 <.L.str.3>
   19355:	be 0a 00 00 00       	mov    $0xa,%esi
   1935a:	e8 41 01 00 00       	call   194a0 <_ZN5logz4L5writeEPKci>
                break;
   1935f:	eb 24                	jmp    19385 <_ZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE+0x135>
            case Level::Trace:
                write(STR("[trace]: "));
   19361:	48 8d 3d da 5d 01 00 	lea    0x15dda(%rip),%rdi        # 2f142 <.L.str.4>
   19368:	be 0a 00 00 00       	mov    $0xa,%esi
   1936d:	e8 2e 01 00 00       	call   194a0 <_ZN5logz4L5writeEPKci>
                break;
   19372:	eb 11                	jmp    19385 <_ZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE+0x135>
            case Level::Error:
                write(STR("[error]: "));
   19374:	48 8d 3d d1 5d 01 00 	lea    0x15dd1(%rip),%rdi        # 2f14c <.L.str.5>
   1937b:	be 0a 00 00 00       	mov    $0xa,%esi
   19380:	e8 1b 01 00 00       	call   194a0 <_ZN5logz4L5writeEPKci>
                break;
        }

        static char s_format_buffer[512];

        auto end = ustl::fmt::vformat_to(s_format_buffer, fmt, args);
   19385:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   19389:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   1938d:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
   19394:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   1939b:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   1939f:	48 8b 41 10          	mov    0x10(%rcx),%rax
   193a3:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   193aa:	48 8b 01             	mov    (%rcx),%rax
   193ad:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   193b1:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
   193b8:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   193bf:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
   193c6:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   193cd:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
   193d4:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   193d8:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
   193df:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
   193e6:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   193ea:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   193ee:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   193f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   193f6:	48 8d 05 e3 af 01 00 	lea    0x1afe3(%rip),%rax        # 343e0 <_ZZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEEE15s_format_buffer>
   193fd:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   19404:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   19408:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
// The function is _LIBCPP_ALWAYS_INLINE since the compiler is bad at inlining
// https://reviews.llvm.org/D110499#inline-1180704
// TODO FMT Evaluate whether we want to file a Clang bug report regarding this.
template <output_iterator<const char&> _OutIt>
_LIBCPP_ALWAYS_INLINE _LIBCPP_HIDE_FROM_ABI _OutIt vformat_to(_OutIt __out_it, string_view __fmt, format_args __args) {
  return std::__vformat_to(std::move(__out_it), __fmt, __args);
   1940c:	e8 6f 02 00 00       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   19411:	48 8b 38             	mov    (%rax),%rdi
   19414:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19418:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1941c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   19420:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   19424:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   19428:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1942c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19430:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   19434:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   19438:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1943c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   19440:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19444:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   19448:	48 89 e0             	mov    %rsp,%rax
   1944b:	48 89 48 10          	mov    %rcx,0x10(%rax)
   1944f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19453:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
   19457:	4c 89 40 08          	mov    %r8,0x8(%rax)
   1945b:	48 89 08             	mov    %rcx,(%rax)
   1945e:	e8 0d 01 00 00       	call   19570 <_ZNSt3__112__vformat_toB8nn210000IPccNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEQ15output_iteratorIT_RKT0_EEES7_S7_NS_17basic_string_viewIS8_NS_11char_traitsIS8_EEEENS_17basic_format_argsINS_20basic_format_contextIT1_S8_EEEE>
   19463:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
   1946a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
        *end = '\n';
   19471:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   19478:	c6 00 0a             	movb   $0xa,(%rax)
        write(s_format_buffer, end - s_format_buffer + 1);
   1947b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   19482:	48 29 c8             	sub    %rcx,%rax
   19485:	48 83 c0 01          	add    $0x1,%rax
   19489:	89 c6                	mov    %eax,%esi
   1948b:	48 8d 3d 4e af 01 00 	lea    0x1af4e(%rip),%rdi        # 343e0 <_ZZN5logz48log_implERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEEE15s_format_buffer>
   19492:	e8 09 00 00 00       	call   194a0 <_ZN5logz4L5writeEPKci>
    }
   19497:	48 81 c4 20 01 00 00 	add    $0x120,%rsp
   1949e:	5d                   	pop    %rbp
   1949f:	c3                   	ret

00000000000194a0 <_ZN5logz4L5writeEPKci>:
    static auto write(char const *s, int n) -> void {
   194a0:	55                   	push   %rbp
   194a1:	48 89 e5             	mov    %rsp,%rbp
   194a4:	48 83 ec 20          	sub    $0x20,%rsp
   194a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   194ac:	89 75 ec             	mov    %esi,-0x14(%rbp)
        auto const port_ = 0x3F8;
   194af:	c7 45 e8 f8 03 00 00 	movl   $0x3f8,-0x18(%rbp)
        for (auto i = 0; i < n; ++i) {
   194b6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
   194bd:	8b 45 e0             	mov    -0x20(%rbp),%eax
   194c0:	3b 45 ec             	cmp    -0x14(%rbp),%eax
   194c3:	7d 42                	jge    19507 <_ZN5logz4L5writeEPKci+0x67>
            while (!is_transmit_empty())
   194c5:	eb 00                	jmp    194c7 <_ZN5logz4L5writeEPKci+0x27>
   194c7:	48 8d 7d e7          	lea    -0x19(%rbp),%rdi
   194cb:	e8 60 00 00 00       	call   19530 <_ZZN5logz4L5writeEPKciENK3$_0clEv>
   194d0:	83 f8 00             	cmp    $0x0,%eax
   194d3:	0f 95 c0             	setne  %al
   194d6:	34 ff                	xor    $0xff,%al
   194d8:	a8 01                	test   $0x1,%al
   194da:	75 02                	jne    194de <_ZN5logz4L5writeEPKci+0x3e>
   194dc:	eb 02                	jmp    194e0 <_ZN5logz4L5writeEPKci+0x40>
   194de:	eb e7                	jmp    194c7 <_ZN5logz4L5writeEPKci+0x27>
            arch::outb(port_, s[i]);
   194e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   194e4:	48 63 4d e0          	movslq -0x20(%rbp),%rcx
   194e8:	8a 04 08             	mov    (%rax,%rcx,1),%al
   194eb:	66 c7 45 fe f8 03    	movw   $0x3f8,-0x2(%rbp)
   194f1:	88 45 fd             	mov    %al,-0x3(%rbp)
#include <arch/types.hpp>

namespace arch {
    FORCE_INLINE 
    auto outb(u16 port, u8 val) -> void 
    { asm volatile ("outb %0, %1" : : "a"(val), "Nd"(port)); }
   194f4:	8a 45 fd             	mov    -0x3(%rbp),%al
   194f7:	66 8b 55 fe          	mov    -0x2(%rbp),%dx
   194fb:	ee                   	out    %al,(%dx)
        for (auto i = 0; i < n; ++i) {
   194fc:	8b 45 e0             	mov    -0x20(%rbp),%eax
   194ff:	83 c0 01             	add    $0x1,%eax
   19502:	89 45 e0             	mov    %eax,-0x20(%rbp)
   19505:	eb b6                	jmp    194bd <_ZN5logz4L5writeEPKci+0x1d>
    }
   19507:	48 83 c4 20          	add    $0x20,%rsp
   1950b:	5d                   	pop    %rbp
   1950c:	c3                   	ret
   1950d:	0f 1f 00             	nopl   (%rax)

0000000000019510 <_ZN5logz44wlogERNS_6LoggerENS_5LevelENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERKNS3_17basic_format_argsINS3_20basic_format_contextINS3_20back_insert_iteratorINS3_8__format15__output_bufferIcEEEEcEEEE>:

    auto wlog(Logger &logger, Level level, ustl::views::WStringView fmt, ustl::fmt::FormatArgs const &args) -> void
    {
   19510:	55                   	push   %rbp
   19511:	48 89 e5             	mov    %rsp,%rbp
   19514:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   19518:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   1951c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19520:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   19523:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)

    }
   19527:	5d                   	pop    %rbp
   19528:	c3                   	ret
   19529:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000019530 <_ZZN5logz4L5writeEPKciENK3$_0clEv>:
        auto const is_transmit_empty = [&]() { return arch::inb(port_ + 5) & 0x20; };
   19530:	55                   	push   %rbp
   19531:	48 89 e5             	mov    %rsp,%rbp
   19534:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   19538:	66 c7 45 fe fd 03    	movw   $0x3fd,-0x2(%rbp)

    FORCE_INLINE 
    auto inb(u16 port) -> u8 
    {
        u8 ret;
        asm volatile ("inb %1, %0" : "=a"(ret) : "Nd"(port));
   1953e:	66 8b 55 fe          	mov    -0x2(%rbp),%dx
   19542:	ec                   	in     (%dx),%al
   19543:	88 45 fd             	mov    %al,-0x3(%rbp)
   19546:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
   1954a:	83 e0 20             	and    $0x20,%eax
   1954d:	5d                   	pop    %rbp
   1954e:	c3                   	ret
   1954f:	90                   	nop

0000000000019550 <_ZNSt3__115source_locationC2B8nn210000Ev>:
  static consteval source_location current(__bsl_ty __ptr = __builtin_source_location()) noexcept {
    source_location __sl;
    __sl.__ptr_ = static_cast<const __impl*>(__ptr);
    return __sl;
  }
  _LIBCPP_HIDE_FROM_ABI constexpr source_location() noexcept = default;
   19550:	55                   	push   %rbp
   19551:	48 89 e5             	mov    %rsp,%rbp
   19554:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19558:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  const __impl* __ptr_ = nullptr;
   1955c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  _LIBCPP_HIDE_FROM_ABI constexpr source_location() noexcept = default;
   19563:	5d                   	pop    %rbp
   19564:	c3                   	ret
   19565:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1956c:	00 00 00 
   1956f:	90                   	nop

0000000000019570 <_ZNSt3__112__vformat_toB8nn210000IPccNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEQ15output_iteratorIT_RKT0_EEES7_S7_NS_17basic_string_viewIS8_NS_11char_traitsIS8_EEEENS_17basic_format_argsINS_20basic_format_contextIT1_S8_EEEE>:
                                          basic_format_args<basic_format_context<_FormatOutIt, _CharT>> __args) {
   19570:	55                   	push   %rbp
   19571:	48 89 e5             	mov    %rsp,%rbp
   19574:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
   1957b:	48 8d 45 10          	lea    0x10(%rbp),%rax
   1957f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   19586:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1958a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1958e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19592:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    typename __format::__buffer_selector<_OutIt, _CharT>::type __buffer{std::move(__out_it)};
   19596:	e8 e5 00 00 00       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   1959b:	48 8b 30             	mov    (%rax),%rsi
   1959e:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   195a2:	e8 e9 00 00 00       	call   19690 <_ZNSt3__18__format24__direct_iterator_bufferIPccEC2B8nn210000ES2_>
   195a7:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
    std::__format::__vformat_to(basic_format_parse_context{__fmt, __args.__size()},
   195ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   195b2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   195b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   195ba:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   195be:	e8 6d 02 00 00       	call   19830 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6__sizeB8nn210000Ev>
   195c3:	48 89 c1             	mov    %rax,%rcx
   195c6:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   195ca:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   195ce:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
   195d2:	e8 79 02 00 00       	call   19850 <_ZNSt3__126basic_format_parse_contextIcEC2B8nn210000ENS_17basic_string_viewIcNS_11char_traitsIcEEEEm>
   195d7:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
                                std::__format_context_create(__buffer.__make_output_iterator(), __args));
   195db:	e8 70 03 00 00       	call   19950 <_ZNSt3__18__format15__output_bufferIcE22__make_output_iteratorB8nn210000Ev>
   195e0:	48 89 c1             	mov    %rax,%rcx
   195e3:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   195ea:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
   195f1:	48 8b 08             	mov    (%rax),%rcx
   195f4:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
   195fb:	48 8b 48 08          	mov    0x8(%rax),%rcx
   195ff:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
   19606:	48 8b 40 10          	mov    0x10(%rax),%rax
   1960a:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   19611:	48 8b b5 58 ff ff ff 	mov    -0xa8(%rbp),%rsi
   19618:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
   1961f:	48 89 e0             	mov    %rsp,%rax
   19622:	48 89 48 10          	mov    %rcx,0x10(%rax)
   19626:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
   1962d:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
   19634:	48 89 50 08          	mov    %rdx,0x8(%rax)
   19638:	48 89 08             	mov    %rcx,(%rax)
   1963b:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
   19642:	e8 79 02 00 00       	call   198c0 <_ZNSt3__123__format_context_createB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEENS_20basic_format_contextIT_T0_EES7_NS_17basic_format_argsIS9_EE>
   19647:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
   1964b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    std::__format::__vformat_to(basic_format_parse_context{__fmt, __args.__size()},
   19652:	e8 69 00 00 00       	call   196c0 <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_>
   19657:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   1965e:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    return std::move(__buffer).__out_it();
   19662:	e8 19 03 00 00       	call   19980 <_ZNSt3__14moveB8nn210000IRNS_8__format24__direct_iterator_bufferIPccEEEEOu20__remove_reference_tIT_EOS6_>
   19667:	48 89 c7             	mov    %rax,%rdi
   1966a:	e8 21 03 00 00       	call   19990 <_ZNOSt3__18__format24__direct_iterator_bufferIPccE8__out_itB8nn210000Ev>
   1966f:	48 81 c4 f0 00 00 00 	add    $0xf0,%rsp
   19676:	5d                   	pop    %rbp
   19677:	c3                   	ret
   19678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1967f:	00 

0000000000019680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   19680:	55                   	push   %rbp
   19681:	48 89 e5             	mov    %rsp,%rbp
   19684:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   19688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1968c:	5d                   	pop    %rbp
   1968d:	c3                   	ret
   1968e:	66 90                	xchg   %ax,%ax

0000000000019690 <_ZNSt3__18__format24__direct_iterator_bufferIPccEC2B8nn210000ES2_>:
// A buffer that directly writes to the underlying buffer.
template <class _OutIt, __fmt_char_type _CharT>
class _LIBCPP_TEMPLATE_VIS __direct_iterator_buffer : public __output_buffer<_CharT> {
public:
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI explicit __direct_iterator_buffer(_OutIt __out_it)
      : __direct_iterator_buffer{__out_it, nullptr} {}
   19690:	55                   	push   %rbp
   19691:	48 89 e5             	mov    %rsp,%rbp
   19694:	48 83 ec 10          	sub    $0x10,%rsp
   19698:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1969c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   196a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   196a4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   196a8:	31 c0                	xor    %eax,%eax
   196aa:	31 c0                	xor    %eax,%eax
   196ac:	89 c2                	mov    %eax,%edx
   196ae:	e8 0d 03 00 00       	call   199c0 <_ZNSt3__18__format24__direct_iterator_bufferIPccEC2B8nn210000ES2_PNS0_17__max_output_sizeB8nn210000E>
   196b3:	48 83 c4 10          	add    $0x10,%rsp
   196b7:	5d                   	pop    %rbp
   196b8:	c3                   	ret
   196b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000196c0 <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_>:
_LIBCPP_HIDE_FROM_ABI constexpr typename _Ctx::iterator __vformat_to(_ParseCtx&& __parse_ctx, _Ctx&& __ctx) {
   196c0:	55                   	push   %rbp
   196c1:	48 89 e5             	mov    %rsp,%rbp
   196c4:	48 83 ec 60          	sub    $0x60,%rsp
   196c8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   196cc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  auto __begin                     = __parse_ctx.begin();
   196d0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   196d4:	e8 f7 03 00 00       	call   19ad0 <_ZNKSt3__126basic_format_parse_contextIcE5beginB8nn210000Ev>
   196d9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  auto __end                       = __parse_ctx.end();
   196dd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   196e1:	e8 0a 04 00 00       	call   19af0 <_ZNKSt3__126basic_format_parse_contextIcE3endB8nn210000Ev>
   196e6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  typename _Ctx::iterator __out_it = __ctx.out();
   196ea:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   196ee:	e8 1d 04 00 00       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   196f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  while (__begin != __end) {
   196f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   196fb:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   196ff:	0f 84 15 01 00 00    	je     1981a <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x15a>
    switch (*__begin) {
   19705:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19709:	0f be 00             	movsbl (%rax),%eax
   1970c:	89 45 bc             	mov    %eax,-0x44(%rbp)
   1970f:	83 e8 7b             	sub    $0x7b,%eax
   19712:	74 13                	je     19727 <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x67>
   19714:	eb 00                	jmp    19716 <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x56>
   19716:	8b 45 bc             	mov    -0x44(%rbp),%eax
   19719:	83 e8 7d             	sub    $0x7d,%eax
   1971c:	0f 84 8d 00 00 00    	je     197af <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0xef>
   19722:	e9 b8 00 00 00       	jmp    197df <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x11f>
      ++__begin;
   19727:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1972b:	48 83 c0 01          	add    $0x1,%rax
   1972f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__begin == __end)
   19733:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19737:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1973b:	75 0c                	jne    19749 <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x89>
        std::__throw_format_error("The format string terminates at a '{'");
   1973d:	48 8d 3d 2b 5a 01 00 	lea    0x15a2b(%rip),%rdi        # 2f16f <.L.str.8>
   19744:	e8 f7 03 00 00       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
      if (*__begin != _CharT('{')) [[likely]] {
   19749:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1974d:	0f be 00             	movsbl (%rax),%eax
   19750:	83 f8 7b             	cmp    $0x7b,%eax
   19753:	74 58                	je     197ad <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0xed>
        __ctx.advance_to(std::move(__out_it));
   19755:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19759:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1975d:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   19761:	e8 3a 04 00 00       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   19766:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   1976a:	48 8b 00             	mov    (%rax),%rax
   1976d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   19771:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   19775:	e8 e6 03 00 00       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        __begin  = __format::__handle_replacement_field(__begin, __end, __parse_ctx, __ctx);
   1977a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1977e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   19782:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19786:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1978a:	e8 21 04 00 00       	call   19bb0 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_>
   1978f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        __out_it = __ctx.out();
   19793:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   19797:	e8 74 03 00 00       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   1979c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   197a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   197a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        continue;
   197a8:	e9 4a ff ff ff       	jmp    196f7 <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x37>
      break;
   197ad:	eb 30                	jmp    197df <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x11f>
      ++__begin;
   197af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   197b3:	48 83 c0 01          	add    $0x1,%rax
   197b7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__begin == __end || *__begin != _CharT('}'))
   197bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   197bf:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   197c3:	74 0c                	je     197d1 <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x111>
   197c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   197c9:	0f be 00             	movsbl (%rax),%eax
   197cc:	83 f8 7d             	cmp    $0x7d,%eax
   197cf:	74 0c                	je     197dd <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x11d>
        std::__throw_format_error("The format string contains an invalid escape sequence");
   197d1:	48 8d 3d bd 59 01 00 	lea    0x159bd(%rip),%rdi        # 2f195 <.L.str.9>
   197d8:	e8 63 03 00 00       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
      break;
   197dd:	eb 00                	jmp    197df <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x11f>
    *__out_it++ = *__begin++;
   197df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   197e3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   197e7:	48 83 c0 01          	add    $0x1,%rax
   197eb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   197ef:	31 c0                	xor    %eax,%eax
   197f1:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   197f5:	31 f6                	xor    %esi,%esi
   197f7:	e8 f4 04 00 00       	call   19cf0 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEppB8nn210000Ei>
   197fc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   19800:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   19804:	e8 07 05 00 00       	call   19d10 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEdeB8nn210000Ev>
   19809:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   1980d:	48 89 c7             	mov    %rax,%rdi
   19810:	e8 0b 05 00 00       	call   19d20 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEaSB8nn210000ERKc>
  while (__begin != __end) {
   19815:	e9 dd fe ff ff       	jmp    196f7 <_ZNSt3__18__format12__vformat_toB8nn210000INS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEENT0_8iteratorEOT_OSA_+0x37>
  return __out_it;
   1981a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1981e:	48 83 c4 60          	add    $0x60,%rsp
   19822:	5d                   	pop    %rbp
   19823:	c3                   	ret
   19824:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1982b:	00 00 00 
   1982e:	66 90                	xchg   %ax,%ax

0000000000019830 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6__sizeB8nn210000Ev>:
      return basic_format_arg<_Context>{__format::__get_packed_type(__types_, __id), __values_[__id]};

    return __args_[__id];
  }

  _LIBCPP_HIDE_FROM_ABI size_t __size() const noexcept { return __size_; }
   19830:	55                   	push   %rbp
   19831:	48 89 e5             	mov    %rsp,%rbp
   19834:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19838:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1983c:	48 8b 00             	mov    (%rax),%rax
   1983f:	5d                   	pop    %rbp
   19840:	c3                   	ret
   19841:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19848:	00 00 00 
   1984b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000019850 <_ZNSt3__126basic_format_parse_contextIcEC2B8nn210000ENS_17basic_string_viewIcNS_11char_traitsIcEEEEm>:
      basic_string_view<_CharT> __fmt, size_t __num_args = 0) noexcept
      : __begin_(__fmt.begin()),
        __end_(__fmt.end()),
        __indexing_(__unknown),
        __next_arg_id_(0),
        __num_args_(__num_args) {}
   19850:	55                   	push   %rbp
   19851:	48 89 e5             	mov    %rsp,%rbp
   19854:	48 83 ec 30          	sub    $0x30,%rsp
   19858:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1985c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   19860:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19864:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   19868:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1986c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   19870:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
      : __begin_(__fmt.begin()),
   19874:	e8 17 28 00 00       	call   1c090 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE5beginB8nn210000Ev>
   19879:	48 89 c1             	mov    %rax,%rcx
   1987c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19880:	48 89 08             	mov    %rcx,(%rax)
   19883:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
        __end_(__fmt.end()),
   19887:	e8 24 28 00 00       	call   1c0b0 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE3endB8nn210000Ev>
   1988c:	48 89 c1             	mov    %rax,%rcx
   1988f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19893:	48 89 48 08          	mov    %rcx,0x8(%rax)
        __indexing_(__unknown),
   19897:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
        __next_arg_id_(0),
   1989e:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   198a5:	00 
        __num_args_(__num_args) {}
   198a6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   198aa:	48 89 48 20          	mov    %rcx,0x20(%rax)
   198ae:	48 83 c4 30          	add    $0x30,%rsp
   198b2:	5d                   	pop    %rbp
   198b3:	c3                   	ret
   198b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   198bb:	00 00 00 
   198be:	66 90                	xchg   %ax,%ax

00000000000198c0 <_ZNSt3__123__format_context_createB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEENS_20basic_format_contextIT_T0_EES7_NS_17basic_format_argsIS9_EE>:
  return std::basic_format_context(std::move(__out_it), __args, std::move(__loc));
}
#  else
template <class _OutIt, class _CharT>
_LIBCPP_HIDE_FROM_ABI basic_format_context<_OutIt, _CharT>
__format_context_create(_OutIt __out_it, basic_format_args<basic_format_context<_OutIt, _CharT>> __args) {
   198c0:	55                   	push   %rbp
   198c1:	48 89 e5             	mov    %rsp,%rbp
   198c4:	48 83 ec 60          	sub    $0x60,%rsp
   198c8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   198cc:	48 89 f8             	mov    %rdi,%rax
   198cf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   198d3:	48 8d 45 10          	lea    0x10(%rbp),%rax
   198d7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   198db:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   198df:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   198e3:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  return std::basic_format_context(std::move(__out_it), __args);
   198e7:	e8 b4 02 00 00       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   198ec:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   198f0:	48 89 c1             	mov    %rax,%rcx
   198f3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   198f7:	48 8b 09             	mov    (%rcx),%rcx
   198fa:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   198fe:	48 8b 08             	mov    (%rax),%rcx
   19901:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   19905:	48 8b 48 08          	mov    0x8(%rax),%rcx
   19909:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   1990d:	48 8b 40 10          	mov    0x10(%rax),%rax
   19911:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19915:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   19919:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1991d:	48 89 e0             	mov    %rsp,%rax
   19920:	48 89 48 10          	mov    %rcx,0x10(%rax)
   19924:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   19928:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1992c:	48 89 50 08          	mov    %rdx,0x8(%rax)
   19930:	48 89 08             	mov    %rcx,(%rax)
   19933:	e8 28 1b 01 00       	call   2b460 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEC2B8nn210000ES5_NS_17basic_format_argsIS6_EE>
   19938:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1993c:	48 83 c4 60          	add    $0x60,%rsp
   19940:	5d                   	pop    %rbp
   19941:	c3                   	ret
   19942:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19949:	00 00 00 
   1994c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000019950 <_ZNSt3__18__format15__output_bufferIcE22__make_output_iteratorB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI auto __make_output_iterator() { return std::back_insert_iterator{*this}; }
   19950:	55                   	push   %rbp
   19951:	48 89 e5             	mov    %rsp,%rbp
   19954:	48 83 ec 10          	sub    $0x10,%rsp
   19958:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1995c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   19960:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   19964:	e8 57 1b 01 00       	call   2b4c0 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEC2B8nn210000ERS3_>
   19969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1996d:	48 83 c4 10          	add    $0x10,%rsp
   19971:	5d                   	pop    %rbp
   19972:	c3                   	ret
   19973:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1997a:	00 00 00 
   1997d:	0f 1f 00             	nopl   (%rax)

0000000000019980 <_ZNSt3__14moveB8nn210000IRNS_8__format24__direct_iterator_bufferIPccEEEEOu20__remove_reference_tIT_EOS6_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   19980:	55                   	push   %rbp
   19981:	48 89 e5             	mov    %rsp,%rbp
   19984:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   19988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1998c:	5d                   	pop    %rbp
   1998d:	c3                   	ret
   1998e:	66 90                	xchg   %ax,%ax

0000000000019990 <_ZNOSt3__18__format24__direct_iterator_bufferIPccE8__out_itB8nn210000Ev>:
  [[nodiscard]]
  _LIBCPP_HIDE_FROM_ABI explicit __direct_iterator_buffer(_OutIt __out_it, __max_output_size* __max_output_size)
      : __output_buffer<_CharT>{std::__unwrap_iter(__out_it), __buffer_size, __prepare_write, __max_output_size},
        __out_it_(__out_it) {}

  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI _OutIt __out_it() && { return __out_it_ + this->__size(); }
   19990:	55                   	push   %rbp
   19991:	48 89 e5             	mov    %rsp,%rbp
   19994:	48 83 ec 10          	sub    $0x10,%rsp
   19998:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1999c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   199a0:	48 8b 47 28          	mov    0x28(%rdi),%rax
   199a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   199a8:	e8 63 1b 01 00       	call   2b510 <_ZNKSt3__18__format15__output_bufferIcE6__sizeB8nn210000Ev>
   199ad:	48 89 c1             	mov    %rax,%rcx
   199b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   199b4:	48 01 c8             	add    %rcx,%rax
   199b7:	48 83 c4 10          	add    $0x10,%rsp
   199bb:	5d                   	pop    %rbp
   199bc:	c3                   	ret
   199bd:	0f 1f 00             	nopl   (%rax)

00000000000199c0 <_ZNSt3__18__format24__direct_iterator_bufferIPccEC2B8nn210000ES2_PNS0_17__max_output_sizeB8nn210000E>:
        __out_it_(__out_it) {}
   199c0:	55                   	push   %rbp
   199c1:	48 89 e5             	mov    %rsp,%rbp
   199c4:	48 83 ec 20          	sub    $0x20,%rsp
   199c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   199cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   199d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   199d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   199d8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      : __output_buffer<_CharT>{std::__unwrap_iter(__out_it), __buffer_size, __prepare_write, __max_output_size},
   199dc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   199e0:	e8 3b 00 00 00       	call   19a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
   199e5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   199e9:	48 89 c6             	mov    %rax,%rsi
   199ec:	4c 8b 45 e8          	mov    -0x18(%rbp),%r8
   199f0:	48 8d 0d 49 00 00 00 	lea    0x49(%rip),%rcx        # 19a40 <_ZNSt3__18__format24__direct_iterator_bufferIPccE15__prepare_writeB8nn210000ERNS0_15__output_bufferIcEEm>
   199f7:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   199fe:	e8 5d 00 00 00       	call   19a60 <_ZNSt3__18__format15__output_bufferIcEC2B8nn210000EPcmPFvRS2_mEPNS0_17__max_output_sizeB8nn210000E>
   19a03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        __out_it_(__out_it) {}
   19a07:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19a0b:	48 89 48 28          	mov    %rcx,0x28(%rax)
   19a0f:	48 83 c4 20          	add    $0x20,%rsp
   19a13:	5d                   	pop    %rbp
   19a14:	c3                   	ret
   19a15:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19a1c:	00 00 00 
   19a1f:	90                   	nop

0000000000019a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>:
__unwrap_iter(_Iter __i) _NOEXCEPT {
   19a20:	55                   	push   %rbp
   19a21:	48 89 e5             	mov    %rsp,%rbp
   19a24:	48 83 ec 10          	sub    $0x10,%rsp
   19a28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return _Impl::__unwrap(__i);
   19a2c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19a30:	e8 7b 00 00 00       	call   19ab0 <_ZNSt3__118__unwrap_iter_implIPcLb1EE8__unwrapB8nn210000ES1_>
   19a35:	48 83 c4 10          	add    $0x10,%rsp
   19a39:	5d                   	pop    %rbp
   19a3a:	c3                   	ret
   19a3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000019a40 <_ZNSt3__18__format24__direct_iterator_bufferIPccE15__prepare_writeB8nn210000ERNS0_15__output_bufferIcEEm>:
  static constexpr size_t __buffer_size = -1;

  _OutIt __out_it_;

  _LIBCPP_HIDE_FROM_ABI static void
  __prepare_write([[maybe_unused]] __output_buffer<_CharT>& __buffer, [[maybe_unused]] size_t __size_hint) {
   19a40:	55                   	push   %rbp
   19a41:	48 89 e5             	mov    %rsp,%rbp
   19a44:	48 83 ec 10          	sub    $0x10,%rsp
   19a48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19a4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    std::__throw_length_error("__direct_iterator_buffer");
   19a50:	48 8d 3d ff 56 01 00 	lea    0x156ff(%rip),%rdi        # 2f156 <.L.str.6>
   19a57:	e8 14 f6 ff ff       	call   19070 <_ZNSt3__120__throw_length_errorB8nn210000EPKc>
   19a5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000019a60 <_ZNSt3__18__format15__output_bufferIcEC2B8nn210000EPcmPFvRS2_mEPNS0_17__max_output_sizeB8nn210000E>:
      : __ptr_(__ptr), __capacity_(__capacity), __prepare_write_(__function), __max_output_size_(__max_output_size) {}
   19a60:	55                   	push   %rbp
   19a61:	48 89 e5             	mov    %rsp,%rbp
   19a64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19a68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19a6c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   19a70:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   19a74:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   19a78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19a7c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19a80:	48 89 08             	mov    %rcx,(%rax)
   19a83:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   19a87:	48 89 48 08          	mov    %rcx,0x8(%rax)
  size_t __size_{0};
   19a8b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   19a92:	00 
      : __ptr_(__ptr), __capacity_(__capacity), __prepare_write_(__function), __max_output_size_(__max_output_size) {}
   19a93:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   19a97:	48 89 48 18          	mov    %rcx,0x18(%rax)
   19a9b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   19a9f:	48 89 48 20          	mov    %rcx,0x20(%rax)
   19aa3:	5d                   	pop    %rbp
   19aa4:	c3                   	ret
   19aa5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19aac:	00 00 00 
   19aaf:	90                   	nop

0000000000019ab0 <_ZNSt3__118__unwrap_iter_implIPcLb1EE8__unwrapB8nn210000ES1_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ToAddressT __unwrap(_Iter __i) _NOEXCEPT {
   19ab0:	55                   	push   %rbp
   19ab1:	48 89 e5             	mov    %rsp,%rbp
   19ab4:	48 83 ec 10          	sub    $0x10,%rsp
   19ab8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::__to_address(__i);
   19abc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19ac0:	e8 cb e6 ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   19ac5:	48 83 c4 10          	add    $0x10,%rsp
   19ac9:	5d                   	pop    %rbp
   19aca:	c3                   	ret
   19acb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000019ad0 <_ZNKSt3__126basic_format_parse_contextIcE5beginB8nn210000Ev>:

  basic_format_parse_context(const basic_format_parse_context&)            = delete;
  basic_format_parse_context& operator=(const basic_format_parse_context&) = delete;

  _LIBCPP_HIDE_FROM_ABI constexpr const_iterator begin() const noexcept { return __begin_; }
   19ad0:	55                   	push   %rbp
   19ad1:	48 89 e5             	mov    %rsp,%rbp
   19ad4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19adc:	48 8b 00             	mov    (%rax),%rax
   19adf:	5d                   	pop    %rbp
   19ae0:	c3                   	ret
   19ae1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19ae8:	00 00 00 
   19aeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000019af0 <_ZNKSt3__126basic_format_parse_contextIcE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr const_iterator end() const noexcept { return __end_; }
   19af0:	55                   	push   %rbp
   19af1:	48 89 e5             	mov    %rsp,%rbp
   19af4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19af8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19afc:	48 8b 40 08          	mov    0x8(%rax),%rax
   19b00:	5d                   	pop    %rbp
   19b01:	c3                   	ret
   19b02:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19b09:	00 00 00 
   19b0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000019b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>:
    if (!__loc_)
      __loc_ = std::locale{};
    return *__loc_;
  }
#  endif
  _LIBCPP_HIDE_FROM_ABI iterator out() { return std::move(__out_it_); }
   19b10:	55                   	push   %rbp
   19b11:	48 89 e5             	mov    %rsp,%rbp
   19b14:	48 83 ec 10          	sub    $0x10,%rsp
   19b18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   19b1c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   19b20:	e8 7b 00 00 00       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   19b25:	48 8b 00             	mov    (%rax),%rax
   19b28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b30:	48 83 c4 10          	add    $0x10,%rsp
   19b34:	5d                   	pop    %rbp
   19b35:	c3                   	ret
   19b36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19b3d:	00 00 00 

0000000000019b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>:
  _LIBCPP_HIDE_FROM_ABI_VIRTUAL
  ~format_error() noexcept override = default;
};
_LIBCPP_DIAGNOSTIC_POP

[[noreturn]] inline _LIBCPP_HIDE_FROM_ABI void __throw_format_error(const char* __s) {
   19b40:	55                   	push   %rbp
   19b41:	48 89 e5             	mov    %rsp,%rbp
   19b44:	48 83 ec 10          	sub    $0x10,%rsp
   19b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
#  if _LIBCPP_HAS_EXCEPTIONS
  throw format_error(__s);
#  else
  _LIBCPP_VERBOSE_ABORT("format_error was thrown in -fno-exceptions mode with message \"%s\"", __s);
   19b4c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   19b50:	48 8d 3d 74 56 01 00 	lea    0x15674(%rip),%rdi        # 2f1cb <.L.str.10>
   19b57:	31 c0                	xor    %eax,%eax
   19b59:	e8 72 e0 ff ff       	call   17bd0 <_ZNSt3__122__libcpp_verbose_abortEPKcz>
   19b5e:	66 90                	xchg   %ax,%ax

0000000000019b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>:
  _LIBCPP_HIDE_FROM_ABI void advance_to(iterator __it) { __out_it_ = std::move(__it); }
   19b60:	55                   	push   %rbp
   19b61:	48 89 e5             	mov    %rsp,%rbp
   19b64:	48 83 ec 20          	sub    $0x20,%rsp
   19b68:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   19b6c:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   19b70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19b74:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   19b78:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   19b7c:	e8 1f 00 00 00       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   19b81:	48 89 c1             	mov    %rax,%rcx
   19b84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19b88:	48 8b 09             	mov    (%rcx),%rcx
   19b8b:	48 89 08             	mov    %rcx,(%rax)
   19b8e:	48 83 c4 20          	add    $0x20,%rsp
   19b92:	5d                   	pop    %rbp
   19b93:	c3                   	ret
   19b94:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19b9b:	00 00 00 
   19b9e:	66 90                	xchg   %ax,%ax

0000000000019ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   19ba0:	55                   	push   %rbp
   19ba1:	48 89 e5             	mov    %rsp,%rbp
   19ba4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   19ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19bac:	5d                   	pop    %rbp
   19bad:	c3                   	ret
   19bae:	66 90                	xchg   %ax,%ax

0000000000019bb0 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_>:
__handle_replacement_field(_Iterator __begin, _Iterator __end, _ParseCtx& __parse_ctx, _Ctx& __ctx) {
   19bb0:	55                   	push   %rbp
   19bb1:	48 89 e5             	mov    %rsp,%rbp
   19bb4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   19bbb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19bbf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19bc3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   19bc7:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  __format::__parse_number_result __r = __format::__parse_arg_id(__begin, __end, __parse_ctx);
   19bcb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19bcf:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   19bd3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19bd7:	e8 84 01 00 00       	call   19d60 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_>
   19bdc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   19be0:	89 55 d8             	mov    %edx,-0x28(%rbp)
  if (__r.__last == __end)
   19be3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19be7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   19beb:	75 0c                	jne    19bf9 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x49>
    std::__throw_format_error("The argument index should end with a ':' or a '}'");
   19bed:	48 8d 3d 19 56 01 00 	lea    0x15619(%rip),%rdi        # 2f20d <.L.str.11>
   19bf4:	e8 47 ff ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  bool __parse = *__r.__last == _CharT(':');
   19bf9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19bfd:	8a 00                	mov    (%rax),%al
   19bff:	2c 3a                	sub    $0x3a,%al
   19c01:	0f 94 45 cf          	sete   -0x31(%rbp)
  switch (*__r.__last) {
   19c05:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19c09:	0f be 00             	movsbl (%rax),%eax
   19c0c:	89 45 8c             	mov    %eax,-0x74(%rbp)
   19c0f:	83 e8 3a             	sub    $0x3a,%eax
   19c12:	74 0c                	je     19c20 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x70>
   19c14:	eb 00                	jmp    19c16 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x66>
   19c16:	8b 45 8c             	mov    -0x74(%rbp),%eax
   19c19:	83 e8 7d             	sub    $0x7d,%eax
   19c1c:	74 15                	je     19c33 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x83>
   19c1e:	eb 22                	jmp    19c42 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x92>
    __parse_ctx.advance_to(__r.__last + 1);
   19c20:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   19c24:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   19c28:	48 83 c6 01          	add    $0x1,%rsi
   19c2c:	e8 ef 01 00 00       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
    break;
   19c31:	eb 1b                	jmp    19c4e <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x9e>
    __parse_ctx.advance_to(__r.__last);
   19c33:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   19c37:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   19c3b:	e8 e0 01 00 00       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
    break;
   19c40:	eb 0c                	jmp    19c4e <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x9e>
    std::__throw_format_error("The argument index should end with a ':' or a '}'");
   19c42:	48 8d 3d c4 55 01 00 	lea    0x155c4(%rip),%rdi        # 2f20d <.L.str.11>
   19c49:	e8 f2 fe ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
        [&](auto __arg) {
   19c4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19c52:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   19c56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19c5a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   19c5e:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   19c62:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        __ctx.arg(__r.__value));
   19c66:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19c6a:	8b 45 d8             	mov    -0x28(%rbp),%eax
   19c6d:	89 c2                	mov    %eax,%edx
   19c6f:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
   19c73:	e8 b8 03 00 00       	call   1a030 <_ZNKSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3argB8nn210000Em>
    std::__visit_format_arg(
   19c78:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   19c7c:	48 89 e0             	mov    %rsp,%rax
   19c7f:	48 89 48 18          	mov    %rcx,0x18(%rax)
   19c83:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   19c87:	48 89 48 10          	mov    %rcx,0x10(%rax)
   19c8b:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   19c8f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   19c93:	48 89 50 08          	mov    %rdx,0x8(%rax)
   19c97:	48 89 08             	mov    %rcx,(%rax)
   19c9a:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   19c9e:	e8 9d 01 00 00       	call   19e40 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE>
  __begin = __parse_ctx.begin();
   19ca3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   19ca7:	e8 24 fe ff ff       	call   19ad0 <_ZNKSt3__126basic_format_parse_contextIcE5beginB8nn210000Ev>
   19cac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  if (__begin == __end || *__begin != _CharT('}'))
   19cb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19cb4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   19cb8:	74 0c                	je     19cc6 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x116>
   19cba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19cbe:	0f be 00             	movsbl (%rax),%eax
   19cc1:	83 f8 7d             	cmp    $0x7d,%eax
   19cc4:	74 0c                	je     19cd2 <_ZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_+0x122>
    std::__throw_format_error("The replacement field misses a terminating '}'");
   19cc6:	48 8d 3d 72 55 01 00 	lea    0x15572(%rip),%rdi        # 2f23f <.L.str.12>
   19ccd:	e8 6e fe ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  return ++__begin;
   19cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19cd6:	48 83 c0 01          	add    $0x1,%rax
   19cda:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19cde:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   19ce5:	5d                   	pop    %rbp
   19ce6:	c3                   	ret
   19ce7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   19cee:	00 00 

0000000000019cf0 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEppB8nn210000Ei>:
    return *this;
  }
#endif // _LIBCPP_CXX03_LANG
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 back_insert_iterator& operator*() { return *this; }
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 back_insert_iterator& operator++() { return *this; }
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 back_insert_iterator operator++(int) { return *this; }
   19cf0:	55                   	push   %rbp
   19cf1:	48 89 e5             	mov    %rsp,%rbp
   19cf4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   19cf8:	89 75 ec             	mov    %esi,-0x14(%rbp)
   19cfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19cff:	48 8b 00             	mov    (%rax),%rax
   19d02:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d0a:	5d                   	pop    %rbp
   19d0b:	c3                   	ret
   19d0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000019d10 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEdeB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 back_insert_iterator& operator*() { return *this; }
   19d10:	55                   	push   %rbp
   19d11:	48 89 e5             	mov    %rsp,%rbp
   19d14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d1c:	5d                   	pop    %rbp
   19d1d:	c3                   	ret
   19d1e:	66 90                	xchg   %ax,%ax

0000000000019d20 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEaSB8nn210000ERKc>:
  operator=(const typename _Container::value_type& __value) {
   19d20:	55                   	push   %rbp
   19d21:	48 89 e5             	mov    %rsp,%rbp
   19d24:	48 83 ec 20          	sub    $0x20,%rsp
   19d28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19d30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    container->push_back(__value);
   19d38:	48 8b 38             	mov    (%rax),%rdi
   19d3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19d3f:	8a 00                	mov    (%rax),%al
   19d41:	0f be f0             	movsbl %al,%esi
   19d44:	e8 97 16 01 00       	call   2b3e0 <_ZNSt3__18__format15__output_bufferIcE9push_backB8nn210000Ec>
   19d49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    return *this;
   19d4d:	48 83 c4 20          	add    $0x20,%rsp
   19d51:	5d                   	pop    %rbp
   19d52:	c3                   	ret
   19d53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19d5a:	00 00 00 
   19d5d:	0f 1f 00             	nopl   (%rax)

0000000000019d60 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_>:
 * The parser will return a pointer beyond the last consumed character. This
 * should be the closing '}' of the arg-id.
 */
template <contiguous_iterator _Iterator>
_LIBCPP_HIDE_FROM_ABI constexpr __parse_number_result<_Iterator>
__parse_arg_id(_Iterator __begin, _Iterator __end, auto& __parse_ctx) {
   19d60:	55                   	push   %rbp
   19d61:	48 89 e5             	mov    %rsp,%rbp
   19d64:	48 83 ec 30          	sub    $0x30,%rsp
   19d68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19d6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   19d70:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  using _CharT = iter_value_t<_Iterator>;
  switch (*__begin) {
   19d74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19d78:	0f be 00             	movsbl (%rax),%eax
   19d7b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   19d7e:	83 e8 30             	sub    $0x30,%eax
   19d81:	74 16                	je     19d99 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0x39>
   19d83:	eb 00                	jmp    19d85 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0x25>
   19d85:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   19d88:	83 e8 3a             	sub    $0x3a,%eax
   19d8b:	74 26                	je     19db3 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0x53>
   19d8d:	eb 00                	jmp    19d8f <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0x2f>
   19d8f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   19d92:	83 e8 7d             	sub    $0x7d,%eax
   19d95:	74 1c                	je     19db3 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0x53>
   19d97:	eb 34                	jmp    19dcd <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0x6d>
  case _CharT('0'):
    return __detail::__parse_zero(__begin, __end, __parse_ctx);
   19d99:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   19d9d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19da1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19da5:	e8 c6 02 00 00       	call   1a070 <_ZNSt3__18__format8__detail12__parse_zeroB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES8_S8_RT0_>
   19daa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19dae:	89 55 f8             	mov    %edx,-0x8(%rbp)
   19db1:	eb 56                	jmp    19e09 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0xa9>
  case _CharT(':'):
    // This case is conditionally valid. It's allowed in an arg-id in the
    // replacement-field, but not in the std-format-spec. The caller can
    // provide a better diagnostic, so accept it here unconditionally.
  case _CharT('}'):
    return __detail::__parse_automatic(__begin, __end, __parse_ctx);
   19db3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   19db7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19dbb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19dbf:	e8 fc 02 00 00       	call   1a0c0 <_ZNSt3__18__format8__detail17__parse_automaticB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES8_S8_RT0_>
   19dc4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19dc8:	89 55 f8             	mov    %edx,-0x8(%rbp)
   19dcb:	eb 3c                	jmp    19e09 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0xa9>
  }
  if (*__begin < _CharT('0') || *__begin > _CharT('9'))
   19dcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19dd1:	0f be 00             	movsbl (%rax),%eax
   19dd4:	83 f8 30             	cmp    $0x30,%eax
   19dd7:	7c 0c                	jl     19de5 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0x85>
   19dd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19ddd:	0f be 00             	movsbl (%rax),%eax
   19de0:	83 f8 39             	cmp    $0x39,%eax
   19de3:	7e 0c                	jle    19df1 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_+0x91>
    std::__throw_format_error("The argument index starts with an invalid character");
   19de5:	48 8d 3d 82 54 01 00 	lea    0x15482(%rip),%rdi        # 2f26e <.L.str.13>
   19dec:	e8 4f fd ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>

  return __detail::__parse_manual(__begin, __end, __parse_ctx);
   19df1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   19df5:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19df9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19dfd:	e8 fe 02 00 00       	call   1a100 <_ZNSt3__18__format8__detail14__parse_manualB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES8_S8_RT0_>
   19e02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19e06:	89 55 f8             	mov    %edx,-0x8(%rbp)
}
   19e09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19e0d:	8b 55 f8             	mov    -0x8(%rbp),%edx
   19e10:	48 83 c4 30          	add    $0x30,%rsp
   19e14:	5d                   	pop    %rbp
   19e15:	c3                   	ret
   19e16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   19e1d:	00 00 00 

0000000000019e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>:
  _LIBCPP_HIDE_FROM_ABI constexpr void advance_to(const_iterator __it) { __begin_ = __it; }
   19e20:	55                   	push   %rbp
   19e21:	48 89 e5             	mov    %rsp,%rbp
   19e24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19e28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19e2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e30:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19e34:	48 89 08             	mov    %rcx,(%rax)
   19e37:	5d                   	pop    %rbp
   19e38:	c3                   	ret
   19e39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000019e40 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE>:
_LIBCPP_HIDE_FROM_ABI decltype(auto) __visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg) {
   19e40:	55                   	push   %rbp
   19e41:	48 89 e5             	mov    %rsp,%rbp
   19e44:	48 83 ec 30          	sub    $0x30,%rsp
   19e48:	48 8d 45 10          	lea    0x10(%rbp),%rax
   19e4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19e50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  switch (__arg.__type_) {
   19e54:	0f b6 40 10          	movzbl 0x10(%rax),%eax
   19e58:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   19e5c:	48 83 e8 0f          	sub    $0xf,%rax
   19e60:	0f 87 b7 01 00 00    	ja     1a01d <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1dd>
   19e66:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   19e6a:	48 8d 05 2f 4c 01 00 	lea    0x14c2f(%rip),%rax        # 2eaa0 <_ZNSt3__16__itoa11__pow10_128E+0x2c0>
   19e71:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   19e75:	48 01 c8             	add    %rcx,%rax
   19e78:	ff e0                	jmp    *%rax
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__monostate_);
   19e7a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19e7e:	e8 fd 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19e83:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19e87:	48 89 c7             	mov    %rax,%rdi
   19e8a:	e8 b1 04 00 00       	call   1a340 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRNS_9monostateEEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSM_>
   19e8f:	e9 8e 01 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__boolean_);
   19e94:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19e98:	e8 e3 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19e9d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19ea1:	48 89 c7             	mov    %rax,%rdi
   19ea4:	e8 e7 04 00 00       	call   1a390 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRbEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19ea9:	e9 74 01 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__char_type_);
   19eae:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19eb2:	e8 c9 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19eb7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19ebb:	48 89 c7             	mov    %rax,%rdi
   19ebe:	e8 0d 05 00 00       	call   1a3d0 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRcEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19ec3:	e9 5a 01 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__int_);
   19ec8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19ecc:	e8 af 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19ed1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19ed5:	48 89 c7             	mov    %rax,%rdi
   19ed8:	e8 33 05 00 00       	call   1a410 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRiEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19edd:	e9 40 01 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__long_long_);
   19ee2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19ee6:	e8 95 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19eeb:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19eef:	48 89 c7             	mov    %rax,%rdi
   19ef2:	e8 59 05 00 00       	call   1a450 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRxEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19ef7:	e9 26 01 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__i128_);
   19efc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19f00:	e8 7b 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19f05:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19f09:	48 89 c7             	mov    %rax,%rdi
   19f0c:	e8 7f 05 00 00       	call   1a490 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRnEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19f11:	e9 0c 01 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__unsigned_);
   19f16:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19f1a:	e8 61 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19f1f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19f23:	48 89 c7             	mov    %rax,%rdi
   19f26:	e8 a5 05 00 00       	call   1a4d0 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRjEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19f2b:	e9 f2 00 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__unsigned_long_long_);
   19f30:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19f34:	e8 47 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19f39:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19f3d:	48 89 c7             	mov    %rax,%rdi
   19f40:	e8 cb 05 00 00       	call   1a510 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRyEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19f45:	e9 d8 00 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__u128_);
   19f4a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19f4e:	e8 2d 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19f53:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19f57:	48 89 c7             	mov    %rax,%rdi
   19f5a:	e8 f1 05 00 00       	call   1a550 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRoEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19f5f:	e9 be 00 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__float_);
   19f64:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19f68:	e8 13 04 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19f6d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19f71:	48 89 c7             	mov    %rax,%rdi
   19f74:	e8 17 06 00 00       	call   1a590 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRfEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19f79:	e9 a4 00 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__double_);
   19f7e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19f82:	e8 f9 03 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19f87:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19f8b:	48 89 c7             	mov    %rax,%rdi
   19f8e:	e8 3d 06 00 00       	call   1a5d0 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRdEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19f93:	e9 8a 00 00 00       	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__long_double_);
   19f98:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19f9c:	e8 df 03 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19fa1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19fa5:	48 89 c7             	mov    %rax,%rdi
   19fa8:	e8 63 06 00 00       	call   1a610 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JReEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19fad:	eb 73                	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__const_char_type_ptr_);
   19faf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19fb3:	e8 c8 03 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19fb8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19fbc:	48 89 c7             	mov    %rax,%rdi
   19fbf:	e8 8c 06 00 00       	call   1a650 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRS4_EEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>
   19fc4:	eb 5c                	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__string_view_);
   19fc6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19fca:	e8 b1 03 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19fcf:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19fd3:	48 89 c7             	mov    %rax,%rdi
   19fd6:	e8 b5 06 00 00       	call   1a690 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSP_>
   19fdb:	eb 45                	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__ptr_);
   19fdd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19fe1:	e8 9a 03 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19fe6:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   19fea:	48 89 c7             	mov    %rax,%rdi
   19fed:	e8 de 06 00 00       	call   1a6d0 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRPKvEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSN_>
   19ff2:	eb 2e                	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
        std::forward<_Visitor>(__vis), typename basic_format_arg<_Context>::handle{__arg.__value_.__handle_});
   19ff4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   19ff8:	e8 83 03 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   19ffd:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1a001:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1a005:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1a009:	e8 42 07 00 00       	call   1a750 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6handleC2B8nn210000ERNS_24__basic_format_arg_valueIS7_E8__handleE>
   1a00e:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1a012:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
    return std::invoke(
   1a016:	e8 f5 06 00 00       	call   1a710 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JNS_16basic_format_argISC_E6handleEEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSN_>
   1a01b:	eb 05                	jmp    1a022 <_ZNSt3__118__visit_format_argB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_SC_EEDcOSD_NS_16basic_format_argISE_EE+0x1e2>
  __libcpp_unreachable();
   1a01d:	e8 4e 07 00 00       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
}
   1a022:	48 83 c4 30          	add    $0x30,%rsp
   1a026:	5d                   	pop    %rbp
   1a027:	c3                   	ret
   1a028:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a02f:	00 

000000000001a030 <_ZNKSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3argB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI basic_format_arg<basic_format_context> arg(size_t __id) const noexcept {
   1a030:	55                   	push   %rbp
   1a031:	48 89 e5             	mov    %rsp,%rbp
   1a034:	48 83 ec 20          	sub    $0x20,%rsp
   1a038:	48 89 f8             	mov    %rdi,%rax
   1a03b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a03f:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   1a043:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1a047:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    return __args_.get(__id);
   1a04b:	48 83 c6 08          	add    $0x8,%rsi
   1a04f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a053:	e8 28 12 01 00       	call   2b280 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE3getB8nn210000Em>
   1a058:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a05c:	48 83 c4 20          	add    $0x20,%rsp
   1a060:	5d                   	pop    %rbp
   1a061:	c3                   	ret
   1a062:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1a069:	00 00 00 
   1a06c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001a070 <_ZNSt3__18__format8__detail12__parse_zeroB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES8_S8_RT0_>:
__parse_zero(_Iterator __begin, _Iterator, auto& __parse_ctx) {
   1a070:	55                   	push   %rbp
   1a071:	48 89 e5             	mov    %rsp,%rbp
   1a074:	48 83 ec 30          	sub    $0x30,%rsp
   1a078:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a07c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a080:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  __parse_ctx.check_arg_id(0);
   1a084:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1a088:	31 c0                	xor    %eax,%eax
   1a08a:	89 c6                	mov    %eax,%esi
   1a08c:	e8 bf 00 00 00       	call   1a150 <_ZNSt3__126basic_format_parse_contextIcE12check_arg_idB8nn210000Em>
  return {++__begin, 0}; // can never be larger than the maximum.
   1a091:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a095:	48 ff c0             	inc    %rax
   1a098:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a09c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a0a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
   1a0a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a0ab:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1a0ae:	48 83 c4 30          	add    $0x30,%rsp
   1a0b2:	5d                   	pop    %rbp
   1a0b3:	c3                   	ret
   1a0b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1a0bb:	00 00 00 
   1a0be:	66 90                	xchg   %ax,%ax

000000000001a0c0 <_ZNSt3__18__format8__detail17__parse_automaticB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES8_S8_RT0_>:
__parse_automatic(_Iterator __begin, _Iterator, auto& __parse_ctx) {
   1a0c0:	55                   	push   %rbp
   1a0c1:	48 89 e5             	mov    %rsp,%rbp
   1a0c4:	48 83 ec 30          	sub    $0x30,%rsp
   1a0c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a0cc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a0d0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  size_t __value = __parse_ctx.next_arg_id();
   1a0d4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1a0d8:	e8 c3 00 00 00       	call   1a1a0 <_ZNSt3__126basic_format_parse_contextIcE11next_arg_idB8nn210000Ev>
   1a0dd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  return {__begin, uint32_t(__value)};
   1a0e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a0e5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a0e9:	8b 45 d0             	mov    -0x30(%rbp),%eax
   1a0ec:	89 45 f8             	mov    %eax,-0x8(%rbp)
   1a0ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a0f3:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1a0f6:	48 83 c4 30          	add    $0x30,%rsp
   1a0fa:	5d                   	pop    %rbp
   1a0fb:	c3                   	ret
   1a0fc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001a100 <_ZNSt3__18__format8__detail14__parse_manualB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES8_S8_RT0_>:
__parse_manual(_Iterator __begin, _Iterator __end, auto& __parse_ctx) {
   1a100:	55                   	push   %rbp
   1a101:	48 89 e5             	mov    %rsp,%rbp
   1a104:	48 83 ec 30          	sub    $0x30,%rsp
   1a108:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a10c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a110:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  __parse_number_result<_Iterator> __r = __format::__parse_number(__begin, __end);
   1a114:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a118:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1a11c:	e8 df 00 00 00       	call   1a200 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_>
   1a121:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a125:	89 55 f8             	mov    %edx,-0x8(%rbp)
  __parse_ctx.check_arg_id(__r.__value);
   1a128:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1a12c:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1a12f:	89 c6                	mov    %eax,%esi
   1a131:	e8 1a 00 00 00       	call   1a150 <_ZNSt3__126basic_format_parse_contextIcE12check_arg_idB8nn210000Em>
  return __r;
   1a136:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a13a:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1a13d:	48 83 c4 30          	add    $0x30,%rsp
   1a141:	5d                   	pop    %rbp
   1a142:	c3                   	ret
   1a143:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1a14a:	00 00 00 
   1a14d:	0f 1f 00             	nopl   (%rax)

000000000001a150 <_ZNSt3__126basic_format_parse_contextIcE12check_arg_idB8nn210000Em>:
    if (is_constant_evaluated() && __next_arg_id_ >= __num_args_)
      std::__throw_format_error("Argument index outside the valid range");

    return __next_arg_id_++;
  }
  _LIBCPP_HIDE_FROM_ABI constexpr void check_arg_id(size_t __id) {
   1a150:	55                   	push   %rbp
   1a151:	48 89 e5             	mov    %rsp,%rbp
   1a154:	48 83 ec 20          	sub    $0x20,%rsp
   1a158:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a15c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a160:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a164:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (__indexing_ == __automatic)
   1a168:	83 78 10 02          	cmpl   $0x2,0x10(%rax)
   1a16c:	75 0c                	jne    1a17a <_ZNSt3__126basic_format_parse_contextIcE12check_arg_idB8nn210000Em+0x2a>
      std::__throw_format_error("Using manual argument numbering in automatic argument numbering mode");
   1a16e:	48 8d 3d 2d 51 01 00 	lea    0x1512d(%rip),%rdi        # 2f2a2 <.L.str.14>
   1a175:	e8 c6 f9 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1a17a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    if (__indexing_ == __unknown)
   1a17e:	83 78 10 00          	cmpl   $0x0,0x10(%rax)
   1a182:	75 0b                	jne    1a18f <_ZNSt3__126basic_format_parse_contextIcE12check_arg_idB8nn210000Em+0x3f>
   1a184:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      __indexing_ = __manual;
   1a188:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
    //   expressions ([expr.const]).
    // Note: the Throws clause [format.parse.ctx]/10 doesn't specify the
    // behavior when id >= num_args_.
    if (is_constant_evaluated() && __id >= __num_args_)
      std::__throw_format_error("Argument index outside the valid range");
  }
   1a18f:	48 83 c4 20          	add    $0x20,%rsp
   1a193:	5d                   	pop    %rbp
   1a194:	c3                   	ret
   1a195:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1a19c:	00 00 00 
   1a19f:	90                   	nop

000000000001a1a0 <_ZNSt3__126basic_format_parse_contextIcE11next_arg_idB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr size_t next_arg_id() {
   1a1a0:	55                   	push   %rbp
   1a1a1:	48 89 e5             	mov    %rsp,%rbp
   1a1a4:	48 83 ec 10          	sub    $0x10,%rsp
   1a1a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a1ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a1b0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if (__indexing_ == __manual)
   1a1b4:	83 78 10 01          	cmpl   $0x1,0x10(%rax)
   1a1b8:	75 0c                	jne    1a1c6 <_ZNSt3__126basic_format_parse_contextIcE11next_arg_idB8nn210000Ev+0x26>
      std::__throw_format_error("Using automatic argument numbering in manual argument numbering mode");
   1a1ba:	48 8d 3d 26 51 01 00 	lea    0x15126(%rip),%rdi        # 2f2e7 <.L.str.15>
   1a1c1:	e8 7a f9 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1a1c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    if (__indexing_ == __unknown)
   1a1ca:	83 78 10 00          	cmpl   $0x0,0x10(%rax)
   1a1ce:	75 0b                	jne    1a1db <_ZNSt3__126basic_format_parse_contextIcE11next_arg_idB8nn210000Ev+0x3b>
   1a1d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      __indexing_ = __automatic;
   1a1d4:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%rax)
   1a1db:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    return __next_arg_id_++;
   1a1df:	48 8b 41 18          	mov    0x18(%rcx),%rax
   1a1e3:	48 89 c2             	mov    %rax,%rdx
   1a1e6:	48 83 c2 01          	add    $0x1,%rdx
   1a1ea:	48 89 51 18          	mov    %rdx,0x18(%rcx)
   1a1ee:	48 83 c4 10          	add    $0x10,%rsp
   1a1f2:	5d                   	pop    %rbp
   1a1f3:	c3                   	ret
   1a1f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1a1fb:	00 00 00 
   1a1fe:	66 90                	xchg   %ax,%ax

000000000001a200 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_>:
__parse_number(_Iterator __begin, _Iterator __end_input) {
   1a200:	55                   	push   %rbp
   1a201:	48 89 e5             	mov    %rsp,%rbp
   1a204:	48 83 ec 40          	sub    $0x40,%rsp
   1a208:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a20c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  _Iterator __end  = __end_input - __begin > 9 ? __begin + 9 : __end_input;
   1a210:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a214:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1a218:	48 29 c8             	sub    %rcx,%rax
   1a21b:	48 83 f8 09          	cmp    $0x9,%rax
   1a21f:	7e 0e                	jle    1a22f <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x2f>
   1a221:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a225:	48 83 c0 09          	add    $0x9,%rax
   1a229:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1a22d:	eb 08                	jmp    1a237 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x37>
   1a22f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a233:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1a237:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1a23b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  uint32_t __value = *__begin - _CharT('0');
   1a23f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a243:	0f be 00             	movsbl (%rax),%eax
   1a246:	83 e8 30             	sub    $0x30,%eax
   1a249:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  while (++__begin != __end) {
   1a24c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a250:	48 83 c0 01          	add    $0x1,%rax
   1a254:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a258:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1a25c:	74 40                	je     1a29e <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x9e>
    if (*__begin < _CharT('0') || *__begin > _CharT('9'))
   1a25e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a262:	0f be 00             	movsbl (%rax),%eax
   1a265:	83 f8 30             	cmp    $0x30,%eax
   1a268:	7c 0c                	jl     1a276 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x76>
   1a26a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a26e:	0f be 00             	movsbl (%rax),%eax
   1a271:	83 f8 39             	cmp    $0x39,%eax
   1a274:	7e 13                	jle    1a289 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x89>
      return {__begin, __value};
   1a276:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a27a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a27e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1a281:	89 45 f8             	mov    %eax,-0x8(%rbp)
   1a284:	e9 a9 00 00 00       	jmp    1a332 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x132>
    __value = __value * 10 + *__begin - _CharT('0');
   1a289:	6b 45 d4 0a          	imul   $0xa,-0x2c(%rbp),%eax
   1a28d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1a291:	0f be 09             	movsbl (%rcx),%ecx
   1a294:	01 c8                	add    %ecx,%eax
   1a296:	83 e8 30             	sub    $0x30,%eax
   1a299:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  while (++__begin != __end) {
   1a29c:	eb ae                	jmp    1a24c <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x4c>
  if (__begin != __end_input && *__begin >= _CharT('0') && *__begin <= _CharT('9')) {
   1a29e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a2a2:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1a2a6:	74 7c                	je     1a324 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x124>
   1a2a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a2ac:	0f be 00             	movsbl (%rax),%eax
   1a2af:	83 f8 30             	cmp    $0x30,%eax
   1a2b2:	7c 70                	jl     1a324 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x124>
   1a2b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a2b8:	0f be 00             	movsbl (%rax),%eax
   1a2bb:	83 f8 39             	cmp    $0x39,%eax
   1a2be:	7f 64                	jg     1a324 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x124>
    uint64_t __v = uint64_t(__value) * 10 + *__begin++ - _CharT('0');
   1a2c0:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1a2c3:	48 6b c0 0a          	imul   $0xa,%rax,%rax
   1a2c7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1a2cb:	48 89 ca             	mov    %rcx,%rdx
   1a2ce:	48 83 c2 01          	add    $0x1,%rdx
   1a2d2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a2d6:	48 0f be 09          	movsbq (%rcx),%rcx
   1a2da:	48 01 c8             	add    %rcx,%rax
   1a2dd:	48 83 e8 30          	sub    $0x30,%rax
   1a2e1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    if (__v > __number_max || (__begin != __end_input && *__begin >= _CharT('0') && *__begin <= _CharT('9')))
   1a2e5:	48 81 7d c8 ff ff ff 	cmpq   $0x7fffffff,-0x38(%rbp)
   1a2ec:	7f 
   1a2ed:	77 22                	ja     1a311 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x111>
   1a2ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a2f3:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1a2f7:	74 24                	je     1a31d <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x11d>
   1a2f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a2fd:	0f be 00             	movsbl (%rax),%eax
   1a300:	83 f8 30             	cmp    $0x30,%eax
   1a303:	7c 18                	jl     1a31d <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x11d>
   1a305:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a309:	0f be 00             	movsbl (%rax),%eax
   1a30c:	83 f8 39             	cmp    $0x39,%eax
   1a30f:	7f 0c                	jg     1a31d <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_+0x11d>
      std::__throw_format_error("The numeric value of the format specifier is too large");
   1a311:	48 8d 3d 14 50 01 00 	lea    0x15014(%rip),%rdi        # 2f32c <.L.str.16>
   1a318:	e8 23 f8 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
    __value = __v;
   1a31d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a321:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  return {__begin, __value};
   1a324:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a328:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a32c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1a32f:	89 45 f8             	mov    %eax,-0x8(%rbp)
}
   1a332:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a336:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1a339:	48 83 c4 40          	add    $0x40,%rsp
   1a33d:	5d                   	pop    %rbp
   1a33e:	c3                   	ret
   1a33f:	90                   	nop

000000000001a340 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRNS_9monostateEEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSM_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a340:	55                   	push   %rbp
   1a341:	48 89 e5             	mov    %rsp,%rbp
   1a344:	48 83 ec 20          	sub    $0x20,%rsp
   1a348:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a34c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a350:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a354:	e8 27 00 00 00       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a359:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a35d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a361:	e8 3a 04 00 00       	call   1a7a0 <_ZNSt3__17forwardB8nn210000IRNS_9monostateEEEOT_Ru20__remove_reference_tIS3_E>
   1a366:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a36a:	48 89 c6             	mov    %rax,%rsi
   1a36d:	e8 0e 04 00 00       	call   1a780 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRNS_9monostateEEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSL_>
   1a372:	48 83 c4 20          	add    $0x20,%rsp
   1a376:	5d                   	pop    %rbp
   1a377:	c3                   	ret
   1a378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a37f:	00 

000000000001a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1a380:	55                   	push   %rbp
   1a381:	48 89 e5             	mov    %rsp,%rbp
   1a384:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1a388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a38c:	5d                   	pop    %rbp
   1a38d:	c3                   	ret
   1a38e:	66 90                	xchg   %ax,%ax

000000000001a390 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRbEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a390:	55                   	push   %rbp
   1a391:	48 89 e5             	mov    %rsp,%rbp
   1a394:	48 83 ec 20          	sub    $0x20,%rsp
   1a398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a39c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a3a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a3a4:	e8 d7 ff ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a3a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a3ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a3b1:	e8 4a 04 00 00       	call   1a800 <_ZNSt3__17forwardB8nn210000IRbEEOT_Ru20__remove_reference_tIS2_E>
   1a3b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a3ba:	48 89 c6             	mov    %rax,%rsi
   1a3bd:	e8 0e 04 00 00       	call   1a7d0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRbEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a3c2:	48 83 c4 20          	add    $0x20,%rsp
   1a3c6:	5d                   	pop    %rbp
   1a3c7:	c3                   	ret
   1a3c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a3cf:	00 

000000000001a3d0 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRcEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a3d0:	55                   	push   %rbp
   1a3d1:	48 89 e5             	mov    %rsp,%rbp
   1a3d4:	48 83 ec 20          	sub    $0x20,%rsp
   1a3d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a3dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a3e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a3e4:	e8 97 ff ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a3e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a3ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a3f1:	e8 1a 33 00 00       	call   1d710 <_ZNSt3__17forwardB8nn210000IRcEEOT_Ru20__remove_reference_tIS2_E>
   1a3f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a3fa:	48 89 c6             	mov    %rax,%rsi
   1a3fd:	e8 ae 4f 00 00       	call   1f3b0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRcEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a402:	48 83 c4 20          	add    $0x20,%rsp
   1a406:	5d                   	pop    %rbp
   1a407:	c3                   	ret
   1a408:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a40f:	00 

000000000001a410 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRiEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a410:	55                   	push   %rbp
   1a411:	48 89 e5             	mov    %rsp,%rbp
   1a414:	48 83 ec 20          	sub    $0x20,%rsp
   1a418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a41c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a420:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a424:	e8 57 ff ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a429:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a42d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a431:	e8 3a 33 00 00       	call   1d770 <_ZNSt3__17forwardB8nn210000IRiEEOT_Ru20__remove_reference_tIS2_E>
   1a436:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a43a:	48 89 c6             	mov    %rax,%rsi
   1a43d:	e8 8e 73 00 00       	call   217d0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRiEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a442:	48 83 c4 20          	add    $0x20,%rsp
   1a446:	5d                   	pop    %rbp
   1a447:	c3                   	ret
   1a448:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a44f:	00 

000000000001a450 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRxEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a450:	55                   	push   %rbp
   1a451:	48 89 e5             	mov    %rsp,%rbp
   1a454:	48 83 ec 20          	sub    $0x20,%rsp
   1a458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a45c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a460:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a464:	e8 17 ff ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a469:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a46d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a471:	e8 7a 33 00 00       	call   1d7f0 <_ZNSt3__17forwardB8nn210000IRxEEOT_Ru20__remove_reference_tIS2_E>
   1a476:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a47a:	48 89 c6             	mov    %rax,%rsi
   1a47d:	e8 4e 77 00 00       	call   21bd0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRxEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a482:	48 83 c4 20          	add    $0x20,%rsp
   1a486:	5d                   	pop    %rbp
   1a487:	c3                   	ret
   1a488:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a48f:	00 

000000000001a490 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRnEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a490:	55                   	push   %rbp
   1a491:	48 89 e5             	mov    %rsp,%rbp
   1a494:	48 83 ec 20          	sub    $0x20,%rsp
   1a498:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a49c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a4a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a4a4:	e8 d7 fe ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a4a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a4ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a4b1:	e8 da 33 00 00       	call   1d890 <_ZNSt3__17forwardB8nn210000IRnEEOT_Ru20__remove_reference_tIS2_E>
   1a4b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a4ba:	48 89 c6             	mov    %rax,%rsi
   1a4bd:	e8 1e 8c 00 00       	call   230e0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRnEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a4c2:	48 83 c4 20          	add    $0x20,%rsp
   1a4c6:	5d                   	pop    %rbp
   1a4c7:	c3                   	ret
   1a4c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a4cf:	00 

000000000001a4d0 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRjEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a4d0:	55                   	push   %rbp
   1a4d1:	48 89 e5             	mov    %rsp,%rbp
   1a4d4:	48 83 ec 20          	sub    $0x20,%rsp
   1a4d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a4dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a4e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a4e4:	e8 97 fe ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a4e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a4ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a4f1:	e8 0a 34 00 00       	call   1d900 <_ZNSt3__17forwardB8nn210000IRjEEOT_Ru20__remove_reference_tIS2_E>
   1a4f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a4fa:	48 89 c6             	mov    %rax,%rsi
   1a4fd:	e8 7e ac 00 00       	call   25180 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRjEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a502:	48 83 c4 20          	add    $0x20,%rsp
   1a506:	5d                   	pop    %rbp
   1a507:	c3                   	ret
   1a508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a50f:	00 

000000000001a510 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRyEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a510:	55                   	push   %rbp
   1a511:	48 89 e5             	mov    %rsp,%rbp
   1a514:	48 83 ec 20          	sub    $0x20,%rsp
   1a518:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a51c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a520:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a524:	e8 57 fe ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a529:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a52d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a531:	e8 3a 34 00 00       	call   1d970 <_ZNSt3__17forwardB8nn210000IRyEEOT_Ru20__remove_reference_tIS2_E>
   1a536:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a53a:	48 89 c6             	mov    %rax,%rsi
   1a53d:	e8 7e ae 00 00       	call   253c0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRyEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a542:	48 83 c4 20          	add    $0x20,%rsp
   1a546:	5d                   	pop    %rbp
   1a547:	c3                   	ret
   1a548:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a54f:	00 

000000000001a550 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRoEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a550:	55                   	push   %rbp
   1a551:	48 89 e5             	mov    %rsp,%rbp
   1a554:	48 83 ec 20          	sub    $0x20,%rsp
   1a558:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a55c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a560:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a564:	e8 17 fe ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a569:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a56d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a571:	e8 7a 34 00 00       	call   1d9f0 <_ZNSt3__17forwardB8nn210000IRoEEOT_Ru20__remove_reference_tIS2_E>
   1a576:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a57a:	48 89 c6             	mov    %rax,%rsi
   1a57d:	e8 7e b0 00 00       	call   25600 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRoEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a582:	48 83 c4 20          	add    $0x20,%rsp
   1a586:	5d                   	pop    %rbp
   1a587:	c3                   	ret
   1a588:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a58f:	00 

000000000001a590 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRfEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a590:	55                   	push   %rbp
   1a591:	48 89 e5             	mov    %rsp,%rbp
   1a594:	48 83 ec 20          	sub    $0x20,%rsp
   1a598:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a59c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a5a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a5a4:	e8 d7 fd ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a5a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a5ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a5b1:	e8 aa 34 00 00       	call   1da60 <_ZNSt3__17forwardB8nn210000IRfEEOT_Ru20__remove_reference_tIS2_E>
   1a5b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a5ba:	48 89 c6             	mov    %rax,%rsi
   1a5bd:	e8 8e b3 00 00       	call   25950 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRfEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a5c2:	48 83 c4 20          	add    $0x20,%rsp
   1a5c6:	5d                   	pop    %rbp
   1a5c7:	c3                   	ret
   1a5c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a5cf:	00 

000000000001a5d0 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRdEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a5d0:	55                   	push   %rbp
   1a5d1:	48 89 e5             	mov    %rsp,%rbp
   1a5d4:	48 83 ec 20          	sub    $0x20,%rsp
   1a5d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a5dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a5e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a5e4:	e8 97 fd ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a5e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a5ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a5f1:	e8 ca 34 00 00       	call   1dac0 <_ZNSt3__17forwardB8nn210000IRdEEOT_Ru20__remove_reference_tIS2_E>
   1a5f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a5fa:	48 89 c6             	mov    %rax,%rsi
   1a5fd:	e8 8e db 00 00       	call   28190 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRdEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a602:	48 83 c4 20          	add    $0x20,%rsp
   1a606:	5d                   	pop    %rbp
   1a607:	c3                   	ret
   1a608:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a60f:	00 

000000000001a610 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JReEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a610:	55                   	push   %rbp
   1a611:	48 89 e5             	mov    %rsp,%rbp
   1a614:	48 83 ec 20          	sub    $0x20,%rsp
   1a618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a61c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a620:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a624:	e8 57 fd ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a629:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a62d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a631:	e8 ea 34 00 00       	call   1db20 <_ZNSt3__17forwardB8nn210000IReEEOT_Ru20__remove_reference_tIS2_E>
   1a636:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a63a:	48 89 c6             	mov    %rax,%rsi
   1a63d:	e8 8e ee 00 00       	call   294d0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JReEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a642:	48 83 c4 20          	add    $0x20,%rsp
   1a646:	5d                   	pop    %rbp
   1a647:	c3                   	ret
   1a648:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a64f:	00 

000000000001a650 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRS4_EEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSL_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a650:	55                   	push   %rbp
   1a651:	48 89 e5             	mov    %rsp,%rbp
   1a654:	48 83 ec 20          	sub    $0x20,%rsp
   1a658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a65c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a660:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a664:	e8 17 fd ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a669:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a66d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a671:	e8 da e8 ff ff       	call   18f50 <_ZNSt3__17forwardB8nn210000IRPKcEEOT_Ru20__remove_reference_tIS4_E>
   1a676:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a67a:	48 89 c6             	mov    %rax,%rsi
   1a67d:	e8 fe ff 00 00       	call   2a680 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRS4_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>
   1a682:	48 83 c4 20          	add    $0x20,%rsp
   1a686:	5d                   	pop    %rbp
   1a687:	c3                   	ret
   1a688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a68f:	00 

000000000001a690 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSP_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a690:	55                   	push   %rbp
   1a691:	48 89 e5             	mov    %rsp,%rbp
   1a694:	48 83 ec 20          	sub    $0x20,%rsp
   1a698:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a69c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a6a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a6a4:	e8 d7 fc ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a6a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a6ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a6b1:	e8 2a 35 00 00       	call   1dbe0 <_ZNSt3__17forwardB8nn210000IRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_Ru20__remove_reference_tIS6_E>
   1a6b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a6ba:	48 89 c6             	mov    %rax,%rsi
   1a6bd:	e8 7e 07 01 00       	call   2ae40 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSO_>
   1a6c2:	48 83 c4 20          	add    $0x20,%rsp
   1a6c6:	5d                   	pop    %rbp
   1a6c7:	c3                   	ret
   1a6c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a6cf:	00 

000000000001a6d0 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRPKvEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSN_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a6d0:	55                   	push   %rbp
   1a6d1:	48 89 e5             	mov    %rsp,%rbp
   1a6d4:	48 83 ec 20          	sub    $0x20,%rsp
   1a6d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a6dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a6e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a6e4:	e8 97 fc ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a6e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a6ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a6f1:	e8 4a 35 00 00       	call   1dc40 <_ZNSt3__17forwardB8nn210000IRPKvEEOT_Ru20__remove_reference_tIS4_E>
   1a6f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a6fa:	48 89 c6             	mov    %rax,%rsi
   1a6fd:	e8 ae 08 01 00       	call   2afb0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRPKvEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSM_>
   1a702:	48 83 c4 20          	add    $0x20,%rsp
   1a706:	5d                   	pop    %rbp
   1a707:	c3                   	ret
   1a708:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a70f:	00 

000000000001a710 <_ZNSt3__16invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JNS_16basic_format_argISC_E6handleEEEENS_13invoke_resultISD_JDpT0_EE4typeEOSD_DpOSN_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1a710:	55                   	push   %rbp
   1a711:	48 89 e5             	mov    %rsp,%rbp
   1a714:	48 83 ec 20          	sub    $0x20,%rsp
   1a718:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a71c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1a720:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a724:	e8 57 fc ff ff       	call   1a380 <_ZNSt3__17forwardB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_EEOSD_Ru20__remove_reference_tISD_E>
   1a729:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1a72d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1a731:	e8 6a 35 00 00       	call   1dca0 <_ZNSt3__17forwardB8nn210000INS_16basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6handleEEEOT_Ru20__remove_reference_tISB_E>
   1a736:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1a73a:	48 89 c6             	mov    %rax,%rsi
   1a73d:	e8 9e 0a 01 00       	call   2b1e0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JNS_16basic_format_argISC_E6handleEEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSM_>
   1a742:	48 83 c4 20          	add    $0x20,%rsp
   1a746:	5d                   	pop    %rbp
   1a747:	c3                   	ret
   1a748:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a74f:	00 

000000000001a750 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6handleC2B8nn210000ERNS_24__basic_format_arg_valueIS7_E8__handleE>:
  _LIBCPP_HIDE_FROM_ABI void format(basic_format_parse_context<char_type>& __parse_ctx, _Context& __ctx) const {
    __handle_.__format_(__parse_ctx, __ctx, __handle_.__ptr_);
  }

  _LIBCPP_HIDE_FROM_ABI explicit handle(typename __basic_format_arg_value<_Context>::__handle& __handle) noexcept
      : __handle_(__handle) {}
   1a750:	55                   	push   %rbp
   1a751:	48 89 e5             	mov    %rsp,%rbp
   1a754:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a758:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a75c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a760:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a764:	48 89 08             	mov    %rcx,(%rax)
   1a767:	5d                   	pop    %rbp
   1a768:	c3                   	ret
   1a769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>:
#  pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

[[__noreturn__]] _LIBCPP_HIDE_FROM_ABI inline void __libcpp_unreachable() {
   1a770:	55                   	push   %rbp
   1a771:	48 89 e5             	mov    %rsp,%rbp
   1a774:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1a77b:	00 00 00 
   1a77e:	66 90                	xchg   %ax,%ax

000000000001a780 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRNS_9monostateEEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSL_>:
               { return static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...); }
   1a780:	55                   	push   %rbp
   1a781:	48 89 e5             	mov    %rsp,%rbp
   1a784:	48 83 ec 20          	sub    $0x20,%rsp
   1a788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a78c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a790:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a794:	e8 17 00 00 00       	call   1a7b0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clINS_9monostateEEEDaSC_>
   1a799:	48 83 c4 20          	add    $0x20,%rsp
   1a79d:	5d                   	pop    %rbp
   1a79e:	c3                   	ret
   1a79f:	90                   	nop

000000000001a7a0 <_ZNSt3__17forwardB8nn210000IRNS_9monostateEEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1a7a0:	55                   	push   %rbp
   1a7a1:	48 89 e5             	mov    %rsp,%rbp
   1a7a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1a7a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a7ac:	5d                   	pop    %rbp
   1a7ad:	c3                   	ret
   1a7ae:	66 90                	xchg   %ax,%ax

000000000001a7b0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clINS_9monostateEEEDaSC_>:
        [&](auto __arg) {
   1a7b0:	55                   	push   %rbp
   1a7b1:	48 89 e5             	mov    %rsp,%rbp
   1a7b4:	48 83 ec 10          	sub    $0x10,%rsp
   1a7b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
            std::__throw_format_error("The argument index value is too large for the number of arguments supplied");
   1a7bc:	48 8d 3d a0 4b 01 00 	lea    0x14ba0(%rip),%rdi        # 2f363 <.L.str.17>
   1a7c3:	e8 78 f3 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1a7c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a7cf:	00 

000000000001a7d0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRbEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   1a7d0:	55                   	push   %rbp
   1a7d1:	48 89 e5             	mov    %rsp,%rbp
   1a7d4:	48 83 ec 10          	sub    $0x10,%rsp
   1a7d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a7dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a7e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a7e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a7e8:	8a 00                	mov    (%rax),%al
   1a7ea:	0f b6 f0             	movzbl %al,%esi
   1a7ed:	83 e6 01             	and    $0x1,%esi
   1a7f0:	e8 1b 00 00 00       	call   1a810 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIbEEDaSC_>
   1a7f5:	48 83 c4 10          	add    $0x10,%rsp
   1a7f9:	5d                   	pop    %rbp
   1a7fa:	c3                   	ret
   1a7fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001a800 <_ZNSt3__17forwardB8nn210000IRbEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1a800:	55                   	push   %rbp
   1a801:	48 89 e5             	mov    %rsp,%rbp
   1a804:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1a808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a80c:	5d                   	pop    %rbp
   1a80d:	c3                   	ret
   1a80e:	66 90                	xchg   %ax,%ax

000000000001a810 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIbEEDaSC_>:
        [&](auto __arg) {
   1a810:	55                   	push   %rbp
   1a811:	48 89 e5             	mov    %rsp,%rbp
   1a814:	48 83 ec 40          	sub    $0x40,%rsp
   1a818:	40 88 f0             	mov    %sil,%al
   1a81b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a81f:	24 01                	and    $0x1,%al
   1a821:	88 45 f7             	mov    %al,-0x9(%rbp)
   1a824:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a828:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1a82c:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   1a830:	e8 6b 00 00 00       	call   1a8a0 <_ZNSt3__19formatterIbcEC2Ev>
   1a835:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            if (__parse)
   1a839:	48 8b 40 10          	mov    0x10(%rax),%rax
   1a83d:	f6 00 01             	testb  $0x1,(%rax)
   1a840:	74 23                	je     1a865 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIbEEDaSC_+0x55>
   1a842:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   1a846:	48 8b 08             	mov    (%rax),%rcx
   1a849:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   1a84d:	48 8b 30             	mov    (%rax),%rsi
   1a850:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
   1a854:	e8 67 00 00 00       	call   1a8c0 <_ZNSt3__19formatterIbcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   1a859:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1a85d:	48 89 c6             	mov    %rax,%rsi
   1a860:	e8 bb f5 ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   1a865:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   1a869:	48 8b 41 08          	mov    0x8(%rcx),%rax
   1a86d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1a871:	8a 45 f7             	mov    -0x9(%rbp),%al
   1a874:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   1a878:	0f b6 f0             	movzbl %al,%esi
   1a87b:	83 e6 01             	and    $0x1,%esi
   1a87e:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
   1a882:	e8 89 00 00 00       	call   1a910 <_ZNKSt3__19formatterIbcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEbRSA_>
   1a887:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1a88b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1a88f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1a893:	e8 c8 f2 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   1a898:	48 83 c4 40          	add    $0x40,%rsp
   1a89c:	5d                   	pop    %rbp
   1a89d:	c3                   	ret
   1a89e:	66 90                	xchg   %ax,%ax

000000000001a8a0 <_ZNSt3__19formatterIbcEC2Ev>:
_LIBCPP_BEGIN_NAMESPACE_STD

#if _LIBCPP_STD_VER >= 20

template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<bool, _CharT> {
   1a8a0:	55                   	push   %rbp
   1a8a1:	48 89 e5             	mov    %rsp,%rbp
   1a8a4:	48 83 ec 10          	sub    $0x10,%rsp
   1a8a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a8ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a8b0:	e8 3b 01 00 00       	call   1a9f0 <_ZNSt3__113__format_spec8__parserIcEC2Ev>
   1a8b5:	48 83 c4 10          	add    $0x10,%rsp
   1a8b9:	5d                   	pop    %rbp
   1a8ba:	c3                   	ret
   1a8bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001a8c0 <_ZNSt3__19formatterIbcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>:
public:
  template <class _ParseContext>
  _LIBCPP_HIDE_FROM_ABI constexpr typename _ParseContext::iterator parse(_ParseContext& __ctx) {
   1a8c0:	55                   	push   %rbp
   1a8c1:	48 89 e5             	mov    %rsp,%rbp
   1a8c4:	48 83 ec 30          	sub    $0x30,%rsp
   1a8c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a8cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a8d0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1a8d4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    typename _ParseContext::iterator __result = __parser_.__parse(__ctx, __format_spec::__fields_integral);
   1a8d8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a8dc:	66 c7 45 e6 37 01    	movw   $0x137,-0x1a(%rbp)
   1a8e2:	66 8b 45 e6          	mov    -0x1a(%rbp),%ax
   1a8e6:	66 89 c2             	mov    %ax,%dx
   1a8e9:	e8 32 02 00 00       	call   1ab20 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E>
   1a8ee:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1a8f2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __format_spec::__process_parsed_bool(__parser_, "a bool");
   1a8f6:	48 8d 35 b1 4a 01 00 	lea    0x14ab1(%rip),%rsi        # 2f3ae <.L.str.18>
   1a8fd:	e8 ee 04 00 00       	call   1adf0 <_ZNSt3__113__format_spec21__process_parsed_boolB8nn210000IcEEvRNS0_8__parserIT_EEPKc>
    return __result;
   1a902:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a906:	48 83 c4 30          	add    $0x30,%rsp
   1a90a:	5d                   	pop    %rbp
   1a90b:	c3                   	ret
   1a90c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001a910 <_ZNKSt3__19formatterIbcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEbRSA_>:
  }

  template <class _FormatContext>
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(bool __value, _FormatContext& __ctx) const {
   1a910:	55                   	push   %rbp
   1a911:	48 89 e5             	mov    %rsp,%rbp
   1a914:	48 83 ec 70          	sub    $0x70,%rsp
   1a918:	40 88 f0             	mov    %sil,%al
   1a91b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1a91f:	24 01                	and    $0x1,%al
   1a921:	88 45 ef             	mov    %al,-0x11(%rbp)
   1a924:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1a928:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a92c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    switch (__parser_.__type_) {
   1a930:	8a 40 01             	mov    0x1(%rax),%al
   1a933:	88 45 bf             	mov    %al,-0x41(%rbp)
   1a936:	2c 02                	sub    $0x2,%al
   1a938:	72 10                	jb     1a94a <_ZNKSt3__19formatterIbcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEbRSA_+0x3a>
   1a93a:	eb 00                	jmp    1a93c <_ZNKSt3__19formatterIbcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEbRSA_+0x2c>
   1a93c:	8a 45 bf             	mov    -0x41(%rbp),%al
   1a93f:	04 fe                	add    $0xfe,%al
   1a941:	2c 06                	sub    $0x6,%al
   1a943:	72 4b                	jb     1a990 <_ZNKSt3__19formatterIbcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEbRSA_+0x80>
   1a945:	e9 8d 00 00 00       	jmp    1a9d7 <_ZNKSt3__19formatterIbcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEbRSA_+0xc7>
   1a94a:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    case __format_spec::__type::__default:
    case __format_spec::__type::__string:
      return __formatter::__format_bool(__value, __ctx, __parser_.__get_parsed_std_specifications(__ctx));
   1a94e:	8a 45 ef             	mov    -0x11(%rbp),%al
   1a951:	88 45 af             	mov    %al,-0x51(%rbp)
   1a954:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a958:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1a95c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1a960:	e8 ab 11 00 00       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   1a965:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   1a969:	48 89 c1             	mov    %rax,%rcx
   1a96c:	8a 45 af             	mov    -0x51(%rbp),%al
   1a96f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1a973:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1a977:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1a97b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1a97f:	0f b6 f8             	movzbl %al,%edi
   1a982:	83 e7 01             	and    $0x1,%edi
   1a985:	e8 d6 10 00 00       	call   1ba60 <_ZNSt3__111__formatter13__format_boolB8nn210000IcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorEbRS9_NS_13__format_spec23__parsed_specificationsIT_EE>
   1a98a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a98e:	eb 4c                	jmp    1a9dc <_ZNKSt3__19formatterIbcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEbRSA_+0xcc>
   1a990:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    case __format_spec::__type::__hexadecimal_lower_case:
    case __format_spec::__type::__hexadecimal_upper_case:
      // Promotes bool to an integral type. This reduces the number of
      // instantiations of __format_integer reducing code size.
      return __formatter::__format_integer(
          static_cast<unsigned>(__value), __ctx, __parser_.__get_parsed_std_specifications(__ctx));
   1a994:	8a 45 ef             	mov    -0x11(%rbp),%al
   1a997:	24 01                	and    $0x1,%al
   1a999:	0f b6 c0             	movzbl %al,%eax
   1a99c:	89 45 94             	mov    %eax,-0x6c(%rbp)
   1a99f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a9a3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1a9a7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1a9ab:	e8 60 11 00 00       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   1a9b0:	8b 7d 94             	mov    -0x6c(%rbp),%edi
   1a9b3:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   1a9b7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1a9bb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      return __formatter::__format_integer(
   1a9bf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1a9c3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1a9c7:	31 c0                	xor    %eax,%eax
   1a9c9:	45 31 c0             	xor    %r8d,%r8d
   1a9cc:	e8 cf 11 00 00       	call   1bba0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   1a9d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a9d5:	eb 05                	jmp    1a9dc <_ZNKSt3__19formatterIbcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEbRSA_+0xcc>

    default:
      _LIBCPP_ASSERT_INTERNAL(false, "The parse function should have validated the type");
      __libcpp_unreachable();
   1a9d7:	e8 94 fd ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
    }
  }
   1a9dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a9e0:	48 83 c4 70          	add    $0x70,%rsp
   1a9e4:	5d                   	pop    %rbp
   1a9e5:	c3                   	ret
   1a9e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1a9ed:	00 00 00 

000000000001a9f0 <_ZNSt3__113__format_spec8__parserIcEC2Ev>:
/// inherit from the std::formatter specializations. This means this class
/// must be ABI stable. To aid the stability the unused bits in the class are
/// set to zero. That way they can be repurposed if a future revision of the
/// Standards adds new fields to std-format-spec.
template <class _CharT>
class _LIBCPP_TEMPLATE_VIS __parser {
   1a9f0:	55                   	push   %rbp
   1a9f1:	48 89 e5             	mov    %rsp,%rbp
   1a9f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a9f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a9fc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        .__width_{__get_width(__ctx)},
        .__precision_{__get_precision(__ctx)},
        .__fill_{__fill_}};
  }

  __alignment __alignment_     : 3 {__alignment::__default};
   1aa00:	8a 08                	mov    (%rax),%cl
   1aa02:	80 e1 f8             	and    $0xf8,%cl
   1aa05:	80 c9 00             	or     $0x0,%cl
   1aa08:	88 08                	mov    %cl,(%rax)
  __sign __sign_               : 2 {__sign::__default};
   1aa0a:	8a 08                	mov    (%rax),%cl
   1aa0c:	80 e1 e7             	and    $0xe7,%cl
   1aa0f:	80 c9 00             	or     $0x0,%cl
   1aa12:	88 08                	mov    %cl,(%rax)
  bool __alternate_form_       : 1 {false};
   1aa14:	8a 08                	mov    (%rax),%cl
   1aa16:	80 e1 df             	and    $0xdf,%cl
   1aa19:	80 c9 00             	or     $0x0,%cl
   1aa1c:	88 08                	mov    %cl,(%rax)
  bool __locale_specific_form_ : 1 {false};
   1aa1e:	8a 08                	mov    (%rax),%cl
   1aa20:	80 e1 bf             	and    $0xbf,%cl
   1aa23:	80 c9 00             	or     $0x0,%cl
   1aa26:	88 08                	mov    %cl,(%rax)
  bool __clear_brackets_       : 1 {false};
   1aa28:	8a 08                	mov    (%rax),%cl
   1aa2a:	80 e1 7f             	and    $0x7f,%cl
   1aa2d:	80 c9 00             	or     $0x0,%cl
   1aa30:	88 08                	mov    %cl,(%rax)
  __type __type_{__type::__default};
   1aa32:	c6 40 01 00          	movb   $0x0,0x1(%rax)

  // These flags are only used for formatting chrono. Since the struct has
  // padding space left it's added to this structure.
  bool __hour_ : 1 {false};
   1aa36:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aa3a:	66 83 e1 fe          	and    $0xfffe,%cx
   1aa3e:	66 83 c9 00          	or     $0x0,%cx
   1aa42:	66 89 48 02          	mov    %cx,0x2(%rax)

  bool __weekday_name_ : 1 {false};
   1aa46:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aa4a:	66 83 e1 fd          	and    $0xfffd,%cx
   1aa4e:	66 83 c9 00          	or     $0x0,%cx
   1aa52:	66 89 48 02          	mov    %cx,0x2(%rax)
  bool __weekday_      : 1 {false};
   1aa56:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aa5a:	66 83 e1 fb          	and    $0xfffb,%cx
   1aa5e:	66 83 c9 00          	or     $0x0,%cx
   1aa62:	66 89 48 02          	mov    %cx,0x2(%rax)

  bool __day_of_year_  : 1 {false};
   1aa66:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aa6a:	66 83 e1 f7          	and    $0xfff7,%cx
   1aa6e:	66 83 c9 00          	or     $0x0,%cx
   1aa72:	66 89 48 02          	mov    %cx,0x2(%rax)
  bool __week_of_year_ : 1 {false};
   1aa76:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aa7a:	66 83 e1 ef          	and    $0xffef,%cx
   1aa7e:	66 83 c9 00          	or     $0x0,%cx
   1aa82:	66 89 48 02          	mov    %cx,0x2(%rax)

  bool __month_name_ : 1 {false};
   1aa86:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aa8a:	66 83 e1 df          	and    $0xffdf,%cx
   1aa8e:	66 83 c9 00          	or     $0x0,%cx
   1aa92:	66 89 48 02          	mov    %cx,0x2(%rax)

  uint8_t __reserved_0_ : 2 {0};
   1aa96:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aa9a:	66 81 e1 3f ff       	and    $0xff3f,%cx
   1aa9f:	66 83 c9 00          	or     $0x0,%cx
   1aaa3:	66 89 48 02          	mov    %cx,0x2(%rax)
  uint8_t __reserved_1_ : 6 {0};
   1aaa7:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aaab:	66 81 e1 ff c0       	and    $0xc0ff,%cx
   1aab0:	66 83 c9 00          	or     $0x0,%cx
   1aab4:	66 89 48 02          	mov    %cx,0x2(%rax)
  // These two flags are only used internally and not part of the
  // __parsed_specifications. Therefore put them at the end.
  bool __width_as_arg_     : 1 {false};
   1aab8:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aabc:	66 81 e1 ff bf       	and    $0xbfff,%cx
   1aac1:	66 83 c9 00          	or     $0x0,%cx
   1aac5:	66 89 48 02          	mov    %cx,0x2(%rax)
  bool __precision_as_arg_ : 1 {false};
   1aac9:	66 8b 48 02          	mov    0x2(%rax),%cx
   1aacd:	66 81 e1 ff 7f       	and    $0x7fff,%cx
   1aad2:	66 83 c9 00          	or     $0x0,%cx
   1aad6:	66 89 48 02          	mov    %cx,0x2(%rax)

  /// The requested width, either the value or the arg-id.
  int32_t __width_{0};
   1aada:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)

  /// The requested precision, either the value or the arg-id.
  int32_t __precision_{-1};
   1aae1:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%rax)

  __code_point<_CharT> __fill_{};
   1aae8:	48 89 c1             	mov    %rax,%rcx
   1aaeb:	48 83 c1 0c          	add    $0xc,%rcx
  char __data[4] = {' '};
   1aaef:	c6 40 0c 20          	movb   $0x20,0xc(%rax)
   1aaf3:	48 89 c8             	mov    %rcx,%rax
   1aaf6:	48 83 c0 01          	add    $0x1,%rax
   1aafa:	48 83 c1 04          	add    $0x4,%rcx
   1aafe:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1ab02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1ab06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ab0a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1ab0e:	c6 00 00             	movb   $0x0,(%rax)
   1ab11:	48 83 c0 01          	add    $0x1,%rax
   1ab15:	48 39 c8             	cmp    %rcx,%rax
   1ab18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1ab1c:	75 e8                	jne    1ab06 <_ZNSt3__113__format_spec8__parserIcEC2Ev+0x116>
class _LIBCPP_TEMPLATE_VIS __parser {
   1ab1e:	5d                   	pop    %rbp
   1ab1f:	c3                   	ret

000000000001ab20 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E>:
  _LIBCPP_HIDE_FROM_ABI constexpr typename _ParseContext::iterator __parse(_ParseContext& __ctx, __fields __fields) {
   1ab20:	55                   	push   %rbp
   1ab21:	48 89 e5             	mov    %rsp,%rbp
   1ab24:	48 83 ec 40          	sub    $0x40,%rsp
   1ab28:	66 89 d0             	mov    %dx,%ax
   1ab2b:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   1ab2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ab33:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ab37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab3b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    auto __begin = __ctx.begin();
   1ab3f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1ab43:	e8 88 ef ff ff       	call   19ad0 <_ZNKSt3__126basic_format_parse_contextIcE5beginB8nn210000Ev>
   1ab48:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    auto __end   = __ctx.end();
   1ab4c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1ab50:	e8 9b ef ff ff       	call   19af0 <_ZNKSt3__126basic_format_parse_contextIcE3endB8nn210000Ev>
   1ab55:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if (__begin == __end || *__begin == _CharT('}') || (__fields.__use_range_fill_ && *__begin == _CharT(':')))
   1ab59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ab5d:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ab61:	74 2a                	je     1ab8d <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x6d>
   1ab63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ab67:	0f be 00             	movsbl (%rax),%eax
   1ab6a:	83 f8 7d             	cmp    $0x7d,%eax
   1ab6d:	74 1e                	je     1ab8d <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x6d>
   1ab6f:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1ab73:	66 c1 e8 06          	shr    $0x6,%ax
   1ab77:	66 83 e0 01          	and    $0x1,%ax
   1ab7b:	66 83 f8 00          	cmp    $0x0,%ax
   1ab7f:	74 19                	je     1ab9a <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x7a>
   1ab81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ab85:	0f be 00             	movsbl (%rax),%eax
   1ab88:	83 f8 3a             	cmp    $0x3a,%eax
   1ab8b:	75 0d                	jne    1ab9a <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x7a>
      return __begin;
   1ab8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ab91:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ab95:	e9 45 02 00 00       	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
   1ab9a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    if (__parse_fill_align(__begin, __end) && __begin == __end)
   1ab9e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1aba2:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1aba6:	e8 95 02 00 00       	call   1ae40 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_>
   1abab:	a8 01                	test   $0x1,%al
   1abad:	75 02                	jne    1abb1 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x91>
   1abaf:	eb 17                	jmp    1abc8 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0xa8>
   1abb1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1abb5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1abb9:	75 0d                	jne    1abc8 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0xa8>
      return __begin;
   1abbb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1abbf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1abc3:	e9 17 02 00 00       	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    if (__fields.__sign_) {
   1abc8:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1abcc:	66 83 e0 01          	and    $0x1,%ax
   1abd0:	66 83 f8 00          	cmp    $0x0,%ax
   1abd4:	74 2c                	je     1ac02 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0xe2>
   1abd6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1abda:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
      if (__parse_sign(__begin) && __begin == __end)
   1abde:	e8 1d 03 00 00       	call   1af00 <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>
   1abe3:	a8 01                	test   $0x1,%al
   1abe5:	75 02                	jne    1abe9 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0xc9>
   1abe7:	eb 17                	jmp    1ac00 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0xe0>
   1abe9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1abed:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1abf1:	75 0d                	jne    1ac00 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0xe0>
        return __begin;
   1abf3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1abf7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1abfb:	e9 df 01 00 00       	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    } else if (std::is_constant_evaluated() && __parse_sign(__begin)) {
   1ac00:	eb 02                	jmp    1ac04 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0xe4>
   1ac02:	eb 00                	jmp    1ac04 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0xe4>
    if (__fields.__alternate_form_) {
   1ac04:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1ac08:	66 d1 e8             	shr    $1,%ax
   1ac0b:	66 83 e0 01          	and    $0x1,%ax
   1ac0f:	66 83 f8 00          	cmp    $0x0,%ax
   1ac13:	74 2c                	je     1ac41 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x121>
   1ac15:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1ac19:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
      if (__parse_alternate_form(__begin) && __begin == __end)
   1ac1d:	e8 6e 03 00 00       	call   1af90 <_ZNSt3__113__format_spec8__parserIcE22__parse_alternate_formB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>
   1ac22:	a8 01                	test   $0x1,%al
   1ac24:	75 02                	jne    1ac28 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x108>
   1ac26:	eb 17                	jmp    1ac3f <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x11f>
   1ac28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac2c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ac30:	75 0d                	jne    1ac3f <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x11f>
        return __begin;
   1ac32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ac3a:	e9 a0 01 00 00       	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    } else if (std::is_constant_evaluated() && __parse_alternate_form(__begin)) {
   1ac3f:	eb 02                	jmp    1ac43 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x123>
   1ac41:	eb 00                	jmp    1ac43 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x123>
    if (__fields.__zero_padding_) {
   1ac43:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1ac47:	66 c1 e8 02          	shr    $0x2,%ax
   1ac4b:	66 83 e0 01          	and    $0x1,%ax
   1ac4f:	66 83 f8 00          	cmp    $0x0,%ax
   1ac53:	74 2c                	je     1ac81 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x161>
   1ac55:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1ac59:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
      if (__parse_zero_padding(__begin) && __begin == __end)
   1ac5d:	e8 7e 03 00 00       	call   1afe0 <_ZNSt3__113__format_spec8__parserIcE20__parse_zero_paddingB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>
   1ac62:	a8 01                	test   $0x1,%al
   1ac64:	75 02                	jne    1ac68 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x148>
   1ac66:	eb 17                	jmp    1ac7f <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x15f>
   1ac68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac6c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ac70:	75 0d                	jne    1ac7f <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x15f>
        return __begin;
   1ac72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ac7a:	e9 60 01 00 00       	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    } else if (std::is_constant_evaluated() && __parse_zero_padding(__begin)) {
   1ac7f:	eb 02                	jmp    1ac83 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x163>
   1ac81:	eb 00                	jmp    1ac83 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x163>
   1ac83:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    if (__parse_width(__begin, __end, __ctx) && __begin == __end)
   1ac87:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1ac8b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1ac8f:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1ac93:	e8 a8 03 00 00       	call   1b040 <_ZNSt3__113__format_spec8__parserIcE13__parse_widthB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_>
   1ac98:	a8 01                	test   $0x1,%al
   1ac9a:	75 02                	jne    1ac9e <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x17e>
   1ac9c:	eb 17                	jmp    1acb5 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x195>
   1ac9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1aca2:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1aca6:	75 0d                	jne    1acb5 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x195>
      return __begin;
   1aca8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1acac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1acb0:	e9 2a 01 00 00       	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    if (__fields.__precision_) {
   1acb5:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1acb9:	66 c1 e8 03          	shr    $0x3,%ax
   1acbd:	66 83 e0 01          	and    $0x1,%ax
   1acc1:	66 83 f8 00          	cmp    $0x0,%ax
   1acc5:	74 34                	je     1acfb <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x1db>
   1acc7:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
      if (__parse_precision(__begin, __end, __ctx) && __begin == __end)
   1accb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1accf:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1acd3:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1acd7:	e8 64 04 00 00       	call   1b140 <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_>
   1acdc:	a8 01                	test   $0x1,%al
   1acde:	75 02                	jne    1ace2 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x1c2>
   1ace0:	eb 17                	jmp    1acf9 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x1d9>
   1ace2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ace6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1acea:	75 0d                	jne    1acf9 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x1d9>
        return __begin;
   1acec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1acf0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1acf4:	e9 e6 00 00 00       	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    } else if (std::is_constant_evaluated() && __parse_precision(__begin, __end, __ctx)) {
   1acf9:	eb 02                	jmp    1acfd <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x1dd>
   1acfb:	eb 00                	jmp    1acfd <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x1dd>
    if (__fields.__locale_specific_form_) {
   1acfd:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1ad01:	66 c1 e8 04          	shr    $0x4,%ax
   1ad05:	66 83 e0 01          	and    $0x1,%ax
   1ad09:	66 83 f8 00          	cmp    $0x0,%ax
   1ad0d:	74 2c                	je     1ad3b <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x21b>
   1ad0f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1ad13:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
      if (__parse_locale_specific_form(__begin) && __begin == __end)
   1ad17:	e8 64 05 00 00       	call   1b280 <_ZNSt3__113__format_spec8__parserIcE28__parse_locale_specific_formB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>
   1ad1c:	a8 01                	test   $0x1,%al
   1ad1e:	75 02                	jne    1ad22 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x202>
   1ad20:	eb 17                	jmp    1ad39 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x219>
   1ad22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ad26:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ad2a:	75 0d                	jne    1ad39 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x219>
        return __begin;
   1ad2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ad30:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ad34:	e9 a6 00 00 00       	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    } else if (std::is_constant_evaluated() && __parse_locale_specific_form(__begin)) {
   1ad39:	eb 02                	jmp    1ad3d <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x21d>
   1ad3b:	eb 00                	jmp    1ad3d <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x21d>
    if (__fields.__clear_brackets_) {
   1ad3d:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1ad41:	66 c1 e8 07          	shr    $0x7,%ax
   1ad45:	66 83 e0 01          	and    $0x1,%ax
   1ad49:	66 83 f8 00          	cmp    $0x0,%ax
   1ad4d:	74 29                	je     1ad78 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x258>
   1ad4f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1ad53:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
      if (__parse_clear_brackets(__begin) && __begin == __end)
   1ad57:	e8 74 05 00 00       	call   1b2d0 <_ZNSt3__113__format_spec8__parserIcE22__parse_clear_bracketsB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>
   1ad5c:	a8 01                	test   $0x1,%al
   1ad5e:	75 02                	jne    1ad62 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x242>
   1ad60:	eb 14                	jmp    1ad76 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x256>
   1ad62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ad66:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ad6a:	75 0a                	jne    1ad76 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x256>
        return __begin;
   1ad6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ad70:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ad74:	eb 69                	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    } else if (std::is_constant_evaluated() && __parse_clear_brackets(__begin)) {
   1ad76:	eb 02                	jmp    1ad7a <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x25a>
   1ad78:	eb 00                	jmp    1ad7a <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x25a>
    if (__fields.__type_)
   1ad7a:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1ad7e:	66 c1 e8 05          	shr    $0x5,%ax
   1ad82:	66 83 e0 01          	and    $0x1,%ax
   1ad86:	66 83 f8 00          	cmp    $0x0,%ax
   1ad8a:	74 0d                	je     1ad99 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x279>
   1ad8c:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1ad90:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
      __parse_type(__begin);
   1ad94:	e8 87 05 00 00       	call   1b320 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_>
    if (!__fields.__consume_all_)
   1ad99:	66 8b 45 f6          	mov    -0xa(%rbp),%ax
   1ad9d:	66 c1 e8 08          	shr    $0x8,%ax
   1ada1:	66 83 e0 01          	and    $0x1,%ax
   1ada5:	66 83 f8 00          	cmp    $0x0,%ax
   1ada9:	75 0a                	jne    1adb5 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x295>
      return __begin;
   1adab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1adaf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1adb3:	eb 2a                	jmp    1addf <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2bf>
    if (__begin != __end && *__begin != _CharT('}'))
   1adb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1adb9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1adbd:	74 18                	je     1add7 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2b7>
   1adbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1adc3:	0f be 00             	movsbl (%rax),%eax
   1adc6:	83 f8 7d             	cmp    $0x7d,%eax
   1adc9:	74 0c                	je     1add7 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E+0x2b7>
      std::__throw_format_error("The format specifier should consume the input or end with a '}'");
   1adcb:	48 8d 3d e3 45 01 00 	lea    0x145e3(%rip),%rdi        # 2f3b5 <.L.str.19>
   1add2:	e8 69 ed ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
    return __begin;
   1add7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1addb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   1addf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ade3:	48 83 c4 40          	add    $0x40,%rsp
   1ade7:	5d                   	pop    %rbp
   1ade8:	c3                   	ret
   1ade9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001adf0 <_ZNSt3__113__format_spec21__process_parsed_boolB8nn210000IcEEvRNS0_8__parserIT_EEPKc>:
_LIBCPP_HIDE_FROM_ABI constexpr void __process_display_type_char(__parser<_CharT>& __parser, const char* __id) {
  __format_spec::__process_display_type_bool_string(__parser, __id);
}

template <class _CharT>
_LIBCPP_HIDE_FROM_ABI constexpr void __process_parsed_bool(__parser<_CharT>& __parser, const char* __id) {
   1adf0:	55                   	push   %rbp
   1adf1:	48 89 e5             	mov    %rsp,%rbp
   1adf4:	48 83 ec 20          	sub    $0x20,%rsp
   1adf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1adfc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  switch (__parser.__type_) {
   1ae00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ae04:	8a 40 01             	mov    0x1(%rax),%al
   1ae07:	88 45 ef             	mov    %al,-0x11(%rbp)
   1ae0a:	2c 02                	sub    $0x2,%al
   1ae0c:	72 0d                	jb     1ae1b <_ZNSt3__113__format_spec21__process_parsed_boolB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x2b>
   1ae0e:	eb 00                	jmp    1ae10 <_ZNSt3__113__format_spec21__process_parsed_boolB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x20>
   1ae10:	8a 45 ef             	mov    -0x11(%rbp),%al
   1ae13:	04 fe                	add    $0xfe,%al
   1ae15:	2c 06                	sub    $0x6,%al
   1ae17:	72 11                	jb     1ae2a <_ZNSt3__113__format_spec21__process_parsed_boolB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x3a>
   1ae19:	eb 11                	jmp    1ae2c <_ZNSt3__113__format_spec21__process_parsed_boolB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x3c>
  case __format_spec::__type::__default:
  case __format_spec::__type::__string:
    __format_spec::__process_display_type_bool_string(__parser, __id);
   1ae1b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1ae1f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1ae23:	e8 58 07 00 00       	call   1b580 <_ZNSt3__113__format_spec34__process_display_type_bool_stringB8nn210000IcEEvRNS0_8__parserIT_EEPKc>
    break;
   1ae28:	eb 0b                	jmp    1ae35 <_ZNSt3__113__format_spec21__process_parsed_boolB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x45>
  case __format_spec::__type::__binary_upper_case:
  case __format_spec::__type::__octal:
  case __format_spec::__type::__decimal:
  case __format_spec::__type::__hexadecimal_lower_case:
  case __format_spec::__type::__hexadecimal_upper_case:
    break;
   1ae2a:	eb 09                	jmp    1ae35 <_ZNSt3__113__format_spec21__process_parsed_boolB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x45>

  default:
    __format_spec::__throw_invalid_type_format_error(__id);
   1ae2c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1ae30:	e8 9b 07 00 00       	call   1b5d0 <_ZNSt3__113__format_spec33__throw_invalid_type_format_errorB8nn210000EPKc>
  }
}
   1ae35:	48 83 c4 20          	add    $0x20,%rsp
   1ae39:	5d                   	pop    %rbp
   1ae3a:	c3                   	ret
   1ae3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001ae40 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_fill_align(_Iterator& __begin, _Iterator __end) {
   1ae40:	55                   	push   %rbp
   1ae41:	48 89 e5             	mov    %rsp,%rbp
   1ae44:	48 83 ec 30          	sub    $0x30,%rsp
   1ae48:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1ae4c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1ae50:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1ae54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ae58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if (__begin + 1 != __end) {
   1ae5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ae60:	48 8b 00             	mov    (%rax),%rax
   1ae63:	48 83 c0 01          	add    $0x1,%rax
   1ae67:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1ae6b:	74 57                	je     1aec4 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_+0x84>
   1ae6d:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
      if (__parse_alignment(*(__begin + 1))) {
   1ae71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ae75:	48 8b 00             	mov    (%rax),%rax
   1ae78:	8a 40 01             	mov    0x1(%rax),%al
   1ae7b:	0f be f0             	movsbl %al,%esi
   1ae7e:	e8 cd 05 00 00       	call   1b450 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec>
   1ae83:	a8 01                	test   $0x1,%al
   1ae85:	75 02                	jne    1ae89 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_+0x49>
   1ae87:	eb 39                	jmp    1aec2 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_+0x82>
   1ae89:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
        __validate_fill_character(*__begin);
   1ae8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ae91:	48 8b 00             	mov    (%rax),%rax
   1ae94:	8a 00                	mov    (%rax),%al
   1ae96:	0f be f0             	movsbl %al,%esi
   1ae99:	e8 32 06 00 00       	call   1b4d0 <_ZNSt3__113__format_spec8__parserIcE25__validate_fill_characterB8nn210000Ec>
   1ae9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        __fill_.__data[0] = *__begin;
   1aea2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1aea6:	48 8b 09             	mov    (%rcx),%rcx
   1aea9:	8a 09                	mov    (%rcx),%cl
   1aeab:	88 48 0c             	mov    %cl,0xc(%rax)
        __begin += 2;
   1aeae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aeb2:	48 8b 08             	mov    (%rax),%rcx
   1aeb5:	48 83 c1 02          	add    $0x2,%rcx
   1aeb9:	48 89 08             	mov    %rcx,(%rax)
        return true;
   1aebc:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1aec0:	eb 33                	jmp    1aef5 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_+0xb5>
    }
   1aec2:	eb 00                	jmp    1aec4 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_+0x84>
   1aec4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    if (!__parse_alignment(*__begin))
   1aec8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aecc:	48 8b 00             	mov    (%rax),%rax
   1aecf:	8a 00                	mov    (%rax),%al
   1aed1:	0f be f0             	movsbl %al,%esi
   1aed4:	e8 77 05 00 00       	call   1b450 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec>
   1aed9:	a8 01                	test   $0x1,%al
   1aedb:	75 06                	jne    1aee3 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_+0xa3>
      return false;
   1aedd:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1aee1:	eb 12                	jmp    1aef5 <_ZNSt3__113__format_spec8__parserIcE18__parse_fill_alignB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_S6_+0xb5>
    ++__begin;
   1aee3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aee7:	48 8b 08             	mov    (%rax),%rcx
   1aeea:	48 83 c1 01          	add    $0x1,%rcx
   1aeee:	48 89 08             	mov    %rcx,(%rax)
    return true;
   1aef1:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  }
   1aef5:	8a 45 ff             	mov    -0x1(%rbp),%al
   1aef8:	24 01                	and    $0x1,%al
   1aefa:	48 83 c4 30          	add    $0x30,%rsp
   1aefe:	5d                   	pop    %rbp
   1aeff:	c3                   	ret

000000000001af00 <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_sign(_Iterator& __begin) {
   1af00:	55                   	push   %rbp
   1af01:	48 89 e5             	mov    %rsp,%rbp
   1af04:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1af08:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1af0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1af10:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    switch (*__begin) {
   1af14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1af18:	48 8b 00             	mov    (%rax),%rax
   1af1b:	0f be 00             	movsbl (%rax),%eax
   1af1e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   1af21:	83 e8 20             	sub    $0x20,%eax
   1af24:	74 36                	je     1af5c <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x5c>
   1af26:	eb 00                	jmp    1af28 <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x28>
   1af28:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1af2b:	83 e8 2b             	sub    $0x2b,%eax
   1af2e:	74 1c                	je     1af4c <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x4c>
   1af30:	eb 00                	jmp    1af32 <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x32>
   1af32:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1af35:	83 e8 2d             	sub    $0x2d,%eax
   1af38:	75 32                	jne    1af6c <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x6c>
   1af3a:	eb 00                	jmp    1af3c <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x3c>
   1af3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      __sign_ = __sign::__minus;
   1af40:	8a 08                	mov    (%rax),%cl
   1af42:	80 e1 e7             	and    $0xe7,%cl
   1af45:	80 c9 08             	or     $0x8,%cl
   1af48:	88 08                	mov    %cl,(%rax)
      break;
   1af4a:	eb 26                	jmp    1af72 <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x72>
   1af4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      __sign_ = __sign::__plus;
   1af50:	8a 08                	mov    (%rax),%cl
   1af52:	80 e1 e7             	and    $0xe7,%cl
   1af55:	80 c9 10             	or     $0x10,%cl
   1af58:	88 08                	mov    %cl,(%rax)
      break;
   1af5a:	eb 16                	jmp    1af72 <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x72>
   1af5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      __sign_ = __sign::__space;
   1af60:	8a 08                	mov    (%rax),%cl
   1af62:	80 e1 e7             	and    $0xe7,%cl
   1af65:	80 c9 18             	or     $0x18,%cl
   1af68:	88 08                	mov    %cl,(%rax)
      break;
   1af6a:	eb 06                	jmp    1af72 <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x72>
      return false;
   1af6c:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1af70:	eb 12                	jmp    1af84 <_ZNSt3__113__format_spec8__parserIcE12__parse_signB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x84>
    ++__begin;
   1af72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1af76:	48 8b 08             	mov    (%rax),%rcx
   1af79:	48 83 c1 01          	add    $0x1,%rcx
   1af7d:	48 89 08             	mov    %rcx,(%rax)
    return true;
   1af80:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  }
   1af84:	8a 45 ff             	mov    -0x1(%rbp),%al
   1af87:	24 01                	and    $0x1,%al
   1af89:	5d                   	pop    %rbp
   1af8a:	c3                   	ret
   1af8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001af90 <_ZNSt3__113__format_spec8__parserIcE22__parse_alternate_formB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_alternate_form(_Iterator& __begin) {
   1af90:	55                   	push   %rbp
   1af91:	48 89 e5             	mov    %rsp,%rbp
   1af94:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1af98:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1af9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1afa0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (*__begin != _CharT('#'))
   1afa4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1afa8:	48 8b 00             	mov    (%rax),%rax
   1afab:	0f be 00             	movsbl (%rax),%eax
   1afae:	83 f8 23             	cmp    $0x23,%eax
   1afb1:	74 06                	je     1afb9 <_ZNSt3__113__format_spec8__parserIcE22__parse_alternate_formB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x29>
      return false;
   1afb3:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1afb7:	eb 20                	jmp    1afd9 <_ZNSt3__113__format_spec8__parserIcE22__parse_alternate_formB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x49>
   1afb9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    __alternate_form_ = true;
   1afbd:	8a 08                	mov    (%rax),%cl
   1afbf:	80 e1 df             	and    $0xdf,%cl
   1afc2:	80 c9 20             	or     $0x20,%cl
   1afc5:	88 08                	mov    %cl,(%rax)
    ++__begin;
   1afc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1afcb:	48 8b 08             	mov    (%rax),%rcx
   1afce:	48 83 c1 01          	add    $0x1,%rcx
   1afd2:	48 89 08             	mov    %rcx,(%rax)
    return true;
   1afd5:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  }
   1afd9:	8a 45 ff             	mov    -0x1(%rbp),%al
   1afdc:	24 01                	and    $0x1,%al
   1afde:	5d                   	pop    %rbp
   1afdf:	c3                   	ret

000000000001afe0 <_ZNSt3__113__format_spec8__parserIcE20__parse_zero_paddingB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_zero_padding(_Iterator& __begin) {
   1afe0:	55                   	push   %rbp
   1afe1:	48 89 e5             	mov    %rsp,%rbp
   1afe4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1afe8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1afec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1aff0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (*__begin != _CharT('0'))
   1aff4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aff8:	48 8b 00             	mov    (%rax),%rax
   1affb:	0f be 00             	movsbl (%rax),%eax
   1affe:	83 f8 30             	cmp    $0x30,%eax
   1b001:	74 06                	je     1b009 <_ZNSt3__113__format_spec8__parserIcE20__parse_zero_paddingB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x29>
      return false;
   1b003:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1b007:	eb 2c                	jmp    1b035 <_ZNSt3__113__format_spec8__parserIcE20__parse_zero_paddingB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x55>
   1b009:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    if (__alignment_ == __alignment::__default)
   1b00d:	8a 00                	mov    (%rax),%al
   1b00f:	24 07                	and    $0x7,%al
   1b011:	3c 00                	cmp    $0x0,%al
   1b013:	75 0e                	jne    1b023 <_ZNSt3__113__format_spec8__parserIcE20__parse_zero_paddingB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x43>
   1b015:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __alignment_ = __alignment::__zero_padding;
   1b019:	8a 08                	mov    (%rax),%cl
   1b01b:	80 e1 f8             	and    $0xf8,%cl
   1b01e:	80 c9 04             	or     $0x4,%cl
   1b021:	88 08                	mov    %cl,(%rax)
    ++__begin;
   1b023:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b027:	48 8b 08             	mov    (%rax),%rcx
   1b02a:	48 83 c1 01          	add    $0x1,%rcx
   1b02e:	48 89 08             	mov    %rcx,(%rax)
    return true;
   1b031:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  }
   1b035:	8a 45 ff             	mov    -0x1(%rbp),%al
   1b038:	24 01                	and    $0x1,%al
   1b03a:	5d                   	pop    %rbp
   1b03b:	c3                   	ret
   1b03c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001b040 <_ZNSt3__113__format_spec8__parserIcE13__parse_widthB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_width(_Iterator& __begin, _Iterator __end, auto& __ctx) {
   1b040:	55                   	push   %rbp
   1b041:	48 89 e5             	mov    %rsp,%rbp
   1b044:	48 83 ec 50          	sub    $0x50,%rsp
   1b048:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1b04c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1b050:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1b054:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   1b058:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b05c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    if (*__begin == _CharT('0'))
   1b060:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b064:	48 8b 00             	mov    (%rax),%rax
   1b067:	0f be 00             	movsbl (%rax),%eax
   1b06a:	83 f8 30             	cmp    $0x30,%eax
   1b06d:	75 0c                	jne    1b07b <_ZNSt3__113__format_spec8__parserIcE13__parse_widthB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0x3b>
      std::__throw_format_error("The width option should not have a leading zero");
   1b06f:	48 8d 3d a9 43 01 00 	lea    0x143a9(%rip),%rdi        # 2f41f <.L.str.21>
   1b076:	e8 c5 ea ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
    if (*__begin == _CharT('{')) {
   1b07b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b07f:	48 8b 00             	mov    (%rax),%rax
   1b082:	0f be 00             	movsbl (%rax),%eax
   1b085:	83 f8 7b             	cmp    $0x7b,%eax
   1b088:	75 52                	jne    1b0dc <_ZNSt3__113__format_spec8__parserIcE13__parse_widthB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0x9c>
      __format::__parse_number_result __r = __format_spec::__parse_arg_id(++__begin, __end, __ctx);
   1b08a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b08e:	48 8b 38             	mov    (%rax),%rdi
   1b091:	48 83 c7 01          	add    $0x1,%rdi
   1b095:	48 89 38             	mov    %rdi,(%rax)
   1b098:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1b09c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1b0a0:	e8 5b 04 00 00       	call   1b500 <_ZNSt3__113__format_spec14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS_8__format21__parse_number_resultIT_EES8_S8_RT0_>
   1b0a5:	48 89 c1             	mov    %rax,%rcx
   1b0a8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1b0ac:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   1b0b0:	89 55 d0             	mov    %edx,-0x30(%rbp)
      __width_as_arg_                     = true;
   1b0b3:	66 8b 48 02          	mov    0x2(%rax),%cx
   1b0b7:	66 81 e1 ff bf       	and    $0xbfff,%cx
   1b0bc:	66 81 c9 00 40       	or     $0x4000,%cx
   1b0c1:	66 89 48 02          	mov    %cx,0x2(%rax)
      __width_                            = __r.__value;
   1b0c5:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   1b0c8:	89 48 04             	mov    %ecx,0x4(%rax)
      __begin                             = __r.__last;
   1b0cb:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1b0cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b0d3:	48 89 08             	mov    %rcx,(%rax)
      return true;
   1b0d6:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1b0da:	eb 57                	jmp    1b133 <_ZNSt3__113__format_spec8__parserIcE13__parse_widthB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0xf3>
    if (*__begin < _CharT('0') || *__begin > _CharT('9'))
   1b0dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b0e0:	48 8b 00             	mov    (%rax),%rax
   1b0e3:	0f be 00             	movsbl (%rax),%eax
   1b0e6:	83 f8 30             	cmp    $0x30,%eax
   1b0e9:	7c 0f                	jl     1b0fa <_ZNSt3__113__format_spec8__parserIcE13__parse_widthB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0xba>
   1b0eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b0ef:	48 8b 00             	mov    (%rax),%rax
   1b0f2:	0f be 00             	movsbl (%rax),%eax
   1b0f5:	83 f8 39             	cmp    $0x39,%eax
   1b0f8:	7e 06                	jle    1b100 <_ZNSt3__113__format_spec8__parserIcE13__parse_widthB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0xc0>
      return false;
   1b0fa:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1b0fe:	eb 33                	jmp    1b133 <_ZNSt3__113__format_spec8__parserIcE13__parse_widthB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0xf3>
    __format::__parse_number_result __r = __format::__parse_number(__begin, __end);
   1b100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b104:	48 8b 38             	mov    (%rax),%rdi
   1b107:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1b10b:	e8 f0 f0 ff ff       	call   1a200 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_>
   1b110:	48 89 c1             	mov    %rax,%rcx
   1b113:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1b117:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   1b11b:	89 55 c0             	mov    %edx,-0x40(%rbp)
    __width_                            = __r.__value;
   1b11e:	8b 4d c0             	mov    -0x40(%rbp),%ecx
   1b121:	89 48 04             	mov    %ecx,0x4(%rax)
    __begin = __r.__last;
   1b124:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1b128:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b12c:	48 89 08             	mov    %rcx,(%rax)
    return true;
   1b12f:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  }
   1b133:	8a 45 ff             	mov    -0x1(%rbp),%al
   1b136:	24 01                	and    $0x1,%al
   1b138:	48 83 c4 50          	add    $0x50,%rsp
   1b13c:	5d                   	pop    %rbp
   1b13d:	c3                   	ret
   1b13e:	66 90                	xchg   %ax,%ax

000000000001b140 <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_precision(_Iterator& __begin, _Iterator __end, auto& __ctx) {
   1b140:	55                   	push   %rbp
   1b141:	48 89 e5             	mov    %rsp,%rbp
   1b144:	48 83 ec 50          	sub    $0x50,%rsp
   1b148:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1b14c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1b150:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1b154:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   1b158:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b15c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    if (*__begin != _CharT('.'))
   1b160:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b164:	48 8b 00             	mov    (%rax),%rax
   1b167:	0f be 00             	movsbl (%rax),%eax
   1b16a:	83 f8 2e             	cmp    $0x2e,%eax
   1b16d:	74 09                	je     1b178 <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0x38>
      return false;
   1b16f:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1b173:	e9 f6 00 00 00       	jmp    1b26e <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0x12e>
    ++__begin;
   1b178:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b17c:	48 8b 08             	mov    (%rax),%rcx
   1b17f:	48 83 c1 01          	add    $0x1,%rcx
   1b183:	48 89 08             	mov    %rcx,(%rax)
    if (__begin == __end)
   1b186:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b18a:	48 8b 00             	mov    (%rax),%rax
   1b18d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1b191:	75 0c                	jne    1b19f <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0x5f>
      std::__throw_format_error("End of input while parsing format specifier precision");
   1b193:	48 8d 3d 00 43 01 00 	lea    0x14300(%rip),%rdi        # 2f49a <.L.str.24>
   1b19a:	e8 a1 e9 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
    if (*__begin == _CharT('{')) {
   1b19f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b1a3:	48 8b 00             	mov    (%rax),%rax
   1b1a6:	0f be 00             	movsbl (%rax),%eax
   1b1a9:	83 f8 7b             	cmp    $0x7b,%eax
   1b1ac:	75 52                	jne    1b200 <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0xc0>
      __format::__parse_number_result __arg_id = __format_spec::__parse_arg_id(++__begin, __end, __ctx);
   1b1ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b1b2:	48 8b 38             	mov    (%rax),%rdi
   1b1b5:	48 83 c7 01          	add    $0x1,%rdi
   1b1b9:	48 89 38             	mov    %rdi,(%rax)
   1b1bc:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1b1c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1b1c4:	e8 37 03 00 00       	call   1b500 <_ZNSt3__113__format_spec14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS_8__format21__parse_number_resultIT_EES8_S8_RT0_>
   1b1c9:	48 89 c1             	mov    %rax,%rcx
   1b1cc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1b1d0:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   1b1d4:	89 55 d0             	mov    %edx,-0x30(%rbp)
      __precision_as_arg_                      = true;
   1b1d7:	66 8b 48 02          	mov    0x2(%rax),%cx
   1b1db:	66 81 e1 ff 7f       	and    $0x7fff,%cx
   1b1e0:	66 81 c9 00 80       	or     $0x8000,%cx
   1b1e5:	66 89 48 02          	mov    %cx,0x2(%rax)
      __precision_                             = __arg_id.__value;
   1b1e9:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   1b1ec:	89 48 08             	mov    %ecx,0x8(%rax)
      __begin                                  = __arg_id.__last;
   1b1ef:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1b1f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b1f7:	48 89 08             	mov    %rcx,(%rax)
      return true;
   1b1fa:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1b1fe:	eb 6e                	jmp    1b26e <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0x12e>
    if (*__begin < _CharT('0') || *__begin > _CharT('9'))
   1b200:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b204:	48 8b 00             	mov    (%rax),%rax
   1b207:	0f be 00             	movsbl (%rax),%eax
   1b20a:	83 f8 30             	cmp    $0x30,%eax
   1b20d:	7c 0f                	jl     1b21e <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0xde>
   1b20f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b213:	48 8b 00             	mov    (%rax),%rax
   1b216:	0f be 00             	movsbl (%rax),%eax
   1b219:	83 f8 39             	cmp    $0x39,%eax
   1b21c:	7e 0c                	jle    1b22a <_ZNSt3__113__format_spec8__parserIcE17__parse_precisionB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEEbRT_S8_RT0_+0xea>
      std::__throw_format_error("The precision option does not contain a value or an argument index");
   1b21e:	48 8d 3d ab 42 01 00 	lea    0x142ab(%rip),%rdi        # 2f4d0 <.L.str.25>
   1b225:	e8 16 e9 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
    __format::__parse_number_result __r = __format::__parse_number(__begin, __end);
   1b22a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b22e:	48 8b 38             	mov    (%rax),%rdi
   1b231:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1b235:	e8 c6 ef ff ff       	call   1a200 <_ZNSt3__18__format14__parse_numberB8nn210000ITkNS_19contiguous_iteratorEPKcEENS0_21__parse_number_resultIT_EES5_S5_>
   1b23a:	48 89 c1             	mov    %rax,%rcx
   1b23d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1b241:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   1b245:	89 55 c0             	mov    %edx,-0x40(%rbp)
    __precision_                        = __r.__value;
   1b248:	8b 4d c0             	mov    -0x40(%rbp),%ecx
   1b24b:	89 48 08             	mov    %ecx,0x8(%rax)
    __precision_as_arg_                 = false;
   1b24e:	66 8b 48 02          	mov    0x2(%rax),%cx
   1b252:	66 81 e1 ff 7f       	and    $0x7fff,%cx
   1b257:	66 83 c9 00          	or     $0x0,%cx
   1b25b:	66 89 48 02          	mov    %cx,0x2(%rax)
    __begin                             = __r.__last;
   1b25f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1b263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b267:	48 89 08             	mov    %rcx,(%rax)
    return true;
   1b26a:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  }
   1b26e:	8a 45 ff             	mov    -0x1(%rbp),%al
   1b271:	24 01                	and    $0x1,%al
   1b273:	48 83 c4 50          	add    $0x50,%rsp
   1b277:	5d                   	pop    %rbp
   1b278:	c3                   	ret
   1b279:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001b280 <_ZNSt3__113__format_spec8__parserIcE28__parse_locale_specific_formB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_locale_specific_form(_Iterator& __begin) {
   1b280:	55                   	push   %rbp
   1b281:	48 89 e5             	mov    %rsp,%rbp
   1b284:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1b288:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1b28c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b290:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (*__begin != _CharT('L'))
   1b294:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b298:	48 8b 00             	mov    (%rax),%rax
   1b29b:	0f be 00             	movsbl (%rax),%eax
   1b29e:	83 f8 4c             	cmp    $0x4c,%eax
   1b2a1:	74 06                	je     1b2a9 <_ZNSt3__113__format_spec8__parserIcE28__parse_locale_specific_formB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x29>
      return false;
   1b2a3:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1b2a7:	eb 20                	jmp    1b2c9 <_ZNSt3__113__format_spec8__parserIcE28__parse_locale_specific_formB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x49>
   1b2a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    __locale_specific_form_ = true;
   1b2ad:	8a 08                	mov    (%rax),%cl
   1b2af:	80 e1 bf             	and    $0xbf,%cl
   1b2b2:	80 c9 40             	or     $0x40,%cl
   1b2b5:	88 08                	mov    %cl,(%rax)
    ++__begin;
   1b2b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b2bb:	48 8b 08             	mov    (%rax),%rcx
   1b2be:	48 83 c1 01          	add    $0x1,%rcx
   1b2c2:	48 89 08             	mov    %rcx,(%rax)
    return true;
   1b2c5:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  }
   1b2c9:	8a 45 ff             	mov    -0x1(%rbp),%al
   1b2cc:	24 01                	and    $0x1,%al
   1b2ce:	5d                   	pop    %rbp
   1b2cf:	c3                   	ret

000000000001b2d0 <_ZNSt3__113__format_spec8__parserIcE22__parse_clear_bracketsB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_clear_brackets(_Iterator& __begin) {
   1b2d0:	55                   	push   %rbp
   1b2d1:	48 89 e5             	mov    %rsp,%rbp
   1b2d4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1b2d8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1b2dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b2e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (*__begin != _CharT('n'))
   1b2e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b2e8:	48 8b 00             	mov    (%rax),%rax
   1b2eb:	0f be 00             	movsbl (%rax),%eax
   1b2ee:	83 f8 6e             	cmp    $0x6e,%eax
   1b2f1:	74 06                	je     1b2f9 <_ZNSt3__113__format_spec8__parserIcE22__parse_clear_bracketsB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x29>
      return false;
   1b2f3:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1b2f7:	eb 20                	jmp    1b319 <_ZNSt3__113__format_spec8__parserIcE22__parse_clear_bracketsB8nn210000ITkNS_19contiguous_iteratorEPKcEEbRT_+0x49>
   1b2f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    __clear_brackets_ = true;
   1b2fd:	8a 08                	mov    (%rax),%cl
   1b2ff:	80 e1 7f             	and    $0x7f,%cl
   1b302:	80 c9 80             	or     $0x80,%cl
   1b305:	88 08                	mov    %cl,(%rax)
    ++__begin;
   1b307:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b30b:	48 8b 08             	mov    (%rax),%rcx
   1b30e:	48 83 c1 01          	add    $0x1,%rcx
   1b312:	48 89 08             	mov    %rcx,(%rax)
    return true;
   1b315:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  }
   1b319:	8a 45 ff             	mov    -0x1(%rbp),%al
   1b31c:	24 01                	and    $0x1,%al
   1b31e:	5d                   	pop    %rbp
   1b31f:	c3                   	ret

000000000001b320 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_>:
  _LIBCPP_HIDE_FROM_ABI constexpr void __parse_type(_Iterator& __begin) {
   1b320:	55                   	push   %rbp
   1b321:	48 89 e5             	mov    %rsp,%rbp
   1b324:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b328:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b32c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b330:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    switch (*__begin) {
   1b334:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b338:	48 8b 00             	mov    (%rax),%rax
   1b33b:	0f be 00             	movsbl (%rax),%eax
   1b33e:	83 c0 c1             	add    $0xffffffc1,%eax
   1b341:	89 c1                	mov    %eax,%ecx
   1b343:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1b347:	83 e8 39             	sub    $0x39,%eax
   1b34a:	0f 87 e4 00 00 00    	ja     1b434 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x114>
   1b350:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1b354:	48 8d 05 85 37 01 00 	lea    0x13785(%rip),%rax        # 2eae0 <_ZNSt3__16__itoa11__pow10_128E+0x300>
   1b35b:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   1b35f:	48 01 c8             	add    %rcx,%rax
   1b362:	ff e0                	jmp    *%rax
   1b364:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__hexfloat_upper_case;
   1b368:	c6 40 01 0c          	movb   $0xc,0x1(%rax)
      break;
   1b36c:	e9 c5 00 00 00       	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b371:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__binary_upper_case;
   1b375:	c6 40 01 03          	movb   $0x3,0x1(%rax)
      break;
   1b379:	e9 b8 00 00 00       	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b37e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__scientific_upper_case;
   1b382:	c6 40 01 0e          	movb   $0xe,0x1(%rax)
      break;
   1b386:	e9 ab 00 00 00       	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b38b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__fixed_upper_case;
   1b38f:	c6 40 01 10          	movb   $0x10,0x1(%rax)
      break;
   1b393:	e9 9e 00 00 00       	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b398:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__general_upper_case;
   1b39c:	c6 40 01 12          	movb   $0x12,0x1(%rax)
      break;
   1b3a0:	e9 91 00 00 00       	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__hexadecimal_upper_case;
   1b3a9:	c6 40 01 07          	movb   $0x7,0x1(%rax)
      break;
   1b3ad:	e9 84 00 00 00       	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__hexfloat_lower_case;
   1b3b6:	c6 40 01 0b          	movb   $0xb,0x1(%rax)
      break;
   1b3ba:	eb 7a                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__binary_lower_case;
   1b3c0:	c6 40 01 02          	movb   $0x2,0x1(%rax)
      break;
   1b3c4:	eb 70                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__char;
   1b3ca:	c6 40 01 0a          	movb   $0xa,0x1(%rax)
      break;
   1b3ce:	eb 66                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__decimal;
   1b3d4:	c6 40 01 05          	movb   $0x5,0x1(%rax)
      break;
   1b3d8:	eb 5c                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__scientific_lower_case;
   1b3de:	c6 40 01 0d          	movb   $0xd,0x1(%rax)
      break;
   1b3e2:	eb 52                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__fixed_lower_case;
   1b3e8:	c6 40 01 0f          	movb   $0xf,0x1(%rax)
      break;
   1b3ec:	eb 48                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__general_lower_case;
   1b3f2:	c6 40 01 11          	movb   $0x11,0x1(%rax)
      break;
   1b3f6:	eb 3e                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b3f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__octal;
   1b3fc:	c6 40 01 04          	movb   $0x4,0x1(%rax)
      break;
   1b400:	eb 34                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b402:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__pointer_lower_case;
   1b406:	c6 40 01 08          	movb   $0x8,0x1(%rax)
      break;
   1b40a:	eb 2a                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b40c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__pointer_upper_case;
   1b410:	c6 40 01 09          	movb   $0x9,0x1(%rax)
      break;
   1b414:	eb 20                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b416:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__string;
   1b41a:	c6 40 01 01          	movb   $0x1,0x1(%rax)
      break;
   1b41e:	eb 16                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b420:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__hexadecimal_lower_case;
   1b424:	c6 40 01 06          	movb   $0x6,0x1(%rax)
      break;
   1b428:	eb 0c                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
   1b42a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __type_ = __type::__debug;
   1b42e:	c6 40 01 13          	movb   $0x13,0x1(%rax)
      break;
   1b432:	eb 02                	jmp    1b436 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x116>
      return;
   1b434:	eb 0e                	jmp    1b444 <_ZNSt3__113__format_spec8__parserIcE12__parse_typeB8nn210000ITkNS_19contiguous_iteratorEPKcEEvRT_+0x124>
    ++__begin;
   1b436:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b43a:	48 8b 08             	mov    (%rax),%rcx
   1b43d:	48 83 c1 01          	add    $0x1,%rcx
   1b441:	48 89 08             	mov    %rcx,(%rax)
  }
   1b444:	5d                   	pop    %rbp
   1b445:	c3                   	ret
   1b446:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1b44d:	00 00 00 

000000000001b450 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __parse_alignment(_CharT __c) {
   1b450:	55                   	push   %rbp
   1b451:	48 89 e5             	mov    %rsp,%rbp
   1b454:	40 88 f0             	mov    %sil,%al
   1b457:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1b45b:	88 45 ef             	mov    %al,-0x11(%rbp)
   1b45e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b462:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    switch (__c) {
   1b466:	0f be 45 ef          	movsbl -0x11(%rbp),%eax
   1b46a:	89 45 e8             	mov    %eax,-0x18(%rbp)
   1b46d:	83 e8 3c             	sub    $0x3c,%eax
   1b470:	74 16                	je     1b488 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x38>
   1b472:	eb 00                	jmp    1b474 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x24>
   1b474:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1b477:	83 e8 3e             	sub    $0x3e,%eax
   1b47a:	74 34                	je     1b4b0 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x60>
   1b47c:	eb 00                	jmp    1b47e <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x2e>
   1b47e:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1b481:	83 e8 5e             	sub    $0x5e,%eax
   1b484:	74 16                	je     1b49c <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x4c>
   1b486:	eb 3c                	jmp    1b4c4 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x74>
   1b488:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __alignment_ = __alignment::__left;
   1b48c:	8a 08                	mov    (%rax),%cl
   1b48e:	80 e1 f8             	and    $0xf8,%cl
   1b491:	80 c9 01             	or     $0x1,%cl
   1b494:	88 08                	mov    %cl,(%rax)
      return true;
   1b496:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1b49a:	eb 2c                	jmp    1b4c8 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x78>
   1b49c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __alignment_ = __alignment::__center;
   1b4a0:	8a 08                	mov    (%rax),%cl
   1b4a2:	80 e1 f8             	and    $0xf8,%cl
   1b4a5:	80 c9 02             	or     $0x2,%cl
   1b4a8:	88 08                	mov    %cl,(%rax)
      return true;
   1b4aa:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1b4ae:	eb 18                	jmp    1b4c8 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x78>
   1b4b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
      __alignment_ = __alignment::__right;
   1b4b4:	8a 08                	mov    (%rax),%cl
   1b4b6:	80 e1 f8             	and    $0xf8,%cl
   1b4b9:	80 c9 03             	or     $0x3,%cl
   1b4bc:	88 08                	mov    %cl,(%rax)
      return true;
   1b4be:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1b4c2:	eb 04                	jmp    1b4c8 <_ZNSt3__113__format_spec8__parserIcE17__parse_alignmentB8nn210000Ec+0x78>
    return false;
   1b4c4:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  }
   1b4c8:	8a 45 ff             	mov    -0x1(%rbp),%al
   1b4cb:	24 01                	and    $0x1,%al
   1b4cd:	5d                   	pop    %rbp
   1b4ce:	c3                   	ret
   1b4cf:	90                   	nop

000000000001b4d0 <_ZNSt3__113__format_spec8__parserIcE25__validate_fill_characterB8nn210000Ec>:
  _LIBCPP_HIDE_FROM_ABI constexpr void __validate_fill_character(_CharT __fill) {
   1b4d0:	55                   	push   %rbp
   1b4d1:	48 89 e5             	mov    %rsp,%rbp
   1b4d4:	48 83 ec 10          	sub    $0x10,%rsp
   1b4d8:	40 88 f0             	mov    %sil,%al
   1b4db:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b4df:	88 45 f7             	mov    %al,-0x9(%rbp)
    if (__fill == _CharT('{'))
   1b4e2:	0f be 45 f7          	movsbl -0x9(%rbp),%eax
   1b4e6:	83 f8 7b             	cmp    $0x7b,%eax
   1b4e9:	75 0c                	jne    1b4f7 <_ZNSt3__113__format_spec8__parserIcE25__validate_fill_characterB8nn210000Ec+0x27>
      std::__throw_format_error("The fill option contains an invalid value");
   1b4eb:	48 8d 3d 03 3f 01 00 	lea    0x13f03(%rip),%rdi        # 2f3f5 <.L.str.20>
   1b4f2:	e8 49 e6 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  }
   1b4f7:	48 83 c4 10          	add    $0x10,%rsp
   1b4fb:	5d                   	pop    %rbp
   1b4fc:	c3                   	ret
   1b4fd:	0f 1f 00             	nopl   (%rax)

000000000001b500 <_ZNSt3__113__format_spec14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS_8__format21__parse_number_resultIT_EES8_S8_RT0_>:
__parse_arg_id(_Iterator __begin, _Iterator __end, _ParseContext& __ctx) {
   1b500:	55                   	push   %rbp
   1b501:	48 89 e5             	mov    %rsp,%rbp
   1b504:	48 83 ec 30          	sub    $0x30,%rsp
   1b508:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b50c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b510:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  if (__begin == __end)
   1b514:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b518:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1b51c:	75 0c                	jne    1b52a <_ZNSt3__113__format_spec14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS_8__format21__parse_number_resultIT_EES8_S8_RT0_+0x2a>
    std::__throw_format_error("End of input while parsing an argument index");
   1b51e:	48 8d 3d 2a 3f 01 00 	lea    0x13f2a(%rip),%rdi        # 2f44f <.L.str.22>
   1b525:	e8 16 e6 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  __format::__parse_number_result __r = __format::__parse_arg_id(__begin, __end, __ctx);
   1b52a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1b52e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1b532:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1b536:	e8 25 e8 ff ff       	call   19d60 <_ZNSt3__18__format14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS0_21__parse_number_resultIT_EES7_S7_RT0_>
   1b53b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b53f:	89 55 f8             	mov    %edx,-0x8(%rbp)
  if (__r.__last == __end || *__r.__last != _CharT('}'))
   1b542:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b546:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1b54a:	74 0c                	je     1b558 <_ZNSt3__113__format_spec14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS_8__format21__parse_number_resultIT_EES8_S8_RT0_+0x58>
   1b54c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b550:	0f be 00             	movsbl (%rax),%eax
   1b553:	83 f8 7d             	cmp    $0x7d,%eax
   1b556:	74 0c                	je     1b564 <_ZNSt3__113__format_spec14__parse_arg_idB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEEEENS_8__format21__parse_number_resultIT_EES8_S8_RT0_+0x64>
    std::__throw_format_error("The argument index is invalid");
   1b558:	48 8d 3d 1d 3f 01 00 	lea    0x13f1d(%rip),%rdi        # 2f47c <.L.str.23>
   1b55f:	e8 dc e5 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  ++__r.__last;
   1b564:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b568:	48 ff c0             	inc    %rax
   1b56b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  return __r;
   1b56f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b573:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1b576:	48 83 c4 30          	add    $0x30,%rsp
   1b57a:	5d                   	pop    %rbp
   1b57b:	c3                   	ret
   1b57c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001b580 <_ZNSt3__113__format_spec34__process_display_type_bool_stringB8nn210000IcEEvRNS0_8__parserIT_EEPKc>:
_LIBCPP_HIDE_FROM_ABI constexpr void __process_display_type_bool_string(__parser<_CharT>& __parser, const char* __id) {
   1b580:	55                   	push   %rbp
   1b581:	48 89 e5             	mov    %rsp,%rbp
   1b584:	48 83 ec 20          	sub    $0x20,%rsp
   1b588:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b58c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  __parser.__validate(__format_spec::__fields_bool, __id);
   1b590:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1b594:	66 c7 45 ee 30 01    	movw   $0x130,-0x12(%rbp)
   1b59a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b59e:	66 8b 45 ee          	mov    -0x12(%rbp),%ax
   1b5a2:	66 89 c6             	mov    %ax,%si
   1b5a5:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   1b5aa:	e8 81 00 00 00       	call   1b630 <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj>
  if (__parser.__alignment_ == __alignment::__default)
   1b5af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b5b3:	8a 00                	mov    (%rax),%al
   1b5b5:	24 07                	and    $0x7,%al
   1b5b7:	3c 00                	cmp    $0x0,%al
   1b5b9:	75 0e                	jne    1b5c9 <_ZNSt3__113__format_spec34__process_display_type_bool_stringB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x49>
    __parser.__alignment_ = __alignment::__left;
   1b5bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b5bf:	8a 08                	mov    (%rax),%cl
   1b5c1:	80 e1 f8             	and    $0xf8,%cl
   1b5c4:	80 c9 01             	or     $0x1,%cl
   1b5c7:	88 08                	mov    %cl,(%rax)
}
   1b5c9:	48 83 c4 20          	add    $0x20,%rsp
   1b5cd:	5d                   	pop    %rbp
   1b5ce:	c3                   	ret
   1b5cf:	90                   	nop

000000000001b5d0 <_ZNSt3__113__format_spec33__throw_invalid_type_format_errorB8nn210000EPKc>:
[[noreturn]] _LIBCPP_HIDE_FROM_ABI inline void __throw_invalid_type_format_error(const char* __id) {
   1b5d0:	55                   	push   %rbp
   1b5d1:	48 89 e5             	mov    %rsp,%rbp
   1b5d4:	48 83 ec 50          	sub    $0x50,%rsp
   1b5d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      (string("The type option contains an invalid value for ") + __id + " formatting argument").c_str());
   1b5dc:	48 8d 35 bf 3f 01 00 	lea    0x13fbf(%rip),%rsi        # 2f5a2 <.L.str.37>
   1b5e3:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   1b5e7:	e8 a4 02 00 00       	call   1b890 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000ILi0EEEPKc>
   1b5ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1b5f0:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
   1b5f4:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
   1b5f8:	e8 43 02 00 00       	call   1b840 <_ZNSt3__1plB8nn210000IcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_>
   1b5fd:	48 8d 15 8f 41 01 00 	lea    0x1418f(%rip),%rdx        # 2f793 <.L.str.38>
   1b604:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1b608:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
   1b60c:	e8 2f 02 00 00       	call   1b840 <_ZNSt3__1plB8nn210000IcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_>
   1b611:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1b615:	e8 c6 02 00 00       	call   1b8e0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strB8nn210000Ev>
   1b61a:	48 89 c7             	mov    %rax,%rdi
  std::__throw_format_error(
   1b61d:	e8 1e e5 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1b622:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1b629:	00 00 00 
   1b62c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001b630 <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj>:
  __validate(__fields __fields, const char* __id, uint32_t __type_mask = -1) const {
   1b630:	55                   	push   %rbp
   1b631:	48 89 e5             	mov    %rsp,%rbp
   1b634:	48 83 ec 30          	sub    $0x30,%rsp
   1b638:	66 89 f0             	mov    %si,%ax
   1b63b:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   1b63f:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1b643:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1b647:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
   1b64a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b64e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if (!__fields.__sign_ && __sign_ != __sign::__default) {
   1b652:	66 8b 45 fe          	mov    -0x2(%rbp),%ax
   1b656:	66 83 e0 01          	and    $0x1,%ax
   1b65a:	66 83 f8 00          	cmp    $0x0,%ax
   1b65e:	75 1f                	jne    1b67f <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0x4f>
   1b660:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b664:	8a 00                	mov    (%rax),%al
   1b666:	c0 e8 03             	shr    $0x3,%al
   1b669:	24 03                	and    $0x3,%al
   1b66b:	3c 00                	cmp    $0x0,%al
   1b66d:	74 10                	je     1b67f <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0x4f>
        __format_spec::__throw_invalid_option_format_error(__id, "sign");
   1b66f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1b673:	48 8d 35 99 3e 01 00 	lea    0x13e99(%rip),%rsi        # 2f513 <.L.str.27>
   1b67a:	e8 e1 00 00 00       	call   1b760 <_ZNSt3__113__format_spec35__throw_invalid_option_format_errorB8nn210000EPKcS2_>
    if (!__fields.__alternate_form_ && __alternate_form_) {
   1b67f:	66 8b 45 fe          	mov    -0x2(%rbp),%ax
   1b683:	66 d1 e8             	shr    $1,%ax
   1b686:	66 83 e0 01          	and    $0x1,%ax
   1b68a:	66 83 f8 00          	cmp    $0x0,%ax
   1b68e:	75 1f                	jne    1b6af <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0x7f>
   1b690:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b694:	8a 00                	mov    (%rax),%al
   1b696:	c0 e8 05             	shr    $0x5,%al
   1b699:	24 01                	and    $0x1,%al
   1b69b:	a8 01                	test   $0x1,%al
   1b69d:	74 10                	je     1b6af <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0x7f>
        __format_spec::__throw_invalid_option_format_error(__id, "alternate form");
   1b69f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1b6a3:	48 8d 35 6e 3e 01 00 	lea    0x13e6e(%rip),%rsi        # 2f518 <.L.str.28>
   1b6aa:	e8 b1 00 00 00       	call   1b760 <_ZNSt3__113__format_spec35__throw_invalid_option_format_errorB8nn210000EPKcS2_>
    if (!__fields.__zero_padding_ && __alignment_ == __alignment::__zero_padding) {
   1b6af:	66 8b 45 fe          	mov    -0x2(%rbp),%ax
   1b6b3:	66 c1 e8 02          	shr    $0x2,%ax
   1b6b7:	66 83 e0 01          	and    $0x1,%ax
   1b6bb:	66 83 f8 00          	cmp    $0x0,%ax
   1b6bf:	75 1c                	jne    1b6dd <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0xad>
   1b6c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b6c5:	8a 00                	mov    (%rax),%al
   1b6c7:	24 07                	and    $0x7,%al
   1b6c9:	3c 04                	cmp    $0x4,%al
   1b6cb:	75 10                	jne    1b6dd <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0xad>
        __format_spec::__throw_invalid_option_format_error(__id, "zero-padding");
   1b6cd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1b6d1:	48 8d 35 4f 3e 01 00 	lea    0x13e4f(%rip),%rsi        # 2f527 <.L.str.29>
   1b6d8:	e8 83 00 00 00       	call   1b760 <_ZNSt3__113__format_spec35__throw_invalid_option_format_errorB8nn210000EPKcS2_>
    if (!__fields.__precision_ && __precision_ != -1) { // Works both when the precision has a value or an arg-id.
   1b6dd:	66 8b 45 fe          	mov    -0x2(%rbp),%ax
   1b6e1:	66 c1 e8 03          	shr    $0x3,%ax
   1b6e5:	66 83 e0 01          	and    $0x1,%ax
   1b6e9:	66 83 f8 00          	cmp    $0x0,%ax
   1b6ed:	75 1a                	jne    1b709 <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0xd9>
   1b6ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b6f3:	83 78 08 ff          	cmpl   $0xffffffff,0x8(%rax)
   1b6f7:	74 10                	je     1b709 <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0xd9>
        __format_spec::__throw_invalid_option_format_error(__id, "precision");
   1b6f9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1b6fd:	48 8d 35 c2 3d 01 00 	lea    0x13dc2(%rip),%rsi        # 2f4c6 <.L.str.30>
   1b704:	e8 57 00 00 00       	call   1b760 <_ZNSt3__113__format_spec35__throw_invalid_option_format_errorB8nn210000EPKcS2_>
    if (!__fields.__locale_specific_form_ && __locale_specific_form_) {
   1b709:	66 8b 45 fe          	mov    -0x2(%rbp),%ax
   1b70d:	66 c1 e8 04          	shr    $0x4,%ax
   1b711:	66 83 e0 01          	and    $0x1,%ax
   1b715:	66 83 f8 00          	cmp    $0x0,%ax
   1b719:	75 1f                	jne    1b73a <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0x10a>
   1b71b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b71f:	8a 00                	mov    (%rax),%al
   1b721:	c0 e8 06             	shr    $0x6,%al
   1b724:	24 01                	and    $0x1,%al
   1b726:	a8 01                	test   $0x1,%al
   1b728:	74 10                	je     1b73a <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0x10a>
        __format_spec::__throw_invalid_option_format_error(__id, "locale-specific form");
   1b72a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1b72e:	48 8d 35 ff 3d 01 00 	lea    0x13dff(%rip),%rsi        # 2f534 <.L.str.31>
   1b735:	e8 26 00 00 00       	call   1b760 <_ZNSt3__113__format_spec35__throw_invalid_option_format_errorB8nn210000EPKcS2_>
   1b73a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    if ((__create_type_mask(__type_) & __type_mask) == 0) {
   1b73e:	8a 40 01             	mov    0x1(%rax),%al
   1b741:	0f b6 f8             	movzbl %al,%edi
   1b744:	e8 a7 00 00 00       	call   1b7f0 <_ZNSt3__113__format_spec18__create_type_maskB8nn210000ENS0_6__typeE>
   1b749:	23 45 e4             	and    -0x1c(%rbp),%eax
   1b74c:	83 f8 00             	cmp    $0x0,%eax
   1b74f:	75 09                	jne    1b75a <_ZNKSt3__113__format_spec8__parserIcE10__validateB8nn210000ENS0_8__fieldsB8nn210000EPKcj+0x12a>
        __format_spec::__throw_invalid_type_format_error(__id);
   1b751:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1b755:	e8 76 fe ff ff       	call   1b5d0 <_ZNSt3__113__format_spec33__throw_invalid_type_format_errorB8nn210000EPKc>
  }
   1b75a:	48 83 c4 30          	add    $0x30,%rsp
   1b75e:	5d                   	pop    %rbp
   1b75f:	c3                   	ret

000000000001b760 <_ZNSt3__113__format_spec35__throw_invalid_option_format_errorB8nn210000EPKcS2_>:
__throw_invalid_option_format_error(const char* __id, const char* __option) {
   1b760:	55                   	push   %rbp
   1b761:	48 89 e5             	mov    %rsp,%rbp
   1b764:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
   1b76b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b76f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      (string("The format specifier for ") + __id + " does not allow the " + __option + " option").c_str());
   1b773:	48 8d 35 cf 3d 01 00 	lea    0x13dcf(%rip),%rsi        # 2f549 <.L.str.32>
   1b77a:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
   1b781:	e8 0a 01 00 00       	call   1b890 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000ILi0EEEPKc>
   1b786:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1b78a:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
   1b78e:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
   1b795:	e8 a6 00 00 00       	call   1b840 <_ZNSt3__1plB8nn210000IcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_>
   1b79a:	48 8d 15 c2 3d 01 00 	lea    0x13dc2(%rip),%rdx        # 2f563 <.L.str.33>
   1b7a1:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
   1b7a5:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
   1b7a9:	e8 92 00 00 00       	call   1b840 <_ZNSt3__1plB8nn210000IcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_>
   1b7ae:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b7b2:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1b7b6:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
   1b7ba:	e8 81 00 00 00       	call   1b840 <_ZNSt3__1plB8nn210000IcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_>
   1b7bf:	48 8d 15 b2 3d 01 00 	lea    0x13db2(%rip),%rdx        # 2f578 <.L.str.34>
   1b7c6:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   1b7ca:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
   1b7ce:	e8 6d 00 00 00       	call   1b840 <_ZNSt3__1plB8nn210000IcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_>
   1b7d3:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   1b7d7:	e8 04 01 00 00       	call   1b8e0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strB8nn210000Ev>
   1b7dc:	48 89 c7             	mov    %rax,%rdi
  std::__throw_format_error(
   1b7df:	e8 5c e3 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1b7e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1b7eb:	00 00 00 
   1b7ee:	66 90                	xchg   %ax,%ax

000000000001b7f0 <_ZNSt3__113__format_spec18__create_type_maskB8nn210000ENS0_6__typeE>:
_LIBCPP_HIDE_FROM_ABI inline constexpr uint32_t __create_type_mask(__type __t) {
   1b7f0:	55                   	push   %rbp
   1b7f1:	48 89 e5             	mov    %rsp,%rbp
   1b7f4:	48 83 ec 10          	sub    $0x10,%rsp
   1b7f8:	40 88 f8             	mov    %dil,%al
   1b7fb:	88 45 fb             	mov    %al,-0x5(%rbp)
  uint32_t __shift = static_cast<uint32_t>(__t);
   1b7fe:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
   1b802:	89 45 f4             	mov    %eax,-0xc(%rbp)
  if (__shift == 0)
   1b805:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   1b809:	75 09                	jne    1b814 <_ZNSt3__113__format_spec18__create_type_maskB8nn210000ENS0_6__typeE+0x24>
    return 1;
   1b80b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
   1b812:	eb 1f                	jmp    1b833 <_ZNSt3__113__format_spec18__create_type_maskB8nn210000ENS0_6__typeE+0x43>
  if (__shift > 31)
   1b814:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
   1b818:	76 0c                	jbe    1b826 <_ZNSt3__113__format_spec18__create_type_maskB8nn210000ENS0_6__typeE+0x36>
    std::__throw_format_error("The type does not fit in the mask");
   1b81a:	48 8d 3d 5f 3d 01 00 	lea    0x13d5f(%rip),%rdi        # 2f580 <.L.str.35>
   1b821:	e8 1a e3 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  return 1 << __shift;
   1b826:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   1b829:	b8 01 00 00 00       	mov    $0x1,%eax
   1b82e:	d3 e0                	shl    %cl,%eax
   1b830:	89 45 fc             	mov    %eax,-0x4(%rbp)
}
   1b833:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1b836:	48 83 c4 10          	add    $0x10,%rsp
   1b83a:	5d                   	pop    %rbp
   1b83b:	c3                   	ret
   1b83c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001b840 <_ZNSt3__1plB8nn210000IcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_>:
  return std::move(__rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs) {
   1b840:	55                   	push   %rbp
   1b841:	48 89 e5             	mov    %rsp,%rbp
   1b844:	48 83 ec 30          	sub    $0x30,%rsp
   1b848:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b84c:	48 89 f8             	mov    %rdi,%rax
   1b84f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1b853:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b857:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b85b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  return std::move(__lhs.append(__rhs));
   1b85f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1b863:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1b867:	e8 e4 cd ff ff       	call   18650 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc>
   1b86c:	48 89 c7             	mov    %rax,%rdi
   1b86f:	e8 8c 00 00 00       	call   1b900 <_ZNSt3__14moveB8nn210000IRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEOu20__remove_reference_tIT_EOS8_>
   1b874:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1b878:	48 89 c6             	mov    %rax,%rsi
   1b87b:	e8 90 00 00 00       	call   1b910 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000EOS5_>
   1b880:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b884:	48 83 c4 30          	add    $0x30,%rsp
   1b888:	5d                   	pop    %rbp
   1b889:	c3                   	ret
   1b88a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001b890 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000ILi0EEEPKc>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(const _CharT* _LIBCPP_DIAGNOSE_NULLPTR __s) {
   1b890:	55                   	push   %rbp
   1b891:	48 89 e5             	mov    %rsp,%rbp
   1b894:	48 83 ec 20          	sub    $0x20,%rsp
   1b898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b89c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b8a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1b8a4:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   1b8a8:	e8 83 01 00 00       	call   1ba30 <_ZNSt3__19allocatorIcEC2B8nn210000Ev>
    __init(__s, traits_type::length(__s));
   1b8ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b8b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1b8b5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1b8b9:	e8 a2 7a fe ff       	call   3360 <_ZNSt3__111char_traitsIcE6lengthB8nn210000EPKc>
   1b8be:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1b8c2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1b8c6:	48 89 c2             	mov    %rax,%rdx
   1b8c9:	e8 22 c4 ff ff       	call   17cf0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm>
  }
   1b8ce:	48 83 c4 20          	add    $0x20,%rsp
   1b8d2:	5d                   	pop    %rbp
   1b8d3:	c3                   	ret
   1b8d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1b8db:	00 00 00 
   1b8de:	66 90                	xchg   %ax,%ax

000000000001b8e0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const value_type* c_str() const _NOEXCEPT { return data(); }
   1b8e0:	55                   	push   %rbp
   1b8e1:	48 89 e5             	mov    %rsp,%rbp
   1b8e4:	48 83 ec 10          	sub    $0x10,%rsp
   1b8e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b8ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1b8f0:	e8 0b c5 ff ff       	call   17e00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataB8nn210000Ev>
   1b8f5:	48 83 c4 10          	add    $0x10,%rsp
   1b8f9:	5d                   	pop    %rbp
   1b8fa:	c3                   	ret
   1b8fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001b900 <_ZNSt3__14moveB8nn210000IRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEOu20__remove_reference_tIT_EOS8_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   1b900:	55                   	push   %rbp
   1b901:	48 89 e5             	mov    %rsp,%rbp
   1b904:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   1b908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b90c:	5d                   	pop    %rbp
   1b90d:	c3                   	ret
   1b90e:	66 90                	xchg   %ax,%ax

000000000001b910 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000EOS5_>:
        __alloc_(std::move(__str.__alloc_)) {
   1b910:	55                   	push   %rbp
   1b911:	48 89 e5             	mov    %rsp,%rbp
   1b914:	48 83 ec 40          	sub    $0x40,%rsp
   1b918:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b91c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b920:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b924:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        }(__str)),
   1b928:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1b92c:	48 8d 7d ef          	lea    -0x11(%rbp),%rdi
      : __rep_([](basic_string& __s) -> decltype(__s.__rep_)&& {
   1b930:	e8 9b 00 00 00       	call   1b9d0 <_ZZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1B8nn210000EOS5_ENKUlRS5_E_clES7_>
   1b935:	48 89 c1             	mov    %rax,%rcx
   1b938:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b93c:	48 8b 11             	mov    (%rcx),%rdx
   1b93f:	48 89 10             	mov    %rdx,(%rax)
   1b942:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   1b946:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1b94a:	48 8b 49 10          	mov    0x10(%rcx),%rcx
   1b94e:	48 89 48 10          	mov    %rcx,0x10(%rax)
        __alloc_(std::move(__str.__alloc_)) {
   1b952:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1b956:	e8 b5 00 00 00       	call   1ba10 <_ZNSt3__14moveB8nn210000IRNS_9allocatorIcEEEEOu20__remove_reference_tIT_EOS4_>
    __str.__rep_ = __rep();
   1b95b:	31 c0                	xor    %eax,%eax
   1b95d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1b964:	00 
   1b965:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1b96c:	00 
   1b96d:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   1b974:	00 
   1b975:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b979:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1b97d:	48 89 08             	mov    %rcx,(%rax)
   1b980:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1b984:	48 89 48 08          	mov    %rcx,0x8(%rax)
   1b988:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1b98c:	48 89 48 10          	mov    %rcx,0x10(%rax)
    __str.__annotate_new(0);
   1b990:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1b994:	31 c0                	xor    %eax,%eax
   1b996:	31 c0                	xor    %eax,%eax
   1b998:	89 c6                	mov    %eax,%esi
   1b99a:	e8 81 c2 ff ff       	call   17c20 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__annotate_newB8nn210000Em>
   1b99f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    if (!__is_long())
   1b9a3:	e8 58 c2 ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   1b9a8:	a8 01                	test   $0x1,%al
   1b9aa:	75 15                	jne    1b9c1 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000EOS5_+0xb1>
   1b9ac:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
      __annotate_new(size());
   1b9b0:	e8 eb c2 ff ff       	call   17ca0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev>
   1b9b5:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1b9b9:	48 89 c6             	mov    %rax,%rsi
   1b9bc:	e8 5f c2 ff ff       	call   17c20 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__annotate_newB8nn210000Em>
  }
   1b9c1:	48 83 c4 40          	add    $0x40,%rsp
   1b9c5:	5d                   	pop    %rbp
   1b9c6:	c3                   	ret
   1b9c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1b9ce:	00 00 

000000000001b9d0 <_ZZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1B8nn210000EOS5_ENKUlRS5_E_clES7_>:
      : __rep_([](basic_string& __s) -> decltype(__s.__rep_)&& {
   1b9d0:	55                   	push   %rbp
   1b9d1:	48 89 e5             	mov    %rsp,%rbp
   1b9d4:	48 83 ec 10          	sub    $0x10,%rsp
   1b9d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b9dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
          if (!__s.__is_long())
   1b9e0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1b9e4:	e8 17 c2 ff ff       	call   17c00 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longB8nn210000Ev>
   1b9e9:	a8 01                	test   $0x1,%al
   1b9eb:	75 09                	jne    1b9f6 <_ZZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1B8nn210000EOS5_ENKUlRS5_E_clES7_+0x26>
            __s.__annotate_delete();
   1b9ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1b9f1:	e8 9a c4 ff ff       	call   17e90 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__annotate_deleteB8nn210000Ev>
          return std::move(__s.__rep_);
   1b9f6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1b9fa:	e8 21 00 00 00       	call   1ba20 <_ZNSt3__14moveB8nn210000IRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repEEEOu20__remove_reference_tIT_EOS9_>
   1b9ff:	48 83 c4 10          	add    $0x10,%rsp
   1ba03:	5d                   	pop    %rbp
   1ba04:	c3                   	ret
   1ba05:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ba0c:	00 00 00 
   1ba0f:	90                   	nop

000000000001ba10 <_ZNSt3__14moveB8nn210000IRNS_9allocatorIcEEEEOu20__remove_reference_tIT_EOS4_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   1ba10:	55                   	push   %rbp
   1ba11:	48 89 e5             	mov    %rsp,%rbp
   1ba14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   1ba18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ba1c:	5d                   	pop    %rbp
   1ba1d:	c3                   	ret
   1ba1e:	66 90                	xchg   %ax,%ax

000000000001ba20 <_ZNSt3__14moveB8nn210000IRNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repEEEOu20__remove_reference_tIT_EOS9_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   1ba20:	55                   	push   %rbp
   1ba21:	48 89 e5             	mov    %rsp,%rbp
   1ba24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   1ba28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ba2c:	5d                   	pop    %rbp
   1ba2d:	c3                   	ret
   1ba2e:	66 90                	xchg   %ax,%ax

000000000001ba30 <_ZNSt3__19allocatorIcEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 allocator() _NOEXCEPT = default;
   1ba30:	55                   	push   %rbp
   1ba31:	48 89 e5             	mov    %rsp,%rbp
   1ba34:	48 83 ec 10          	sub    $0x10,%rsp
   1ba38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ba3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1ba40:	e8 0b 00 00 00       	call   1ba50 <_ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIcEEEC2B8nn210000Ev>
   1ba45:	48 83 c4 10          	add    $0x10,%rsp
   1ba49:	5d                   	pop    %rbp
   1ba4a:	c3                   	ret
   1ba4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001ba50 <_ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIcEEEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __non_trivial_if() _NOEXCEPT {}
   1ba50:	55                   	push   %rbp
   1ba51:	48 89 e5             	mov    %rsp,%rbp
   1ba54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ba58:	5d                   	pop    %rbp
   1ba59:	c3                   	ret
   1ba5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001ba60 <_ZNSt3__111__formatter13__format_boolB8nn210000IcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorEbRS9_NS_13__format_spec23__parsed_specificationsIT_EE>:
};
#  endif

template <class _CharT, class _FormatContext>
_LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator
__format_bool(bool __value, _FormatContext& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) {
   1ba60:	55                   	push   %rbp
   1ba61:	48 89 e5             	mov    %rsp,%rbp
   1ba64:	48 83 ec 70          	sub    $0x70,%rsp
   1ba68:	40 88 f8             	mov    %dil,%al
   1ba6b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1ba6f:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   1ba73:	24 01                	and    $0x1,%al
   1ba75:	88 45 e7             	mov    %al,-0x19(%rbp)
   1ba78:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
    basic_string<_CharT> __str = __value ? __np.truename() : __np.falsename();
    return __formatter::__write_string_no_precision(basic_string_view<_CharT>{__str}, __ctx.out(), __specs);
  }
#  endif
  basic_string_view<_CharT> __str =
      __value ? __formatter::__bool_strings<_CharT>::__true : __formatter::__bool_strings<_CharT>::__false;
   1ba7c:	f6 45 e7 01          	testb  $0x1,-0x19(%rbp)
   1ba80:	74 0d                	je     1ba8f <_ZNSt3__111__formatter13__format_boolB8nn210000IcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorEbRS9_NS_13__format_spec23__parsed_specificationsIT_EE+0x2f>
   1ba82:	48 8d 05 0f 5b 01 00 	lea    0x15b0f(%rip),%rax        # 31598 <_ZNSt3__111__formatter14__bool_stringsIcE6__trueE>
   1ba89:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1ba8d:	eb 0d                	jmp    1ba9c <_ZNSt3__111__formatter13__format_boolB8nn210000IcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorEbRS9_NS_13__format_spec23__parsed_specificationsIT_EE+0x3c>
   1ba8f:	48 8d 05 12 5b 01 00 	lea    0x15b12(%rip),%rax        # 315a8 <_ZNSt3__111__formatter14__bool_stringsIcE7__falseE>
   1ba96:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1ba9a:	eb 00                	jmp    1ba9c <_ZNSt3__111__formatter13__format_boolB8nn210000IcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorEbRS9_NS_13__format_spec23__parsed_specificationsIT_EE+0x3c>
   1ba9c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1baa0:	48 8b 08             	mov    (%rax),%rcx
   1baa3:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   1baa7:	48 8b 40 08          	mov    0x8(%rax),%rax
   1baab:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1baaf:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  return __formatter::__write(__str.begin(), __str.end(), __ctx.out(), __specs);
   1bab3:	e8 d8 05 00 00       	call   1c090 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE5beginB8nn210000Ev>
   1bab8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1babc:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
   1bac0:	e8 eb 05 00 00       	call   1c0b0 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE3endB8nn210000Ev>
   1bac5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1bac9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1bacd:	e8 3e e0 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   1bad2:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   1bad6:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   1bada:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1bade:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bae2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1bae6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1baea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1baee:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1baf2:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   1baf6:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
   1bafa:	e8 11 05 00 00       	call   1c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   1baff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bb03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb07:	48 83 c4 70          	add    $0x70,%rsp
   1bb0b:	5d                   	pop    %rbp
   1bb0c:	c3                   	ret
   1bb0d:	0f 1f 00             	nopl   (%rax)

000000000001bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>:
  _LIBCPP_HIDE_FROM_ABI __parsed_specifications<_CharT> __get_parsed_std_specifications(auto& __ctx) const {
   1bb10:	55                   	push   %rbp
   1bb11:	48 89 e5             	mov    %rsp,%rbp
   1bb14:	48 83 ec 30          	sub    $0x30,%rsp
   1bb18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1bb1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1bb20:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1bb24:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
        .__std_ = __std{.__alignment_            = __alignment_,
   1bb28:	8a 0f                	mov    (%rdi),%cl
   1bb2a:	80 e1 07             	and    $0x7,%cl
   1bb2d:	8a 45 f0             	mov    -0x10(%rbp),%al
   1bb30:	24 f8                	and    $0xf8,%al
   1bb32:	08 c8                	or     %cl,%al
   1bb34:	88 45 f0             	mov    %al,-0x10(%rbp)
                        .__sign_                 = __sign_,
   1bb37:	8a 0f                	mov    (%rdi),%cl
        .__std_ = __std{.__alignment_            = __alignment_,
   1bb39:	8a 45 f0             	mov    -0x10(%rbp),%al
   1bb3c:	80 e1 18             	and    $0x18,%cl
   1bb3f:	24 e7                	and    $0xe7,%al
   1bb41:	08 c8                	or     %cl,%al
   1bb43:	88 45 f0             	mov    %al,-0x10(%rbp)
                        .__alternate_form_       = __alternate_form_,
   1bb46:	8a 0f                	mov    (%rdi),%cl
        .__std_ = __std{.__alignment_            = __alignment_,
   1bb48:	8a 45 f0             	mov    -0x10(%rbp),%al
   1bb4b:	80 e1 20             	and    $0x20,%cl
   1bb4e:	24 df                	and    $0xdf,%al
   1bb50:	08 c8                	or     %cl,%al
   1bb52:	88 45 f0             	mov    %al,-0x10(%rbp)
                        .__locale_specific_form_ = __locale_specific_form_,
   1bb55:	8a 0f                	mov    (%rdi),%cl
        .__std_ = __std{.__alignment_            = __alignment_,
   1bb57:	8a 45 f0             	mov    -0x10(%rbp),%al
   1bb5a:	80 e1 40             	and    $0x40,%cl
   1bb5d:	24 bf                	and    $0xbf,%al
   1bb5f:	08 c8                	or     %cl,%al
   1bb61:	88 45 f0             	mov    %al,-0x10(%rbp)
                        .__type_                 = __type_},
   1bb64:	8a 47 01             	mov    0x1(%rdi),%al
        .__std_ = __std{.__alignment_            = __alignment_,
   1bb67:	88 45 f1             	mov    %al,-0xf(%rbp)
        .__width_{__get_width(__ctx)},
   1bb6a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1bb6e:	e8 4d 13 00 00       	call   1cec0 <_ZNKSt3__113__format_spec8__parserIcE11__get_widthB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEiRT_>
   1bb73:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    return __parsed_specifications<_CharT>{
   1bb77:	89 45 f4             	mov    %eax,-0xc(%rbp)
        .__precision_{__get_precision(__ctx)},
   1bb7a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1bb7e:	e8 bd 13 00 00       	call   1cf40 <_ZNKSt3__113__format_spec8__parserIcE15__get_precisionB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEiRT_>
   1bb83:	89 c1                	mov    %eax,%ecx
   1bb85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    return __parsed_specifications<_CharT>{
   1bb89:	89 4d f8             	mov    %ecx,-0x8(%rbp)
        .__fill_{__fill_}};
   1bb8c:	8b 40 0c             	mov    0xc(%rax),%eax
   1bb8f:	89 45 fc             	mov    %eax,-0x4(%rbp)
    return __parsed_specifications<_CharT>{
   1bb92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bb96:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1bb9a:	48 83 c4 30          	add    $0x30,%rsp
   1bb9e:	5d                   	pop    %rbp
   1bb9f:	c3                   	ret

000000000001bba0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>:
                 bool __negative = false) {
   1bba0:	55                   	push   %rbp
   1bba1:	48 89 e5             	mov    %rsp,%rbp
   1bba4:	48 81 ec d0 01 00 00 	sub    $0x1d0,%rsp
   1bbab:	44 88 c0             	mov    %r8b,%al
   1bbae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1bbb2:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   1bbb6:	89 7d e4             	mov    %edi,-0x1c(%rbp)
   1bbb9:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   1bbbd:	24 01                	and    $0x1,%al
   1bbbf:	88 45 d7             	mov    %al,-0x29(%rbp)
  switch (__specs.__std_.__type_) {
   1bbc2:	0f b6 45 e9          	movzbl -0x17(%rbp),%eax
   1bbc6:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   1bbcd:	48 83 e8 07          	sub    $0x7,%rax
   1bbd1:	0f 87 1b 04 00 00    	ja     1bff2 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x452>
   1bbd7:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
   1bbde:	48 8d 05 e3 2f 01 00 	lea    0x12fe3(%rip),%rax        # 2ebc8 <_ZNSt3__16__itoa11__pow10_128E+0x3e8>
   1bbe5:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   1bbe9:	48 01 c8             	add    %rcx,%rax
   1bbec:	ff e0                	jmp    *%rax
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0b", 2);
   1bbee:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1bbf1:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%rbp)
   1bbf7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bbfb:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
   1bc02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bc06:	48 89 45 a4          	mov    %rax,-0x5c(%rbp)
   1bc0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bc0e:	48 89 45 ac          	mov    %rax,-0x54(%rbp)
   1bc12:	8a 45 d7             	mov    -0x29(%rbp),%al
   1bc15:	88 85 ef fe ff ff    	mov    %al,-0x111(%rbp)
   1bc1b:	48 8d 7d b4          	lea    -0x4c(%rbp),%rdi
   1bc1f:	e8 dc 22 00 00       	call   1df00 <_ZNSt3__15arrayIcLm35EE5beginB8nn210000Ev>
   1bc24:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   1bc2b:	48 8d 7d b4          	lea    -0x4c(%rbp),%rdi
   1bc2f:	e8 ec 22 00 00       	call   1df20 <_ZNSt3__15arrayIcLm35EE3endB8nn210000Ev>
   1bc34:	8b bd d4 fe ff ff    	mov    -0x12c(%rbp),%edi
   1bc3a:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
   1bc41:	4c 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%r9
   1bc48:	49 89 c2             	mov    %rax,%r10
   1bc4b:	8a 85 ef fe ff ff    	mov    -0x111(%rbp),%al
   1bc51:	48 8b 55 a4          	mov    -0x5c(%rbp),%rdx
   1bc55:	48 8b 4d ac          	mov    -0x54(%rbp),%rcx
   1bc59:	4c 8d 1d 2c 3a 01 00 	lea    0x13a2c(%rip),%r11        # 2f68c <.L.str.44>
   1bc60:	49 89 e0             	mov    %rsp,%r8
   1bc63:	4d 89 58 08          	mov    %r11,0x8(%r8)
   1bc67:	4d 89 10             	mov    %r10,(%r8)
   1bc6a:	41 c7 40 10 02 00 00 	movl   $0x2,0x10(%r8)
   1bc71:	00 
   1bc72:	44 0f b6 c0          	movzbl %al,%r8d
   1bc76:	41 83 e0 01          	and    $0x1,%r8d
   1bc7a:	e8 51 20 00 00       	call   1dcd0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   1bc7f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bc83:	e9 6f 03 00 00       	jmp    1bff7 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x457>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0B", 2);
   1bc88:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1bc8b:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
   1bc91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bc95:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
   1bc9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bca0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1bca7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bcab:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1bcb2:	8a 45 d7             	mov    -0x29(%rbp),%al
   1bcb5:	88 85 d3 fe ff ff    	mov    %al,-0x12d(%rbp)
   1bcbb:	48 8d 7d 81          	lea    -0x7f(%rbp),%rdi
   1bcbf:	e8 3c 22 00 00       	call   1df00 <_ZNSt3__15arrayIcLm35EE5beginB8nn210000Ev>
   1bcc4:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
   1bccb:	48 8d 7d 81          	lea    -0x7f(%rbp),%rdi
   1bccf:	e8 4c 22 00 00       	call   1df20 <_ZNSt3__15arrayIcLm35EE3endB8nn210000Ev>
   1bcd4:	8b bd bc fe ff ff    	mov    -0x144(%rbp),%edi
   1bcda:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
   1bce1:	4c 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%r9
   1bce8:	49 89 c2             	mov    %rax,%r10
   1bceb:	8a 85 d3 fe ff ff    	mov    -0x12d(%rbp),%al
   1bcf1:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   1bcf8:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
   1bcff:	4c 8d 1d 89 39 01 00 	lea    0x13989(%rip),%r11        # 2f68f <.L.str.45>
   1bd06:	49 89 e0             	mov    %rsp,%r8
   1bd09:	4d 89 58 08          	mov    %r11,0x8(%r8)
   1bd0d:	4d 89 10             	mov    %r10,(%r8)
   1bd10:	41 c7 40 10 02 00 00 	movl   $0x2,0x10(%r8)
   1bd17:	00 
   1bd18:	44 0f b6 c0          	movzbl %al,%r8d
   1bd1c:	41 83 e0 01          	and    $0x1,%r8d
   1bd20:	e8 ab 1f 00 00       	call   1dcd0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   1bd25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bd29:	e9 c9 02 00 00       	jmp    1bff7 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x457>
        __value, __ctx, __specs, __negative, __array.begin(), __array.end(), __value != 0 ? "0" : nullptr, 8);
   1bd2e:	31 c0                	xor    %eax,%eax
   1bd30:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1bd33:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
   1bd39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bd3d:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
   1bd44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bd48:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1bd4c:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
   1bd53:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   1bd5a:	8a 45 d7             	mov    -0x29(%rbp),%al
   1bd5d:	88 85 bb fe ff ff    	mov    %al,-0x145(%rbp)
   1bd63:	48 8d bd 63 ff ff ff 	lea    -0x9d(%rbp),%rdi
   1bd6a:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
   1bd71:	e8 ca 21 00 00       	call   1df40 <_ZNSt3__15arrayIcLm13EE5beginB8nn210000Ev>
   1bd76:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
   1bd7d:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
   1bd84:	e8 d7 21 00 00       	call   1df60 <_ZNSt3__15arrayIcLm13EE3endB8nn210000Ev>
   1bd89:	8b bd a4 fe ff ff    	mov    -0x15c(%rbp),%edi
   1bd8f:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
   1bd96:	4c 8b 8d b0 fe ff ff 	mov    -0x150(%rbp),%r9
   1bd9d:	49 89 c2             	mov    %rax,%r10
   1bda0:	8a 85 bb fe ff ff    	mov    -0x145(%rbp),%al
   1bda6:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
   1bda9:	31 d2                	xor    %edx,%edx
   1bdab:	85 c9                	test   %ecx,%ecx
   1bdad:	48 8d 0d de 38 01 00 	lea    0x138de(%rip),%rcx        # 2f692 <.L.str.46>
   1bdb4:	41 89 d3             	mov    %edx,%r11d
   1bdb7:	4c 0f 45 d9          	cmovne %rcx,%r11
    return __formatter::__format_integer(
   1bdbb:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
   1bdc2:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
   1bdc9:	49 89 e0             	mov    %rsp,%r8
   1bdcc:	4d 89 58 08          	mov    %r11,0x8(%r8)
   1bdd0:	4d 89 10             	mov    %r10,(%r8)
   1bdd3:	41 c7 40 10 08 00 00 	movl   $0x8,0x10(%r8)
   1bdda:	00 
   1bddb:	44 0f b6 c0          	movzbl %al,%r8d
   1bddf:	41 83 e0 01          	and    $0x1,%r8d
   1bde3:	e8 e8 1e 00 00       	call   1dcd0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   1bde8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bdec:	e9 06 02 00 00       	jmp    1bff7 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x457>
        __value, __ctx, __specs, __negative, __array.begin(), __array.end(), nullptr, 10);
   1bdf1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1bdf4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%rbp)
   1bdfa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bdfe:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
   1be05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1be09:	48 89 85 34 ff ff ff 	mov    %rax,-0xcc(%rbp)
   1be10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1be14:	48 89 85 3c ff ff ff 	mov    %rax,-0xc4(%rbp)
   1be1b:	8a 45 d7             	mov    -0x29(%rbp),%al
   1be1e:	88 85 97 fe ff ff    	mov    %al,-0x169(%rbp)
   1be24:	48 8d bd 45 ff ff ff 	lea    -0xbb(%rbp),%rdi
   1be2b:	e8 50 21 00 00       	call   1df80 <_ZNSt3__15arrayIcLm11EE5beginB8nn210000Ev>
   1be30:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
   1be37:	48 8d bd 45 ff ff ff 	lea    -0xbb(%rbp),%rdi
   1be3e:	e8 5d 21 00 00       	call   1dfa0 <_ZNSt3__15arrayIcLm11EE3endB8nn210000Ev>
   1be43:	8b bd 7c fe ff ff    	mov    -0x184(%rbp),%edi
   1be49:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
   1be50:	4c 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%r9
   1be57:	49 89 c2             	mov    %rax,%r10
   1be5a:	8a 85 97 fe ff ff    	mov    -0x169(%rbp),%al
    return __formatter::__format_integer(
   1be60:	48 8b 95 34 ff ff ff 	mov    -0xcc(%rbp),%rdx
   1be67:	48 8b 8d 3c ff ff ff 	mov    -0xc4(%rbp),%rcx
   1be6e:	45 31 c0             	xor    %r8d,%r8d
   1be71:	49 89 e0             	mov    %rsp,%r8
   1be74:	4d 89 10             	mov    %r10,(%r8)
   1be77:	41 c7 40 10 0a 00 00 	movl   $0xa,0x10(%r8)
   1be7e:	00 
   1be7f:	49 c7 40 08 00 00 00 	movq   $0x0,0x8(%r8)
   1be86:	00 
   1be87:	44 0f b6 c0          	movzbl %al,%r8d
   1be8b:	41 83 e0 01          	and    $0x1,%r8d
   1be8f:	e8 3c 1e 00 00       	call   1dcd0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   1be94:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1be98:	e9 5a 01 00 00       	jmp    1bff7 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x457>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0x", 16);
   1be9d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1bea0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%rbp)
   1bea6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1beaa:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
   1beb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1beb5:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   1bebc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bec0:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   1bec7:	8a 45 d7             	mov    -0x29(%rbp),%al
   1beca:	88 85 7b fe ff ff    	mov    %al,-0x185(%rbp)
   1bed0:	48 8d bd 29 ff ff ff 	lea    -0xd7(%rbp),%rdi
   1bed7:	e8 a4 20 00 00       	call   1df80 <_ZNSt3__15arrayIcLm11EE5beginB8nn210000Ev>
   1bedc:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
   1bee3:	48 8d bd 29 ff ff ff 	lea    -0xd7(%rbp),%rdi
   1beea:	e8 b1 20 00 00       	call   1dfa0 <_ZNSt3__15arrayIcLm11EE3endB8nn210000Ev>
   1beef:	8b bd 64 fe ff ff    	mov    -0x19c(%rbp),%edi
   1bef5:	48 8b b5 68 fe ff ff 	mov    -0x198(%rbp),%rsi
   1befc:	4c 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%r9
   1bf03:	49 89 c2             	mov    %rax,%r10
   1bf06:	8a 85 7b fe ff ff    	mov    -0x185(%rbp),%al
   1bf0c:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
   1bf13:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
   1bf1a:	4c 8d 1d 73 37 01 00 	lea    0x13773(%rip),%r11        # 2f694 <.L.str.47>
   1bf21:	49 89 e0             	mov    %rsp,%r8
   1bf24:	4d 89 58 08          	mov    %r11,0x8(%r8)
   1bf28:	4d 89 10             	mov    %r10,(%r8)
   1bf2b:	41 c7 40 10 10 00 00 	movl   $0x10,0x10(%r8)
   1bf32:	00 
   1bf33:	44 0f b6 c0          	movzbl %al,%r8d
   1bf37:	41 83 e0 01          	and    $0x1,%r8d
   1bf3b:	e8 90 1d 00 00       	call   1dcd0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   1bf40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bf44:	e9 ae 00 00 00       	jmp    1bff7 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x457>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0X", 16);
   1bf49:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1bf4c:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   1bf52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bf56:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
   1bf5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bf61:	48 89 85 fc fe ff ff 	mov    %rax,-0x104(%rbp)
   1bf68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bf6c:	48 89 85 04 ff ff ff 	mov    %rax,-0xfc(%rbp)
   1bf73:	8a 45 d7             	mov    -0x29(%rbp),%al
   1bf76:	88 85 63 fe ff ff    	mov    %al,-0x19d(%rbp)
   1bf7c:	48 8d bd 0d ff ff ff 	lea    -0xf3(%rbp),%rdi
   1bf83:	e8 f8 1f 00 00       	call   1df80 <_ZNSt3__15arrayIcLm11EE5beginB8nn210000Ev>
   1bf88:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
   1bf8f:	48 8d bd 0d ff ff ff 	lea    -0xf3(%rbp),%rdi
   1bf96:	e8 05 20 00 00       	call   1dfa0 <_ZNSt3__15arrayIcLm11EE3endB8nn210000Ev>
   1bf9b:	8b bd 4c fe ff ff    	mov    -0x1b4(%rbp),%edi
   1bfa1:	48 8b b5 50 fe ff ff 	mov    -0x1b0(%rbp),%rsi
   1bfa8:	4c 8b 8d 58 fe ff ff 	mov    -0x1a8(%rbp),%r9
   1bfaf:	49 89 c2             	mov    %rax,%r10
   1bfb2:	8a 85 63 fe ff ff    	mov    -0x19d(%rbp),%al
   1bfb8:	48 8b 95 fc fe ff ff 	mov    -0x104(%rbp),%rdx
   1bfbf:	48 8b 8d 04 ff ff ff 	mov    -0xfc(%rbp),%rcx
   1bfc6:	4c 8d 1d ca 36 01 00 	lea    0x136ca(%rip),%r11        # 2f697 <.L.str.48>
   1bfcd:	49 89 e0             	mov    %rsp,%r8
   1bfd0:	4d 89 58 08          	mov    %r11,0x8(%r8)
   1bfd4:	4d 89 10             	mov    %r10,(%r8)
   1bfd7:	41 c7 40 10 10 00 00 	movl   $0x10,0x10(%r8)
   1bfde:	00 
   1bfdf:	44 0f b6 c0          	movzbl %al,%r8d
   1bfe3:	41 83 e0 01          	and    $0x1,%r8d
   1bfe7:	e8 e4 1c 00 00       	call   1dcd0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   1bfec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bff0:	eb 05                	jmp    1bff7 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x457>
    __libcpp_unreachable();
   1bff2:	e8 79 e7 ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
}
   1bff7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bffb:	48 81 c4 d0 01 00 00 	add    $0x1d0,%rsp
   1c002:	5d                   	pop    %rbp
   1c003:	c3                   	ret
   1c004:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c00b:	00 00 00 
   1c00e:	66 90                	xchg   %ax,%ax

000000000001c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>:
template <contiguous_iterator _Iterator, class _ParserCharT>
_LIBCPP_HIDE_FROM_ABI auto
__write(_Iterator __first,
        _Iterator __last,
        output_iterator<const iter_value_t<_Iterator>&> auto __out_it,
        __format_spec::__parsed_specifications<_ParserCharT> __specs) -> decltype(__out_it) {
   1c010:	55                   	push   %rbp
   1c011:	48 89 e5             	mov    %rsp,%rbp
   1c014:	48 83 ec 60          	sub    $0x60,%rsp
   1c018:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1c01c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   1c020:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
   1c024:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c028:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  _LIBCPP_ASSERT_VALID_INPUT_RANGE(__first <= __last, "Not a valid range");
  return __formatter::__write(__first, __last, std::move(__out_it), __specs, __last - __first);
   1c02c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c030:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1c034:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c038:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1c03c:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1c040:	e8 5b db ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1c045:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   1c049:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   1c04d:	48 8b 00             	mov    (%rax),%rax
   1c050:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1c054:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c058:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1c05c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c060:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1c064:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
   1c068:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c06c:	49 29 c1             	sub    %rax,%r9
   1c06f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1c073:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1c077:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
   1c07b:	e8 50 00 00 00       	call   1c0d0 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   1c080:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c084:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c088:	48 83 c4 60          	add    $0x60,%rsp
   1c08c:	5d                   	pop    %rbp
   1c08d:	c3                   	ret
   1c08e:	66 90                	xchg   %ax,%ax

000000000001c090 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE5beginB8nn210000Ev>:
  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI const_iterator begin() const _NOEXCEPT { return cbegin(); }
   1c090:	55                   	push   %rbp
   1c091:	48 89 e5             	mov    %rsp,%rbp
   1c094:	48 83 ec 10          	sub    $0x10,%rsp
   1c098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c09c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1c0a0:	e8 db 0d 00 00       	call   1ce80 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE6cbeginB8nn210000Ev>
   1c0a5:	48 83 c4 10          	add    $0x10,%rsp
   1c0a9:	5d                   	pop    %rbp
   1c0aa:	c3                   	ret
   1c0ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c0b0 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE3endB8nn210000Ev>:
  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI const_iterator end() const _NOEXCEPT { return cend(); }
   1c0b0:	55                   	push   %rbp
   1c0b1:	48 89 e5             	mov    %rsp,%rbp
   1c0b4:	48 83 ec 10          	sub    $0x10,%rsp
   1c0b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c0bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1c0c0:	e8 db 0d 00 00       	call   1cea0 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4cendB8nn210000Ev>
   1c0c5:	48 83 c4 10          	add    $0x10,%rsp
   1c0c9:	5d                   	pop    %rbp
   1c0ca:	c3                   	ret
   1c0cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c0d0 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>:
        ptrdiff_t __size) -> decltype(__out_it) {
   1c0d0:	55                   	push   %rbp
   1c0d1:	48 89 e5             	mov    %rsp,%rbp
   1c0d4:	48 83 ec 60          	sub    $0x60,%rsp
   1c0d8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1c0dc:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   1c0e0:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
   1c0e4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c0e8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c0ec:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
  return __formatter::__write(basic_string_view{__first, __last}, std::move(__out_it), __specs, __size);
   1c0f0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1c0f4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1c0f8:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   1c0fc:	e8 9f 01 00 00       	call   1c2a0 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ITkNS_19contiguous_iteratorEPKcTkNS_18sized_sentinel_forITL0__EES6_Qaa9is_same_vINS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS8_EEEEE5valueENS_26indirectly_readable_traitsISB_EESC_E4type10value_typeET_Ent16is_convertible_vITL0_0_mEEESI_T0_>
   1c101:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1c105:	e8 96 da ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1c10a:	48 8b 00             	mov    (%rax),%rax
   1c10d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1c111:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c115:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1c119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c11d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1c121:	4c 8b 4d c8          	mov    -0x38(%rbp),%r9
   1c125:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   1c129:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1c12d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1c131:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   1c135:	4c 8b 45 a8          	mov    -0x58(%rbp),%r8
   1c139:	e8 12 00 00 00       	call   1c150 <_ZNSt3__111__formatter7__writeB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   1c13e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c146:	48 83 c4 60          	add    $0x60,%rsp
   1c14a:	5d                   	pop    %rbp
   1c14b:	c3                   	ret
   1c14c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001c150 <_ZNSt3__111__formatter7__writeB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET1_NS_13__format_spec23__parsed_specificationsIT0_EEl>:
        ptrdiff_t __size) -> decltype(__out_it) {
   1c150:	55                   	push   %rbp
   1c151:	48 89 e5             	mov    %rsp,%rbp
   1c154:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   1c15b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c15f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c163:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1c167:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1c16b:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   1c16f:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
  if (__size >= __specs.__width_)
   1c173:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c177:	48 63 4d d4          	movslq -0x2c(%rbp),%rcx
   1c17b:	48 39 c8             	cmp    %rcx,%rax
   1c17e:	7c 3a                	jl     1c1ba <_ZNSt3__111__formatter7__writeB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET1_NS_13__format_spec23__parsed_specificationsIT0_EEl+0x6a>
    return __formatter::__copy(__str, std::move(__out_it));
   1c180:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c184:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1c188:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c18c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1c190:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1c194:	e8 07 da ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1c199:	48 8b 00             	mov    (%rax),%rax
   1c19c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1c1a0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   1c1a4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1c1a8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1c1ac:	e8 3f 01 00 00       	call   1c2f0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIT_NS_11char_traitsISD_EEEET1_>
   1c1b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c1b5:	e9 d4 00 00 00       	jmp    1c28e <_ZNSt3__111__formatter7__writeB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET1_NS_13__format_spec23__parsed_specificationsIT0_EEl+0x13e>
  __padding_size_result __padding = __formatter::__padding_size(__size, __specs.__width_, __specs.__std_.__alignment_);
   1c1ba:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1c1be:	48 63 75 d4          	movslq -0x2c(%rbp),%rsi
   1c1c2:	8a 45 d0             	mov    -0x30(%rbp),%al
   1c1c5:	24 07                	and    $0x7,%al
   1c1c7:	0f b6 d0             	movzbl %al,%edx
   1c1ca:	e8 71 01 00 00       	call   1c340 <_ZNSt3__111__formatter14__padding_sizeB8nn210000EmmNS_13__format_spec11__alignmentE>
   1c1cf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1c1d3:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   1c1d7:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  __out_it                        = __formatter::__fill(std::move(__out_it), __padding.__before_, __specs.__fill_);
   1c1db:	e8 c0 d9 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1c1e0:	48 8b 00             	mov    (%rax),%rax
   1c1e3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1c1e7:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   1c1eb:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1c1ee:	89 45 8c             	mov    %eax,-0x74(%rbp)
   1c1f1:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   1c1f5:	8b 55 8c             	mov    -0x74(%rbp),%edx
   1c1f8:	e8 f3 01 00 00       	call   1c3f0 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mNS_13__format_spec12__code_pointIS3_EE>
   1c1fd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1c201:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1c205:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  __out_it                        = __formatter::__copy(__str, std::move(__out_it));
   1c209:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c20d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1c214:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c218:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1c21f:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1c223:	e8 78 d9 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1c228:	48 8b 00             	mov    (%rax),%rax
   1c22b:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   1c232:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
   1c239:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   1c240:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   1c247:	e8 a4 00 00 00       	call   1c2f0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIT_NS_11char_traitsISD_EEEET1_>
   1c24c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1c250:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1c254:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1c258:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  return __formatter::__fill(std::move(__out_it), __padding.__after_, __specs.__fill_);
   1c25c:	e8 3f d9 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1c261:	48 8b 00             	mov    (%rax),%rax
   1c264:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   1c26b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   1c26f:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1c272:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
   1c278:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   1c27f:	8b 95 5c ff ff ff    	mov    -0xa4(%rbp),%edx
   1c285:	e8 66 01 00 00       	call   1c3f0 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mNS_13__format_spec12__code_pointIS3_EE>
   1c28a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   1c28e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c292:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   1c299:	5d                   	pop    %rbp
   1c29a:	c3                   	ret
   1c29b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c2a0 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ITkNS_19contiguous_iteratorEPKcTkNS_18sized_sentinel_forITL0__EES6_Qaa9is_same_vINS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS8_EEEEE5valueENS_26indirectly_readable_traitsISB_EESC_E4type10value_typeET_Ent16is_convertible_vITL0_0_mEEESI_T0_>:
      : __data_(std::to_address(__begin)), __size_(__end - __begin) {
   1c2a0:	55                   	push   %rbp
   1c2a1:	48 89 e5             	mov    %rsp,%rbp
   1c2a4:	48 83 ec 20          	sub    $0x20,%rsp
   1c2a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c2ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c2b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1c2b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c2b8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1c2bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1c2c0:	e8 9b 0b 00 00       	call   1ce60 <_ZNSt3__110to_addressB8nn210000IKcEEDaPT_>
   1c2c5:	48 89 c1             	mov    %rax,%rcx
   1c2c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c2cc:	48 89 08             	mov    %rcx,(%rax)
   1c2cf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1c2d3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c2d7:	48 29 d1             	sub    %rdx,%rcx
   1c2da:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   1c2de:	48 83 c4 20          	add    $0x20,%rsp
   1c2e2:	5d                   	pop    %rbp
   1c2e3:	c3                   	ret
   1c2e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c2eb:	00 00 00 
   1c2ee:	66 90                	xchg   %ax,%ax

000000000001c2f0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIT_NS_11char_traitsISD_EEEET1_>:
__copy(basic_string_view<_CharT> __str, output_iterator<const _OutCharT&> auto __out_it) -> decltype(__out_it) {
   1c2f0:	55                   	push   %rbp
   1c2f1:	48 89 e5             	mov    %rsp,%rbp
   1c2f4:	48 83 ec 30          	sub    $0x30,%rsp
   1c2f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c2fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c300:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1c304:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    __out_it.__get_container()->__copy(__str);
   1c308:	e8 33 01 00 00       	call   1c440 <_ZNKSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEE15__get_containerB8nn210000Ev>
   1c30d:	48 89 c7             	mov    %rax,%rdi
   1c310:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c314:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1c318:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c31c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1c320:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1c324:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1c328:	e8 33 01 00 00       	call   1c460 <_ZNSt3__18__format15__output_bufferIcE6__copyB8nn210000ITkNS_15__fmt_char_typeEcEEvNS_17basic_string_viewIT_NS_11char_traitsIS5_EEEE>
    return __out_it;
   1c32d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c331:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c335:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c339:	48 83 c4 30          	add    $0x30,%rsp
   1c33d:	5d                   	pop    %rbp
   1c33e:	c3                   	ret
   1c33f:	90                   	nop

000000000001c340 <_ZNSt3__111__formatter14__padding_sizeB8nn210000EmmNS_13__format_spec11__alignmentE>:
__padding_size(size_t __size, size_t __width, __format_spec::__alignment __align) {
   1c340:	55                   	push   %rbp
   1c341:	48 89 e5             	mov    %rsp,%rbp
   1c344:	48 83 ec 50          	sub    $0x50,%rsp
   1c348:	88 d0                	mov    %dl,%al
   1c34a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c34e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c352:	88 45 df             	mov    %al,-0x21(%rbp)
  size_t __fill = __width - __size;
   1c355:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c359:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1c35d:	48 29 c8             	sub    %rcx,%rax
   1c360:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  switch (__align) {
   1c364:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
   1c368:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1c36c:	48 83 e8 04          	sub    $0x4,%rax
   1c370:	77 66                	ja     1c3d8 <_ZNSt3__111__formatter14__padding_sizeB8nn210000EmmNS_13__format_spec11__alignmentE+0x98>
   1c372:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1c376:	48 8d 05 6b 28 01 00 	lea    0x1286b(%rip),%rax        # 2ebe8 <_ZNSt3__16__itoa11__pow10_128E+0x408>
   1c37d:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   1c381:	48 01 c8             	add    %rcx,%rax
   1c384:	ff e0                	jmp    *%rax
    __libcpp_unreachable();
   1c386:	e8 e5 e3 ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
    return {0, __fill};
   1c38b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1c392:	00 
   1c393:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c397:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c39b:	eb 40                	jmp    1c3dd <_ZNSt3__111__formatter14__padding_sizeB8nn210000EmmNS_13__format_spec11__alignmentE+0x9d>
    size_t __before = __fill / 2;
   1c39d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c3a1:	48 d1 e8             	shr    $1,%rax
   1c3a4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    size_t __after  = __fill - __before;
   1c3a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c3ac:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
   1c3b0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    return {__before, __after};
   1c3b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c3b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c3bc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c3c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c3c4:	eb 17                	jmp    1c3dd <_ZNSt3__111__formatter14__padding_sizeB8nn210000EmmNS_13__format_spec11__alignmentE+0x9d>
    return {__fill, 0};
   1c3c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c3ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c3ce:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1c3d5:	00 
   1c3d6:	eb 05                	jmp    1c3dd <_ZNSt3__111__formatter14__padding_sizeB8nn210000EmmNS_13__format_spec11__alignmentE+0x9d>
  __libcpp_unreachable();
   1c3d8:	e8 93 e3 ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
}
   1c3dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c3e1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c3e5:	48 83 c4 50          	add    $0x50,%rsp
   1c3e9:	5d                   	pop    %rbp
   1c3ea:	c3                   	ret
   1c3eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c3f0 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mNS_13__format_spec12__code_pointIS3_EE>:
_LIBCPP_HIDE_FROM_ABI _OutIt __fill(_OutIt __out_it, size_t __n, __format_spec::__code_point<_CharT> __value) {
   1c3f0:	55                   	push   %rbp
   1c3f1:	48 89 e5             	mov    %rsp,%rbp
   1c3f4:	48 83 ec 30          	sub    $0x30,%rsp
   1c3f8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1c3fc:	89 55 ec             	mov    %edx,-0x14(%rbp)
   1c3ff:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c403:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  return __formatter::__fill(std::move(__out_it), __n, __value.__data[0]);
   1c407:	e8 94 d7 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1c40c:	48 8b 00             	mov    (%rax),%rax
   1c40f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1c413:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1c417:	8a 45 ec             	mov    -0x14(%rbp),%al
   1c41a:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1c41e:	0f be d0             	movsbl %al,%edx
   1c421:	e8 1a 09 00 00       	call   1cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>
   1c426:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c42a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c42e:	48 83 c4 30          	add    $0x30,%rsp
   1c432:	5d                   	pop    %rbp
   1c433:	c3                   	ret
   1c434:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c43b:	00 00 00 
   1c43e:	66 90                	xchg   %ax,%ax

000000000001c440 <_ZNKSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEE15__get_containerB8nn210000Ev>:

  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _Container* __get_container() const { return container; }
   1c440:	55                   	push   %rbp
   1c441:	48 89 e5             	mov    %rsp,%rbp
   1c444:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c448:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c44c:	48 8b 00             	mov    (%rax),%rax
   1c44f:	5d                   	pop    %rbp
   1c450:	c3                   	ret
   1c451:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c458:	00 00 00 
   1c45b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c460 <_ZNSt3__18__format15__output_bufferIcE6__copyB8nn210000ITkNS_15__fmt_char_typeEcEEvNS_17basic_string_viewIT_NS_11char_traitsIS5_EEEE>:
  _LIBCPP_HIDE_FROM_ABI void __copy(basic_string_view<_InCharT> __str) {
   1c460:	55                   	push   %rbp
   1c461:	48 89 e5             	mov    %rsp,%rbp
   1c464:	48 83 ec 50          	sub    $0x50,%rsp
   1c468:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c46c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1c470:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c474:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c478:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1c47c:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    size_t __n = __str.size();
   1c480:	e8 eb ca ff ff       	call   18f70 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4sizeB8nn210000Ev>
   1c485:	48 89 c1             	mov    %rax,%rcx
   1c488:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c48c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    if (__max_output_size_) {
   1c490:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
   1c495:	74 23                	je     1c4ba <_ZNSt3__18__format15__output_bufferIcE6__copyB8nn210000ITkNS_15__fmt_char_typeEcEEvNS_17basic_string_viewIT_NS_11char_traitsIS5_EEEE+0x5a>
   1c497:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
      __n = __max_output_size_->__write_request(__n);
   1c49b:	48 8b 78 20          	mov    0x20(%rax),%rdi
   1c49f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1c4a3:	e8 c8 00 00 00       	call   1c570 <_ZNSt3__18__format17__max_output_sizeB8nn21000015__write_requestB8nn210000Em>
   1c4a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      if (__n == 0)
   1c4ac:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1c4b1:	75 05                	jne    1c4b8 <_ZNSt3__18__format15__output_bufferIcE6__copyB8nn210000ITkNS_15__fmt_char_typeEcEEvNS_17basic_string_viewIT_NS_11char_traitsIS5_EEEE+0x58>
        return;
   1c4b3:	e9 a6 00 00 00       	jmp    1c55e <_ZNSt3__18__format15__output_bufferIcE6__copyB8nn210000ITkNS_15__fmt_char_typeEcEEvNS_17basic_string_viewIT_NS_11char_traitsIS5_EEEE+0xfe>
    }
   1c4b8:	eb 00                	jmp    1c4ba <_ZNSt3__18__format15__output_bufferIcE6__copyB8nn210000ITkNS_15__fmt_char_typeEcEEvNS_17basic_string_viewIT_NS_11char_traitsIS5_EEEE+0x5a>
   1c4ba:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    const _InCharT* __first = __str.data();
   1c4be:	e8 cd ca ff ff       	call   18f90 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4dataB8nn210000Ev>
   1c4c3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1c4c7:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      __prepare_write(__n);
   1c4cb:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1c4cf:	e8 0c 01 00 00       	call   1c5e0 <_ZNSt3__18__format15__output_bufferIcE15__prepare_writeB8nn210000Em>
   1c4d4:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      size_t __chunk = std::min(__n, __available());
   1c4d8:	e8 53 01 00 00       	call   1c630 <_ZNKSt3__18__format15__output_bufferIcE11__availableB8nn210000Ev>
   1c4dd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1c4e1:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1c4e5:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
   1c4e9:	e8 92 02 ff ff       	call   c780 <_ZNSt3__13minB8nn210000ImEERKT_S3_S3_>
   1c4ee:	48 89 c1             	mov    %rax,%rcx
   1c4f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c4f5:	48 8b 09             	mov    (%rcx),%rcx
   1c4f8:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      std::copy_n(__first, __chunk, std::addressof(__ptr_[__size_]));
   1c4fc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1c500:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   1c504:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1c508:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   1c50c:	48 8b 38             	mov    (%rax),%rdi
   1c50f:	48 03 78 10          	add    0x10(%rax),%rdi
   1c513:	e8 c8 c7 ff ff       	call   18ce0 <_ZNSt3__19addressofB8nn210000IcEEPT_RS1_>
   1c518:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   1c51c:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1c520:	48 89 c2             	mov    %rax,%rdx
   1c523:	e8 28 01 00 00       	call   1c650 <_ZNSt3__16copy_nB8nn210000IPKcmPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
   1c528:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
      __size_ += __chunk;
   1c52c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1c530:	48 03 48 10          	add    0x10(%rax),%rcx
   1c534:	48 89 48 10          	mov    %rcx,0x10(%rax)
      __first += __chunk;
   1c538:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c53c:	48 03 45 d8          	add    -0x28(%rbp),%rax
   1c540:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      __n -= __chunk;
   1c544:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1c548:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c54c:	48 29 c8             	sub    %rcx,%rax
   1c54f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    } while (__n);
   1c553:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1c558:	0f 85 69 ff ff ff    	jne    1c4c7 <_ZNSt3__18__format15__output_bufferIcE6__copyB8nn210000ITkNS_15__fmt_char_typeEcEEvNS_17basic_string_viewIT_NS_11char_traitsIS5_EEEE+0x67>
  }
   1c55e:	48 83 c4 50          	add    $0x50,%rsp
   1c562:	5d                   	pop    %rbp
   1c563:	c3                   	ret
   1c564:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c56b:	00 00 00 
   1c56e:	66 90                	xchg   %ax,%ax

000000000001c570 <_ZNSt3__18__format17__max_output_sizeB8nn21000015__write_requestB8nn210000Em>:
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI size_t __write_request(size_t __code_units) {
   1c570:	55                   	push   %rbp
   1c571:	48 89 e5             	mov    %rsp,%rbp
   1c574:	48 83 ec 30          	sub    $0x30,%rsp
   1c578:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c57c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c580:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1c584:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
        __code_units_written_ < __max_size_ ? std::min(__code_units, __max_size_ - __code_units_written_) : 0;
   1c588:	48 8b 41 08          	mov    0x8(%rcx),%rax
   1c58c:	48 3b 01             	cmp    (%rcx),%rax
   1c58f:	73 25                	jae    1c5b6 <_ZNSt3__18__format17__max_output_sizeB8nn21000015__write_requestB8nn210000Em+0x46>
   1c591:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1c595:	48 8b 01             	mov    (%rcx),%rax
   1c598:	48 2b 41 08          	sub    0x8(%rcx),%rax
   1c59c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1c5a0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1c5a4:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
   1c5a8:	e8 d3 01 ff ff       	call   c780 <_ZNSt3__13minB8nn210000ImEERKT_S3_S3_>
   1c5ad:	48 8b 00             	mov    (%rax),%rax
   1c5b0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1c5b4:	eb 08                	jmp    1c5be <_ZNSt3__18__format17__max_output_sizeB8nn21000015__write_requestB8nn210000Em+0x4e>
   1c5b6:	31 c0                	xor    %eax,%eax
   1c5b8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1c5bc:	eb 00                	jmp    1c5be <_ZNSt3__18__format17__max_output_sizeB8nn21000015__write_requestB8nn210000Em+0x4e>
   1c5be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c5c2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    size_t __result =
   1c5c6:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    __code_units_written_ += __code_units;
   1c5ca:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c5ce:	48 03 48 08          	add    0x8(%rax),%rcx
   1c5d2:	48 89 48 08          	mov    %rcx,0x8(%rax)
    return __result;
   1c5d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c5da:	48 83 c4 30          	add    $0x30,%rsp
   1c5de:	5d                   	pop    %rbp
   1c5df:	c3                   	ret

000000000001c5e0 <_ZNSt3__18__format15__output_bufferIcE15__prepare_writeB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI void __prepare_write(size_t __code_units) {
   1c5e0:	55                   	push   %rbp
   1c5e1:	48 89 e5             	mov    %rsp,%rbp
   1c5e4:	48 83 ec 20          	sub    $0x20,%rsp
   1c5e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c5ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c5f0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1c5f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    __code_units += 1;
   1c5f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c5fc:	48 83 c0 01          	add    $0x1,%rax
   1c600:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if (__available() < __code_units)
   1c604:	e8 27 00 00 00       	call   1c630 <_ZNKSt3__18__format15__output_bufferIcE11__availableB8nn210000Ev>
   1c609:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1c60d:	73 12                	jae    1c621 <_ZNSt3__18__format15__output_bufferIcE15__prepare_writeB8nn210000Em+0x41>
   1c60f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
      __prepare_write_(*this, __code_units + 1);
   1c613:	48 8b 47 18          	mov    0x18(%rdi),%rax
   1c617:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1c61b:	48 83 c6 01          	add    $0x1,%rsi
   1c61f:	ff d0                	call   *%rax
  }
   1c621:	48 83 c4 20          	add    $0x20,%rsp
   1c625:	5d                   	pop    %rbp
   1c626:	c3                   	ret
   1c627:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1c62e:	00 00 

000000000001c630 <_ZNKSt3__18__format15__output_bufferIcE11__availableB8nn210000Ev>:
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI size_t __available() const { return __capacity_ - __size_; }
   1c630:	55                   	push   %rbp
   1c631:	48 89 e5             	mov    %rsp,%rbp
   1c634:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c638:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1c63c:	48 8b 41 08          	mov    0x8(%rcx),%rax
   1c640:	48 2b 41 10          	sub    0x10(%rcx),%rax
   1c644:	5d                   	pop    %rbp
   1c645:	c3                   	ret
   1c646:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c64d:	00 00 00 

000000000001c650 <_ZNSt3__16copy_nB8nn210000IPKcmPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>:
copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result) {
   1c650:	55                   	push   %rbp
   1c651:	48 89 e5             	mov    %rsp,%rbp
   1c654:	48 83 ec 20          	sub    $0x20,%rsp
   1c658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c65c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c660:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  _IntegralSize __n = __orig_n;
   1c664:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c668:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  return std::copy(__first, __first + difference_type(__n), __result);
   1c66c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1c670:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   1c674:	48 03 75 e0          	add    -0x20(%rbp),%rsi
   1c678:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c67c:	e8 0f 00 00 00       	call   1c690 <_ZNSt3__14copyB8nn210000IPKcPcEET0_T_S5_S4_>
   1c681:	48 83 c4 20          	add    $0x20,%rsp
   1c685:	5d                   	pop    %rbp
   1c686:	c3                   	ret
   1c687:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1c68e:	00 00 

000000000001c690 <_ZNSt3__14copyB8nn210000IPKcPcEET0_T_S5_S4_>:
copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result) {
   1c690:	55                   	push   %rbp
   1c691:	48 89 e5             	mov    %rsp,%rbp
   1c694:	48 83 ec 30          	sub    $0x30,%rsp
   1c698:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c69c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c6a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  return std::__copy(__first, __last, __result).second;
   1c6a4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1c6a8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1c6ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c6b0:	e8 1b 00 00 00       	call   1c6d0 <_ZNSt3__16__copyB8nn210000IPKcS2_PcEENS_4pairIT_T1_EES5_T0_S6_>
   1c6b5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1c6b9:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1c6bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c6c1:	48 83 c4 30          	add    $0x30,%rsp
   1c6c5:	5d                   	pop    %rbp
   1c6c6:	c3                   	ret
   1c6c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1c6ce:	00 00 

000000000001c6d0 <_ZNSt3__16__copyB8nn210000IPKcS2_PcEENS_4pairIT_T1_EES5_T0_S6_>:
__copy(_InIter __first, _Sent __last, _OutIter __result) {
   1c6d0:	55                   	push   %rbp
   1c6d1:	48 89 e5             	mov    %rsp,%rbp
   1c6d4:	48 83 ec 40          	sub    $0x40,%rsp
   1c6d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c6dc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c6e0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1c6e4:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return std::__copy_move_unwrap_iters<__copy_impl>(std::move(__first), std::move(__last), std::move(__result));
   1c6e8:	e8 73 01 00 00       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c6ed:	48 8b 00             	mov    (%rax),%rax
   1c6f0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1c6f4:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1c6f8:	e8 63 01 00 00       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c6fd:	48 8b 00             	mov    (%rax),%rax
   1c700:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1c704:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   1c708:	e8 73 cf ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   1c70d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1c711:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1c715:	48 8b 10             	mov    (%rax),%rdx
   1c718:	e8 23 00 00 00       	call   1c740 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPKcS3_PcTnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairIS6_S7_EES6_T1_S7_>
   1c71d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c721:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1c725:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c729:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c72d:	48 83 c4 40          	add    $0x40,%rsp
   1c731:	5d                   	pop    %rbp
   1c732:	c3                   	ret
   1c733:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c73a:	00 00 00 
   1c73d:	0f 1f 00             	nopl   (%rax)

000000000001c740 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPKcS3_PcTnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairIS6_S7_EES6_T1_S7_>:
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
   1c740:	55                   	push   %rbp
   1c741:	48 89 e5             	mov    %rsp,%rbp
   1c744:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   1c74b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c74f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c753:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  auto __range  = std::__unwrap_range(__first, std::move(__last));
   1c757:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c75b:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   1c762:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1c766:	e8 f5 00 00 00       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c76b:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   1c772:	48 8b 30             	mov    (%rax),%rsi
   1c775:	e8 f6 00 00 00       	call   1c870 <_ZNSt3__114__unwrap_rangeB8nn210000IPKcS2_EEDaT_T0_>
   1c77a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1c77e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1c782:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1c789:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   1c78d:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
   1c791:	e8 ca 00 00 00       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c796:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
   1c79d:	48 8b 00             	mov    (%rax),%rax
   1c7a0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1c7a7:	e8 b4 00 00 00       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c7ac:	48 8b 00             	mov    (%rax),%rax
   1c7af:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1c7b3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1c7b7:	e8 64 d2 ff ff       	call   19a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
   1c7bc:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   1c7c3:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   1c7c7:	48 89 c1             	mov    %rax,%rcx
   1c7ca:	48 8d 7d b7          	lea    -0x49(%rbp),%rdi
   1c7ce:	e8 ed 00 00 00       	call   1c8c0 <_ZNKSt3__111__copy_implclB8nn210000IKccTnNS_9enable_ifIXsr38__can_lower_copy_assignment_to_memmoveIT_T0_EE5valueEiE4typeELi0EEENS_4pairIPS4_PS5_EES9_S9_SA_>
   1c7d3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1c7d7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1c7db:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1c7df:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   1c7e3:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   1c7e7:	e8 74 00 00 00       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c7ec:	48 8b 00             	mov    (%rax),%rax
   1c7ef:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   1c7f3:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   1c7f7:	e8 64 00 00 00       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c7fc:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   1c800:	48 8b 30             	mov    (%rax),%rsi
   1c803:	e8 48 01 00 00       	call   1c950 <_ZNSt3__114__rewrap_rangeB8nn210000IPKcS2_S2_EET0_S3_T1_>
   1c808:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1c80c:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
   1c810:	e8 6b ce ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   1c815:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   1c819:	48 8b 00             	mov    (%rax),%rax
   1c81c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1c820:	e8 5b ce ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   1c825:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   1c829:	48 8b 30             	mov    (%rax),%rsi
   1c82c:	e8 5f 01 00 00       	call   1c990 <_ZNSt3__113__rewrap_iterB8nn210000IPcS1_NS_18__unwrap_iter_implIS1_Lb1EEEEET_S4_T0_>
   1c831:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1c835:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
   1c839:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   1c83d:	e8 be 00 00 00       	call   1c900 <_ZNSt3__19make_pairB8nn210000IPKcPcEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS5_Iu7__decayIT0_EE4typeEEEOS6_OSA_>
   1c842:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c846:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1c84a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c84e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c852:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   1c859:	5d                   	pop    %rbp
   1c85a:	c3                   	ret
   1c85b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   1c860:	55                   	push   %rbp
   1c861:	48 89 e5             	mov    %rsp,%rbp
   1c864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   1c868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c86c:	5d                   	pop    %rbp
   1c86d:	c3                   	ret
   1c86e:	66 90                	xchg   %ax,%ax

000000000001c870 <_ZNSt3__114__unwrap_rangeB8nn210000IPKcS2_EEDaT_T0_>:
_LIBCPP_HIDE_FROM_ABI constexpr auto __unwrap_range(_Iter __first, _Sent __last) {
   1c870:	55                   	push   %rbp
   1c871:	48 89 e5             	mov    %rsp,%rbp
   1c874:	48 83 ec 30          	sub    $0x30,%rsp
   1c878:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c87c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c880:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return __unwrap_range_impl<_Iter, _Sent>::__unwrap(std::move(__first), std::move(__last));
   1c884:	e8 d7 ff ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c889:	48 8b 00             	mov    (%rax),%rax
   1c88c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1c890:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1c894:	e8 c7 ff ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c899:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1c89d:	48 8b 30             	mov    (%rax),%rsi
   1c8a0:	e8 2b 01 00 00       	call   1c9d0 <_ZNSt3__119__unwrap_range_implIPKcS2_E8__unwrapB8nn210000ES2_S2_>
   1c8a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c8a9:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1c8ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c8b5:	48 83 c4 30          	add    $0x30,%rsp
   1c8b9:	5d                   	pop    %rbp
   1c8ba:	c3                   	ret
   1c8bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c8c0 <_ZNKSt3__111__copy_implclB8nn210000IKccTnNS_9enable_ifIXsr38__can_lower_copy_assignment_to_memmoveIT_T0_EE5valueEiE4typeELi0EEENS_4pairIPS4_PS5_EES9_S9_SA_>:
  operator()(_In* __first, _In* __last, _Out* __result) const {
   1c8c0:	55                   	push   %rbp
   1c8c1:	48 89 e5             	mov    %rsp,%rbp
   1c8c4:	48 83 ec 30          	sub    $0x30,%rsp
   1c8c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c8cc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c8d0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1c8d4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    return std::__copy_trivial_impl(__first, __last, __result);
   1c8d8:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1c8dc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1c8e0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1c8e4:	e8 e7 01 00 00       	call   1cad0 <_ZNSt3__119__copy_trivial_implB8nn210000IKccEENS_4pairIPT_PT0_EES4_S4_S6_>
   1c8e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c8ed:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1c8f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8f5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c8f9:	48 83 c4 30          	add    $0x30,%rsp
   1c8fd:	5d                   	pop    %rbp
   1c8fe:	c3                   	ret
   1c8ff:	90                   	nop

000000000001c900 <_ZNSt3__19make_pairB8nn210000IPKcPcEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS5_Iu7__decayIT0_EE4typeEEEOS6_OSA_>:
make_pair(_T1&& __t1, _T2&& __t2) {
   1c900:	55                   	push   %rbp
   1c901:	48 89 e5             	mov    %rsp,%rbp
   1c904:	48 83 ec 30          	sub    $0x30,%rsp
   1c908:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c90c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
   1c910:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1c914:	e8 a7 01 00 00       	call   1cac0 <_ZNSt3__17forwardB8nn210000IPKcEEOT_Ru20__remove_reference_tIS3_E>
   1c919:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1c91d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1c921:	e8 6a 02 00 00       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   1c926:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1c92a:	48 89 c2             	mov    %rax,%rdx
   1c92d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1c931:	e8 ba 02 00 00       	call   1cbf0 <_ZNSt3__14pairIPKcPcEC2B8nn210000IS2_S3_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS7_OS8_>
   1c936:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c93a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c93e:	48 83 c4 30          	add    $0x30,%rsp
   1c942:	5d                   	pop    %rbp
   1c943:	c3                   	ret
   1c944:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1c94b:	00 00 00 
   1c94e:	66 90                	xchg   %ax,%ax

000000000001c950 <_ZNSt3__114__rewrap_rangeB8nn210000IPKcS2_S2_EET0_S3_T1_>:
_LIBCPP_HIDE_FROM_ABI constexpr _Iter __rewrap_range(_Iter __orig_iter, _Unwrapped __iter) {
   1c950:	55                   	push   %rbp
   1c951:	48 89 e5             	mov    %rsp,%rbp
   1c954:	48 83 ec 20          	sub    $0x20,%rsp
   1c958:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c95c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c960:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return __unwrap_range_impl<_Iter, _Sent>::__rewrap(std::move(__orig_iter), std::move(__iter));
   1c964:	e8 f7 fe ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c969:	48 8b 00             	mov    (%rax),%rax
   1c96c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1c970:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1c974:	e8 e7 fe ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c979:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1c97d:	48 8b 30             	mov    (%rax),%rsi
   1c980:	e8 bb 02 00 00       	call   1cc40 <_ZNSt3__119__unwrap_range_implIPKcS2_E8__rewrapB8nn210000ES2_S2_>
   1c985:	48 83 c4 20          	add    $0x20,%rsp
   1c989:	5d                   	pop    %rbp
   1c98a:	c3                   	ret
   1c98b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c990 <_ZNSt3__113__rewrap_iterB8nn210000IPcS1_NS_18__unwrap_iter_implIS1_Lb1EEEEET_S4_T0_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) _NOEXCEPT {
   1c990:	55                   	push   %rbp
   1c991:	48 89 e5             	mov    %rsp,%rbp
   1c994:	48 83 ec 20          	sub    $0x20,%rsp
   1c998:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c99c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c9a0:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
   1c9a4:	e8 d7 cc ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   1c9a9:	48 8b 00             	mov    (%rax),%rax
   1c9ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1c9b0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1c9b4:	e8 c7 cc ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   1c9b9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1c9bd:	48 8b 30             	mov    (%rax),%rsi
   1c9c0:	e8 3b 03 00 00       	call   1cd00 <_ZNSt3__118__unwrap_iter_implIPcLb1EE8__rewrapB8nn210000ES1_S1_>
   1c9c5:	48 83 c4 20          	add    $0x20,%rsp
   1c9c9:	5d                   	pop    %rbp
   1c9ca:	c3                   	ret
   1c9cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001c9d0 <_ZNSt3__119__unwrap_range_implIPKcS2_E8__unwrapB8nn210000ES2_S2_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr auto __unwrap(_Iter __first, _Iter __last) {
   1c9d0:	55                   	push   %rbp
   1c9d1:	48 89 e5             	mov    %rsp,%rbp
   1c9d4:	48 83 ec 30          	sub    $0x30,%rsp
   1c9d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c9dc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c9e0:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    return pair{std::__unwrap_iter(std::move(__first)), std::__unwrap_iter(std::move(__last))};
   1c9e4:	e8 77 fe ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c9e9:	48 8b 38             	mov    (%rax),%rdi
   1c9ec:	e8 3f 00 00 00       	call   1ca30 <_ZNSt3__113__unwrap_iterB8nn210000IPKcNS_18__unwrap_iter_implIS2_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS6_EEEES6_>
   1c9f1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1c9f5:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1c9f9:	e8 62 fe ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1c9fe:	48 8b 38             	mov    (%rax),%rdi
   1ca01:	e8 2a 00 00 00       	call   1ca30 <_ZNSt3__113__unwrap_iterB8nn210000IPKcNS_18__unwrap_iter_implIS2_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS6_EEEES6_>
   1ca06:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1ca0a:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1ca0e:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1ca12:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1ca16:	e8 35 00 00 00       	call   1ca50 <_ZNSt3__14pairIPKcS2_EC2B8nn210000IS2_S2_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>
   1ca1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ca1f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ca23:	48 83 c4 30          	add    $0x30,%rsp
   1ca27:	5d                   	pop    %rbp
   1ca28:	c3                   	ret
   1ca29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001ca30 <_ZNSt3__113__unwrap_iterB8nn210000IPKcNS_18__unwrap_iter_implIS2_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS6_EEEES6_>:
__unwrap_iter(_Iter __i) _NOEXCEPT {
   1ca30:	55                   	push   %rbp
   1ca31:	48 89 e5             	mov    %rsp,%rbp
   1ca34:	48 83 ec 10          	sub    $0x10,%rsp
   1ca38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return _Impl::__unwrap(__i);
   1ca3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1ca40:	e8 5b 00 00 00       	call   1caa0 <_ZNSt3__118__unwrap_iter_implIPKcLb1EE8__unwrapB8nn210000ES2_>
   1ca45:	48 83 c4 10          	add    $0x10,%rsp
   1ca49:	5d                   	pop    %rbp
   1ca4a:	c3                   	ret
   1ca4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001ca50 <_ZNSt3__14pairIPKcS2_EC2B8nn210000IS2_S2_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   1ca50:	55                   	push   %rbp
   1ca51:	48 89 e5             	mov    %rsp,%rbp
   1ca54:	48 83 ec 20          	sub    $0x20,%rsp
   1ca58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ca5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ca60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1ca64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca68:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ca6c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1ca70:	e8 4b 00 00 00       	call   1cac0 <_ZNSt3__17forwardB8nn210000IPKcEEOT_Ru20__remove_reference_tIS3_E>
   1ca75:	48 89 c1             	mov    %rax,%rcx
   1ca78:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ca7c:	48 8b 09             	mov    (%rcx),%rcx
   1ca7f:	48 89 08             	mov    %rcx,(%rax)
   1ca82:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1ca86:	e8 35 00 00 00       	call   1cac0 <_ZNSt3__17forwardB8nn210000IPKcEEOT_Ru20__remove_reference_tIS3_E>
   1ca8b:	48 89 c1             	mov    %rax,%rcx
   1ca8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ca92:	48 8b 09             	mov    (%rcx),%rcx
   1ca95:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   1ca99:	48 83 c4 20          	add    $0x20,%rsp
   1ca9d:	5d                   	pop    %rbp
   1ca9e:	c3                   	ret
   1ca9f:	90                   	nop

000000000001caa0 <_ZNSt3__118__unwrap_iter_implIPKcLb1EE8__unwrapB8nn210000ES2_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ToAddressT __unwrap(_Iter __i) _NOEXCEPT {
   1caa0:	55                   	push   %rbp
   1caa1:	48 89 e5             	mov    %rsp,%rbp
   1caa4:	48 83 ec 10          	sub    $0x10,%rsp
   1caa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return std::__to_address(__i);
   1caac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1cab0:	e8 9b b1 ff ff       	call   17c50 <_ZNSt3__112__to_addressB8nn210000IKcEEPT_S3_>
   1cab5:	48 83 c4 10          	add    $0x10,%rsp
   1cab9:	5d                   	pop    %rbp
   1caba:	c3                   	ret
   1cabb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001cac0 <_ZNSt3__17forwardB8nn210000IPKcEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1cac0:	55                   	push   %rbp
   1cac1:	48 89 e5             	mov    %rsp,%rbp
   1cac4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1cac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cacc:	5d                   	pop    %rbp
   1cacd:	c3                   	ret
   1cace:	66 90                	xchg   %ax,%ax

000000000001cad0 <_ZNSt3__119__copy_trivial_implB8nn210000IKccEENS_4pairIPT_PT0_EES4_S4_S6_>:
__copy_trivial_impl(_In* __first, _In* __last, _Out* __result) {
   1cad0:	55                   	push   %rbp
   1cad1:	48 89 e5             	mov    %rsp,%rbp
   1cad4:	48 83 ec 40          	sub    $0x40,%rsp
   1cad8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cadc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1cae0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  const size_t __n = static_cast<size_t>(__last - __first);
   1cae4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cae8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1caec:	48 29 c8             	sub    %rcx,%rax
   1caef:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  std::__constexpr_memmove(__result, __first, __element_count(__n));
   1caf3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1caf7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1cafb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1caff:	e8 5c c3 ff ff       	call   18e60 <_ZNSt3__119__constexpr_memmoveB8nn210000IcKcEEPT_S3_PT0_NS_15__element_countE>
  return std::make_pair(__last, __result + __n);
   1cb04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1cb08:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1cb0c:	48 01 c8             	add    %rcx,%rax
   1cb0f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1cb13:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1cb17:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
   1cb1b:	e8 20 00 00 00       	call   1cb40 <_ZNSt3__19make_pairB8nn210000IRPKcPcEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS6_Iu7__decayIT0_EE4typeEEEOS7_OSB_>
   1cb20:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1cb24:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1cb28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cb2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1cb30:	48 83 c4 40          	add    $0x40,%rsp
   1cb34:	5d                   	pop    %rbp
   1cb35:	c3                   	ret
   1cb36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1cb3d:	00 00 00 

000000000001cb40 <_ZNSt3__19make_pairB8nn210000IRPKcPcEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS6_Iu7__decayIT0_EE4typeEEEOS7_OSB_>:
make_pair(_T1&& __t1, _T2&& __t2) {
   1cb40:	55                   	push   %rbp
   1cb41:	48 89 e5             	mov    %rsp,%rbp
   1cb44:	48 83 ec 30          	sub    $0x30,%rsp
   1cb48:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cb4c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
   1cb50:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1cb54:	e8 f7 c3 ff ff       	call   18f50 <_ZNSt3__17forwardB8nn210000IRPKcEEOT_Ru20__remove_reference_tIS4_E>
   1cb59:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1cb5d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1cb61:	e8 2a 00 00 00       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   1cb66:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1cb6a:	48 89 c2             	mov    %rax,%rdx
   1cb6d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1cb71:	e8 2a 00 00 00       	call   1cba0 <_ZNSt3__14pairIPKcPcEC2B8nn210000IRS2_S3_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS8_OS9_>
   1cb76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cb7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1cb7e:	48 83 c4 30          	add    $0x30,%rsp
   1cb82:	5d                   	pop    %rbp
   1cb83:	c3                   	ret
   1cb84:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1cb8b:	00 00 00 
   1cb8e:	66 90                	xchg   %ax,%ax

000000000001cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1cb90:	55                   	push   %rbp
   1cb91:	48 89 e5             	mov    %rsp,%rbp
   1cb94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1cb98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb9c:	5d                   	pop    %rbp
   1cb9d:	c3                   	ret
   1cb9e:	66 90                	xchg   %ax,%ax

000000000001cba0 <_ZNSt3__14pairIPKcPcEC2B8nn210000IRS2_S3_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS8_OS9_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   1cba0:	55                   	push   %rbp
   1cba1:	48 89 e5             	mov    %rsp,%rbp
   1cba4:	48 83 ec 20          	sub    $0x20,%rsp
   1cba8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cbac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cbb0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1cbb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cbb8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1cbbc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1cbc0:	e8 8b c3 ff ff       	call   18f50 <_ZNSt3__17forwardB8nn210000IRPKcEEOT_Ru20__remove_reference_tIS4_E>
   1cbc5:	48 89 c1             	mov    %rax,%rcx
   1cbc8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cbcc:	48 8b 09             	mov    (%rcx),%rcx
   1cbcf:	48 89 08             	mov    %rcx,(%rax)
   1cbd2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1cbd6:	e8 b5 ff ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   1cbdb:	48 89 c1             	mov    %rax,%rcx
   1cbde:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cbe2:	48 8b 09             	mov    (%rcx),%rcx
   1cbe5:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   1cbe9:	48 83 c4 20          	add    $0x20,%rsp
   1cbed:	5d                   	pop    %rbp
   1cbee:	c3                   	ret
   1cbef:	90                   	nop

000000000001cbf0 <_ZNSt3__14pairIPKcPcEC2B8nn210000IS2_S3_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS7_OS8_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   1cbf0:	55                   	push   %rbp
   1cbf1:	48 89 e5             	mov    %rsp,%rbp
   1cbf4:	48 83 ec 20          	sub    $0x20,%rsp
   1cbf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cbfc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cc00:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1cc04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc08:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1cc0c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1cc10:	e8 ab fe ff ff       	call   1cac0 <_ZNSt3__17forwardB8nn210000IPKcEEOT_Ru20__remove_reference_tIS3_E>
   1cc15:	48 89 c1             	mov    %rax,%rcx
   1cc18:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cc1c:	48 8b 09             	mov    (%rcx),%rcx
   1cc1f:	48 89 08             	mov    %rcx,(%rax)
   1cc22:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1cc26:	e8 65 ff ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   1cc2b:	48 89 c1             	mov    %rax,%rcx
   1cc2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cc32:	48 8b 09             	mov    (%rcx),%rcx
   1cc35:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   1cc39:	48 83 c4 20          	add    $0x20,%rsp
   1cc3d:	5d                   	pop    %rbp
   1cc3e:	c3                   	ret
   1cc3f:	90                   	nop

000000000001cc40 <_ZNSt3__119__unwrap_range_implIPKcS2_E8__rewrapB8nn210000ES2_S2_>:
  __rewrap(_Iter __orig_iter, decltype(std::__unwrap_iter(__orig_iter)) __iter) {
   1cc40:	55                   	push   %rbp
   1cc41:	48 89 e5             	mov    %rsp,%rbp
   1cc44:	48 83 ec 20          	sub    $0x20,%rsp
   1cc48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cc4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cc50:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
    return std::__rewrap_iter(std::move(__orig_iter), std::move(__iter));
   1cc54:	e8 07 fc ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1cc59:	48 8b 00             	mov    (%rax),%rax
   1cc5c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1cc60:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1cc64:	e8 f7 fb ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1cc69:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1cc6d:	48 8b 30             	mov    (%rax),%rsi
   1cc70:	e8 0b 00 00 00       	call   1cc80 <_ZNSt3__113__rewrap_iterB8nn210000IPKcS2_NS_18__unwrap_iter_implIS2_Lb1EEEEET_S5_T0_>
   1cc75:	48 83 c4 20          	add    $0x20,%rsp
   1cc79:	5d                   	pop    %rbp
   1cc7a:	c3                   	ret
   1cc7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001cc80 <_ZNSt3__113__rewrap_iterB8nn210000IPKcS2_NS_18__unwrap_iter_implIS2_Lb1EEEEET_S5_T0_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) _NOEXCEPT {
   1cc80:	55                   	push   %rbp
   1cc81:	48 89 e5             	mov    %rsp,%rbp
   1cc84:	48 83 ec 20          	sub    $0x20,%rsp
   1cc88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cc8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cc90:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
   1cc94:	e8 c7 fb ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1cc99:	48 8b 00             	mov    (%rax),%rax
   1cc9c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1cca0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1cca4:	e8 b7 fb ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1cca9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1ccad:	48 8b 30             	mov    (%rax),%rsi
   1ccb0:	e8 0b 00 00 00       	call   1ccc0 <_ZNSt3__118__unwrap_iter_implIPKcLb1EE8__rewrapB8nn210000ES2_S2_>
   1ccb5:	48 83 c4 20          	add    $0x20,%rsp
   1ccb9:	5d                   	pop    %rbp
   1ccba:	c3                   	ret
   1ccbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001ccc0 <_ZNSt3__118__unwrap_iter_implIPKcLb1EE8__rewrapB8nn210000ES2_S2_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter) {
   1ccc0:	55                   	push   %rbp
   1ccc1:	48 89 e5             	mov    %rsp,%rbp
   1ccc4:	48 83 ec 20          	sub    $0x20,%rsp
   1ccc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cccc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __orig_iter + (__unwrapped_iter - std::__to_address(__orig_iter));
   1ccd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccd4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1ccd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ccdc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1cce0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1cce4:	e8 67 af ff ff       	call   17c50 <_ZNSt3__112__to_addressB8nn210000IKcEEPT_S3_>
   1cce9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1cced:	48 89 c2             	mov    %rax,%rdx
   1ccf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ccf4:	48 29 d1             	sub    %rdx,%rcx
   1ccf7:	48 01 c8             	add    %rcx,%rax
   1ccfa:	48 83 c4 20          	add    $0x20,%rsp
   1ccfe:	5d                   	pop    %rbp
   1ccff:	c3                   	ret

000000000001cd00 <_ZNSt3__118__unwrap_iter_implIPcLb1EE8__rewrapB8nn210000ES1_S1_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter) {
   1cd00:	55                   	push   %rbp
   1cd01:	48 89 e5             	mov    %rsp,%rbp
   1cd04:	48 83 ec 20          	sub    $0x20,%rsp
   1cd08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __orig_iter + (__unwrapped_iter - std::__to_address(__orig_iter));
   1cd10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd14:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1cd18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cd1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1cd20:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1cd24:	e8 67 b4 ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   1cd29:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1cd2d:	48 89 c2             	mov    %rax,%rdx
   1cd30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cd34:	48 29 d1             	sub    %rdx,%rcx
   1cd37:	48 01 c8             	add    %rcx,%rax
   1cd3a:	48 83 c4 20          	add    $0x20,%rsp
   1cd3e:	5d                   	pop    %rbp
   1cd3f:	c3                   	ret

000000000001cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>:
_LIBCPP_HIDE_FROM_ABI _OutIt __fill(_OutIt __out_it, size_t __n, _CharT __value) {
   1cd40:	55                   	push   %rbp
   1cd41:	48 89 e5             	mov    %rsp,%rbp
   1cd44:	48 83 ec 20          	sub    $0x20,%rsp
   1cd48:	88 d0                	mov    %dl,%al
   1cd4a:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1cd4e:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1cd52:	88 45 e7             	mov    %al,-0x19(%rbp)
   1cd55:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    __out_it.__get_container()->__fill(__n, __value);
   1cd59:	e8 e2 f6 ff ff       	call   1c440 <_ZNKSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEE15__get_containerB8nn210000Ev>
   1cd5e:	48 89 c7             	mov    %rax,%rdi
   1cd61:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1cd65:	8a 45 e7             	mov    -0x19(%rbp),%al
   1cd68:	0f be d0             	movsbl %al,%edx
   1cd6b:	e8 20 00 00 00       	call   1cd90 <_ZNSt3__18__format15__output_bufferIcE6__fillB8nn210000Emc>
    return __out_it;
   1cd70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cd74:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1cd78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd7c:	48 83 c4 20          	add    $0x20,%rsp
   1cd80:	5d                   	pop    %rbp
   1cd81:	c3                   	ret
   1cd82:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1cd89:	00 00 00 
   1cd8c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001cd90 <_ZNSt3__18__format15__output_bufferIcE6__fillB8nn210000Emc>:
  _LIBCPP_HIDE_FROM_ABI void __fill(size_t __n, _CharT __value) {
   1cd90:	55                   	push   %rbp
   1cd91:	48 89 e5             	mov    %rsp,%rbp
   1cd94:	48 83 ec 30          	sub    $0x30,%rsp
   1cd98:	88 d0                	mov    %dl,%al
   1cd9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cda2:	88 45 ef             	mov    %al,-0x11(%rbp)
   1cda5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cda9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if (__max_output_size_) {
   1cdad:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
   1cdb2:	74 20                	je     1cdd4 <_ZNSt3__18__format15__output_bufferIcE6__fillB8nn210000Emc+0x44>
   1cdb4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
      __n = __max_output_size_->__write_request(__n);
   1cdb8:	48 8b 78 20          	mov    0x20(%rax),%rdi
   1cdbc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1cdc0:	e8 ab f7 ff ff       	call   1c570 <_ZNSt3__18__format17__max_output_sizeB8nn21000015__write_requestB8nn210000Em>
   1cdc5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (__n == 0)
   1cdc9:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1cdce:	75 02                	jne    1cdd2 <_ZNSt3__18__format15__output_bufferIcE6__fillB8nn210000Emc+0x42>
        return;
   1cdd0:	eb 7b                	jmp    1ce4d <_ZNSt3__18__format15__output_bufferIcE6__fillB8nn210000Emc+0xbd>
    }
   1cdd2:	eb 00                	jmp    1cdd4 <_ZNSt3__18__format15__output_bufferIcE6__fillB8nn210000Emc+0x44>
    do {
   1cdd4:	eb 00                	jmp    1cdd6 <_ZNSt3__18__format15__output_bufferIcE6__fillB8nn210000Emc+0x46>
   1cdd6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
      __prepare_write(__n);
   1cdda:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1cdde:	e8 fd f7 ff ff       	call   1c5e0 <_ZNSt3__18__format15__output_bufferIcE15__prepare_writeB8nn210000Em>
   1cde3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
      size_t __chunk = std::min(__n, __available());
   1cde7:	e8 44 f8 ff ff       	call   1c630 <_ZNKSt3__18__format15__output_bufferIcE11__availableB8nn210000Ev>
   1cdec:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1cdf0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1cdf4:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1cdf8:	e8 83 f9 fe ff       	call   c780 <_ZNSt3__13minB8nn210000ImEERKT_S3_S3_>
   1cdfd:	48 89 c1             	mov    %rax,%rcx
   1ce00:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ce04:	48 8b 09             	mov    (%rcx),%rcx
   1ce07:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      std::fill_n(std::addressof(__ptr_[__size_]), __chunk, __value);
   1ce0b:	48 8b 38             	mov    (%rax),%rdi
   1ce0e:	48 03 78 10          	add    0x10(%rax),%rdi
   1ce12:	e8 c9 be ff ff       	call   18ce0 <_ZNSt3__19addressofB8nn210000IcEEPT_RS1_>
   1ce17:	48 89 c7             	mov    %rax,%rdi
   1ce1a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1ce1e:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   1ce22:	e8 89 c0 ff ff       	call   18eb0 <_ZNSt3__16fill_nB8nn210000IPcmcEET_S2_T0_RKT1_>
   1ce27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
      __size_ += __chunk;
   1ce2b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1ce2f:	48 03 48 10          	add    0x10(%rax),%rcx
   1ce33:	48 89 48 10          	mov    %rcx,0x10(%rax)
      __n -= __chunk;
   1ce37:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1ce3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ce3f:	48 29 c8             	sub    %rcx,%rax
   1ce42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    } while (__n);
   1ce46:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1ce4b:	75 89                	jne    1cdd6 <_ZNSt3__18__format15__output_bufferIcE6__fillB8nn210000Emc+0x46>
  }
   1ce4d:	48 83 c4 30          	add    $0x30,%rsp
   1ce51:	5d                   	pop    %rbp
   1ce52:	c3                   	ret
   1ce53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ce5a:	00 00 00 
   1ce5d:	0f 1f 00             	nopl   (%rax)

000000000001ce60 <_ZNSt3__110to_addressB8nn210000IKcEEDaPT_>:
  }
};

#if _LIBCPP_STD_VER >= 20
template <class _Tp>
inline _LIBCPP_HIDE_FROM_ABI constexpr auto to_address(_Tp* __p) noexcept {
   1ce60:	55                   	push   %rbp
   1ce61:	48 89 e5             	mov    %rsp,%rbp
   1ce64:	48 83 ec 10          	sub    $0x10,%rsp
   1ce68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return std::__to_address(__p);
   1ce6c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1ce70:	e8 db ad ff ff       	call   17c50 <_ZNSt3__112__to_addressB8nn210000IKcEEPT_S3_>
   1ce75:	48 83 c4 10          	add    $0x10,%rsp
   1ce79:	5d                   	pop    %rbp
   1ce7a:	c3                   	ret
   1ce7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001ce80 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE6cbeginB8nn210000Ev>:
  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI const_iterator cbegin() const _NOEXCEPT {
   1ce80:	55                   	push   %rbp
   1ce81:	48 89 e5             	mov    %rsp,%rbp
   1ce84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ce88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return const_iterator(__data_);
   1ce8c:	48 8b 00             	mov    (%rax),%rax
   1ce8f:	5d                   	pop    %rbp
   1ce90:	c3                   	ret
   1ce91:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ce98:	00 00 00 
   1ce9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001cea0 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4cendB8nn210000Ev>:
  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI const_iterator cend() const _NOEXCEPT {
   1cea0:	55                   	push   %rbp
   1cea1:	48 89 e5             	mov    %rsp,%rbp
   1cea4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cea8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    return const_iterator(__data_ + __size_);
   1ceac:	48 8b 01             	mov    (%rcx),%rax
   1ceaf:	48 03 41 08          	add    0x8(%rcx),%rax
   1ceb3:	5d                   	pop    %rbp
   1ceb4:	c3                   	ret
   1ceb5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1cebc:	00 00 00 
   1cebf:	90                   	nop

000000000001cec0 <_ZNKSt3__113__format_spec8__parserIcE11__get_widthB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEiRT_>:
  _LIBCPP_HIDE_FROM_ABI int32_t __get_width(auto& __ctx) const {
   1cec0:	55                   	push   %rbp
   1cec1:	48 89 e5             	mov    %rsp,%rbp
   1cec4:	48 83 ec 70          	sub    $0x70,%rsp
   1cec8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1cecc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1ced0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ced4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    if (!__width_as_arg_)
   1ced8:	66 8b 40 02          	mov    0x2(%rax),%ax
   1cedc:	66 c1 e8 0e          	shr    $0xe,%ax
   1cee0:	66 83 e0 01          	and    $0x1,%ax
   1cee4:	66 a9 01 00          	test   $0x1,%ax
   1cee8:	75 0c                	jne    1cef6 <_ZNKSt3__113__format_spec8__parserIcE11__get_widthB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEiRT_+0x36>
   1ceea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
      return __width_;
   1ceee:	8b 40 04             	mov    0x4(%rax),%eax
   1cef1:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1cef4:	eb 3f                	jmp    1cf35 <_ZNKSt3__113__format_spec8__parserIcE11__get_widthB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEiRT_+0x75>
   1cef6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    return __format_spec::__substitute_arg_id(__ctx.arg(__width_));
   1cefa:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1cefe:	48 63 50 04          	movslq 0x4(%rax),%rdx
   1cf02:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1cf06:	e8 25 d1 ff ff       	call   1a030 <_ZNKSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3argB8nn210000Em>
   1cf0b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1cf0f:	48 89 e0             	mov    %rsp,%rax
   1cf12:	48 89 48 18          	mov    %rcx,0x18(%rax)
   1cf16:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1cf1a:	48 89 48 10          	mov    %rcx,0x10(%rax)
   1cf1e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1cf22:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1cf26:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1cf2a:	48 89 08             	mov    %rcx,(%rax)
   1cf2d:	e8 8e 00 00 00       	call   1cfc0 <_ZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EE>
   1cf32:	89 45 fc             	mov    %eax,-0x4(%rbp)
  }
   1cf35:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1cf38:	48 83 c4 70          	add    $0x70,%rsp
   1cf3c:	5d                   	pop    %rbp
   1cf3d:	c3                   	ret
   1cf3e:	66 90                	xchg   %ax,%ax

000000000001cf40 <_ZNKSt3__113__format_spec8__parserIcE15__get_precisionB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEiRT_>:
  _LIBCPP_HIDE_FROM_ABI int32_t __get_precision(auto& __ctx) const {
   1cf40:	55                   	push   %rbp
   1cf41:	48 89 e5             	mov    %rsp,%rbp
   1cf44:	48 83 ec 70          	sub    $0x70,%rsp
   1cf48:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1cf4c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1cf50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cf54:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    if (!__precision_as_arg_)
   1cf58:	66 8b 40 02          	mov    0x2(%rax),%ax
   1cf5c:	66 c1 e8 0f          	shr    $0xf,%ax
   1cf60:	66 a9 01 00          	test   $0x1,%ax
   1cf64:	75 0c                	jne    1cf72 <_ZNKSt3__113__format_spec8__parserIcE15__get_precisionB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEiRT_+0x32>
   1cf66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
      return __precision_;
   1cf6a:	8b 40 08             	mov    0x8(%rax),%eax
   1cf6d:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1cf70:	eb 3f                	jmp    1cfb1 <_ZNKSt3__113__format_spec8__parserIcE15__get_precisionB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEiRT_+0x71>
   1cf72:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    return __format_spec::__substitute_arg_id(__ctx.arg(__precision_));
   1cf76:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1cf7a:	48 63 50 08          	movslq 0x8(%rax),%rdx
   1cf7e:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1cf82:	e8 a9 d0 ff ff       	call   1a030 <_ZNKSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3argB8nn210000Em>
   1cf87:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1cf8b:	48 89 e0             	mov    %rsp,%rax
   1cf8e:	48 89 48 18          	mov    %rcx,0x18(%rax)
   1cf92:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1cf96:	48 89 48 10          	mov    %rcx,0x10(%rax)
   1cf9a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1cf9e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1cfa2:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1cfa6:	48 89 08             	mov    %rcx,(%rax)
   1cfa9:	e8 12 00 00 00       	call   1cfc0 <_ZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EE>
   1cfae:	89 45 fc             	mov    %eax,-0x4(%rbp)
  }
   1cfb1:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1cfb4:	48 83 c4 70          	add    $0x70,%rsp
   1cfb8:	5d                   	pop    %rbp
   1cfb9:	c3                   	ret
   1cfba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001cfc0 <_ZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EE>:
_LIBCPP_HIDE_FROM_ABI constexpr uint32_t __substitute_arg_id(basic_format_arg<_Context> __format_arg) {
   1cfc0:	55                   	push   %rbp
   1cfc1:	48 89 e5             	mov    %rsp,%rbp
   1cfc4:	48 83 ec 50          	sub    $0x50,%rsp
   1cfc8:	48 8d 45 10          	lea    0x10(%rbp),%rax
      __format_arg);
   1cfcc:	48 8b 08             	mov    (%rax),%rcx
   1cfcf:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1cfd3:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1cfd7:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   1cfdb:	48 8b 48 10          	mov    0x10(%rax),%rcx
   1cfdf:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   1cfe3:	48 8b 40 18          	mov    0x18(%rax),%rax
   1cfe7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  return std::__visit_format_arg(
   1cfeb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1cfef:	48 89 e0             	mov    %rsp,%rax
   1cff2:	48 89 48 18          	mov    %rcx,0x18(%rax)
   1cff6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1cffa:	48 89 48 10          	mov    %rcx,0x10(%rax)
   1cffe:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1d002:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1d006:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1d00a:	48 89 08             	mov    %rcx,(%rax)
   1d00d:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
   1d011:	e8 0a 00 00 00       	call   1d020 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE>
   1d016:	48 83 c4 50          	add    $0x50,%rsp
   1d01a:	5d                   	pop    %rbp
   1d01b:	c3                   	ret
   1d01c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001d020 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE>:
_LIBCPP_HIDE_FROM_ABI decltype(auto) __visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg) {
   1d020:	55                   	push   %rbp
   1d021:	48 89 e5             	mov    %rsp,%rbp
   1d024:	48 83 ec 30          	sub    $0x30,%rsp
   1d028:	48 8d 45 10          	lea    0x10(%rbp),%rax
   1d02c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1d030:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  switch (__arg.__type_) {
   1d034:	0f b6 40 10          	movzbl 0x10(%rax),%eax
   1d038:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1d03c:	48 83 e8 0f          	sub    $0xf,%rax
   1d040:	0f 87 e7 01 00 00    	ja     1d22d <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x20d>
   1d046:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1d04a:	48 8d 05 ab 1b 01 00 	lea    0x11bab(%rip),%rax        # 2ebfc <_ZNSt3__16__itoa11__pow10_128E+0x41c>
   1d051:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   1d055:	48 01 c8             	add    %rcx,%rax
   1d058:	ff e0                	jmp    *%rax
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__monostate_);
   1d05a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d05e:	e8 1d 02 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d063:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d067:	48 89 c7             	mov    %rax,%rdi
   1d06a:	e8 d1 01 00 00       	call   1d240 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRNS_9monostateEEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSH_>
   1d06f:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d072:	e9 bb 01 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__boolean_);
   1d077:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d07b:	e8 00 02 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d080:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d084:	48 89 c7             	mov    %rax,%rdi
   1d087:	e8 04 02 00 00       	call   1d290 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRbEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d08c:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d08f:	e9 9e 01 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__char_type_);
   1d094:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d098:	e8 e3 01 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d09d:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d0a1:	48 89 c7             	mov    %rax,%rdi
   1d0a4:	e8 27 02 00 00       	call   1d2d0 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRcEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d0a9:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d0ac:	e9 81 01 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__int_);
   1d0b1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d0b5:	e8 c6 01 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d0ba:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d0be:	48 89 c7             	mov    %rax,%rdi
   1d0c1:	e8 4a 02 00 00       	call   1d310 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRiEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d0c6:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d0c9:	e9 64 01 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__long_long_);
   1d0ce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d0d2:	e8 a9 01 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d0d7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d0db:	48 89 c7             	mov    %rax,%rdi
   1d0de:	e8 6d 02 00 00       	call   1d350 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRxEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d0e3:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d0e6:	e9 47 01 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__i128_);
   1d0eb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d0ef:	e8 8c 01 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d0f4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d0f8:	48 89 c7             	mov    %rax,%rdi
   1d0fb:	e8 90 02 00 00       	call   1d390 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRnEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d100:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d103:	e9 2a 01 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__unsigned_);
   1d108:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d10c:	e8 6f 01 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d111:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d115:	48 89 c7             	mov    %rax,%rdi
   1d118:	e8 b3 02 00 00       	call   1d3d0 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRjEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d11d:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d120:	e9 0d 01 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__unsigned_long_long_);
   1d125:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d129:	e8 52 01 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d12e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d132:	48 89 c7             	mov    %rax,%rdi
   1d135:	e8 d6 02 00 00       	call   1d410 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRyEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d13a:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d13d:	e9 f0 00 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__u128_);
   1d142:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d146:	e8 35 01 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d14b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d14f:	48 89 c7             	mov    %rax,%rdi
   1d152:	e8 f9 02 00 00       	call   1d450 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRoEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d157:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d15a:	e9 d3 00 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__float_);
   1d15f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d163:	e8 18 01 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d168:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d16c:	48 89 c7             	mov    %rax,%rdi
   1d16f:	e8 1c 03 00 00       	call   1d490 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRfEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d174:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d177:	e9 b6 00 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__double_);
   1d17c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d180:	e8 fb 00 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d185:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d189:	48 89 c7             	mov    %rax,%rdi
   1d18c:	e8 3f 03 00 00       	call   1d4d0 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRdEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d191:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d194:	e9 99 00 00 00       	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__long_double_);
   1d199:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d19d:	e8 de 00 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d1a2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d1a6:	48 89 c7             	mov    %rax,%rdi
   1d1a9:	e8 62 03 00 00       	call   1d510 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JReEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>
   1d1ae:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d1b1:	eb 7f                	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__const_char_type_ptr_);
   1d1b3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d1b7:	e8 c4 00 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d1bc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d1c0:	48 89 c7             	mov    %rax,%rdi
   1d1c3:	e8 88 03 00 00       	call   1d550 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRPKcEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSI_>
   1d1c8:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d1cb:	eb 65                	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__string_view_);
   1d1cd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d1d1:	e8 aa 00 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d1d6:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d1da:	48 89 c7             	mov    %rax,%rdi
   1d1dd:	e8 ae 03 00 00       	call   1d590 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSK_>
   1d1e2:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d1e5:	eb 4b                	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
    return std::invoke(std::forward<_Visitor>(__vis), __arg.__value_.__ptr_);
   1d1e7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d1eb:	e8 90 00 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d1f0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d1f4:	48 89 c7             	mov    %rax,%rdi
   1d1f7:	e8 d4 03 00 00       	call   1d5d0 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRPKvEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSI_>
   1d1fc:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d1ff:	eb 31                	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
        std::forward<_Visitor>(__vis), typename basic_format_arg<_Context>::handle{__arg.__value_.__handle_});
   1d201:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d205:	e8 76 00 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d20a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1d20e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1d212:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   1d216:	e8 35 d5 ff ff       	call   1a750 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6handleC2B8nn210000ERNS_24__basic_format_arg_valueIS7_E8__handleE>
   1d21b:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   1d21f:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
    return std::invoke(
   1d223:	e8 e8 03 00 00       	call   1d610 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JNSA_IS9_E6handleEEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSH_>
   1d228:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1d22b:	eb 05                	jmp    1d232 <_ZNSt3__118__visit_format_argB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_S9_EEDcOSB_NSA_IT0_EE+0x212>
  __libcpp_unreachable();
   1d22d:	e8 3e d5 ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
}
   1d232:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1d235:	48 83 c4 30          	add    $0x30,%rsp
   1d239:	5d                   	pop    %rbp
   1d23a:	c3                   	ret
   1d23b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001d240 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRNS_9monostateEEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSH_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d240:	55                   	push   %rbp
   1d241:	48 89 e5             	mov    %rsp,%rbp
   1d244:	48 83 ec 20          	sub    $0x20,%rsp
   1d248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d24c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d250:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d254:	e8 27 00 00 00       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d259:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d25d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d261:	e8 3a d5 ff ff       	call   1a7a0 <_ZNSt3__17forwardB8nn210000IRNS_9monostateEEEOT_Ru20__remove_reference_tIS3_E>
   1d266:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d26a:	48 89 c6             	mov    %rax,%rsi
   1d26d:	e8 de 03 00 00       	call   1d650 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRNS_9monostateEEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSG_>
   1d272:	48 83 c4 20          	add    $0x20,%rsp
   1d276:	5d                   	pop    %rbp
   1d277:	c3                   	ret
   1d278:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d27f:	00 

000000000001d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1d280:	55                   	push   %rbp
   1d281:	48 89 e5             	mov    %rsp,%rbp
   1d284:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1d288:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d28c:	5d                   	pop    %rbp
   1d28d:	c3                   	ret
   1d28e:	66 90                	xchg   %ax,%ax

000000000001d290 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRbEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d290:	55                   	push   %rbp
   1d291:	48 89 e5             	mov    %rsp,%rbp
   1d294:	48 83 ec 20          	sub    $0x20,%rsp
   1d298:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d29c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d2a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d2a4:	e8 d7 ff ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d2a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d2ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d2b1:	e8 4a d5 ff ff       	call   1a800 <_ZNSt3__17forwardB8nn210000IRbEEOT_Ru20__remove_reference_tIS2_E>
   1d2b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d2ba:	48 89 c6             	mov    %rax,%rsi
   1d2bd:	e8 ce 03 00 00       	call   1d690 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRbEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d2c2:	48 83 c4 20          	add    $0x20,%rsp
   1d2c6:	5d                   	pop    %rbp
   1d2c7:	c3                   	ret
   1d2c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d2cf:	00 

000000000001d2d0 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRcEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d2d0:	55                   	push   %rbp
   1d2d1:	48 89 e5             	mov    %rsp,%rbp
   1d2d4:	48 83 ec 20          	sub    $0x20,%rsp
   1d2d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d2dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d2e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d2e4:	e8 97 ff ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d2e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d2ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d2f1:	e8 1a 04 00 00       	call   1d710 <_ZNSt3__17forwardB8nn210000IRcEEOT_Ru20__remove_reference_tIS2_E>
   1d2f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d2fa:	48 89 c6             	mov    %rax,%rsi
   1d2fd:	e8 de 03 00 00       	call   1d6e0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRcEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d302:	48 83 c4 20          	add    $0x20,%rsp
   1d306:	5d                   	pop    %rbp
   1d307:	c3                   	ret
   1d308:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d30f:	00 

000000000001d310 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRiEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d310:	55                   	push   %rbp
   1d311:	48 89 e5             	mov    %rsp,%rbp
   1d314:	48 83 ec 20          	sub    $0x20,%rsp
   1d318:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d31c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d320:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d324:	e8 57 ff ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d329:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d32d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d331:	e8 3a 04 00 00       	call   1d770 <_ZNSt3__17forwardB8nn210000IRiEEOT_Ru20__remove_reference_tIS2_E>
   1d336:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d33a:	48 89 c6             	mov    %rax,%rsi
   1d33d:	e8 fe 03 00 00       	call   1d740 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRiEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d342:	48 83 c4 20          	add    $0x20,%rsp
   1d346:	5d                   	pop    %rbp
   1d347:	c3                   	ret
   1d348:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d34f:	00 

000000000001d350 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRxEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d350:	55                   	push   %rbp
   1d351:	48 89 e5             	mov    %rsp,%rbp
   1d354:	48 83 ec 20          	sub    $0x20,%rsp
   1d358:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d35c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d360:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d364:	e8 17 ff ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d369:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d36d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d371:	e8 7a 04 00 00       	call   1d7f0 <_ZNSt3__17forwardB8nn210000IRxEEOT_Ru20__remove_reference_tIS2_E>
   1d376:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d37a:	48 89 c6             	mov    %rax,%rsi
   1d37d:	e8 3e 04 00 00       	call   1d7c0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRxEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d382:	48 83 c4 20          	add    $0x20,%rsp
   1d386:	5d                   	pop    %rbp
   1d387:	c3                   	ret
   1d388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d38f:	00 

000000000001d390 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRnEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d390:	55                   	push   %rbp
   1d391:	48 89 e5             	mov    %rsp,%rbp
   1d394:	48 83 ec 20          	sub    $0x20,%rsp
   1d398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d39c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d3a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d3a4:	e8 d7 fe ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d3a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d3ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d3b1:	e8 da 04 00 00       	call   1d890 <_ZNSt3__17forwardB8nn210000IRnEEOT_Ru20__remove_reference_tIS2_E>
   1d3b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d3ba:	48 89 c6             	mov    %rax,%rsi
   1d3bd:	e8 8e 04 00 00       	call   1d850 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRnEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d3c2:	48 83 c4 20          	add    $0x20,%rsp
   1d3c6:	5d                   	pop    %rbp
   1d3c7:	c3                   	ret
   1d3c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d3cf:	00 

000000000001d3d0 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRjEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d3d0:	55                   	push   %rbp
   1d3d1:	48 89 e5             	mov    %rsp,%rbp
   1d3d4:	48 83 ec 20          	sub    $0x20,%rsp
   1d3d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d3dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d3e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d3e4:	e8 97 fe ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d3e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d3ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d3f1:	e8 0a 05 00 00       	call   1d900 <_ZNSt3__17forwardB8nn210000IRjEEOT_Ru20__remove_reference_tIS2_E>
   1d3f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d3fa:	48 89 c6             	mov    %rax,%rsi
   1d3fd:	e8 ce 04 00 00       	call   1d8d0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRjEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d402:	48 83 c4 20          	add    $0x20,%rsp
   1d406:	5d                   	pop    %rbp
   1d407:	c3                   	ret
   1d408:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d40f:	00 

000000000001d410 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRyEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d410:	55                   	push   %rbp
   1d411:	48 89 e5             	mov    %rsp,%rbp
   1d414:	48 83 ec 20          	sub    $0x20,%rsp
   1d418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d41c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d420:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d424:	e8 57 fe ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d429:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d42d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d431:	e8 3a 05 00 00       	call   1d970 <_ZNSt3__17forwardB8nn210000IRyEEOT_Ru20__remove_reference_tIS2_E>
   1d436:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d43a:	48 89 c6             	mov    %rax,%rsi
   1d43d:	e8 fe 04 00 00       	call   1d940 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRyEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d442:	48 83 c4 20          	add    $0x20,%rsp
   1d446:	5d                   	pop    %rbp
   1d447:	c3                   	ret
   1d448:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d44f:	00 

000000000001d450 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRoEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d450:	55                   	push   %rbp
   1d451:	48 89 e5             	mov    %rsp,%rbp
   1d454:	48 83 ec 20          	sub    $0x20,%rsp
   1d458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d45c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d460:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d464:	e8 17 fe ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d469:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d46d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d471:	e8 7a 05 00 00       	call   1d9f0 <_ZNSt3__17forwardB8nn210000IRoEEOT_Ru20__remove_reference_tIS2_E>
   1d476:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d47a:	48 89 c6             	mov    %rax,%rsi
   1d47d:	e8 2e 05 00 00       	call   1d9b0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRoEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d482:	48 83 c4 20          	add    $0x20,%rsp
   1d486:	5d                   	pop    %rbp
   1d487:	c3                   	ret
   1d488:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d48f:	00 

000000000001d490 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRfEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d490:	55                   	push   %rbp
   1d491:	48 89 e5             	mov    %rsp,%rbp
   1d494:	48 83 ec 20          	sub    $0x20,%rsp
   1d498:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d49c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d4a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d4a4:	e8 d7 fd ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d4a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d4ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d4b1:	e8 aa 05 00 00       	call   1da60 <_ZNSt3__17forwardB8nn210000IRfEEOT_Ru20__remove_reference_tIS2_E>
   1d4b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d4ba:	48 89 c6             	mov    %rax,%rsi
   1d4bd:	e8 6e 05 00 00       	call   1da30 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRfEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d4c2:	48 83 c4 20          	add    $0x20,%rsp
   1d4c6:	5d                   	pop    %rbp
   1d4c7:	c3                   	ret
   1d4c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d4cf:	00 

000000000001d4d0 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRdEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d4d0:	55                   	push   %rbp
   1d4d1:	48 89 e5             	mov    %rsp,%rbp
   1d4d4:	48 83 ec 20          	sub    $0x20,%rsp
   1d4d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d4dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d4e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d4e4:	e8 97 fd ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d4e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d4ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d4f1:	e8 ca 05 00 00       	call   1dac0 <_ZNSt3__17forwardB8nn210000IRdEEOT_Ru20__remove_reference_tIS2_E>
   1d4f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d4fa:	48 89 c6             	mov    %rax,%rsi
   1d4fd:	e8 8e 05 00 00       	call   1da90 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRdEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d502:	48 83 c4 20          	add    $0x20,%rsp
   1d506:	5d                   	pop    %rbp
   1d507:	c3                   	ret
   1d508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d50f:	00 

000000000001d510 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JReEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSG_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d510:	55                   	push   %rbp
   1d511:	48 89 e5             	mov    %rsp,%rbp
   1d514:	48 83 ec 20          	sub    $0x20,%rsp
   1d518:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d51c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d520:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d524:	e8 57 fd ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d529:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d52d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d531:	e8 ea 05 00 00       	call   1db20 <_ZNSt3__17forwardB8nn210000IReEEOT_Ru20__remove_reference_tIS2_E>
   1d536:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d53a:	48 89 c6             	mov    %rax,%rsi
   1d53d:	e8 ae 05 00 00       	call   1daf0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JReEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>
   1d542:	48 83 c4 20          	add    $0x20,%rsp
   1d546:	5d                   	pop    %rbp
   1d547:	c3                   	ret
   1d548:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d54f:	00 

000000000001d550 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRPKcEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSI_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d550:	55                   	push   %rbp
   1d551:	48 89 e5             	mov    %rsp,%rbp
   1d554:	48 83 ec 20          	sub    $0x20,%rsp
   1d558:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d55c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d560:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d564:	e8 17 fd ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d569:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d56d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d571:	e8 da b9 ff ff       	call   18f50 <_ZNSt3__17forwardB8nn210000IRPKcEEOT_Ru20__remove_reference_tIS4_E>
   1d576:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d57a:	48 89 c6             	mov    %rax,%rsi
   1d57d:	e8 ce 05 00 00       	call   1db50 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRPKcEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSH_>
   1d582:	48 83 c4 20          	add    $0x20,%rsp
   1d586:	5d                   	pop    %rbp
   1d587:	c3                   	ret
   1d588:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d58f:	00 

000000000001d590 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSK_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d590:	55                   	push   %rbp
   1d591:	48 89 e5             	mov    %rsp,%rbp
   1d594:	48 83 ec 20          	sub    $0x20,%rsp
   1d598:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d59c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d5a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d5a4:	e8 d7 fc ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d5a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d5ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d5b1:	e8 2a 06 00 00       	call   1dbe0 <_ZNSt3__17forwardB8nn210000IRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_Ru20__remove_reference_tIS6_E>
   1d5b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d5ba:	48 89 c6             	mov    %rax,%rsi
   1d5bd:	e8 de 05 00 00       	call   1dba0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSJ_>
   1d5c2:	48 83 c4 20          	add    $0x20,%rsp
   1d5c6:	5d                   	pop    %rbp
   1d5c7:	c3                   	ret
   1d5c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d5cf:	00 

000000000001d5d0 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRPKvEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSI_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d5d0:	55                   	push   %rbp
   1d5d1:	48 89 e5             	mov    %rsp,%rbp
   1d5d4:	48 83 ec 20          	sub    $0x20,%rsp
   1d5d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d5dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d5e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d5e4:	e8 97 fc ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d5e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d5ed:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d5f1:	e8 4a 06 00 00       	call   1dc40 <_ZNSt3__17forwardB8nn210000IRPKvEEOT_Ru20__remove_reference_tIS4_E>
   1d5f6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d5fa:	48 89 c6             	mov    %rax,%rsi
   1d5fd:	e8 0e 06 00 00       	call   1dc10 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRPKvEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSH_>
   1d602:	48 83 c4 20          	add    $0x20,%rsp
   1d606:	5d                   	pop    %rbp
   1d607:	c3                   	ret
   1d608:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d60f:	00 

000000000001d610 <_ZNSt3__16invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JNSA_IS9_E6handleEEEENS_13invoke_resultISB_JDpT0_EE4typeEOSB_DpOSH_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   1d610:	55                   	push   %rbp
   1d611:	48 89 e5             	mov    %rsp,%rbp
   1d614:	48 83 ec 20          	sub    $0x20,%rsp
   1d618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d61c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   1d620:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d624:	e8 57 fc ff ff       	call   1d280 <_ZNSt3__17forwardB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_EEOSB_Ru20__remove_reference_tISB_E>
   1d629:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d62d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1d631:	e8 6a 06 00 00       	call   1dca0 <_ZNSt3__17forwardB8nn210000INS_16basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6handleEEEOT_Ru20__remove_reference_tISB_E>
   1d636:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1d63a:	48 89 c6             	mov    %rax,%rsi
   1d63d:	e8 2e 06 00 00       	call   1dc70 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JNSA_IS9_E6handleEEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSG_>
   1d642:	48 83 c4 20          	add    $0x20,%rsp
   1d646:	5d                   	pop    %rbp
   1d647:	c3                   	ret
   1d648:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d64f:	00 

000000000001d650 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRNS_9monostateEEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSG_>:
   1d650:	55                   	push   %rbp
   1d651:	48 89 e5             	mov    %rsp,%rbp
   1d654:	48 83 ec 20          	sub    $0x20,%rsp
   1d658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d65c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d660:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d664:	e8 07 00 00 00       	call   1d670 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clINS_9monostateEEEjSA_>
   1d669:	48 83 c4 20          	add    $0x20,%rsp
   1d66d:	5d                   	pop    %rbp
   1d66e:	c3                   	ret
   1d66f:	90                   	nop

000000000001d670 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clINS_9monostateEEEjSA_>:
      [](auto __arg) -> uint32_t {
   1d670:	55                   	push   %rbp
   1d671:	48 89 e5             	mov    %rsp,%rbp
   1d674:	48 83 ec 10          	sub    $0x10,%rsp
   1d678:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
          std::__throw_format_error("The argument index value is too large for the number of arguments supplied");
   1d67c:	48 8d 3d e0 1c 01 00 	lea    0x11ce0(%rip),%rdi        # 2f363 <.L.str.17>
   1d683:	e8 b8 c4 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1d688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d68f:	00 

000000000001d690 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRbEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1d690:	55                   	push   %rbp
   1d691:	48 89 e5             	mov    %rsp,%rbp
   1d694:	48 83 ec 10          	sub    $0x10,%rsp
   1d698:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d69c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d6a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d6a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d6a8:	8a 00                	mov    (%rax),%al
   1d6aa:	0f b6 f0             	movzbl %al,%esi
   1d6ad:	83 e6 01             	and    $0x1,%esi
   1d6b0:	e8 0b 00 00 00       	call   1d6c0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIbEEjSA_>
   1d6b5:	48 83 c4 10          	add    $0x10,%rsp
   1d6b9:	5d                   	pop    %rbp
   1d6ba:	c3                   	ret
   1d6bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001d6c0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIbEEjSA_>:
      [](auto __arg) -> uint32_t {
   1d6c0:	55                   	push   %rbp
   1d6c1:	48 89 e5             	mov    %rsp,%rbp
   1d6c4:	48 83 ec 10          	sub    $0x10,%rsp
   1d6c8:	40 88 f0             	mov    %sil,%al
   1d6cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d6cf:	24 01                	and    $0x1,%al
   1d6d1:	88 45 f7             	mov    %al,-0x9(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1d6d4:	48 8d 3d 01 1f 01 00 	lea    0x11f01(%rip),%rdi        # 2f5dc <.L.str.41>
   1d6db:	e8 60 c4 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>

000000000001d6e0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRcEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1d6e0:	55                   	push   %rbp
   1d6e1:	48 89 e5             	mov    %rsp,%rbp
   1d6e4:	48 83 ec 10          	sub    $0x10,%rsp
   1d6e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d6ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d6f0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d6f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d6f8:	8a 00                	mov    (%rax),%al
   1d6fa:	0f be f0             	movsbl %al,%esi
   1d6fd:	e8 1e 00 00 00       	call   1d720 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIcEEjSA_>
   1d702:	48 83 c4 10          	add    $0x10,%rsp
   1d706:	5d                   	pop    %rbp
   1d707:	c3                   	ret
   1d708:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1d70f:	00 

000000000001d710 <_ZNSt3__17forwardB8nn210000IRcEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1d710:	55                   	push   %rbp
   1d711:	48 89 e5             	mov    %rsp,%rbp
   1d714:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1d718:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d71c:	5d                   	pop    %rbp
   1d71d:	c3                   	ret
   1d71e:	66 90                	xchg   %ax,%ax

000000000001d720 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIcEEjSA_>:
      [](auto __arg) -> uint32_t {
   1d720:	55                   	push   %rbp
   1d721:	48 89 e5             	mov    %rsp,%rbp
   1d724:	48 83 ec 10          	sub    $0x10,%rsp
   1d728:	40 88 f0             	mov    %sil,%al
   1d72b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d72f:	88 45 f7             	mov    %al,-0x9(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1d732:	48 8d 3d a3 1e 01 00 	lea    0x11ea3(%rip),%rdi        # 2f5dc <.L.str.41>
   1d739:	e8 02 c4 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1d73e:	66 90                	xchg   %ax,%ax

000000000001d740 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRiEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1d740:	55                   	push   %rbp
   1d741:	48 89 e5             	mov    %rsp,%rbp
   1d744:	48 83 ec 10          	sub    $0x10,%rsp
   1d748:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d74c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d750:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d758:	8b 30                	mov    (%rax),%esi
   1d75a:	e8 21 00 00 00       	call   1d780 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIiEEjSA_>
   1d75f:	48 83 c4 10          	add    $0x10,%rsp
   1d763:	5d                   	pop    %rbp
   1d764:	c3                   	ret
   1d765:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1d76c:	00 00 00 
   1d76f:	90                   	nop

000000000001d770 <_ZNSt3__17forwardB8nn210000IRiEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1d770:	55                   	push   %rbp
   1d771:	48 89 e5             	mov    %rsp,%rbp
   1d774:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1d778:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d77c:	5d                   	pop    %rbp
   1d77d:	c3                   	ret
   1d77e:	66 90                	xchg   %ax,%ax

000000000001d780 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIiEEjSA_>:
      [](auto __arg) -> uint32_t {
   1d780:	55                   	push   %rbp
   1d781:	48 89 e5             	mov    %rsp,%rbp
   1d784:	48 83 ec 10          	sub    $0x10,%rsp
   1d788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d78c:	89 75 f4             	mov    %esi,-0xc(%rbp)
            if (__arg < 0)
   1d78f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   1d793:	7d 0c                	jge    1d7a1 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIiEEjSA_+0x21>
              std::__throw_format_error("An argument index may not have a negative value");
   1d795:	48 8d 3d 86 1e 01 00 	lea    0x11e86(%rip),%rdi        # 2f622 <.L.str.42>
   1d79c:	e8 9f c3 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
          if (static_cast<_CT>(__arg) > static_cast<_CT>(__format::__number_max))
   1d7a1:	81 7d f4 ff ff ff 7f 	cmpl   $0x7fffffff,-0xc(%rbp)
   1d7a8:	76 0c                	jbe    1d7b6 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIiEEjSA_+0x36>
            std::__throw_format_error("The value of the argument index exceeds its maximum value");
   1d7aa:	48 8d 3d a1 1e 01 00 	lea    0x11ea1(%rip),%rdi        # 2f652 <.L.str.43>
   1d7b1:	e8 8a c3 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
          return __arg;
   1d7b6:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1d7b9:	48 83 c4 10          	add    $0x10,%rsp
   1d7bd:	5d                   	pop    %rbp
   1d7be:	c3                   	ret
   1d7bf:	90                   	nop

000000000001d7c0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRxEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1d7c0:	55                   	push   %rbp
   1d7c1:	48 89 e5             	mov    %rsp,%rbp
   1d7c4:	48 83 ec 10          	sub    $0x10,%rsp
   1d7c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d7cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d7d0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d7d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d7d8:	48 8b 30             	mov    (%rax),%rsi
   1d7db:	e8 20 00 00 00       	call   1d800 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIxEEjSA_>
   1d7e0:	48 83 c4 10          	add    $0x10,%rsp
   1d7e4:	5d                   	pop    %rbp
   1d7e5:	c3                   	ret
   1d7e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1d7ed:	00 00 00 

000000000001d7f0 <_ZNSt3__17forwardB8nn210000IRxEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1d7f0:	55                   	push   %rbp
   1d7f1:	48 89 e5             	mov    %rsp,%rbp
   1d7f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1d7f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d7fc:	5d                   	pop    %rbp
   1d7fd:	c3                   	ret
   1d7fe:	66 90                	xchg   %ax,%ax

000000000001d800 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIxEEjSA_>:
      [](auto __arg) -> uint32_t {
   1d800:	55                   	push   %rbp
   1d801:	48 89 e5             	mov    %rsp,%rbp
   1d804:	48 83 ec 10          	sub    $0x10,%rsp
   1d808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d80c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
            if (__arg < 0)
   1d810:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1d815:	7d 0c                	jge    1d823 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIxEEjSA_+0x23>
              std::__throw_format_error("An argument index may not have a negative value");
   1d817:	48 8d 3d 04 1e 01 00 	lea    0x11e04(%rip),%rdi        # 2f622 <.L.str.42>
   1d81e:	e8 1d c3 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
          if (static_cast<_CT>(__arg) > static_cast<_CT>(__format::__number_max))
   1d823:	48 81 7d f0 ff ff ff 	cmpq   $0x7fffffff,-0x10(%rbp)
   1d82a:	7f 
   1d82b:	7e 0c                	jle    1d839 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIxEEjSA_+0x39>
            std::__throw_format_error("The value of the argument index exceeds its maximum value");
   1d82d:	48 8d 3d 1e 1e 01 00 	lea    0x11e1e(%rip),%rdi        # 2f652 <.L.str.43>
   1d834:	e8 07 c3 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
          return __arg;
   1d839:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d83d:	48 83 c4 10          	add    $0x10,%rsp
   1d841:	5d                   	pop    %rbp
   1d842:	c3                   	ret
   1d843:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1d84a:	00 00 00 
   1d84d:	0f 1f 00             	nopl   (%rax)

000000000001d850 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRnEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1d850:	55                   	push   %rbp
   1d851:	48 89 e5             	mov    %rsp,%rbp
   1d854:	48 83 ec 20          	sub    $0x20,%rsp
   1d858:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d85c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d860:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d864:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d868:	48 8b 01             	mov    (%rcx),%rax
   1d86b:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   1d86f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1d873:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1d877:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1d87b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d87f:	e8 1c 00 00 00       	call   1d8a0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clInEEjSA_>
   1d884:	48 83 c4 20          	add    $0x20,%rsp
   1d888:	5d                   	pop    %rbp
   1d889:	c3                   	ret
   1d88a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001d890 <_ZNSt3__17forwardB8nn210000IRnEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1d890:	55                   	push   %rbp
   1d891:	48 89 e5             	mov    %rsp,%rbp
   1d894:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1d898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d89c:	5d                   	pop    %rbp
   1d89d:	c3                   	ret
   1d89e:	66 90                	xchg   %ax,%ax

000000000001d8a0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clInEEjSA_>:
      [](auto __arg) -> uint32_t {
   1d8a0:	55                   	push   %rbp
   1d8a1:	48 89 e5             	mov    %rsp,%rbp
   1d8a4:	48 83 ec 30          	sub    $0x30,%rsp
   1d8a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d8ac:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1d8b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d8b4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1d8b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d8bc:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   1d8c0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1d8c4:	48 8d 3d 11 1d 01 00 	lea    0x11d11(%rip),%rdi        # 2f5dc <.L.str.41>
   1d8cb:	e8 70 c2 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>

000000000001d8d0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRjEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1d8d0:	55                   	push   %rbp
   1d8d1:	48 89 e5             	mov    %rsp,%rbp
   1d8d4:	48 83 ec 10          	sub    $0x10,%rsp
   1d8d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d8dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d8e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d8e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d8e8:	8b 30                	mov    (%rax),%esi
   1d8ea:	e8 21 00 00 00       	call   1d910 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIjEEjSA_>
   1d8ef:	48 83 c4 10          	add    $0x10,%rsp
   1d8f3:	5d                   	pop    %rbp
   1d8f4:	c3                   	ret
   1d8f5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1d8fc:	00 00 00 
   1d8ff:	90                   	nop

000000000001d900 <_ZNSt3__17forwardB8nn210000IRjEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1d900:	55                   	push   %rbp
   1d901:	48 89 e5             	mov    %rsp,%rbp
   1d904:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1d908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d90c:	5d                   	pop    %rbp
   1d90d:	c3                   	ret
   1d90e:	66 90                	xchg   %ax,%ax

000000000001d910 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIjEEjSA_>:
      [](auto __arg) -> uint32_t {
   1d910:	55                   	push   %rbp
   1d911:	48 89 e5             	mov    %rsp,%rbp
   1d914:	48 83 ec 10          	sub    $0x10,%rsp
   1d918:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d91c:	89 75 f4             	mov    %esi,-0xc(%rbp)
          if (static_cast<_CT>(__arg) > static_cast<_CT>(__format::__number_max))
   1d91f:	81 7d f4 ff ff ff 7f 	cmpl   $0x7fffffff,-0xc(%rbp)
   1d926:	76 0c                	jbe    1d934 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIjEEjSA_+0x24>
            std::__throw_format_error("The value of the argument index exceeds its maximum value");
   1d928:	48 8d 3d 23 1d 01 00 	lea    0x11d23(%rip),%rdi        # 2f652 <.L.str.43>
   1d92f:	e8 0c c2 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
          return __arg;
   1d934:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1d937:	48 83 c4 10          	add    $0x10,%rsp
   1d93b:	5d                   	pop    %rbp
   1d93c:	c3                   	ret
   1d93d:	0f 1f 00             	nopl   (%rax)

000000000001d940 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRyEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1d940:	55                   	push   %rbp
   1d941:	48 89 e5             	mov    %rsp,%rbp
   1d944:	48 83 ec 10          	sub    $0x10,%rsp
   1d948:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d94c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d950:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d958:	48 8b 30             	mov    (%rax),%rsi
   1d95b:	e8 20 00 00 00       	call   1d980 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIyEEjSA_>
   1d960:	48 83 c4 10          	add    $0x10,%rsp
   1d964:	5d                   	pop    %rbp
   1d965:	c3                   	ret
   1d966:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1d96d:	00 00 00 

000000000001d970 <_ZNSt3__17forwardB8nn210000IRyEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1d970:	55                   	push   %rbp
   1d971:	48 89 e5             	mov    %rsp,%rbp
   1d974:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1d978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d97c:	5d                   	pop    %rbp
   1d97d:	c3                   	ret
   1d97e:	66 90                	xchg   %ax,%ax

000000000001d980 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIyEEjSA_>:
      [](auto __arg) -> uint32_t {
   1d980:	55                   	push   %rbp
   1d981:	48 89 e5             	mov    %rsp,%rbp
   1d984:	48 83 ec 10          	sub    $0x10,%rsp
   1d988:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d98c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
          if (static_cast<_CT>(__arg) > static_cast<_CT>(__format::__number_max))
   1d990:	48 81 7d f0 ff ff ff 	cmpq   $0x7fffffff,-0x10(%rbp)
   1d997:	7f 
   1d998:	76 0c                	jbe    1d9a6 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIyEEjSA_+0x26>
            std::__throw_format_error("The value of the argument index exceeds its maximum value");
   1d99a:	48 8d 3d b1 1c 01 00 	lea    0x11cb1(%rip),%rdi        # 2f652 <.L.str.43>
   1d9a1:	e8 9a c1 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
          return __arg;
   1d9a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d9aa:	48 83 c4 10          	add    $0x10,%rsp
   1d9ae:	5d                   	pop    %rbp
   1d9af:	c3                   	ret

000000000001d9b0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRoEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1d9b0:	55                   	push   %rbp
   1d9b1:	48 89 e5             	mov    %rsp,%rbp
   1d9b4:	48 83 ec 20          	sub    $0x20,%rsp
   1d9b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d9bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d9c0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1d9c4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d9c8:	48 8b 01             	mov    (%rcx),%rax
   1d9cb:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   1d9cf:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1d9d3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1d9d7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1d9db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d9df:	e8 1c 00 00 00       	call   1da00 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIoEEjSA_>
   1d9e4:	48 83 c4 20          	add    $0x20,%rsp
   1d9e8:	5d                   	pop    %rbp
   1d9e9:	c3                   	ret
   1d9ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001d9f0 <_ZNSt3__17forwardB8nn210000IRoEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1d9f0:	55                   	push   %rbp
   1d9f1:	48 89 e5             	mov    %rsp,%rbp
   1d9f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1d9f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d9fc:	5d                   	pop    %rbp
   1d9fd:	c3                   	ret
   1d9fe:	66 90                	xchg   %ax,%ax

000000000001da00 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIoEEjSA_>:
      [](auto __arg) -> uint32_t {
   1da00:	55                   	push   %rbp
   1da01:	48 89 e5             	mov    %rsp,%rbp
   1da04:	48 83 ec 30          	sub    $0x30,%rsp
   1da08:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1da0c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1da10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1da14:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1da18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1da1c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   1da20:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1da24:	48 8d 3d b1 1b 01 00 	lea    0x11bb1(%rip),%rdi        # 2f5dc <.L.str.41>
   1da2b:	e8 10 c1 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>

000000000001da30 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRfEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1da30:	55                   	push   %rbp
   1da31:	48 89 e5             	mov    %rsp,%rbp
   1da34:	48 83 ec 20          	sub    $0x20,%rsp
   1da38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1da3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1da40:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1da44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1da48:	d9 00                	flds   (%rax)
   1da4a:	48 89 e0             	mov    %rsp,%rax
   1da4d:	d9 18                	fstps  (%rax)
   1da4f:	e8 1c 00 00 00       	call   1da70 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIfEEjSA_>
   1da54:	48 83 c4 20          	add    $0x20,%rsp
   1da58:	5d                   	pop    %rbp
   1da59:	c3                   	ret
   1da5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001da60 <_ZNSt3__17forwardB8nn210000IRfEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1da60:	55                   	push   %rbp
   1da61:	48 89 e5             	mov    %rsp,%rbp
   1da64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1da68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da6c:	5d                   	pop    %rbp
   1da6d:	c3                   	ret
   1da6e:	66 90                	xchg   %ax,%ax

000000000001da70 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIfEEjSA_>:
      [](auto __arg) -> uint32_t {
   1da70:	55                   	push   %rbp
   1da71:	48 89 e5             	mov    %rsp,%rbp
   1da74:	48 83 ec 10          	sub    $0x10,%rsp
   1da78:	d9 45 10             	flds   0x10(%rbp)
   1da7b:	dd d8                	fstp   %st(0)
   1da7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1da81:	48 8d 3d 54 1b 01 00 	lea    0x11b54(%rip),%rdi        # 2f5dc <.L.str.41>
   1da88:	e8 b3 c0 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1da8d:	0f 1f 00             	nopl   (%rax)

000000000001da90 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRdEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1da90:	55                   	push   %rbp
   1da91:	48 89 e5             	mov    %rsp,%rbp
   1da94:	48 83 ec 20          	sub    $0x20,%rsp
   1da98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1da9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1daa0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1daa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1daa8:	dd 00                	fldl   (%rax)
   1daaa:	48 89 e0             	mov    %rsp,%rax
   1daad:	dd 18                	fstpl  (%rax)
   1daaf:	e8 1c 00 00 00       	call   1dad0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIdEEjSA_>
   1dab4:	48 83 c4 20          	add    $0x20,%rsp
   1dab8:	5d                   	pop    %rbp
   1dab9:	c3                   	ret
   1daba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001dac0 <_ZNSt3__17forwardB8nn210000IRdEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1dac0:	55                   	push   %rbp
   1dac1:	48 89 e5             	mov    %rsp,%rbp
   1dac4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1dac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dacc:	5d                   	pop    %rbp
   1dacd:	c3                   	ret
   1dace:	66 90                	xchg   %ax,%ax

000000000001dad0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIdEEjSA_>:
      [](auto __arg) -> uint32_t {
   1dad0:	55                   	push   %rbp
   1dad1:	48 89 e5             	mov    %rsp,%rbp
   1dad4:	48 83 ec 10          	sub    $0x10,%rsp
   1dad8:	dd 45 10             	fldl   0x10(%rbp)
   1dadb:	dd d8                	fstp   %st(0)
   1dadd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1dae1:	48 8d 3d f4 1a 01 00 	lea    0x11af4(%rip),%rdi        # 2f5dc <.L.str.41>
   1dae8:	e8 53 c0 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1daed:	0f 1f 00             	nopl   (%rax)

000000000001daf0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JReEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSF_>:
   1daf0:	55                   	push   %rbp
   1daf1:	48 89 e5             	mov    %rsp,%rbp
   1daf4:	48 83 ec 20          	sub    $0x20,%rsp
   1daf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dafc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1db00:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1db04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1db08:	db 28                	fldt   (%rax)
   1db0a:	48 89 e0             	mov    %rsp,%rax
   1db0d:	db 38                	fstpt  (%rax)
   1db0f:	e8 1c 00 00 00       	call   1db30 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIeEEjSA_>
   1db14:	48 83 c4 20          	add    $0x20,%rsp
   1db18:	5d                   	pop    %rbp
   1db19:	c3                   	ret
   1db1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001db20 <_ZNSt3__17forwardB8nn210000IReEEOT_Ru20__remove_reference_tIS2_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1db20:	55                   	push   %rbp
   1db21:	48 89 e5             	mov    %rsp,%rbp
   1db24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1db28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1db2c:	5d                   	pop    %rbp
   1db2d:	c3                   	ret
   1db2e:	66 90                	xchg   %ax,%ax

000000000001db30 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIeEEjSA_>:
      [](auto __arg) -> uint32_t {
   1db30:	55                   	push   %rbp
   1db31:	48 89 e5             	mov    %rsp,%rbp
   1db34:	48 83 ec 20          	sub    $0x20,%rsp
   1db38:	db 6d 10             	fldt   0x10(%rbp)
   1db3b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1db3f:	db 7d e0             	fstpt  -0x20(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1db42:	48 8d 3d 93 1a 01 00 	lea    0x11a93(%rip),%rdi        # 2f5dc <.L.str.41>
   1db49:	e8 f2 bf ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1db4e:	66 90                	xchg   %ax,%ax

000000000001db50 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRPKcEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSH_>:
   1db50:	55                   	push   %rbp
   1db51:	48 89 e5             	mov    %rsp,%rbp
   1db54:	48 83 ec 10          	sub    $0x10,%rsp
   1db58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1db5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1db60:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1db64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1db68:	48 8b 30             	mov    (%rax),%rsi
   1db6b:	e8 10 00 00 00       	call   1db80 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIPKcEEjSA_>
   1db70:	48 83 c4 10          	add    $0x10,%rsp
   1db74:	5d                   	pop    %rbp
   1db75:	c3                   	ret
   1db76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1db7d:	00 00 00 

000000000001db80 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIPKcEEjSA_>:
      [](auto __arg) -> uint32_t {
   1db80:	55                   	push   %rbp
   1db81:	48 89 e5             	mov    %rsp,%rbp
   1db84:	48 83 ec 10          	sub    $0x10,%rsp
   1db88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1db8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1db90:	48 8d 3d 45 1a 01 00 	lea    0x11a45(%rip),%rdi        # 2f5dc <.L.str.41>
   1db97:	e8 a4 bf ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1db9c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001dba0 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSJ_>:
   1dba0:	55                   	push   %rbp
   1dba1:	48 89 e5             	mov    %rsp,%rbp
   1dba4:	48 83 ec 20          	sub    $0x20,%rsp
   1dba8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dbac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dbb0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1dbb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dbb8:	48 8b 08             	mov    (%rax),%rcx
   1dbbb:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   1dbbf:	48 8b 40 08          	mov    0x8(%rax),%rax
   1dbc3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1dbc7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1dbcb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1dbcf:	e8 1c 00 00 00       	call   1dbf0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEjSA_>
   1dbd4:	48 83 c4 20          	add    $0x20,%rsp
   1dbd8:	5d                   	pop    %rbp
   1dbd9:	c3                   	ret
   1dbda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001dbe0 <_ZNSt3__17forwardB8nn210000IRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEOT_Ru20__remove_reference_tIS6_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1dbe0:	55                   	push   %rbp
   1dbe1:	48 89 e5             	mov    %rsp,%rbp
   1dbe4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1dbe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dbec:	5d                   	pop    %rbp
   1dbed:	c3                   	ret
   1dbee:	66 90                	xchg   %ax,%ax

000000000001dbf0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEjSA_>:
      [](auto __arg) -> uint32_t {
   1dbf0:	55                   	push   %rbp
   1dbf1:	48 89 e5             	mov    %rsp,%rbp
   1dbf4:	48 83 ec 20          	sub    $0x20,%rsp
   1dbf8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dbfc:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1dc00:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1dc04:	48 8d 3d d1 19 01 00 	lea    0x119d1(%rip),%rdi        # 2f5dc <.L.str.41>
   1dc0b:	e8 30 bf ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>

000000000001dc10 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JRPKvEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSH_>:
   1dc10:	55                   	push   %rbp
   1dc11:	48 89 e5             	mov    %rsp,%rbp
   1dc14:	48 83 ec 10          	sub    $0x10,%rsp
   1dc18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dc20:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1dc24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dc28:	48 8b 30             	mov    (%rax),%rsi
   1dc2b:	e8 20 00 00 00       	call   1dc50 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIPKvEEjSA_>
   1dc30:	48 83 c4 10          	add    $0x10,%rsp
   1dc34:	5d                   	pop    %rbp
   1dc35:	c3                   	ret
   1dc36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1dc3d:	00 00 00 

000000000001dc40 <_ZNSt3__17forwardB8nn210000IRPKvEEOT_Ru20__remove_reference_tIS4_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1dc40:	55                   	push   %rbp
   1dc41:	48 89 e5             	mov    %rsp,%rbp
   1dc44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1dc48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc4c:	5d                   	pop    %rbp
   1dc4d:	c3                   	ret
   1dc4e:	66 90                	xchg   %ax,%ax

000000000001dc50 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clIPKvEEjSA_>:
      [](auto __arg) -> uint32_t {
   1dc50:	55                   	push   %rbp
   1dc51:	48 89 e5             	mov    %rsp,%rbp
   1dc54:	48 83 ec 10          	sub    $0x10,%rsp
   1dc58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1dc60:	48 8d 3d 75 19 01 00 	lea    0x11975(%rip),%rdi        # 2f5dc <.L.str.41>
   1dc67:	e8 d4 be ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1dc6c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001dc70 <_ZNSt3__18__invokeB8nn210000IZNS_13__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEEUlSB_E_JNSA_IS9_E6handleEEEEDTclclsr3stdE7declvalISB_EEspclsr3stdE7declvalIT0_EEEEOSB_DpOSG_>:
   1dc70:	55                   	push   %rbp
   1dc71:	48 89 e5             	mov    %rsp,%rbp
   1dc74:	48 83 ec 20          	sub    $0x20,%rsp
   1dc78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dc80:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1dc84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dc88:	48 8b 00             	mov    (%rax),%rax
   1dc8b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1dc8f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1dc93:	e8 18 00 00 00       	call   1dcb0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clINS9_IS8_E6handleEEEjSA_>
   1dc98:	48 83 c4 20          	add    $0x20,%rsp
   1dc9c:	5d                   	pop    %rbp
   1dc9d:	c3                   	ret
   1dc9e:	66 90                	xchg   %ax,%ax

000000000001dca0 <_ZNSt3__17forwardB8nn210000INS_16basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6handleEEEOT_Ru20__remove_reference_tISB_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   1dca0:	55                   	push   %rbp
   1dca1:	48 89 e5             	mov    %rsp,%rbp
   1dca4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   1dca8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dcac:	5d                   	pop    %rbp
   1dcad:	c3                   	ret
   1dcae:	66 90                	xchg   %ax,%ax

000000000001dcb0 <_ZZNSt3__113__format_spec19__substitute_arg_idB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEEjNS_16basic_format_argIT_EEENKUlSA_E_clINS9_IS8_E6handleEEEjSA_>:
      [](auto __arg) -> uint32_t {
   1dcb0:	55                   	push   %rbp
   1dcb1:	48 89 e5             	mov    %rsp,%rbp
   1dcb4:	48 83 ec 10          	sub    $0x10,%rsp
   1dcb8:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   1dcbc:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
          std::__throw_format_error("Replacement argument isn't a standard signed or unsigned integer type");
   1dcc0:	48 8d 3d 15 19 01 00 	lea    0x11915(%rip),%rdi        # 2f5dc <.L.str.41>
   1dcc7:	e8 74 be ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
   1dccc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001dcd0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>:
    int __base) {
   1dcd0:	55                   	push   %rbp
   1dcd1:	48 89 e5             	mov    %rsp,%rbp
   1dcd4:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   1dcdb:	44 88 c0             	mov    %r8b,%al
   1dcde:	44 8b 45 20          	mov    0x20(%rbp),%r8d
   1dce2:	4c 8b 45 18          	mov    0x18(%rbp),%r8
   1dce6:	4c 8b 45 10          	mov    0x10(%rbp),%r8
   1dcea:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1dcee:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   1dcf2:	89 7d e4             	mov    %edi,-0x1c(%rbp)
   1dcf5:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   1dcf9:	24 01                	and    $0x1,%al
   1dcfb:	88 45 d7             	mov    %al,-0x29(%rbp)
   1dcfe:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
  _Iterator __first = __formatter::__insert_sign(__begin, __negative, __specs.__std_.__sign_);
   1dd02:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1dd06:	8a 45 d7             	mov    -0x29(%rbp),%al
   1dd09:	8a 4d e8             	mov    -0x18(%rbp),%cl
   1dd0c:	c0 e9 03             	shr    $0x3,%cl
   1dd0f:	80 e1 03             	and    $0x3,%cl
   1dd12:	0f b6 d1             	movzbl %cl,%edx
   1dd15:	0f b6 f0             	movzbl %al,%esi
   1dd18:	83 e6 01             	and    $0x1,%esi
   1dd1b:	e8 a0 02 00 00       	call   1dfc0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE>
   1dd20:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  if (__specs.__std_.__alternate_form_ && __prefix)
   1dd24:	8a 45 e8             	mov    -0x18(%rbp),%al
   1dd27:	c0 e8 05             	shr    $0x5,%al
   1dd2a:	24 01                	and    $0x1,%al
   1dd2c:	a8 01                	test   $0x1,%al
   1dd2e:	74 38                	je     1dd68 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x98>
   1dd30:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
   1dd35:	74 31                	je     1dd68 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x98>
    while (*__prefix)
   1dd37:	eb 00                	jmp    1dd39 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x69>
   1dd39:	48 8b 45 18          	mov    0x18(%rbp),%rax
   1dd3d:	80 38 00             	cmpb   $0x0,(%rax)
   1dd40:	74 24                	je     1dd66 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x96>
      *__first++ = *__prefix++;
   1dd42:	48 8b 45 18          	mov    0x18(%rbp),%rax
   1dd46:	48 89 c1             	mov    %rax,%rcx
   1dd49:	48 83 c1 01          	add    $0x1,%rcx
   1dd4d:	48 89 4d 18          	mov    %rcx,0x18(%rbp)
   1dd51:	8a 08                	mov    (%rax),%cl
   1dd53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dd57:	48 89 c2             	mov    %rax,%rdx
   1dd5a:	48 83 c2 01          	add    $0x1,%rdx
   1dd5e:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   1dd62:	88 08                	mov    %cl,(%rax)
    while (*__prefix)
   1dd64:	eb d3                	jmp    1dd39 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x69>
   1dd66:	eb 00                	jmp    1dd68 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x98>
  _Iterator __last = __formatter::__to_buffer(__first, __end, __value, __base);
   1dd68:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1dd6c:	48 8b 75 10          	mov    0x10(%rbp),%rsi
   1dd70:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   1dd73:	8b 4d 20             	mov    0x20(%rbp),%ecx
   1dd76:	e8 c5 02 00 00       	call   1e040 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_8integralEjQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_S5_T0_i>
   1dd7b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  auto __out_it = __ctx.out();
   1dd7f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1dd83:	e8 88 bd ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   1dd88:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  if (__specs.__alignment_ != __format_spec::__alignment::__zero_padding)
   1dd8c:	8a 45 e8             	mov    -0x18(%rbp),%al
   1dd8f:	24 07                	and    $0x7,%al
   1dd91:	3c 04                	cmp    $0x4,%al
   1dd93:	74 0d                	je     1dda2 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0xd2>
    __first = __begin;
   1dd95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1dd99:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1dd9d:	e9 80 00 00 00       	jmp    1de22 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x152>
    __out_it                  = __formatter::__copy(__begin, __first, std::move(__out_it));
   1dda2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1dda6:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   1ddad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ddb1:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   1ddb8:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   1ddbc:	e8 df bd ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1ddc1:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
   1ddc8:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   1ddcf:	48 8b 00             	mov    (%rax),%rax
   1ddd2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1ddd6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1ddda:	e8 e1 02 00 00       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   1dddf:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1dde3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1dde7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    __specs.__alignment_      = __format_spec::__alignment::__right;
   1ddeb:	8a 45 e8             	mov    -0x18(%rbp),%al
   1ddee:	24 f8                	and    $0xf8,%al
   1ddf0:	0c 03                	or     $0x3,%al
   1ddf2:	88 45 e8             	mov    %al,-0x18(%rbp)
    __specs.__fill_.__data[0] = _CharT('0');
   1ddf5:	c6 45 f4 30          	movb   $0x30,-0xc(%rbp)
    int32_t __size            = __first - __begin;
   1ddf9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ddfd:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1de01:	48 29 c8             	sub    %rcx,%rax
   1de04:	89 45 9c             	mov    %eax,-0x64(%rbp)
    __specs.__width_ -= std::min(__size, __specs.__width_);
   1de07:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
   1de0b:	48 83 c6 04          	add    $0x4,%rsi
   1de0f:	48 8d 7d 9c          	lea    -0x64(%rbp),%rdi
   1de13:	e8 08 03 00 00       	call   1e120 <_ZNSt3__13minB8nn210000IiEERKT_S3_S3_>
   1de18:	8b 08                	mov    (%rax),%ecx
   1de1a:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1de1d:	29 c8                	sub    %ecx,%eax
   1de1f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  if (__specs.__std_.__type_ != __format_spec::__type::__hexadecimal_upper_case) [[likely]]
   1de22:	80 7d e9 07          	cmpb   $0x7,-0x17(%rbp)
   1de26:	74 58                	je     1de80 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x1b0>
    return __formatter::__write(__first, __last, __ctx.out(), __specs);
   1de28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1de2c:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1de33:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1de37:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   1de3e:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1de42:	e8 c9 bc ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   1de47:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
   1de4e:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
   1de55:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1de59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1de5d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1de61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1de65:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   1de69:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   1de6d:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   1de71:	4c 8b 45 88          	mov    -0x78(%rbp),%r8
   1de75:	e8 d6 02 00 00       	call   1e150 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   1de7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1de7e:	eb 6f                	jmp    1deef <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x21f>
  return __formatter::__write_transformed(__first, __last, __ctx.out(), __specs, __formatter::__hex_to_upper);
   1de80:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1de84:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   1de8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1de8f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   1de96:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1de9a:	e8 71 bc ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   1de9f:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
   1dea6:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
   1dead:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1deb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1deb8:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   1debf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dec3:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1deca:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   1ded1:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   1ded8:	4c 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8
   1dedf:	4c 8d 0d 5a 04 00 00 	lea    0x45a(%rip),%r9        # 1e340 <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec>
   1dee6:	e8 e5 02 00 00       	call   1e1d0 <_ZNSt3__111__formatter19__write_transformedB8nn210000ITkNS_19contiguous_iteratorEPcccPFccETkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_NS_13__format_spec23__parsed_specificationsIT1_EET2_>
   1deeb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   1deef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1def3:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
   1defa:	5d                   	pop    %rbp
   1defb:	c3                   	ret
   1defc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001df00 <_ZNSt3__15arrayIcLm35EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   1df00:	55                   	push   %rbp
   1df01:	48 89 e5             	mov    %rsp,%rbp
   1df04:	48 83 ec 10          	sub    $0x10,%rsp
   1df08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1df0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   1df10:	e8 6b 14 00 00       	call   1f380 <_ZNSt3__15arrayIcLm35EE4dataB8nn210000Ev>
   1df15:	48 83 c4 10          	add    $0x10,%rsp
   1df19:	5d                   	pop    %rbp
   1df1a:	c3                   	ret
   1df1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001df20 <_ZNSt3__15arrayIcLm35EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   1df20:	55                   	push   %rbp
   1df21:	48 89 e5             	mov    %rsp,%rbp
   1df24:	48 83 ec 10          	sub    $0x10,%rsp
   1df28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1df2c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   1df30:	e8 4b 14 00 00       	call   1f380 <_ZNSt3__15arrayIcLm35EE4dataB8nn210000Ev>
   1df35:	48 83 c0 23          	add    $0x23,%rax
   1df39:	48 83 c4 10          	add    $0x10,%rsp
   1df3d:	5d                   	pop    %rbp
   1df3e:	c3                   	ret
   1df3f:	90                   	nop

000000000001df40 <_ZNSt3__15arrayIcLm13EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   1df40:	55                   	push   %rbp
   1df41:	48 89 e5             	mov    %rsp,%rbp
   1df44:	48 83 ec 10          	sub    $0x10,%rsp
   1df48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1df4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   1df50:	e8 3b 14 00 00       	call   1f390 <_ZNSt3__15arrayIcLm13EE4dataB8nn210000Ev>
   1df55:	48 83 c4 10          	add    $0x10,%rsp
   1df59:	5d                   	pop    %rbp
   1df5a:	c3                   	ret
   1df5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001df60 <_ZNSt3__15arrayIcLm13EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   1df60:	55                   	push   %rbp
   1df61:	48 89 e5             	mov    %rsp,%rbp
   1df64:	48 83 ec 10          	sub    $0x10,%rsp
   1df68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1df6c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   1df70:	e8 1b 14 00 00       	call   1f390 <_ZNSt3__15arrayIcLm13EE4dataB8nn210000Ev>
   1df75:	48 83 c0 0d          	add    $0xd,%rax
   1df79:	48 83 c4 10          	add    $0x10,%rsp
   1df7d:	5d                   	pop    %rbp
   1df7e:	c3                   	ret
   1df7f:	90                   	nop

000000000001df80 <_ZNSt3__15arrayIcLm11EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   1df80:	55                   	push   %rbp
   1df81:	48 89 e5             	mov    %rsp,%rbp
   1df84:	48 83 ec 10          	sub    $0x10,%rsp
   1df88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1df8c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   1df90:	e8 0b 14 00 00       	call   1f3a0 <_ZNSt3__15arrayIcLm11EE4dataB8nn210000Ev>
   1df95:	48 83 c4 10          	add    $0x10,%rsp
   1df99:	5d                   	pop    %rbp
   1df9a:	c3                   	ret
   1df9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001dfa0 <_ZNSt3__15arrayIcLm11EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   1dfa0:	55                   	push   %rbp
   1dfa1:	48 89 e5             	mov    %rsp,%rbp
   1dfa4:	48 83 ec 10          	sub    $0x10,%rsp
   1dfa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dfac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   1dfb0:	e8 eb 13 00 00       	call   1f3a0 <_ZNSt3__15arrayIcLm11EE4dataB8nn210000Ev>
   1dfb5:	48 83 c0 0b          	add    $0xb,%rax
   1dfb9:	48 83 c4 10          	add    $0x10,%rsp
   1dfbd:	5d                   	pop    %rbp
   1dfbe:	c3                   	ret
   1dfbf:	90                   	nop

000000000001dfc0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE>:
_LIBCPP_HIDE_FROM_ABI inline _Iterator __insert_sign(_Iterator __buf, bool __negative, __format_spec::__sign __sign) {
   1dfc0:	55                   	push   %rbp
   1dfc1:	48 89 e5             	mov    %rsp,%rbp
   1dfc4:	88 d0                	mov    %dl,%al
   1dfc6:	40 88 f1             	mov    %sil,%cl
   1dfc9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dfcd:	80 e1 01             	and    $0x1,%cl
   1dfd0:	88 4d f7             	mov    %cl,-0x9(%rbp)
   1dfd3:	88 45 f6             	mov    %al,-0xa(%rbp)
  if (__negative)
   1dfd6:	f6 45 f7 01          	testb  $0x1,-0x9(%rbp)
   1dfda:	74 14                	je     1dff0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x30>
    *__buf++ = '-';
   1dfdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dfe0:	48 89 c1             	mov    %rax,%rcx
   1dfe3:	48 83 c1 01          	add    $0x1,%rcx
   1dfe7:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   1dfeb:	c6 00 2d             	movb   $0x2d,(%rax)
   1dfee:	eb 48                	jmp    1e038 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x78>
    switch (__sign) {
   1dff0:	8a 45 f6             	mov    -0xa(%rbp),%al
   1dff3:	88 45 f5             	mov    %al,-0xb(%rbp)
   1dff6:	2c 02                	sub    $0x2,%al
   1dff8:	72 14                	jb     1e00e <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x4e>
   1dffa:	eb 00                	jmp    1dffc <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x3c>
   1dffc:	8a 45 f5             	mov    -0xb(%rbp),%al
   1dfff:	2c 02                	sub    $0x2,%al
   1e001:	74 0d                	je     1e010 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x50>
   1e003:	eb 00                	jmp    1e005 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x45>
   1e005:	8a 45 f5             	mov    -0xb(%rbp),%al
   1e008:	2c 03                	sub    $0x3,%al
   1e00a:	74 18                	je     1e024 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x64>
   1e00c:	eb 28                	jmp    1e036 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x76>
      break;
   1e00e:	eb 26                	jmp    1e036 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x76>
      *__buf++ = '+';
   1e010:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e014:	48 89 c1             	mov    %rax,%rcx
   1e017:	48 83 c1 01          	add    $0x1,%rcx
   1e01b:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   1e01f:	c6 00 2b             	movb   $0x2b,(%rax)
      break;
   1e022:	eb 12                	jmp    1e036 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x76>
      *__buf++ = ' ';
   1e024:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e028:	48 89 c1             	mov    %rax,%rcx
   1e02b:	48 83 c1 01          	add    $0x1,%rcx
   1e02f:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   1e033:	c6 00 20             	movb   $0x20,(%rax)
   1e036:	eb 00                	jmp    1e038 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE+0x78>
  return __buf;
   1e038:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e03c:	5d                   	pop    %rbp
   1e03d:	c3                   	ret
   1e03e:	66 90                	xchg   %ax,%ax

000000000001e040 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_8integralEjQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_S5_T0_i>:
_LIBCPP_HIDE_FROM_ABI _Iterator __to_buffer(_Iterator __first, _Iterator __last, _Tp __value, int __base) {
   1e040:	55                   	push   %rbp
   1e041:	48 89 e5             	mov    %rsp,%rbp
   1e044:	48 83 ec 40          	sub    $0x40,%rsp
   1e048:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e04c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e050:	89 55 ec             	mov    %edx,-0x14(%rbp)
   1e053:	89 4d e8             	mov    %ecx,-0x18(%rbp)
  to_chars_result __r = std::to_chars(std::to_address(__first), std::to_address(__last), __value, __base);
   1e056:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1e05a:	e8 81 03 00 00       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   1e05f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1e063:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e067:	e8 74 03 00 00       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   1e06c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1e070:	48 89 c6             	mov    %rax,%rsi
   1e073:	8b 55 ec             	mov    -0x14(%rbp),%edx
   1e076:	8b 4d e8             	mov    -0x18(%rbp),%ecx
   1e079:	e8 22 03 00 00       	call   1e3a0 <_ZNSt3__18to_charsB8nn210000IjTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_i>
   1e07e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1e082:	89 55 e0             	mov    %edx,-0x20(%rbp)
  auto __diff = __r.ptr - std::to_address(__first);
   1e085:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e089:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1e08d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1e091:	e8 4a 03 00 00       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   1e096:	48 89 c1             	mov    %rax,%rcx
   1e099:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e09d:	48 29 c8             	sub    %rcx,%rax
   1e0a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  return __first + __diff;
   1e0a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e0a8:	48 03 45 d0          	add    -0x30(%rbp),%rax
   1e0ac:	48 83 c4 40          	add    $0x40,%rsp
   1e0b0:	5d                   	pop    %rbp
   1e0b1:	c3                   	ret
   1e0b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e0b9:	00 00 00 
   1e0bc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>:
__copy(_Iterator __first, _Iterator __last, output_iterator<const _OutCharT&> auto __out_it) -> decltype(__out_it) {
   1e0c0:	55                   	push   %rbp
   1e0c1:	48 89 e5             	mov    %rsp,%rbp
   1e0c4:	48 83 ec 40          	sub    $0x40,%rsp
   1e0c8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1e0cc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e0d0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return __formatter::__copy(basic_string_view{__first, __last}, std::move(__out_it));
   1e0d4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1e0d8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1e0dc:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   1e0e0:	e8 6b 0f 00 00       	call   1f050 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ITkNS_19contiguous_iteratorEPcTkNS_18sized_sentinel_forITL0__EES5_Qaa9is_same_vINS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS7_EEEEE5valueENS_26indirectly_readable_traitsISA_EESB_E4type10value_typeET_Ent16is_convertible_vITL0_0_mEEESH_T0_>
   1e0e5:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1e0e9:	e8 b2 ba ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1e0ee:	48 8b 00             	mov    (%rax),%rax
   1e0f1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1e0f5:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   1e0f9:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1e0fd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1e101:	e8 ea e1 ff ff       	call   1c2f0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIT_NS_11char_traitsISD_EEEET1_>
   1e106:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e10a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e10e:	48 83 c4 40          	add    $0x40,%rsp
   1e112:	5d                   	pop    %rbp
   1e113:	c3                   	ret
   1e114:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e11b:	00 00 00 
   1e11e:	66 90                	xchg   %ax,%ax

000000000001e120 <_ZNSt3__13minB8nn210000IiEERKT_S3_S3_>:
min(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b) {
   1e120:	55                   	push   %rbp
   1e121:	48 89 e5             	mov    %rsp,%rbp
   1e124:	48 83 ec 20          	sub    $0x20,%rsp
   1e128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e12c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::min(__a, __b, __less<>());
   1e130:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1e134:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1e138:	e8 63 0f 00 00       	call   1f0a0 <_ZNSt3__13minB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_>
   1e13d:	48 83 c4 20          	add    $0x20,%rsp
   1e141:	5d                   	pop    %rbp
   1e142:	c3                   	ret
   1e143:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e14a:	00 00 00 
   1e14d:	0f 1f 00             	nopl   (%rax)

000000000001e150 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>:
        __format_spec::__parsed_specifications<_ParserCharT> __specs) -> decltype(__out_it) {
   1e150:	55                   	push   %rbp
   1e151:	48 89 e5             	mov    %rsp,%rbp
   1e154:	48 83 ec 60          	sub    $0x60,%rsp
   1e158:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1e15c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   1e160:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
   1e164:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e168:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  return __formatter::__write(__first, __last, std::move(__out_it), __specs, __last - __first);
   1e16c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e170:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1e174:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e178:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1e17c:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1e180:	e8 1b ba ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1e185:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   1e189:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   1e18d:	48 8b 00             	mov    (%rax),%rax
   1e190:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1e194:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e198:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1e19c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e1a0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1e1a4:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
   1e1a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e1ac:	49 29 c1             	sub    %rax,%r9
   1e1af:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1e1b3:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1e1b7:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
   1e1bb:	e8 60 0f 00 00       	call   1f120 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   1e1c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e1c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e1c8:	48 83 c4 60          	add    $0x60,%rsp
   1e1cc:	5d                   	pop    %rbp
   1e1cd:	c3                   	ret
   1e1ce:	66 90                	xchg   %ax,%ax

000000000001e1d0 <_ZNSt3__111__formatter19__write_transformedB8nn210000ITkNS_19contiguous_iteratorEPcccPFccETkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_NS_13__format_spec23__parsed_specificationsIT1_EET2_>:
_LIBCPP_HIDE_FROM_ABI auto __write_transformed(
    _Iterator __first,
    _Iterator __last,
    output_iterator<const _CharT&> auto __out_it,
    __format_spec::__parsed_specifications<_ParserCharT> __specs,
    _UnaryOperation __op) -> decltype(__out_it) {
   1e1d0:	55                   	push   %rbp
   1e1d1:	48 89 e5             	mov    %rsp,%rbp
   1e1d4:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   1e1db:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1e1df:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   1e1e3:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
   1e1e7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e1eb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1e1ef:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
  _LIBCPP_ASSERT_VALID_INPUT_RANGE(__first <= __last, "Not a valid range");

  ptrdiff_t __size = __last - __first;
   1e1f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e1f7:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1e1fb:	48 29 c8             	sub    %rcx,%rax
   1e1fe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  if (__size >= __specs.__width_)
   1e202:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e206:	48 63 4d e4          	movslq -0x1c(%rbp),%rcx
   1e20a:	48 39 c8             	cmp    %rcx,%rax
   1e20d:	7c 4a                	jl     1e259 <_ZNSt3__111__formatter19__write_transformedB8nn210000ITkNS_19contiguous_iteratorEPcccPFccETkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_NS_13__format_spec23__parsed_specificationsIT1_EET2_+0x89>
    return __formatter::__transform(__first, __last, std::move(__out_it), __op);
   1e20f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e213:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   1e21a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e21e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   1e225:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1e229:	e8 72 b9 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1e22e:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   1e235:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   1e23c:	48 8b 00             	mov    (%rax),%rax
   1e23f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1e243:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1e247:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1e24b:	e8 50 0f 00 00       	call   1f1a0 <_ZNSt3__111__formatter11__transformB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcPFccETkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_T2_>
   1e250:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e254:	e9 d2 00 00 00       	jmp    1e32b <_ZNSt3__111__formatter19__write_transformedB8nn210000ITkNS_19contiguous_iteratorEPcccPFccETkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_NS_13__format_spec23__parsed_specificationsIT1_EET2_+0x15b>

  __padding_size_result __padding = __formatter::__padding_size(__size, __specs.__width_, __specs.__alignment_);
   1e259:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1e25d:	48 63 75 e4          	movslq -0x1c(%rbp),%rsi
   1e261:	8a 45 e0             	mov    -0x20(%rbp),%al
   1e264:	24 07                	and    $0x7,%al
   1e266:	0f b6 d0             	movzbl %al,%edx
   1e269:	e8 d2 e0 ff ff       	call   1c340 <_ZNSt3__111__formatter14__padding_sizeB8nn210000EmmNS_13__format_spec11__alignmentE>
   1e26e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1e272:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
   1e276:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  __out_it                        = __formatter::__fill(std::move(__out_it), __padding.__before_, __specs.__fill_);
   1e27a:	e8 21 b9 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1e27f:	48 8b 00             	mov    (%rax),%rax
   1e282:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1e286:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   1e28a:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1e28d:	89 45 94             	mov    %eax,-0x6c(%rbp)
   1e290:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   1e294:	8b 55 94             	mov    -0x6c(%rbp),%edx
   1e297:	e8 54 e1 ff ff       	call   1c3f0 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mNS_13__format_spec12__code_pointIS3_EE>
   1e29c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1e2a0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1e2a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  __out_it                        = __formatter::__transform(__first, __last, std::move(__out_it), __op);
   1e2a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e2ac:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   1e2b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e2b7:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   1e2be:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1e2c2:	e8 d9 b8 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1e2c7:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
   1e2ce:	48 8b b5 58 ff ff ff 	mov    -0xa8(%rbp),%rsi
   1e2d5:	48 8b 00             	mov    (%rax),%rax
   1e2d8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1e2dc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1e2e0:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   1e2e4:	e8 b7 0e 00 00       	call   1f1a0 <_ZNSt3__111__formatter11__transformB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcPFccETkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_T2_>
   1e2e9:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   1e2ed:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1e2f1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e2f5:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  return __formatter::__fill(std::move(__out_it), __padding.__after_, __specs.__fill_);
   1e2f9:	e8 a2 b8 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1e2fe:	48 8b 00             	mov    (%rax),%rax
   1e301:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1e308:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   1e30c:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1e30f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
   1e315:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
   1e31c:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
   1e322:	e8 c9 e0 ff ff       	call   1c3f0 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mNS_13__format_spec12__code_pointIS3_EE>
   1e327:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   1e32b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e32f:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   1e336:	5d                   	pop    %rbp
   1e337:	c3                   	ret
   1e338:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e33f:	00 

000000000001e340 <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec>:
_LIBCPP_HIDE_FROM_ABI constexpr char __hex_to_upper(char __c) {
   1e340:	55                   	push   %rbp
   1e341:	48 89 e5             	mov    %rsp,%rbp
   1e344:	40 88 f8             	mov    %dil,%al
   1e347:	88 45 fe             	mov    %al,-0x2(%rbp)
  switch (__c) {
   1e34a:	0f be 45 fe          	movsbl -0x2(%rbp),%eax
   1e34e:	83 c0 9f             	add    $0xffffff9f,%eax
   1e351:	89 c1                	mov    %eax,%ecx
   1e353:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   1e357:	83 e8 05             	sub    $0x5,%eax
   1e35a:	77 38                	ja     1e394 <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec+0x54>
   1e35c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1e360:	48 8d 05 d5 08 01 00 	lea    0x108d5(%rip),%rax        # 2ec3c <_ZNSt3__16__itoa11__pow10_128E+0x45c>
   1e367:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   1e36b:	48 01 c8             	add    %rcx,%rax
   1e36e:	ff e0                	jmp    *%rax
    return 'A';
   1e370:	c6 45 ff 41          	movb   $0x41,-0x1(%rbp)
   1e374:	eb 24                	jmp    1e39a <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec+0x5a>
    return 'B';
   1e376:	c6 45 ff 42          	movb   $0x42,-0x1(%rbp)
   1e37a:	eb 1e                	jmp    1e39a <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec+0x5a>
    return 'C';
   1e37c:	c6 45 ff 43          	movb   $0x43,-0x1(%rbp)
   1e380:	eb 18                	jmp    1e39a <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec+0x5a>
    return 'D';
   1e382:	c6 45 ff 44          	movb   $0x44,-0x1(%rbp)
   1e386:	eb 12                	jmp    1e39a <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec+0x5a>
    return 'E';
   1e388:	c6 45 ff 45          	movb   $0x45,-0x1(%rbp)
   1e38c:	eb 0c                	jmp    1e39a <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec+0x5a>
    return 'F';
   1e38e:	c6 45 ff 46          	movb   $0x46,-0x1(%rbp)
   1e392:	eb 06                	jmp    1e39a <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec+0x5a>
  return __c;
   1e394:	8a 45 fe             	mov    -0x2(%rbp),%al
   1e397:	88 45 ff             	mov    %al,-0x1(%rbp)
}
   1e39a:	8a 45 ff             	mov    -0x1(%rbp),%al
   1e39d:	5d                   	pop    %rbp
   1e39e:	c3                   	ret
   1e39f:	90                   	nop

000000000001e3a0 <_ZNSt3__18to_charsB8nn210000IjTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_i>:
  return std::__to_chars_itoa(__first, __last, static_cast<_Type>(__value), is_signed<_Tp>());
}

template <typename _Tp, __enable_if_t<is_integral<_Tp>::value, int> = 0>
inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI to_chars_result
to_chars(char* __first, char* __last, _Tp __value, int __base) {
   1e3a0:	55                   	push   %rbp
   1e3a1:	48 89 e5             	mov    %rsp,%rbp
   1e3a4:	48 83 ec 30          	sub    $0x30,%rsp
   1e3a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e3ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e3b0:	89 55 dc             	mov    %edx,-0x24(%rbp)
   1e3b3:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  _LIBCPP_ASSERT_UNCATEGORIZED(2 <= __base && __base <= 36, "base not in [2, 36]");

  using _Type = __make_32_64_or_128_bit_t<_Tp>;
  return std::__to_chars_integral(__first, __last, static_cast<_Type>(__value), __base, is_signed<_Tp>());
   1e3b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1e3ba:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1e3be:	8b 55 dc             	mov    -0x24(%rbp),%edx
   1e3c1:	8b 4d d8             	mov    -0x28(%rbp),%ecx
   1e3c4:	e8 37 00 00 00       	call   1e400 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE>
   1e3c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e3cd:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1e3d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e3d4:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1e3d7:	48 83 c4 30          	add    $0x30,%rsp
   1e3db:	5d                   	pop    %rbp
   1e3dc:	c3                   	ret
   1e3dd:	0f 1f 00             	nopl   (%rax)

000000000001e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>:
inline _LIBCPP_HIDE_FROM_ABI constexpr auto to_address(_Tp* __p) noexcept {
   1e3e0:	55                   	push   %rbp
   1e3e1:	48 89 e5             	mov    %rsp,%rbp
   1e3e4:	48 83 ec 10          	sub    $0x10,%rsp
   1e3e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return std::__to_address(__p);
   1e3ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1e3f0:	e8 9b 9d ff ff       	call   18190 <_ZNSt3__112__to_addressB8nn210000IcEEPT_S2_>
   1e3f5:	48 83 c4 10          	add    $0x10,%rsp
   1e3f9:	5d                   	pop    %rbp
   1e3fa:	c3                   	ret
   1e3fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001e400 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE>:
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, false_type) {
   1e400:	55                   	push   %rbp
   1e401:	48 89 e5             	mov    %rsp,%rbp
   1e404:	48 83 ec 60          	sub    $0x60,%rsp
   1e408:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   1e40c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   1e410:	89 55 d4             	mov    %edx,-0x2c(%rbp)
   1e413:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  if (__base == 10) [[likely]]
   1e416:	83 7d d0 0a          	cmpl   $0xa,-0x30(%rbp)
   1e41a:	75 1c                	jne    1e438 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x38>
    return std::__to_chars_itoa(__first, __last, __value, false_type());
   1e41c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1e420:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1e424:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   1e427:	e8 44 01 00 00       	call   1e570 <_ZNSt3__115__to_chars_itoaB8nn210000IjEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE>
   1e42c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e430:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1e433:	e9 1c 01 00 00       	jmp    1e554 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x154>
  switch (__base) {
   1e438:	8b 45 d0             	mov    -0x30(%rbp),%eax
   1e43b:	89 45 a8             	mov    %eax,-0x58(%rbp)
   1e43e:	83 e8 02             	sub    $0x2,%eax
   1e441:	74 16                	je     1e459 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x59>
   1e443:	eb 00                	jmp    1e445 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x45>
   1e445:	8b 45 a8             	mov    -0x58(%rbp),%eax
   1e448:	83 e8 08             	sub    $0x8,%eax
   1e44b:	74 28                	je     1e475 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x75>
   1e44d:	eb 00                	jmp    1e44f <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x4f>
   1e44f:	8b 45 a8             	mov    -0x58(%rbp),%eax
   1e452:	83 e8 10             	sub    $0x10,%eax
   1e455:	74 3a                	je     1e491 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x91>
   1e457:	eb 54                	jmp    1e4ad <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0xad>
    return std::__to_chars_integral<2>(__first, __last, __value);
   1e459:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1e45d:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1e461:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   1e464:	e8 87 01 00 00       	call   1e5f0 <_ZNSt3__119__to_chars_integralB8nn210000ILj2EjTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   1e469:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e46d:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1e470:	e9 df 00 00 00       	jmp    1e554 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x154>
    return std::__to_chars_integral<8>(__first, __last, __value);
   1e475:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1e479:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1e47d:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   1e480:	e8 ab 01 00 00       	call   1e630 <_ZNSt3__119__to_chars_integralB8nn210000ILj8EjTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   1e485:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e489:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1e48c:	e9 c3 00 00 00       	jmp    1e554 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x154>
    return std::__to_chars_integral<16>(__first, __last, __value);
   1e491:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1e495:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1e499:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   1e49c:	e8 cf 01 00 00       	call   1e670 <_ZNSt3__119__to_chars_integralB8nn210000ILj16EjTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   1e4a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e4a5:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1e4a8:	e9 a7 00 00 00       	jmp    1e554 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x154>
  ptrdiff_t __cap = __last - __first;
   1e4ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e4b1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1e4b5:	48 29 c8             	sub    %rcx,%rax
   1e4b8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  int __n         = std::__to_chars_integral_width(__value, __base);
   1e4bc:	8b 7d d4             	mov    -0x2c(%rbp),%edi
   1e4bf:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1e4c2:	e8 e9 01 00 00       	call   1e6b0 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j>
   1e4c7:	89 45 bc             	mov    %eax,-0x44(%rbp)
  if (__n > __cap)
   1e4ca:	48 63 45 bc          	movslq -0x44(%rbp),%rax
   1e4ce:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1e4d2:	7e 11                	jle    1e4e5 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0xe5>
    return {__last, errc::value_too_large};
   1e4d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e4d8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e4dc:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   1e4e3:	eb 6f                	jmp    1e554 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x154>
  __last    = __first + __n;
   1e4e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e4e9:	48 63 4d bc          	movslq -0x44(%rbp),%rcx
   1e4ed:	48 01 c8             	add    %rcx,%rax
   1e4f0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  char* __p = __last;
   1e4f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e4f8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    unsigned __c = __value % __base;
   1e4fc:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1e4ff:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   1e502:	31 d2                	xor    %edx,%edx
   1e504:	89 55 a4             	mov    %edx,-0x5c(%rbp)
   1e507:	f7 f1                	div    %ecx
   1e509:	89 d0                	mov    %edx,%eax
   1e50b:	8b 55 a4             	mov    -0x5c(%rbp),%edx
   1e50e:	89 45 ac             	mov    %eax,-0x54(%rbp)
    __value /= __base;
   1e511:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   1e514:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1e517:	f7 f1                	div    %ecx
   1e519:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    *--__p = "0123456789abcdefghijklmnopqrstuvwxyz"[__c];
   1e51c:	8b 45 ac             	mov    -0x54(%rbp),%eax
   1e51f:	89 c1                	mov    %eax,%ecx
   1e521:	48 8d 05 72 11 01 00 	lea    0x11172(%rip),%rax        # 2f69a <.L.str.49>
   1e528:	48 01 c8             	add    %rcx,%rax
   1e52b:	8a 08                	mov    (%rax),%cl
   1e52d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1e531:	48 89 c2             	mov    %rax,%rdx
   1e534:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   1e538:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
   1e53c:	88 48 ff             	mov    %cl,-0x1(%rax)
  } while (__value != 0);
   1e53f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   1e543:	75 b7                	jne    1e4fc <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0xfc>
  return {__last, errc(0)};
   1e545:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e549:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e54d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
}
   1e554:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e558:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1e55b:	48 83 c4 60          	add    $0x60,%rsp
   1e55f:	5d                   	pop    %rbp
   1e560:	c3                   	ret
   1e561:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e568:	00 00 00 
   1e56b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001e570 <_ZNSt3__115__to_chars_itoaB8nn210000IjEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE>:
__to_chars_itoa(char* __first, char* __last, _Tp __value, false_type) {
   1e570:	55                   	push   %rbp
   1e571:	48 89 e5             	mov    %rsp,%rbp
   1e574:	48 83 ec 40          	sub    $0x40,%rsp
   1e578:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   1e57c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   1e580:	89 55 d4             	mov    %edx,-0x2c(%rbp)
  auto __diff = __last - __first;
   1e583:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e587:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1e58b:	48 29 c8             	sub    %rcx,%rax
   1e58e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (__tx::digits <= __diff || __tx::__width(__value) <= __diff)
   1e592:	b8 0a 00 00 00       	mov    $0xa,%eax
   1e597:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   1e59b:	7e 10                	jle    1e5ad <_ZNSt3__115__to_chars_itoaB8nn210000IjEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0x3d>
   1e59d:	8b 7d d4             	mov    -0x2c(%rbp),%edi
   1e5a0:	e8 ab 01 00 00       	call   1e750 <_ZNSt3__16__itoa13__traits_baseIjvE7__widthB8nn210000Ej>
   1e5a5:	48 98                	cltq
   1e5a7:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   1e5ab:	7f 19                	jg     1e5c6 <_ZNSt3__115__to_chars_itoaB8nn210000IjEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0x56>
    return {__tx::__convert(__first, __value), errc(0)};
   1e5ad:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1e5b1:	8b 75 d4             	mov    -0x2c(%rbp),%esi
   1e5b4:	e8 f7 01 00 00       	call   1e7b0 <_ZNSt3__16__itoa13__traits_baseIjvE9__convertB8nn210000EPcj>
   1e5b9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e5bd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
   1e5c4:	eb 0f                	jmp    1e5d5 <_ZNSt3__115__to_chars_itoaB8nn210000IjEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0x65>
    return {__last, errc::value_too_large};
   1e5c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e5ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e5ce:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
}
   1e5d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e5d9:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1e5dc:	48 83 c4 40          	add    $0x40,%rsp
   1e5e0:	5d                   	pop    %rbp
   1e5e1:	c3                   	ret
   1e5e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e5e9:	00 00 00 
   1e5ec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001e5f0 <_ZNSt3__119__to_chars_integralB8nn210000ILj2EjTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   1e5f0:	55                   	push   %rbp
   1e5f1:	48 89 e5             	mov    %rsp,%rbp
   1e5f4:	48 83 ec 30          	sub    $0x30,%rsp
   1e5f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e5fc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e600:	89 55 dc             	mov    %edx,-0x24(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   1e603:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1e607:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1e60b:	8b 55 dc             	mov    -0x24(%rbp),%edx
   1e60e:	e8 4d 06 00 00       	call   1ec60 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_>
   1e613:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e617:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1e61a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e61e:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1e621:	48 83 c4 30          	add    $0x30,%rsp
   1e625:	5d                   	pop    %rbp
   1e626:	c3                   	ret
   1e627:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e62e:	00 00 

000000000001e630 <_ZNSt3__119__to_chars_integralB8nn210000ILj8EjTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   1e630:	55                   	push   %rbp
   1e631:	48 89 e5             	mov    %rsp,%rbp
   1e634:	48 83 ec 30          	sub    $0x30,%rsp
   1e638:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e63c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e640:	89 55 dc             	mov    %edx,-0x24(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   1e643:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1e647:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1e64b:	8b 55 dc             	mov    -0x24(%rbp),%edx
   1e64e:	e8 4d 07 00 00       	call   1eda0 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_>
   1e653:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e657:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1e65a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e65e:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1e661:	48 83 c4 30          	add    $0x30,%rsp
   1e665:	5d                   	pop    %rbp
   1e666:	c3                   	ret
   1e667:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e66e:	00 00 

000000000001e670 <_ZNSt3__119__to_chars_integralB8nn210000ILj16EjTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   1e670:	55                   	push   %rbp
   1e671:	48 89 e5             	mov    %rsp,%rbp
   1e674:	48 83 ec 30          	sub    $0x30,%rsp
   1e678:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e67c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e680:	89 55 dc             	mov    %edx,-0x24(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   1e683:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1e687:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1e68b:	8b 55 dc             	mov    -0x24(%rbp),%edx
   1e68e:	e8 5d 08 00 00       	call   1eef0 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_>
   1e693:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e697:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1e69a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e69e:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1e6a1:	48 83 c4 30          	add    $0x30,%rsp
   1e6a5:	5d                   	pop    %rbp
   1e6a6:	c3                   	ret
   1e6a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e6ae:	00 00 

000000000001e6b0 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI int __to_chars_integral_width(_Tp __value, unsigned __base) {
   1e6b0:	55                   	push   %rbp
   1e6b1:	48 89 e5             	mov    %rsp,%rbp
   1e6b4:	89 7d f8             	mov    %edi,-0x8(%rbp)
   1e6b7:	89 75 f4             	mov    %esi,-0xc(%rbp)
  unsigned __base_2 = __base * __base;
   1e6ba:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1e6bd:	0f af 45 f4          	imul   -0xc(%rbp),%eax
   1e6c1:	89 45 f0             	mov    %eax,-0x10(%rbp)
  unsigned __base_3 = __base_2 * __base;
   1e6c4:	8b 45 f0             	mov    -0x10(%rbp),%eax
   1e6c7:	0f af 45 f4          	imul   -0xc(%rbp),%eax
   1e6cb:	89 45 ec             	mov    %eax,-0x14(%rbp)
  unsigned __base_4 = __base_2 * __base_2;
   1e6ce:	8b 45 f0             	mov    -0x10(%rbp),%eax
   1e6d1:	0f af 45 f0          	imul   -0x10(%rbp),%eax
   1e6d5:	89 45 e8             	mov    %eax,-0x18(%rbp)
  int __r = 0;
   1e6d8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
    if (__value < __base)
   1e6df:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1e6e2:	3b 45 f4             	cmp    -0xc(%rbp),%eax
   1e6e5:	73 0b                	jae    1e6f2 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x42>
      return __r + 1;
   1e6e7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1e6ea:	83 c0 01             	add    $0x1,%eax
   1e6ed:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1e6f0:	eb 51                	jmp    1e743 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x93>
    if (__value < __base_2)
   1e6f2:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1e6f5:	3b 45 f0             	cmp    -0x10(%rbp),%eax
   1e6f8:	73 0b                	jae    1e705 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x55>
      return __r + 2;
   1e6fa:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1e6fd:	83 c0 02             	add    $0x2,%eax
   1e700:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1e703:	eb 3e                	jmp    1e743 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x93>
    if (__value < __base_3)
   1e705:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1e708:	3b 45 ec             	cmp    -0x14(%rbp),%eax
   1e70b:	73 0b                	jae    1e718 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x68>
      return __r + 3;
   1e70d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1e710:	83 c0 03             	add    $0x3,%eax
   1e713:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1e716:	eb 2b                	jmp    1e743 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x93>
    if (__value < __base_4)
   1e718:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1e71b:	3b 45 e8             	cmp    -0x18(%rbp),%eax
   1e71e:	73 0b                	jae    1e72b <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x7b>
      return __r + 4;
   1e720:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1e723:	83 c0 04             	add    $0x4,%eax
   1e726:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1e729:	eb 18                	jmp    1e743 <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x93>
    __value /= __base_4;
   1e72b:	8b 4d e8             	mov    -0x18(%rbp),%ecx
   1e72e:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1e731:	31 d2                	xor    %edx,%edx
   1e733:	f7 f1                	div    %ecx
   1e735:	89 45 f8             	mov    %eax,-0x8(%rbp)
    __r += 4;
   1e738:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1e73b:	83 c0 04             	add    $0x4,%eax
   1e73e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  while (true) {
   1e741:	eb 9c                	jmp    1e6df <_ZNSt3__125__to_chars_integral_widthB8nn210000IjEEiT_j+0x2f>
}
   1e743:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1e746:	5d                   	pop    %rbp
   1e747:	c3                   	ret
   1e748:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e74f:	00 

000000000001e750 <_ZNSt3__16__itoa13__traits_baseIjvE7__widthB8nn210000Ej>:
  /// http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10
  /// Instead of using IntegerLogBase2 it uses __libcpp_clz. Since that
  /// function requires its input to have at least one bit set the value of
  /// zero is set to one. This means the first element of the lookup table is
  /// zero.
  static _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI int __width(_Tp __v) {
   1e750:	55                   	push   %rbp
   1e751:	48 89 e5             	mov    %rsp,%rbp
   1e754:	48 83 ec 10          	sub    $0x10,%rsp
   1e758:	89 7d fc             	mov    %edi,-0x4(%rbp)
    auto __t = (32 - std::__libcpp_clz(static_cast<type>(__v | 1))) * 1233 >> 12;
   1e75b:	8b 7d fc             	mov    -0x4(%rbp),%edi
   1e75e:	83 cf 01             	or     $0x1,%edi
   1e761:	e8 7a 00 00 00       	call   1e7e0 <_ZNSt3__112__libcpp_clzB8nn210000Ej>
   1e766:	89 c1                	mov    %eax,%ecx
   1e768:	b8 20 00 00 00       	mov    $0x20,%eax
   1e76d:	29 c8                	sub    %ecx,%eax
   1e76f:	69 c0 d1 04 00 00    	imul   $0x4d1,%eax,%eax
   1e775:	c1 f8 0c             	sar    $0xc,%eax
   1e778:	89 45 f8             	mov    %eax,-0x8(%rbp)
    return __t - (__v < __itoa::__pow10_32[__t]) + 1;
   1e77b:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1e77e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   1e781:	48 63 f0             	movslq %eax,%rsi
   1e784:	48 8d 15 f5 d8 00 00 	lea    0xd8f5(%rip),%rdx        # 2c080 <_ZNSt3__16__itoa10__pow10_32E>
   1e78b:	48 8d 14 b2          	lea    (%rdx,%rsi,4),%rdx
   1e78f:	3b 0a                	cmp    (%rdx),%ecx
   1e791:	0f 92 c1             	setb   %cl
   1e794:	80 e1 01             	and    $0x1,%cl
   1e797:	0f b6 c9             	movzbl %cl,%ecx
   1e79a:	29 c8                	sub    %ecx,%eax
   1e79c:	83 c0 01             	add    $0x1,%eax
   1e79f:	48 83 c4 10          	add    $0x10,%rsp
   1e7a3:	5d                   	pop    %rbp
   1e7a4:	c3                   	ret
   1e7a5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e7ac:	00 00 00 
   1e7af:	90                   	nop

000000000001e7b0 <_ZNSt3__16__itoa13__traits_baseIjvE9__convertB8nn210000EPcj>:
  }

  static _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI char* __convert(char* __p, _Tp __v) {
   1e7b0:	55                   	push   %rbp
   1e7b1:	48 89 e5             	mov    %rsp,%rbp
   1e7b4:	48 83 ec 10          	sub    $0x10,%rsp
   1e7b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e7bc:	89 75 f4             	mov    %esi,-0xc(%rbp)
    return __itoa::__base_10_u32(__p, __v);
   1e7bf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1e7c3:	8b 75 f4             	mov    -0xc(%rbp),%esi
   1e7c6:	e8 35 00 00 00       	call   1e800 <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj>
   1e7cb:	48 83 c4 10          	add    $0x10,%rsp
   1e7cf:	5d                   	pop    %rbp
   1e7d0:	c3                   	ret
   1e7d1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e7d8:	00 00 00 
   1e7db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001e7e0 <_ZNSt3__112__libcpp_clzB8nn210000Ej>:
_LIBCPP_PUSH_MACROS
#include <__undef_macros>

_LIBCPP_BEGIN_NAMESPACE_STD

[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR int __libcpp_clz(unsigned __x) _NOEXCEPT {
   1e7e0:	55                   	push   %rbp
   1e7e1:	48 89 e5             	mov    %rsp,%rbp
   1e7e4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  return __builtin_clz(__x);
   1e7e7:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   1e7ea:	0f bd c1             	bsr    %ecx,%eax
   1e7ed:	83 f0 1f             	xor    $0x1f,%eax
   1e7f0:	5d                   	pop    %rbp
   1e7f1:	c3                   	ret
   1e7f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e7f9:	00 00 00 
   1e7fc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001e800 <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj>:
  return __itoa::__append8(__itoa::__append2(__first, static_cast<uint32_t>(__value / 100000000)),
                           static_cast<uint32_t>(__value % 100000000));
}

_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char*
__base_10_u32(char* __first, uint32_t __value) noexcept {
   1e800:	55                   	push   %rbp
   1e801:	48 89 e5             	mov    %rsp,%rbp
   1e804:	48 83 ec 20          	sub    $0x20,%rsp
   1e808:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1e80c:	89 75 ec             	mov    %esi,-0x14(%rbp)
  if (__value < 1000000) {
   1e80f:	81 7d ec 40 42 0f 00 	cmpl   $0xf4240,-0x14(%rbp)
   1e816:	0f 83 9f 00 00 00    	jae    1e8bb <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0xbb>
    if (__value < 10000) {
   1e81c:	81 7d ec 10 27 00 00 	cmpl   $0x2710,-0x14(%rbp)
   1e823:	73 69                	jae    1e88e <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x8e>
      if (__value < 100) {
   1e825:	83 7d ec 64          	cmpl   $0x64,-0x14(%rbp)
   1e829:	73 30                	jae    1e85b <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x5b>
        // 0 <= __value < 100
        if (__value < 10)
   1e82b:	83 7d ec 0a          	cmpl   $0xa,-0x14(%rbp)
   1e82f:	73 15                	jae    1e846 <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x46>
          return __itoa::__append1(__first, __value);
   1e831:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e835:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e838:	e8 f3 00 00 00       	call   1e930 <_ZNSt3__16__itoa9__append1B8nn210000EPcj>
   1e83d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e841:	e9 d6 00 00 00       	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
        return __itoa::__append2(__first, __value);
   1e846:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e84a:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e84d:	e8 0e 01 00 00       	call   1e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>
   1e852:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e856:	e9 c1 00 00 00       	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
      }
      // 100 <= __value < 10'000
      if (__value < 1000)
   1e85b:	81 7d ec e8 03 00 00 	cmpl   $0x3e8,-0x14(%rbp)
   1e862:	73 15                	jae    1e879 <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x79>
        return __itoa::__append3(__first, __value);
   1e864:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e868:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e86b:	e8 30 01 00 00       	call   1e9a0 <_ZNSt3__16__itoa9__append3B8nn210000EPcj>
   1e870:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e874:	e9 a3 00 00 00       	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
      return __itoa::__append4(__first, __value);
   1e879:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e87d:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e880:	e8 6b 01 00 00       	call   1e9f0 <_ZNSt3__16__itoa9__append4B8nn210000EPcj>
   1e885:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e889:	e9 8e 00 00 00       	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
    }

    // 10'000 <= __value < 1'000'000
    if (__value < 100000)
   1e88e:	81 7d ec a0 86 01 00 	cmpl   $0x186a0,-0x14(%rbp)
   1e895:	73 12                	jae    1e8a9 <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0xa9>
      return __itoa::__append5(__first, __value);
   1e897:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e89b:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e89e:	e8 9d 01 00 00       	call   1ea40 <_ZNSt3__16__itoa9__append5B8nn210000EPcj>
   1e8a3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e8a7:	eb 73                	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
    return __itoa::__append6(__first, __value);
   1e8a9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e8ad:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e8b0:	e8 db 01 00 00       	call   1ea90 <_ZNSt3__16__itoa9__append6B8nn210000EPcj>
   1e8b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e8b9:	eb 61                	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
  }

  // __value => 1'000'000
  if (__value < 100000000) {
   1e8bb:	81 7d ec 00 e1 f5 05 	cmpl   $0x5f5e100,-0x14(%rbp)
   1e8c2:	73 2d                	jae    1e8f1 <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0xf1>
    // 1'000'000 <= __value < 100'000'000
    if (__value < 10000000)
   1e8c4:	81 7d ec 80 96 98 00 	cmpl   $0x989680,-0x14(%rbp)
   1e8cb:	73 12                	jae    1e8df <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0xdf>
      return __itoa::__append7(__first, __value);
   1e8cd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e8d1:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e8d4:	e8 07 02 00 00       	call   1eae0 <_ZNSt3__16__itoa9__append7B8nn210000EPcj>
   1e8d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e8dd:	eb 3d                	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
    return __itoa::__append8(__first, __value);
   1e8df:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e8e3:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e8e6:	e8 45 02 00 00       	call   1eb30 <_ZNSt3__16__itoa9__append8B8nn210000EPcj>
   1e8eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e8ef:	eb 2b                	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
  }

  // 100'000'000 <= __value < max
  if (__value < 1000000000)
   1e8f1:	81 7d ec 00 ca 9a 3b 	cmpl   $0x3b9aca00,-0x14(%rbp)
   1e8f8:	73 12                	jae    1e90c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x10c>
    return __itoa::__append9(__first, __value);
   1e8fa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e8fe:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e901:	e8 7a 02 00 00       	call   1eb80 <_ZNSt3__16__itoa9__append9B8nn210000EPcj>
   1e906:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e90a:	eb 10                	jmp    1e91c <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj+0x11c>
  return __itoa::__append10(__first, __value);
   1e90c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1e910:	8b 75 ec             	mov    -0x14(%rbp),%esi
   1e913:	e8 b8 02 00 00       	call   1ebd0 <_ZNSt3__16__itoa10__append10B8nn210000IjEEPcS2_T_>
   1e918:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   1e91c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e920:	48 83 c4 20          	add    $0x20,%rsp
   1e924:	5d                   	pop    %rbp
   1e925:	c3                   	ret
   1e926:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e92d:	00 00 00 

000000000001e930 <_ZNSt3__16__itoa9__append1B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append1(char* __first, uint32_t __value) noexcept {
   1e930:	55                   	push   %rbp
   1e931:	48 89 e5             	mov    %rsp,%rbp
   1e934:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e938:	89 75 f4             	mov    %esi,-0xc(%rbp)
  *__first = '0' + static_cast<char>(__value);
   1e93b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1e93e:	0f be c0             	movsbl %al,%eax
   1e941:	83 c0 30             	add    $0x30,%eax
   1e944:	88 c1                	mov    %al,%cl
   1e946:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e94a:	88 08                	mov    %cl,(%rax)
  return __first + 1;
   1e94c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e950:	48 83 c0 01          	add    $0x1,%rax
   1e954:	5d                   	pop    %rbp
   1e955:	c3                   	ret
   1e956:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e95d:	00 00 00 

000000000001e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append2(char* __first, uint32_t __value) noexcept {
   1e960:	55                   	push   %rbp
   1e961:	48 89 e5             	mov    %rsp,%rbp
   1e964:	48 83 ec 10          	sub    $0x10,%rsp
   1e968:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e96c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return std::copy_n(&__digits_base_10[__value * 2], 2, __first);
   1e96f:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1e972:	01 c0                	add    %eax,%eax
   1e974:	48 8d 3d 35 d7 00 00 	lea    0xd735(%rip),%rdi        # 2c0b0 <_ZNSt3__16__itoa16__digits_base_10E>
   1e97b:	48 01 c7             	add    %rax,%rdi
   1e97e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e982:	be 02 00 00 00       	mov    $0x2,%esi
   1e987:	e8 94 02 00 00       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
   1e98c:	48 83 c4 10          	add    $0x10,%rsp
   1e990:	5d                   	pop    %rbp
   1e991:	c3                   	ret
   1e992:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e999:	00 00 00 
   1e99c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001e9a0 <_ZNSt3__16__itoa9__append3B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append3(char* __first, uint32_t __value) noexcept {
   1e9a0:	55                   	push   %rbp
   1e9a1:	48 89 e5             	mov    %rsp,%rbp
   1e9a4:	48 83 ec 10          	sub    $0x10,%rsp
   1e9a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e9ac:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return __itoa::__append2(__itoa::__append1(__first, __value / 100), __value % 100);
   1e9af:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1e9b3:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1e9b6:	b9 64 00 00 00       	mov    $0x64,%ecx
   1e9bb:	31 d2                	xor    %edx,%edx
   1e9bd:	f7 f1                	div    %ecx
   1e9bf:	89 c6                	mov    %eax,%esi
   1e9c1:	e8 6a ff ff ff       	call   1e930 <_ZNSt3__16__itoa9__append1B8nn210000EPcj>
   1e9c6:	48 89 c7             	mov    %rax,%rdi
   1e9c9:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1e9cc:	b9 64 00 00 00       	mov    $0x64,%ecx
   1e9d1:	31 d2                	xor    %edx,%edx
   1e9d3:	f7 f1                	div    %ecx
   1e9d5:	89 d6                	mov    %edx,%esi
   1e9d7:	e8 84 ff ff ff       	call   1e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>
   1e9dc:	48 83 c4 10          	add    $0x10,%rsp
   1e9e0:	5d                   	pop    %rbp
   1e9e1:	c3                   	ret
   1e9e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1e9e9:	00 00 00 
   1e9ec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001e9f0 <_ZNSt3__16__itoa9__append4B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append4(char* __first, uint32_t __value) noexcept {
   1e9f0:	55                   	push   %rbp
   1e9f1:	48 89 e5             	mov    %rsp,%rbp
   1e9f4:	48 83 ec 10          	sub    $0x10,%rsp
   1e9f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e9fc:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return __itoa::__append2(__itoa::__append2(__first, __value / 100), __value % 100);
   1e9ff:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1ea03:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1ea06:	b9 64 00 00 00       	mov    $0x64,%ecx
   1ea0b:	31 d2                	xor    %edx,%edx
   1ea0d:	f7 f1                	div    %ecx
   1ea0f:	89 c6                	mov    %eax,%esi
   1ea11:	e8 4a ff ff ff       	call   1e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>
   1ea16:	48 89 c7             	mov    %rax,%rdi
   1ea19:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1ea1c:	b9 64 00 00 00       	mov    $0x64,%ecx
   1ea21:	31 d2                	xor    %edx,%edx
   1ea23:	f7 f1                	div    %ecx
   1ea25:	89 d6                	mov    %edx,%esi
   1ea27:	e8 34 ff ff ff       	call   1e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>
   1ea2c:	48 83 c4 10          	add    $0x10,%rsp
   1ea30:	5d                   	pop    %rbp
   1ea31:	c3                   	ret
   1ea32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ea39:	00 00 00 
   1ea3c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001ea40 <_ZNSt3__16__itoa9__append5B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append5(char* __first, uint32_t __value) noexcept {
   1ea40:	55                   	push   %rbp
   1ea41:	48 89 e5             	mov    %rsp,%rbp
   1ea44:	48 83 ec 10          	sub    $0x10,%rsp
   1ea48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ea4c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return __itoa::__append4(__itoa::__append1(__first, __value / 10000), __value % 10000);
   1ea4f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1ea53:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1ea56:	b9 10 27 00 00       	mov    $0x2710,%ecx
   1ea5b:	31 d2                	xor    %edx,%edx
   1ea5d:	f7 f1                	div    %ecx
   1ea5f:	89 c6                	mov    %eax,%esi
   1ea61:	e8 ca fe ff ff       	call   1e930 <_ZNSt3__16__itoa9__append1B8nn210000EPcj>
   1ea66:	48 89 c7             	mov    %rax,%rdi
   1ea69:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1ea6c:	b9 10 27 00 00       	mov    $0x2710,%ecx
   1ea71:	31 d2                	xor    %edx,%edx
   1ea73:	f7 f1                	div    %ecx
   1ea75:	89 d6                	mov    %edx,%esi
   1ea77:	e8 74 ff ff ff       	call   1e9f0 <_ZNSt3__16__itoa9__append4B8nn210000EPcj>
   1ea7c:	48 83 c4 10          	add    $0x10,%rsp
   1ea80:	5d                   	pop    %rbp
   1ea81:	c3                   	ret
   1ea82:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ea89:	00 00 00 
   1ea8c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001ea90 <_ZNSt3__16__itoa9__append6B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append6(char* __first, uint32_t __value) noexcept {
   1ea90:	55                   	push   %rbp
   1ea91:	48 89 e5             	mov    %rsp,%rbp
   1ea94:	48 83 ec 10          	sub    $0x10,%rsp
   1ea98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ea9c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return __itoa::__append4(__itoa::__append2(__first, __value / 10000), __value % 10000);
   1ea9f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1eaa3:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1eaa6:	b9 10 27 00 00       	mov    $0x2710,%ecx
   1eaab:	31 d2                	xor    %edx,%edx
   1eaad:	f7 f1                	div    %ecx
   1eaaf:	89 c6                	mov    %eax,%esi
   1eab1:	e8 aa fe ff ff       	call   1e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>
   1eab6:	48 89 c7             	mov    %rax,%rdi
   1eab9:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1eabc:	b9 10 27 00 00       	mov    $0x2710,%ecx
   1eac1:	31 d2                	xor    %edx,%edx
   1eac3:	f7 f1                	div    %ecx
   1eac5:	89 d6                	mov    %edx,%esi
   1eac7:	e8 24 ff ff ff       	call   1e9f0 <_ZNSt3__16__itoa9__append4B8nn210000EPcj>
   1eacc:	48 83 c4 10          	add    $0x10,%rsp
   1ead0:	5d                   	pop    %rbp
   1ead1:	c3                   	ret
   1ead2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ead9:	00 00 00 
   1eadc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001eae0 <_ZNSt3__16__itoa9__append7B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append7(char* __first, uint32_t __value) noexcept {
   1eae0:	55                   	push   %rbp
   1eae1:	48 89 e5             	mov    %rsp,%rbp
   1eae4:	48 83 ec 10          	sub    $0x10,%rsp
   1eae8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1eaec:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return __itoa::__append6(__itoa::__append1(__first, __value / 1000000), __value % 1000000);
   1eaef:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1eaf3:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1eaf6:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
   1eafb:	31 d2                	xor    %edx,%edx
   1eafd:	f7 f1                	div    %ecx
   1eaff:	89 c6                	mov    %eax,%esi
   1eb01:	e8 2a fe ff ff       	call   1e930 <_ZNSt3__16__itoa9__append1B8nn210000EPcj>
   1eb06:	48 89 c7             	mov    %rax,%rdi
   1eb09:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1eb0c:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
   1eb11:	31 d2                	xor    %edx,%edx
   1eb13:	f7 f1                	div    %ecx
   1eb15:	89 d6                	mov    %edx,%esi
   1eb17:	e8 74 ff ff ff       	call   1ea90 <_ZNSt3__16__itoa9__append6B8nn210000EPcj>
   1eb1c:	48 83 c4 10          	add    $0x10,%rsp
   1eb20:	5d                   	pop    %rbp
   1eb21:	c3                   	ret
   1eb22:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1eb29:	00 00 00 
   1eb2c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001eb30 <_ZNSt3__16__itoa9__append8B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append8(char* __first, uint32_t __value) noexcept {
   1eb30:	55                   	push   %rbp
   1eb31:	48 89 e5             	mov    %rsp,%rbp
   1eb34:	48 83 ec 10          	sub    $0x10,%rsp
   1eb38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1eb3c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return __itoa::__append6(__itoa::__append2(__first, __value / 1000000), __value % 1000000);
   1eb3f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1eb43:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1eb46:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
   1eb4b:	31 d2                	xor    %edx,%edx
   1eb4d:	f7 f1                	div    %ecx
   1eb4f:	89 c6                	mov    %eax,%esi
   1eb51:	e8 0a fe ff ff       	call   1e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>
   1eb56:	48 89 c7             	mov    %rax,%rdi
   1eb59:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1eb5c:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
   1eb61:	31 d2                	xor    %edx,%edx
   1eb63:	f7 f1                	div    %ecx
   1eb65:	89 d6                	mov    %edx,%esi
   1eb67:	e8 24 ff ff ff       	call   1ea90 <_ZNSt3__16__itoa9__append6B8nn210000EPcj>
   1eb6c:	48 83 c4 10          	add    $0x10,%rsp
   1eb70:	5d                   	pop    %rbp
   1eb71:	c3                   	ret
   1eb72:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1eb79:	00 00 00 
   1eb7c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001eb80 <_ZNSt3__16__itoa9__append9B8nn210000EPcj>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char* __append9(char* __first, uint32_t __value) noexcept {
   1eb80:	55                   	push   %rbp
   1eb81:	48 89 e5             	mov    %rsp,%rbp
   1eb84:	48 83 ec 10          	sub    $0x10,%rsp
   1eb88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1eb8c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return __itoa::__append8(__itoa::__append1(__first, __value / 100000000), __value % 100000000);
   1eb8f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1eb93:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1eb96:	b9 00 e1 f5 05       	mov    $0x5f5e100,%ecx
   1eb9b:	31 d2                	xor    %edx,%edx
   1eb9d:	f7 f1                	div    %ecx
   1eb9f:	89 c6                	mov    %eax,%esi
   1eba1:	e8 8a fd ff ff       	call   1e930 <_ZNSt3__16__itoa9__append1B8nn210000EPcj>
   1eba6:	48 89 c7             	mov    %rax,%rdi
   1eba9:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1ebac:	b9 00 e1 f5 05       	mov    $0x5f5e100,%ecx
   1ebb1:	31 d2                	xor    %edx,%edx
   1ebb3:	f7 f1                	div    %ecx
   1ebb5:	89 d6                	mov    %edx,%esi
   1ebb7:	e8 74 ff ff ff       	call   1eb30 <_ZNSt3__16__itoa9__append8B8nn210000EPcj>
   1ebbc:	48 83 c4 10          	add    $0x10,%rsp
   1ebc0:	5d                   	pop    %rbp
   1ebc1:	c3                   	ret
   1ebc2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ebc9:	00 00 00 
   1ebcc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001ebd0 <_ZNSt3__16__itoa10__append10B8nn210000IjEEPcS2_T_>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI char* __append10(char* __first, _Tp __value) noexcept {
   1ebd0:	55                   	push   %rbp
   1ebd1:	48 89 e5             	mov    %rsp,%rbp
   1ebd4:	48 83 ec 10          	sub    $0x10,%rsp
   1ebd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ebdc:	89 75 f4             	mov    %esi,-0xc(%rbp)
  return __itoa::__append8(__itoa::__append2(__first, static_cast<uint32_t>(__value / 100000000)),
   1ebdf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1ebe3:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1ebe6:	b9 00 e1 f5 05       	mov    $0x5f5e100,%ecx
   1ebeb:	31 d2                	xor    %edx,%edx
   1ebed:	f7 f1                	div    %ecx
   1ebef:	89 c6                	mov    %eax,%esi
   1ebf1:	e8 6a fd ff ff       	call   1e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>
   1ebf6:	48 89 c7             	mov    %rax,%rdi
                           static_cast<uint32_t>(__value % 100000000));
   1ebf9:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1ebfc:	b9 00 e1 f5 05       	mov    $0x5f5e100,%ecx
   1ec01:	31 d2                	xor    %edx,%edx
   1ec03:	f7 f1                	div    %ecx
   1ec05:	89 d6                	mov    %edx,%esi
  return __itoa::__append8(__itoa::__append2(__first, static_cast<uint32_t>(__value / 100000000)),
   1ec07:	e8 24 ff ff ff       	call   1eb30 <_ZNSt3__16__itoa9__append8B8nn210000EPcj>
   1ec0c:	48 83 c4 10          	add    $0x10,%rsp
   1ec10:	5d                   	pop    %rbp
   1ec11:	c3                   	ret
   1ec12:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ec19:	00 00 00 
   1ec1c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>:
copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result) {
   1ec20:	55                   	push   %rbp
   1ec21:	48 89 e5             	mov    %rsp,%rbp
   1ec24:	48 83 ec 20          	sub    $0x20,%rsp
   1ec28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ec2c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1ec2f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  _IntegralSize __n = __orig_n;
   1ec33:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1ec36:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  return std::copy(__first, __first + difference_type(__n), __result);
   1ec39:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1ec3d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   1ec41:	48 63 45 e4          	movslq -0x1c(%rbp),%rax
   1ec45:	48 01 c6             	add    %rax,%rsi
   1ec48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ec4c:	e8 3f da ff ff       	call   1c690 <_ZNSt3__14copyB8nn210000IPKcPcEET0_T_S5_S4_>
   1ec51:	48 83 c4 20          	add    $0x20,%rsp
   1ec55:	5d                   	pop    %rbp
   1ec56:	c3                   	ret
   1ec57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1ec5e:	00 00 

000000000001ec60 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   1ec60:	55                   	push   %rbp
   1ec61:	48 89 e5             	mov    %rsp,%rbp
   1ec64:	48 83 ec 50          	sub    $0x50,%rsp
   1ec68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ec6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ec70:	89 55 dc             	mov    %edx,-0x24(%rbp)
    ptrdiff_t __cap = __last - __first;
   1ec73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ec77:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1ec7b:	48 29 c8             	sub    %rcx,%rax
   1ec7e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    int __n         = __width(__value);
   1ec82:	8b 7d dc             	mov    -0x24(%rbp),%edi
   1ec85:	e8 e6 00 00 00       	call   1ed70 <_ZNSt3__16__itoa10__integralILj2EE7__widthB8nn210000IjEEiT_>
   1ec8a:	89 45 cc             	mov    %eax,-0x34(%rbp)
    if (__n > __cap)
   1ec8d:	48 63 45 cc          	movslq -0x34(%rbp),%rax
   1ec91:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ec95:	7e 14                	jle    1ecab <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x4b>
      return {__last, errc::value_too_large};
   1ec97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ec9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1ec9f:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   1eca6:	e9 ad 00 00 00       	jmp    1ed58 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xf8>
    __last                   = __first + __n;
   1ecab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ecaf:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   1ecb3:	48 01 c8             	add    %rcx,%rax
   1ecb6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    char* __p                = __last;
   1ecba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ecbe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    const unsigned __divisor = 16;
   1ecc2:	c7 45 bc 10 00 00 00 	movl   $0x10,-0x44(%rbp)
    while (__value > __divisor) {
   1ecc9:	83 7d dc 10          	cmpl   $0x10,-0x24(%rbp)
   1eccd:	76 3e                	jbe    1ed0d <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xad>
      unsigned __c = __value % __divisor;
   1eccf:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ecd2:	83 e0 0f             	and    $0xf,%eax
   1ecd5:	89 45 b8             	mov    %eax,-0x48(%rbp)
      __value /= __divisor;
   1ecd8:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ecdb:	c1 e8 04             	shr    $0x4,%eax
   1ecde:	89 45 dc             	mov    %eax,-0x24(%rbp)
      __p -= 4;
   1ece1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ece5:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
   1ece9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      std::copy_n(&__base_2_lut[4 * __c], 4, __p);
   1eced:	8b 45 b8             	mov    -0x48(%rbp),%eax
   1ecf0:	c1 e0 02             	shl    $0x2,%eax
   1ecf3:	48 8d 3d 86 d4 00 00 	lea    0xd486(%rip),%rdi        # 2c180 <_ZNSt3__16__itoa12__base_2_lutE>
   1ecfa:	48 01 c7             	add    %rax,%rdi
   1ecfd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1ed01:	be 04 00 00 00       	mov    $0x4,%esi
   1ed06:	e8 15 ff ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   1ed0b:	eb bc                	jmp    1ecc9 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x69>
    do {
   1ed0d:	eb 00                	jmp    1ed0f <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xaf>
      unsigned __c = __value % 2;
   1ed0f:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ed12:	83 e0 01             	and    $0x1,%eax
   1ed15:	89 45 b4             	mov    %eax,-0x4c(%rbp)
      __value /= 2;
   1ed18:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ed1b:	d1 e8                	shr    $1,%eax
   1ed1d:	89 45 dc             	mov    %eax,-0x24(%rbp)
      *--__p = "01"[__c];
   1ed20:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   1ed23:	89 c1                	mov    %eax,%ecx
   1ed25:	48 8d 05 93 09 01 00 	lea    0x10993(%rip),%rax        # 2f6bf <.L.str.50>
   1ed2c:	48 01 c8             	add    %rcx,%rax
   1ed2f:	8a 08                	mov    (%rax),%cl
   1ed31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ed35:	48 89 c2             	mov    %rax,%rdx
   1ed38:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   1ed3c:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   1ed40:	88 48 ff             	mov    %cl,-0x1(%rax)
    } while (__value != 0);
   1ed43:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   1ed47:	75 c6                	jne    1ed0f <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xaf>
    return {__last, errc(0)};
   1ed49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ed4d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1ed51:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   1ed58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ed5c:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1ed5f:	48 83 c4 50          	add    $0x50,%rsp
   1ed63:	5d                   	pop    %rbp
   1ed64:	c3                   	ret
   1ed65:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ed6c:	00 00 00 
   1ed6f:	90                   	nop

000000000001ed70 <_ZNSt3__16__itoa10__integralILj2EE7__widthB8nn210000IjEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   1ed70:	55                   	push   %rbp
   1ed71:	48 89 e5             	mov    %rsp,%rbp
   1ed74:	48 83 ec 10          	sub    $0x10,%rsp
   1ed78:	89 7d fc             	mov    %edi,-0x4(%rbp)
    return numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1);
   1ed7b:	8b 7d fc             	mov    -0x4(%rbp),%edi
   1ed7e:	83 cf 01             	or     $0x1,%edi
   1ed81:	e8 5a fa ff ff       	call   1e7e0 <_ZNSt3__112__libcpp_clzB8nn210000Ej>
   1ed86:	89 c1                	mov    %eax,%ecx
   1ed88:	b8 20 00 00 00       	mov    $0x20,%eax
   1ed8d:	29 c8                	sub    %ecx,%eax
   1ed8f:	48 83 c4 10          	add    $0x10,%rsp
   1ed93:	5d                   	pop    %rbp
   1ed94:	c3                   	ret
   1ed95:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ed9c:	00 00 00 
   1ed9f:	90                   	nop

000000000001eda0 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   1eda0:	55                   	push   %rbp
   1eda1:	48 89 e5             	mov    %rsp,%rbp
   1eda4:	48 83 ec 50          	sub    $0x50,%rsp
   1eda8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1edac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1edb0:	89 55 dc             	mov    %edx,-0x24(%rbp)
    ptrdiff_t __cap = __last - __first;
   1edb3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1edb7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1edbb:	48 29 c8             	sub    %rcx,%rax
   1edbe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    int __n         = __width(__value);
   1edc2:	8b 7d dc             	mov    -0x24(%rbp),%edi
   1edc5:	e8 f6 00 00 00       	call   1eec0 <_ZNSt3__16__itoa10__integralILj8EE7__widthB8nn210000IjEEiT_>
   1edca:	89 45 cc             	mov    %eax,-0x34(%rbp)
    if (__n > __cap)
   1edcd:	48 63 45 cc          	movslq -0x34(%rbp),%rax
   1edd1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1edd5:	7e 14                	jle    1edeb <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x4b>
      return {__last, errc::value_too_large};
   1edd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1eddb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1eddf:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   1ede6:	e9 bd 00 00 00       	jmp    1eea8 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x108>
    __last             = __first + __n;
   1edeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1edef:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   1edf3:	48 01 c8             	add    %rcx,%rax
   1edf6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    char* __p          = __last;
   1edfa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1edfe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    unsigned __divisor = 64;
   1ee02:	c7 45 bc 40 00 00 00 	movl   $0x40,-0x44(%rbp)
    while (__value > __divisor) {
   1ee09:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ee0c:	3b 45 bc             	cmp    -0x44(%rbp),%eax
   1ee0f:	76 4b                	jbe    1ee5c <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xbc>
      unsigned __c = __value % __divisor;
   1ee11:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ee14:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   1ee17:	31 d2                	xor    %edx,%edx
   1ee19:	89 55 b0             	mov    %edx,-0x50(%rbp)
   1ee1c:	f7 f1                	div    %ecx
   1ee1e:	89 d0                	mov    %edx,%eax
   1ee20:	8b 55 b0             	mov    -0x50(%rbp),%edx
   1ee23:	89 45 b8             	mov    %eax,-0x48(%rbp)
      __value /= __divisor;
   1ee26:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   1ee29:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ee2c:	f7 f1                	div    %ecx
   1ee2e:	89 45 dc             	mov    %eax,-0x24(%rbp)
      __p -= 2;
   1ee31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ee35:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   1ee39:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      std::copy_n(&__base_8_lut[2 * __c], 2, __p);
   1ee3d:	8b 45 b8             	mov    -0x48(%rbp),%eax
   1ee40:	01 c0                	add    %eax,%eax
   1ee42:	48 8d 3d 77 d3 00 00 	lea    0xd377(%rip),%rdi        # 2c1c0 <_ZNSt3__16__itoa12__base_8_lutE>
   1ee49:	48 01 c7             	add    %rax,%rdi
   1ee4c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1ee50:	be 02 00 00 00       	mov    $0x2,%esi
   1ee55:	e8 c6 fd ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   1ee5a:	eb ad                	jmp    1ee09 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x69>
    do {
   1ee5c:	eb 00                	jmp    1ee5e <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xbe>
      unsigned __c = __value % 8;
   1ee5e:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ee61:	83 e0 07             	and    $0x7,%eax
   1ee64:	89 45 b4             	mov    %eax,-0x4c(%rbp)
      __value /= 8;
   1ee67:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ee6a:	c1 e8 03             	shr    $0x3,%eax
   1ee6d:	89 45 dc             	mov    %eax,-0x24(%rbp)
      *--__p = "01234567"[__c];
   1ee70:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   1ee73:	89 c1                	mov    %eax,%ecx
   1ee75:	48 8d 05 46 08 01 00 	lea    0x10846(%rip),%rax        # 2f6c2 <.L.str.51>
   1ee7c:	48 01 c8             	add    %rcx,%rax
   1ee7f:	8a 08                	mov    (%rax),%cl
   1ee81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ee85:	48 89 c2             	mov    %rax,%rdx
   1ee88:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   1ee8c:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   1ee90:	88 48 ff             	mov    %cl,-0x1(%rax)
    } while (__value != 0);
   1ee93:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   1ee97:	75 c5                	jne    1ee5e <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xbe>
    return {__last, errc(0)};
   1ee99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ee9d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1eea1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   1eea8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1eeac:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1eeaf:	48 83 c4 50          	add    $0x50,%rsp
   1eeb3:	5d                   	pop    %rbp
   1eeb4:	c3                   	ret
   1eeb5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1eebc:	00 00 00 
   1eebf:	90                   	nop

000000000001eec0 <_ZNSt3__16__itoa10__integralILj8EE7__widthB8nn210000IjEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   1eec0:	55                   	push   %rbp
   1eec1:	48 89 e5             	mov    %rsp,%rbp
   1eec4:	48 83 ec 10          	sub    $0x10,%rsp
   1eec8:	89 7d fc             	mov    %edi,-0x4(%rbp)
    return ((numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1)) + 2) / 3;
   1eecb:	8b 7d fc             	mov    -0x4(%rbp),%edi
   1eece:	83 cf 01             	or     $0x1,%edi
   1eed1:	e8 0a f9 ff ff       	call   1e7e0 <_ZNSt3__112__libcpp_clzB8nn210000Ej>
   1eed6:	89 c1                	mov    %eax,%ecx
   1eed8:	b8 20 00 00 00       	mov    $0x20,%eax
   1eedd:	29 c8                	sub    %ecx,%eax
   1eedf:	83 c0 02             	add    $0x2,%eax
   1eee2:	b9 03 00 00 00       	mov    $0x3,%ecx
   1eee7:	99                   	cltd
   1eee8:	f7 f9                	idiv   %ecx
   1eeea:	48 83 c4 10          	add    $0x10,%rsp
   1eeee:	5d                   	pop    %rbp
   1eeef:	c3                   	ret

000000000001eef0 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   1eef0:	55                   	push   %rbp
   1eef1:	48 89 e5             	mov    %rsp,%rbp
   1eef4:	48 83 ec 50          	sub    $0x50,%rsp
   1eef8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1eefc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ef00:	89 55 dc             	mov    %edx,-0x24(%rbp)
    ptrdiff_t __cap = __last - __first;
   1ef03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ef07:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1ef0b:	48 29 c8             	sub    %rcx,%rax
   1ef0e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    int __n         = __width(__value);
   1ef12:	8b 7d dc             	mov    -0x24(%rbp),%edi
   1ef15:	e8 06 01 00 00       	call   1f020 <_ZNSt3__16__itoa10__integralILj16EE7__widthB8nn210000IjEEiT_>
   1ef1a:	89 45 cc             	mov    %eax,-0x34(%rbp)
    if (__n > __cap)
   1ef1d:	48 63 45 cc          	movslq -0x34(%rbp),%rax
   1ef21:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ef25:	7e 14                	jle    1ef3b <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x4b>
      return {__last, errc::value_too_large};
   1ef27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ef2b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1ef2f:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   1ef36:	e9 c9 00 00 00       	jmp    1f004 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x114>
    __last             = __first + __n;
   1ef3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ef3f:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   1ef43:	48 01 c8             	add    %rcx,%rax
   1ef46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    char* __p          = __last;
   1ef4a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ef4e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    unsigned __divisor = 256;
   1ef52:	c7 45 bc 00 01 00 00 	movl   $0x100,-0x44(%rbp)
    while (__value > __divisor) {
   1ef59:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ef5c:	3b 45 bc             	cmp    -0x44(%rbp),%eax
   1ef5f:	76 4b                	jbe    1efac <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xbc>
      unsigned __c = __value % __divisor;
   1ef61:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ef64:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   1ef67:	31 d2                	xor    %edx,%edx
   1ef69:	89 55 b0             	mov    %edx,-0x50(%rbp)
   1ef6c:	f7 f1                	div    %ecx
   1ef6e:	89 d0                	mov    %edx,%eax
   1ef70:	8b 55 b0             	mov    -0x50(%rbp),%edx
   1ef73:	89 45 b8             	mov    %eax,-0x48(%rbp)
      __value /= __divisor;
   1ef76:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   1ef79:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1ef7c:	f7 f1                	div    %ecx
   1ef7e:	89 45 dc             	mov    %eax,-0x24(%rbp)
      __p -= 2;
   1ef81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ef85:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   1ef89:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      std::copy_n(&__base_16_lut[2 * __c], 2, __p);
   1ef8d:	8b 45 b8             	mov    -0x48(%rbp),%eax
   1ef90:	01 c0                	add    %eax,%eax
   1ef92:	48 8d 3d a7 d2 00 00 	lea    0xd2a7(%rip),%rdi        # 2c240 <_ZNSt3__16__itoa13__base_16_lutE>
   1ef99:	48 01 c7             	add    %rax,%rdi
   1ef9c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1efa0:	be 02 00 00 00       	mov    $0x2,%esi
   1efa5:	e8 76 fc ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   1efaa:	eb ad                	jmp    1ef59 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x69>
    if (__first != __last)
   1efac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1efb0:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1efb4:	74 3f                	je     1eff5 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x105>
      do {
   1efb6:	eb 00                	jmp    1efb8 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xc8>
        unsigned __c = __value % 16;
   1efb8:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1efbb:	83 e0 0f             	and    $0xf,%eax
   1efbe:	89 45 b4             	mov    %eax,-0x4c(%rbp)
        __value /= 16;
   1efc1:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1efc4:	c1 e8 04             	shr    $0x4,%eax
   1efc7:	89 45 dc             	mov    %eax,-0x24(%rbp)
        *--__p = "0123456789abcdef"[__c];
   1efca:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   1efcd:	89 c1                	mov    %eax,%ecx
   1efcf:	48 8d 05 f5 06 01 00 	lea    0x106f5(%rip),%rax        # 2f6cb <.L.str.52>
   1efd6:	48 01 c8             	add    %rcx,%rax
   1efd9:	8a 08                	mov    (%rax),%cl
   1efdb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1efdf:	48 89 c2             	mov    %rax,%rdx
   1efe2:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   1efe6:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   1efea:	88 48 ff             	mov    %cl,-0x1(%rax)
      } while (__value != 0);
   1efed:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   1eff1:	75 c5                	jne    1efb8 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0xc8>
   1eff3:	eb 00                	jmp    1eff5 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IjEENS_15to_chars_resultEPcS5_T_+0x105>
    return {__last, errc(0)};
   1eff5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1eff9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1effd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   1f004:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f008:	8b 55 f8             	mov    -0x8(%rbp),%edx
   1f00b:	48 83 c4 50          	add    $0x50,%rsp
   1f00f:	5d                   	pop    %rbp
   1f010:	c3                   	ret
   1f011:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f018:	00 00 00 
   1f01b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001f020 <_ZNSt3__16__itoa10__integralILj16EE7__widthB8nn210000IjEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   1f020:	55                   	push   %rbp
   1f021:	48 89 e5             	mov    %rsp,%rbp
   1f024:	48 83 ec 10          	sub    $0x10,%rsp
   1f028:	89 7d fc             	mov    %edi,-0x4(%rbp)
    return (numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1) + 3) / 4;
   1f02b:	8b 7d fc             	mov    -0x4(%rbp),%edi
   1f02e:	83 cf 01             	or     $0x1,%edi
   1f031:	e8 aa f7 ff ff       	call   1e7e0 <_ZNSt3__112__libcpp_clzB8nn210000Ej>
   1f036:	89 c1                	mov    %eax,%ecx
   1f038:	b8 20 00 00 00       	mov    $0x20,%eax
   1f03d:	29 c8                	sub    %ecx,%eax
   1f03f:	83 c0 03             	add    $0x3,%eax
   1f042:	b9 04 00 00 00       	mov    $0x4,%ecx
   1f047:	99                   	cltd
   1f048:	f7 f9                	idiv   %ecx
   1f04a:	48 83 c4 10          	add    $0x10,%rsp
   1f04e:	5d                   	pop    %rbp
   1f04f:	c3                   	ret

000000000001f050 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ITkNS_19contiguous_iteratorEPcTkNS_18sized_sentinel_forITL0__EES5_Qaa9is_same_vINS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS7_EEEEE5valueENS_26indirectly_readable_traitsISA_EESB_E4type10value_typeET_Ent16is_convertible_vITL0_0_mEEESH_T0_>:
      : __data_(std::to_address(__begin)), __size_(__end - __begin) {
   1f050:	55                   	push   %rbp
   1f051:	48 89 e5             	mov    %rsp,%rbp
   1f054:	48 83 ec 20          	sub    $0x20,%rsp
   1f058:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f05c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f060:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1f064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f068:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f06c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1f070:	e8 6b f3 ff ff       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   1f075:	48 89 c1             	mov    %rax,%rcx
   1f078:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f07c:	48 89 08             	mov    %rcx,(%rax)
   1f07f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1f083:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f087:	48 29 d1             	sub    %rdx,%rcx
   1f08a:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   1f08e:	48 83 c4 20          	add    $0x20,%rsp
   1f092:	5d                   	pop    %rbp
   1f093:	c3                   	ret
   1f094:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f09b:	00 00 00 
   1f09e:	66 90                	xchg   %ax,%ax

000000000001f0a0 <_ZNSt3__13minB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_>:
min(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b, _Compare __comp) {
   1f0a0:	55                   	push   %rbp
   1f0a1:	48 89 e5             	mov    %rsp,%rbp
   1f0a4:	48 83 ec 20          	sub    $0x20,%rsp
   1f0a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1f0ac:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  return __comp(__b, __a) ? __b : __a;
   1f0b0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1f0b4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f0b8:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
   1f0bc:	e8 2f 00 00 00       	call   1f0f0 <_ZNKSt3__16__lessIvvEclB8nn210000IiiEEbRKT_RKT0_>
   1f0c1:	a8 01                	test   $0x1,%al
   1f0c3:	75 02                	jne    1f0c7 <_ZNSt3__13minB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_+0x27>
   1f0c5:	eb 0a                	jmp    1f0d1 <_ZNSt3__13minB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_+0x31>
   1f0c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f0cb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f0cf:	eb 08                	jmp    1f0d9 <_ZNSt3__13minB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_+0x39>
   1f0d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f0d5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f0d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f0dd:	48 83 c4 20          	add    $0x20,%rsp
   1f0e1:	5d                   	pop    %rbp
   1f0e2:	c3                   	ret
   1f0e3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f0ea:	00 00 00 
   1f0ed:	0f 1f 00             	nopl   (%rax)

000000000001f0f0 <_ZNKSt3__16__lessIvvEclB8nn210000IiiEEbRKT_RKT0_>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 bool operator()(const _Tp& __lhs, const _Up& __rhs) const {
   1f0f0:	55                   	push   %rbp
   1f0f1:	48 89 e5             	mov    %rsp,%rbp
   1f0f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f0f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f0fc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    return __lhs < __rhs;
   1f100:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f104:	8b 00                	mov    (%rax),%eax
   1f106:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1f10a:	3b 01                	cmp    (%rcx),%eax
   1f10c:	0f 9c c0             	setl   %al
   1f10f:	24 01                	and    $0x1,%al
   1f111:	5d                   	pop    %rbp
   1f112:	c3                   	ret
   1f113:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f11a:	00 00 00 
   1f11d:	0f 1f 00             	nopl   (%rax)

000000000001f120 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>:
        ptrdiff_t __size) -> decltype(__out_it) {
   1f120:	55                   	push   %rbp
   1f121:	48 89 e5             	mov    %rsp,%rbp
   1f124:	48 83 ec 60          	sub    $0x60,%rsp
   1f128:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1f12c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   1f130:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
   1f134:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1f138:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1f13c:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
  return __formatter::__write(basic_string_view{__first, __last}, std::move(__out_it), __specs, __size);
   1f140:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1f144:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1f148:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   1f14c:	e8 ff fe ff ff       	call   1f050 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ITkNS_19contiguous_iteratorEPcTkNS_18sized_sentinel_forITL0__EES5_Qaa9is_same_vINS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS7_EEEEE5valueENS_26indirectly_readable_traitsISA_EESB_E4type10value_typeET_Ent16is_convertible_vITL0_0_mEEESH_T0_>
   1f151:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1f155:	e8 46 aa ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1f15a:	48 8b 00             	mov    (%rax),%rax
   1f15d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1f161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f165:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1f169:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f16d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1f171:	4c 8b 4d c8          	mov    -0x38(%rbp),%r9
   1f175:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   1f179:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1f17d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1f181:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   1f185:	4c 8b 45 a8          	mov    -0x58(%rbp),%r8
   1f189:	e8 c2 cf ff ff       	call   1c150 <_ZNSt3__111__formatter7__writeB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   1f18e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f192:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f196:	48 83 c4 60          	add    $0x60,%rsp
   1f19a:	5d                   	pop    %rbp
   1f19b:	c3                   	ret
   1f19c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001f1a0 <_ZNSt3__111__formatter11__transformB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcPFccETkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_T2_>:
            _UnaryOperation __operation) -> decltype(__out_it) {
   1f1a0:	55                   	push   %rbp
   1f1a1:	48 89 e5             	mov    %rsp,%rbp
   1f1a4:	48 83 ec 40          	sub    $0x40,%rsp
   1f1a8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1f1ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f1b0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1f1b4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   1f1b8:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    __out_it.__get_container()->__transform(__first, __last, std::move(__operation));
   1f1bc:	e8 7f d2 ff ff       	call   1c440 <_ZNKSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEE15__get_containerB8nn210000Ev>
   1f1c1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1f1c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f1c9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1f1cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f1d1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1f1d5:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   1f1d9:	e8 32 01 00 00       	call   1f310 <_ZNSt3__14moveB8nn210000IRPFccEEEOu20__remove_reference_tIT_EOS4_>
   1f1de:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1f1e2:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1f1e6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1f1ea:	48 8b 08             	mov    (%rax),%rcx
   1f1ed:	e8 1e 00 00 00       	call   1f210 <_ZNSt3__18__format15__output_bufferIcE11__transformB8nn210000ITkNS_19contiguous_iteratorEPcPFccETkNS_15__fmt_char_typeEcEEvT_S7_T0_>
    return __out_it;
   1f1f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f1f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f1fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f1fe:	48 83 c4 40          	add    $0x40,%rsp
   1f202:	5d                   	pop    %rbp
   1f203:	c3                   	ret
   1f204:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f20b:	00 00 00 
   1f20e:	66 90                	xchg   %ax,%ax

000000000001f210 <_ZNSt3__18__format15__output_bufferIcE11__transformB8nn210000ITkNS_19contiguous_iteratorEPcPFccETkNS_15__fmt_char_typeEcEEvT_S7_T0_>:
  _LIBCPP_HIDE_FROM_ABI void __transform(_Iterator __first, _Iterator __last, _UnaryOperation __operation) {
   1f210:	55                   	push   %rbp
   1f211:	48 89 e5             	mov    %rsp,%rbp
   1f214:	48 83 ec 50          	sub    $0x50,%rsp
   1f218:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f21c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f220:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1f224:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   1f228:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f22c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    size_t __n = static_cast<size_t>(__last - __first);
   1f230:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1f234:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f238:	48 29 d1             	sub    %rdx,%rcx
   1f23b:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    if (__max_output_size_) {
   1f23f:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
   1f244:	74 23                	je     1f269 <_ZNSt3__18__format15__output_bufferIcE11__transformB8nn210000ITkNS_19contiguous_iteratorEPcPFccETkNS_15__fmt_char_typeEcEEvT_S7_T0_+0x59>
   1f246:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
      __n = __max_output_size_->__write_request(__n);
   1f24a:	48 8b 78 20          	mov    0x20(%rax),%rdi
   1f24e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1f252:	e8 19 d3 ff ff       	call   1c570 <_ZNSt3__18__format17__max_output_sizeB8nn21000015__write_requestB8nn210000Em>
   1f257:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (__n == 0)
   1f25b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   1f260:	75 05                	jne    1f267 <_ZNSt3__18__format15__output_bufferIcE11__transformB8nn210000ITkNS_19contiguous_iteratorEPcPFccETkNS_15__fmt_char_typeEcEEvT_S7_T0_+0x57>
        return;
   1f262:	e9 a3 00 00 00       	jmp    1f30a <_ZNSt3__18__format15__output_bufferIcE11__transformB8nn210000ITkNS_19contiguous_iteratorEPcPFccETkNS_15__fmt_char_typeEcEEvT_S7_T0_+0xfa>
    }
   1f267:	eb 00                	jmp    1f269 <_ZNSt3__18__format15__output_bufferIcE11__transformB8nn210000ITkNS_19contiguous_iteratorEPcPFccETkNS_15__fmt_char_typeEcEEvT_S7_T0_+0x59>
    do {
   1f269:	eb 00                	jmp    1f26b <_ZNSt3__18__format15__output_bufferIcE11__transformB8nn210000ITkNS_19contiguous_iteratorEPcPFccETkNS_15__fmt_char_typeEcEEvT_S7_T0_+0x5b>
   1f26b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      __prepare_write(__n);
   1f26f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1f273:	e8 68 d3 ff ff       	call   1c5e0 <_ZNSt3__18__format15__output_bufferIcE15__prepare_writeB8nn210000Em>
   1f278:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
      size_t __chunk = std::min(__n, __available());
   1f27c:	e8 af d3 ff ff       	call   1c630 <_ZNKSt3__18__format15__output_bufferIcE11__availableB8nn210000Ev>
   1f281:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1f285:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   1f289:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
   1f28d:	e8 ee d4 fe ff       	call   c780 <_ZNSt3__13minB8nn210000ImEERKT_S3_S3_>
   1f292:	48 89 c1             	mov    %rax,%rcx
   1f295:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f299:	48 8b 09             	mov    (%rcx),%rcx
   1f29c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      std::transform(__first, __first + __chunk, std::addressof(__ptr_[__size_]), __operation);
   1f2a0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f2a4:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   1f2a8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f2ac:	48 03 4d d0          	add    -0x30(%rbp),%rcx
   1f2b0:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   1f2b4:	48 8b 38             	mov    (%rax),%rdi
   1f2b7:	48 03 78 10          	add    0x10(%rax),%rdi
   1f2bb:	e8 20 9a ff ff       	call   18ce0 <_ZNSt3__19addressofB8nn210000IcEEPT_RS1_>
   1f2c0:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   1f2c4:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1f2c8:	48 89 c2             	mov    %rax,%rdx
   1f2cb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1f2cf:	e8 4c 00 00 00       	call   1f320 <_ZNSt3__19transformB8nn210000IPcS1_PFccEEET0_T_S5_S4_T1_>
   1f2d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
      __size_ += __chunk;
   1f2d8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1f2dc:	48 03 48 10          	add    0x10(%rax),%rcx
   1f2e0:	48 89 48 10          	mov    %rcx,0x10(%rax)
      __first += __chunk;
   1f2e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f2e8:	48 03 45 f0          	add    -0x10(%rbp),%rax
   1f2ec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      __n -= __chunk;
   1f2f0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1f2f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f2f8:	48 29 c8             	sub    %rcx,%rax
   1f2fb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    } while (__n);
   1f2ff:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   1f304:	0f 85 61 ff ff ff    	jne    1f26b <_ZNSt3__18__format15__output_bufferIcE11__transformB8nn210000ITkNS_19contiguous_iteratorEPcPFccETkNS_15__fmt_char_typeEcEEvT_S7_T0_+0x5b>
  }
   1f30a:	48 83 c4 50          	add    $0x50,%rsp
   1f30e:	5d                   	pop    %rbp
   1f30f:	c3                   	ret

000000000001f310 <_ZNSt3__14moveB8nn210000IRPFccEEEOu20__remove_reference_tIT_EOS4_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   1f310:	55                   	push   %rbp
   1f311:	48 89 e5             	mov    %rsp,%rbp
   1f314:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   1f318:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f31c:	5d                   	pop    %rbp
   1f31d:	c3                   	ret
   1f31e:	66 90                	xchg   %ax,%ax

000000000001f320 <_ZNSt3__19transformB8nn210000IPcS1_PFccEEET0_T_S5_S4_T1_>:

_LIBCPP_BEGIN_NAMESPACE_STD

template <class _InputIterator, class _OutputIterator, class _UnaryOperation>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _OutputIterator
transform(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __op) {
   1f320:	55                   	push   %rbp
   1f321:	48 89 e5             	mov    %rsp,%rbp
   1f324:	48 83 ec 20          	sub    $0x20,%rsp
   1f328:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f32c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f330:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1f334:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  for (; __first != __last; ++__first, (void)++__result)
   1f338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f33c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f340:	74 2f                	je     1f371 <_ZNSt3__19transformB8nn210000IPcS1_PFccEEET0_T_S5_S4_T1_+0x51>
    *__result = __op(*__first);
   1f342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f346:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1f34a:	0f be 39             	movsbl (%rcx),%edi
   1f34d:	ff d0                	call   *%rax
   1f34f:	88 c1                	mov    %al,%cl
   1f351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f355:	88 08                	mov    %cl,(%rax)
  for (; __first != __last; ++__first, (void)++__result)
   1f357:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f35b:	48 83 c0 01          	add    $0x1,%rax
   1f35f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f363:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f367:	48 83 c0 01          	add    $0x1,%rax
   1f36b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1f36f:	eb c7                	jmp    1f338 <_ZNSt3__19transformB8nn210000IPcS1_PFccEEET0_T_S5_S4_T1_+0x18>
  return __result;
   1f371:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f375:	48 83 c4 20          	add    $0x20,%rsp
   1f379:	5d                   	pop    %rbp
   1f37a:	c3                   	ret
   1f37b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001f380 <_ZNSt3__15arrayIcLm35EE4dataB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 value_type* data() _NOEXCEPT { return __elems_; }
   1f380:	55                   	push   %rbp
   1f381:	48 89 e5             	mov    %rsp,%rbp
   1f384:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f38c:	5d                   	pop    %rbp
   1f38d:	c3                   	ret
   1f38e:	66 90                	xchg   %ax,%ax

000000000001f390 <_ZNSt3__15arrayIcLm13EE4dataB8nn210000Ev>:
   1f390:	55                   	push   %rbp
   1f391:	48 89 e5             	mov    %rsp,%rbp
   1f394:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f398:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f39c:	5d                   	pop    %rbp
   1f39d:	c3                   	ret
   1f39e:	66 90                	xchg   %ax,%ax

000000000001f3a0 <_ZNSt3__15arrayIcLm11EE4dataB8nn210000Ev>:
   1f3a0:	55                   	push   %rbp
   1f3a1:	48 89 e5             	mov    %rsp,%rbp
   1f3a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f3a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f3ac:	5d                   	pop    %rbp
   1f3ad:	c3                   	ret
   1f3ae:	66 90                	xchg   %ax,%ax

000000000001f3b0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRcEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   1f3b0:	55                   	push   %rbp
   1f3b1:	48 89 e5             	mov    %rsp,%rbp
   1f3b4:	48 83 ec 10          	sub    $0x10,%rsp
   1f3b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f3bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f3c0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1f3c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f3c8:	8a 00                	mov    (%rax),%al
   1f3ca:	0f be f0             	movsbl %al,%esi
   1f3cd:	e8 0e 00 00 00       	call   1f3e0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIcEEDaSC_>
   1f3d2:	48 83 c4 10          	add    $0x10,%rsp
   1f3d6:	5d                   	pop    %rbp
   1f3d7:	c3                   	ret
   1f3d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1f3df:	00 

000000000001f3e0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIcEEDaSC_>:
        [&](auto __arg) {
   1f3e0:	55                   	push   %rbp
   1f3e1:	48 89 e5             	mov    %rsp,%rbp
   1f3e4:	48 83 ec 40          	sub    $0x40,%rsp
   1f3e8:	40 88 f0             	mov    %sil,%al
   1f3eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f3ef:	88 45 f7             	mov    %al,-0x9(%rbp)
   1f3f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f3f6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1f3fa:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   1f3fe:	e8 6d 00 00 00       	call   1f470 <_ZNSt3__19formatterIccEC2Ev>
   1f403:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            if (__parse)
   1f407:	48 8b 40 10          	mov    0x10(%rax),%rax
   1f40b:	f6 00 01             	testb  $0x1,(%rax)
   1f40e:	74 23                	je     1f433 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIcEEDaSC_+0x53>
   1f410:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   1f414:	48 8b 08             	mov    (%rax),%rcx
   1f417:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   1f41b:	48 8b 30             	mov    (%rax),%rsi
   1f41e:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
   1f422:	e8 69 00 00 00       	call   1f490 <_ZNSt3__116__formatter_charIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   1f427:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1f42b:	48 89 c6             	mov    %rax,%rsi
   1f42e:	e8 ed a9 ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   1f433:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   1f437:	48 8b 41 08          	mov    0x8(%rcx),%rax
   1f43b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1f43f:	8a 45 f7             	mov    -0x9(%rbp),%al
   1f442:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   1f446:	0f be f0             	movsbl %al,%esi
   1f449:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
   1f44d:	e8 8e 00 00 00       	call   1f4e0 <_ZNKSt3__116__formatter_charIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEcRSA_>
   1f452:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1f456:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1f45a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1f45e:	e8 fd a6 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   1f463:	48 83 c4 40          	add    $0x40,%rsp
   1f467:	5d                   	pop    %rbp
   1f468:	c3                   	ret
   1f469:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001f470 <_ZNSt3__19formatterIccEC2Ev>:

  __format_spec::__parser<_CharT> __parser_;
};

template <>
struct _LIBCPP_TEMPLATE_VIS formatter<char, char> : public __formatter_char<char> {};
   1f470:	55                   	push   %rbp
   1f471:	48 89 e5             	mov    %rsp,%rbp
   1f474:	48 83 ec 10          	sub    $0x10,%rsp
   1f478:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f47c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1f480:	e8 7b 01 00 00       	call   1f600 <_ZNSt3__116__formatter_charIcEC2Ev>
   1f485:	48 83 c4 10          	add    $0x10,%rsp
   1f489:	5d                   	pop    %rbp
   1f48a:	c3                   	ret
   1f48b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001f490 <_ZNSt3__116__formatter_charIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>:
  _LIBCPP_HIDE_FROM_ABI constexpr typename _ParseContext::iterator parse(_ParseContext& __ctx) {
   1f490:	55                   	push   %rbp
   1f491:	48 89 e5             	mov    %rsp,%rbp
   1f494:	48 83 ec 30          	sub    $0x30,%rsp
   1f498:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f49c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f4a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1f4a4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    typename _ParseContext::iterator __result = __parser_.__parse(__ctx, __format_spec::__fields_integral);
   1f4a8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1f4ac:	66 c7 45 e6 37 01    	movw   $0x137,-0x1a(%rbp)
   1f4b2:	66 8b 45 e6          	mov    -0x1a(%rbp),%ax
   1f4b6:	66 89 c2             	mov    %ax,%dx
   1f4b9:	e8 62 b6 ff ff       	call   1ab20 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E>
   1f4be:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   1f4c2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __format_spec::__process_parsed_char(__parser_, "a character");
   1f4c6:	48 8d 35 0f 02 01 00 	lea    0x1020f(%rip),%rsi        # 2f6dc <.L.str.53>
   1f4cd:	e8 4e 01 00 00       	call   1f620 <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc>
    return __result;
   1f4d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f4d6:	48 83 c4 30          	add    $0x30,%rsp
   1f4da:	5d                   	pop    %rbp
   1f4db:	c3                   	ret
   1f4dc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001f4e0 <_ZNKSt3__116__formatter_charIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEcRSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_CharT __value, _FormatContext& __ctx) const {
   1f4e0:	55                   	push   %rbp
   1f4e1:	48 89 e5             	mov    %rsp,%rbp
   1f4e4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   1f4eb:	40 88 f0             	mov    %sil,%al
   1f4ee:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1f4f2:	88 45 ef             	mov    %al,-0x11(%rbp)
   1f4f5:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1f4f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f4fd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    if (__parser_.__type_ == __format_spec::__type::__default || __parser_.__type_ == __format_spec::__type::__char)
   1f501:	80 78 01 00          	cmpb   $0x0,0x1(%rax)
   1f505:	74 0a                	je     1f511 <_ZNKSt3__116__formatter_charIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEcRSA_+0x31>
   1f507:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1f50b:	80 78 01 0a          	cmpb   $0xa,0x1(%rax)
   1f50f:	75 4b                	jne    1f55c <_ZNKSt3__116__formatter_charIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEcRSA_+0x7c>
      return __formatter::__format_char(__value, __ctx.out(), __parser_.__get_parsed_std_specifications(__ctx));
   1f511:	8a 45 ef             	mov    -0x11(%rbp),%al
   1f514:	88 45 97             	mov    %al,-0x69(%rbp)
   1f517:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1f51b:	e8 f0 a5 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   1f520:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   1f524:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1f528:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1f52c:	e8 df c5 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   1f531:	48 89 c1             	mov    %rax,%rcx
   1f534:	8a 45 97             	mov    -0x69(%rbp),%al
   1f537:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   1f53b:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   1f53f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1f543:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1f547:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1f54b:	0f be f8             	movsbl %al,%edi
   1f54e:	e8 5d 01 00 00       	call   1f6b0 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>
   1f553:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f557:	e9 93 00 00 00       	jmp    1f5ef <_ZNKSt3__116__formatter_charIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEcRSA_+0x10f>
   1f55c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    if (__parser_.__type_ == __format_spec::__type::__debug)
   1f560:	80 78 01 13          	cmpb   $0x13,0x1(%rax)
   1f564:	75 48                	jne    1f5ae <_ZNKSt3__116__formatter_charIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEcRSA_+0xce>
      return __formatter::__format_escaped_char(__value, __ctx.out(), __parser_.__get_parsed_std_specifications(__ctx));
   1f566:	8a 45 ef             	mov    -0x11(%rbp),%al
   1f569:	88 45 96             	mov    %al,-0x6a(%rbp)
   1f56c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1f570:	e8 9b a5 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   1f575:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   1f579:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1f57d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1f581:	e8 8a c5 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   1f586:	48 89 c1             	mov    %rax,%rcx
   1f589:	8a 45 96             	mov    -0x6a(%rbp),%al
   1f58c:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   1f590:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   1f594:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1f598:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1f59c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1f5a0:	0f be f8             	movsbl %al,%edi
   1f5a3:	e8 98 01 00 00       	call   1f740 <_ZNSt3__111__formatter21__format_escaped_charB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ES3_T0_NS_13__format_spec23__parsed_specificationsIS3_EE>
   1f5a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f5ac:	eb 41                	jmp    1f5ef <_ZNKSt3__116__formatter_charIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEcRSA_+0x10f>
   1f5ae:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
          static_cast<unsigned>(static_cast<make_unsigned_t<_CharT>>(__value)),
   1f5b2:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   1f5b6:	89 45 84             	mov    %eax,-0x7c(%rbp)
          __ctx,
   1f5b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f5bd:	48 89 45 88          	mov    %rax,-0x78(%rbp)
          __parser_.__get_parsed_std_specifications(__ctx));
   1f5c1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1f5c5:	e8 46 c5 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   1f5ca:	8b 7d 84             	mov    -0x7c(%rbp),%edi
   1f5cd:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
   1f5d1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1f5d5:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
      return __formatter::__format_integer(
   1f5d9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1f5dd:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   1f5e1:	31 c0                	xor    %eax,%eax
   1f5e3:	45 31 c0             	xor    %r8d,%r8d
   1f5e6:	e8 b5 c5 ff ff       	call   1bba0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   1f5eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   1f5ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5f3:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   1f5fa:	5d                   	pop    %rbp
   1f5fb:	c3                   	ret
   1f5fc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001f600 <_ZNSt3__116__formatter_charIcEC2Ev>:
struct _LIBCPP_TEMPLATE_VIS __formatter_char {
   1f600:	55                   	push   %rbp
   1f601:	48 89 e5             	mov    %rsp,%rbp
   1f604:	48 83 ec 10          	sub    $0x10,%rsp
   1f608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f60c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1f610:	e8 db b3 ff ff       	call   1a9f0 <_ZNSt3__113__format_spec8__parserIcEC2Ev>
   1f615:	48 83 c4 10          	add    $0x10,%rsp
   1f619:	5d                   	pop    %rbp
   1f61a:	c3                   	ret
   1f61b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001f620 <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc>:

template <class _CharT>
_LIBCPP_HIDE_FROM_ABI constexpr void __process_parsed_char(__parser<_CharT>& __parser, const char* __id) {
   1f620:	55                   	push   %rbp
   1f621:	48 89 e5             	mov    %rsp,%rbp
   1f624:	48 83 ec 20          	sub    $0x20,%rsp
   1f628:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f62c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  switch (__parser.__type_) {
   1f630:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f634:	8a 40 01             	mov    0x1(%rax),%al
   1f637:	88 45 ef             	mov    %al,-0x11(%rbp)
   1f63a:	84 c0                	test   %al,%al
   1f63c:	74 1f                	je     1f65d <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x3d>
   1f63e:	eb 00                	jmp    1f640 <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x20>
   1f640:	8a 45 ef             	mov    -0x11(%rbp),%al
   1f643:	04 fe                	add    $0xfe,%al
   1f645:	2c 06                	sub    $0x6,%al
   1f647:	72 23                	jb     1f66c <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x4c>
   1f649:	eb 00                	jmp    1f64b <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x2b>
   1f64b:	8a 45 ef             	mov    -0x11(%rbp),%al
   1f64e:	2c 0a                	sub    $0xa,%al
   1f650:	74 0b                	je     1f65d <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x3d>
   1f652:	eb 00                	jmp    1f654 <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x34>
   1f654:	8a 45 ef             	mov    -0x11(%rbp),%al
   1f657:	2c 13                	sub    $0x13,%al
   1f659:	75 13                	jne    1f66e <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x4e>
   1f65b:	eb 00                	jmp    1f65d <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x3d>
  case __format_spec::__type::__default:
  case __format_spec::__type::__char:
  case __format_spec::__type::__debug:
    __format_spec::__process_display_type_char(__parser, __id);
   1f65d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1f661:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1f665:	e8 16 00 00 00       	call   1f680 <_ZNSt3__113__format_spec27__process_display_type_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc>
    break;
   1f66a:	eb 0b                	jmp    1f677 <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x57>
  case __format_spec::__type::__binary_upper_case:
  case __format_spec::__type::__octal:
  case __format_spec::__type::__decimal:
  case __format_spec::__type::__hexadecimal_lower_case:
  case __format_spec::__type::__hexadecimal_upper_case:
    break;
   1f66c:	eb 09                	jmp    1f677 <_ZNSt3__113__format_spec21__process_parsed_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x57>

  default:
    __format_spec::__throw_invalid_type_format_error(__id);
   1f66e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1f672:	e8 59 bf ff ff       	call   1b5d0 <_ZNSt3__113__format_spec33__throw_invalid_type_format_errorB8nn210000EPKc>
  }
}
   1f677:	48 83 c4 20          	add    $0x20,%rsp
   1f67b:	5d                   	pop    %rbp
   1f67c:	c3                   	ret
   1f67d:	0f 1f 00             	nopl   (%rax)

000000000001f680 <_ZNSt3__113__format_spec27__process_display_type_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc>:
_LIBCPP_HIDE_FROM_ABI constexpr void __process_display_type_char(__parser<_CharT>& __parser, const char* __id) {
   1f680:	55                   	push   %rbp
   1f681:	48 89 e5             	mov    %rsp,%rbp
   1f684:	48 83 ec 10          	sub    $0x10,%rsp
   1f688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f68c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  __format_spec::__process_display_type_bool_string(__parser, __id);
   1f690:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1f694:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1f698:	e8 e3 be ff ff       	call   1b580 <_ZNSt3__113__format_spec34__process_display_type_bool_stringB8nn210000IcEEvRNS0_8__parserIT_EEPKc>
}
   1f69d:	48 83 c4 10          	add    $0x10,%rsp
   1f6a1:	5d                   	pop    %rbp
   1f6a2:	c3                   	ret
   1f6a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f6aa:	00 00 00 
   1f6ad:	0f 1f 00             	nopl   (%rax)

000000000001f6b0 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>:
              __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   1f6b0:	55                   	push   %rbp
   1f6b1:	48 89 e5             	mov    %rsp,%rbp
   1f6b4:	48 83 ec 50          	sub    $0x50,%rsp
   1f6b8:	40 88 f8             	mov    %dil,%al
   1f6bb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f6bf:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1f6c3:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1f6c7:	88 45 df             	mov    %al,-0x21(%rbp)
  const auto __c = static_cast<_CharT>(__value);
   1f6ca:	8a 45 df             	mov    -0x21(%rbp),%al
   1f6cd:	88 45 de             	mov    %al,-0x22(%rbp)
   1f6d0:	48 8d 7d de          	lea    -0x22(%rbp),%rdi
  return __formatter::__write(std::addressof(__c), std::addressof(__c) + 1, std::move(__out_it), __specs);
   1f6d4:	e8 e7 94 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   1f6d9:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1f6dd:	48 8d 7d de          	lea    -0x22(%rbp),%rdi
   1f6e1:	e8 da 94 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   1f6e6:	48 83 c0 01          	add    $0x1,%rax
   1f6ea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1f6ee:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1f6f2:	e8 a9 a4 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1f6f7:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   1f6fb:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1f6ff:	48 8b 00             	mov    (%rax),%rax
   1f702:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1f706:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f70a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1f70e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f712:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1f716:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1f71a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1f71e:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
   1f722:	e8 e9 c8 ff ff       	call   1c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   1f727:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f72b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f72f:	48 83 c4 50          	add    $0x50,%rsp
   1f733:	5d                   	pop    %rbp
   1f734:	c3                   	ret
   1f735:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f73c:	00 00 00 
   1f73f:	90                   	nop

000000000001f740 <_ZNSt3__111__formatter21__format_escaped_charB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ES3_T0_NS_13__format_spec23__parsed_specificationsIS3_EE>:

template <class _CharT>
_LIBCPP_HIDE_FROM_ABI auto
__format_escaped_char(_CharT __value,
                      output_iterator<const _CharT&> auto __out_it,
                      __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   1f740:	55                   	push   %rbp
   1f741:	48 89 e5             	mov    %rsp,%rbp
   1f744:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   1f74b:	40 88 f8             	mov    %dil,%al
   1f74e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f752:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   1f756:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1f75a:	88 45 df             	mov    %al,-0x21(%rbp)
   1f75d:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  basic_string<_CharT> __str;
   1f761:	e8 ea 00 00 00       	call   1f850 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000Ev>
   1f766:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1f76a:	be 27 00 00 00       	mov    $0x27,%esi
  __str += _CharT('\'');
   1f76f:	e8 2c 01 00 00       	call   1f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>
   1f774:	48 8d 7d df          	lea    -0x21(%rbp),%rdi
  __formatter::__escape(__str, basic_string_view{std::addressof(__value), 1}, __escape_quotation_mark::__apostrophe);
   1f778:	e8 63 95 ff ff       	call   18ce0 <_ZNSt3__19addressofB8nn210000IcEEPT_RS1_>
   1f77d:	48 89 c6             	mov    %rax,%rsi
   1f780:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   1f784:	ba 01 00 00 00       	mov    $0x1,%edx
   1f789:	e8 92 02 00 00       	call   1fa20 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKcm>
   1f78e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   1f792:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1f796:	31 c0                	xor    %eax,%eax
   1f798:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1f79c:	31 c9                	xor    %ecx,%ecx
   1f79e:	e8 2d 01 00 00       	call   1f8d0 <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE>
   1f7a3:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1f7a7:	be 27 00 00 00       	mov    $0x27,%esi
  __str += _CharT('\'');
   1f7ac:	e8 ef 00 00 00       	call   1f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>
   1f7b1:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  return __formatter::__write(__str.data(), __str.data() + __str.size(), std::move(__out_it), __specs, __str.size());
   1f7b5:	e8 e6 89 ff ff       	call   181a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataB8nn210000Ev>
   1f7ba:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   1f7be:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1f7c2:	e8 d9 89 ff ff       	call   181a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataB8nn210000Ev>
   1f7c7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1f7cb:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1f7cf:	e8 cc 84 ff ff       	call   17ca0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev>
   1f7d4:	48 89 c1             	mov    %rax,%rcx
   1f7d7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1f7db:	48 01 c8             	add    %rcx,%rax
   1f7de:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1f7e2:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1f7e6:	e8 b5 a3 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   1f7eb:	48 8b 00             	mov    (%rax),%rax
   1f7ee:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1f7f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f7f6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1f7fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f7fe:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1f802:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1f806:	e8 95 84 ff ff       	call   17ca0 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeB8nn210000Ev>
   1f80b:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   1f80f:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
   1f813:	49 89 c1             	mov    %rax,%r9
   1f816:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1f81a:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   1f81e:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
   1f822:	e8 f9 f8 ff ff       	call   1f120 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   1f827:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f82b:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
}
   1f82f:	e8 fc 85 ff ff       	call   17e30 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev>
   1f834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f838:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   1f83f:	5d                   	pop    %rbp
   1f840:	c3                   	ret
   1f841:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1f848:	00 00 00 
   1f84b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001f850 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000Ev>:
      : __rep_() {
   1f850:	55                   	push   %rbp
   1f851:	48 89 e5             	mov    %rsp,%rbp
   1f854:	48 83 ec 10          	sub    $0x10,%rsp
   1f858:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f85c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1f860:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1f864:	31 c0                	xor    %eax,%eax
   1f866:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
   1f86d:	00 
   1f86e:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
   1f875:	00 
   1f876:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string()
   1f87d:	e8 ae c1 ff ff       	call   1ba30 <_ZNSt3__19allocatorIcEC2B8nn210000Ev>
   1f882:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    __annotate_new(0);
   1f886:	31 c0                	xor    %eax,%eax
   1f888:	31 c0                	xor    %eax,%eax
   1f88a:	89 c6                	mov    %eax,%esi
   1f88c:	e8 8f 83 ff ff       	call   17c20 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__annotate_newB8nn210000Em>
  }
   1f891:	48 83 c4 10          	add    $0x10,%rsp
   1f895:	5d                   	pop    %rbp
   1f896:	c3                   	ret
   1f897:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1f89e:	00 00 

000000000001f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator+=(value_type __c) {
   1f8a0:	55                   	push   %rbp
   1f8a1:	48 89 e5             	mov    %rsp,%rbp
   1f8a4:	48 83 ec 20          	sub    $0x20,%rsp
   1f8a8:	40 88 f0             	mov    %sil,%al
   1f8ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f8af:	88 45 f7             	mov    %al,-0x9(%rbp)
   1f8b2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1f8b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    push_back(__c);
   1f8ba:	8a 45 f7             	mov    -0x9(%rbp),%al
   1f8bd:	0f be f0             	movsbl %al,%esi
   1f8c0:	e8 6b 8e ff ff       	call   18730 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc>
   1f8c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    return *this;
   1f8c9:	48 83 c4 20          	add    $0x20,%rsp
   1f8cd:	5d                   	pop    %rbp
   1f8ce:	c3                   	ret
   1f8cf:	90                   	nop

000000000001f8d0 <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE>:
__escape(basic_string<_CharT>& __str, basic_string_view<_CharT> __values, __escape_quotation_mark __mark) {
   1f8d0:	55                   	push   %rbp
   1f8d1:	48 89 e5             	mov    %rsp,%rbp
   1f8d4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   1f8db:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f8df:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1f8e3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f8e7:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
   1f8ea:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  __unicode::__code_point_view<_CharT> __view{__values.begin(), __values.end()};
   1f8ee:	e8 9d c7 ff ff       	call   1c090 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE5beginB8nn210000Ev>
   1f8f3:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1f8fa:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   1f8fe:	e8 ad c7 ff ff       	call   1c0b0 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE3endB8nn210000Ev>
   1f903:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   1f90a:	48 89 c2             	mov    %rax,%rdx
   1f90d:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   1f911:	e8 3a 01 00 00       	call   1fa50 <_ZNSt3__19__unicode17__code_point_viewIcEC2B8nn210000EPKcS4_>
  bool __escape = true;
   1f916:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
   1f91a:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  while (!__view.__at_end()) {
   1f91e:	e8 5d 01 00 00       	call   1fa80 <_ZNKSt3__19__unicode17__code_point_viewIcE8__at_endB8nn210000Ev>
   1f923:	34 ff                	xor    $0xff,%al
   1f925:	a8 01                	test   $0x1,%al
   1f927:	75 05                	jne    1f92e <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE+0x5e>
   1f929:	e9 e0 00 00 00       	jmp    1fa0e <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE+0x13e>
   1f92e:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    auto __first                                  = __view.__position();
   1f932:	e8 69 01 00 00       	call   1faa0 <_ZNKSt3__19__unicode17__code_point_viewIcE10__positionB8nn210000Ev>
   1f937:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1f93b:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    typename __unicode::__consume_result __result = __view.__consume();
   1f93f:	e8 7c 01 00 00       	call   1fac0 <_ZNSt3__19__unicode17__code_point_viewIcE9__consumeB8nn210000Ev>
   1f944:	89 45 bc             	mov    %eax,-0x44(%rbp)
    if (__result.__status == __unicode::__consume_result::__ok) {
   1f947:	8b 45 bc             	mov    -0x44(%rbp),%eax
   1f94a:	c1 e8 1f             	shr    $0x1f,%eax
   1f94d:	83 f8 00             	cmp    $0x0,%eax
   1f950:	75 79                	jne    1f9cb <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE+0xfb>
      __escape = __formatter::__is_escaped_sequence_written(__str, __result.__code_point, __escape, __mark);
   1f952:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1f956:	8b 75 bc             	mov    -0x44(%rbp),%esi
   1f959:	81 e6 ff ff ff 7f    	and    $0x7fffffff,%esi
   1f95f:	8a 45 cf             	mov    -0x31(%rbp),%al
   1f962:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
   1f965:	0f b6 d0             	movzbl %al,%edx
   1f968:	83 e2 01             	and    $0x1,%edx
   1f96b:	e8 a0 01 00 00       	call   1fb10 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE>
   1f970:	24 01                	and    $0x1,%al
   1f972:	88 45 cf             	mov    %al,-0x31(%rbp)
      if (!__escape)
   1f975:	f6 45 cf 01          	testb  $0x1,-0x31(%rbp)
   1f979:	75 4e                	jne    1f9c9 <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE+0xf9>
        ranges::copy(__first, __view.__position(), std::back_insert_iterator(__str));
   1f97b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f97f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   1f986:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   1f98a:	e8 11 01 00 00       	call   1faa0 <_ZNKSt3__19__unicode17__code_point_viewIcE10__positionB8nn210000Ev>
   1f98f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1f996:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1f99a:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   1f99e:	e8 ed 03 00 00       	call   1fd90 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2B8nn210000ERS6_>
   1f9a3:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   1f9aa:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   1f9b1:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   1f9b5:	48 8d 3d 0b fe 00 00 	lea    0xfe0b(%rip),%rdi        # 2f7c7 <_ZNSt3__16ranges5__cpo4copyE>
   1f9bc:	e8 2f 03 00 00       	call   1fcf0 <_ZNKSt3__16ranges6__copyclB8nn210000ITkNS_14input_iteratorEPKcTkNS_12sentinel_forIT_EES4_TkNS_20weakly_incrementableENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEQ19indirectly_copyableIS6_T1_EEENS0_13in_out_resultIS6_SF_EES6_T0_SF_>
   1f9c1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1f9c5:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    } else {
   1f9c9:	eb 3e                	jmp    1fa09 <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE+0x139>
      ranges::for_each(__first, __view.__position(), [&](_CharT __value) {
   1f9cb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f9cf:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   1f9d6:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   1f9da:	e8 c1 00 00 00       	call   1faa0 <_ZNKSt3__19__unicode17__code_point_viewIcE10__positionB8nn210000Ev>
   1f9df:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   1f9e6:	48 89 c2             	mov    %rax,%rdx
   1f9e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f9ed:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1f9f1:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   1f9f5:	48 8d 3d cc fd 00 00 	lea    0xfdcc(%rip),%rdi        # 2f7c8 <_ZNSt3__16ranges5__cpo8for_eachE>
   1f9fc:	e8 cf 03 00 00       	call   1fdd0 <_ZNKSt3__16ranges10__for_eachclB8nn210000ITkNS_14input_iteratorEPKcTkNS_12sentinel_forIT_EES4_NS_8identityETkNS_26indirectly_unary_invocableINS_16__projected_implIS6_T1_E6__typeEEEZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIS6_NS_11char_traitsIS6_EENS_9allocatorIS6_EEEENS_17basic_string_viewIS6_SH_EENSD_23__escape_quotation_markEEUlcE_EENS0_13in_fun_resultIS6_T2_EES6_T0_SR_SA_>
   1fa01:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1fa05:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  while (!__view.__at_end()) {
   1fa09:	e9 0c ff ff ff       	jmp    1f91a <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE+0x4a>
}
   1fa0e:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   1fa15:	5d                   	pop    %rbp
   1fa16:	c3                   	ret
   1fa17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1fa1e:	00 00 

000000000001fa20 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKcm>:
        __size_(__len) {
   1fa20:	55                   	push   %rbp
   1fa21:	48 89 e5             	mov    %rsp,%rbp
   1fa24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fa28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fa2c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1fa30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      : __data_(__s),
   1fa34:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fa38:	48 89 08             	mov    %rcx,(%rax)
        __size_(__len) {
   1fa3b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1fa3f:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   1fa43:	5d                   	pop    %rbp
   1fa44:	c3                   	ret
   1fa45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1fa4c:	00 00 00 
   1fa4f:	90                   	nop

000000000001fa50 <_ZNSt3__19__unicode17__code_point_viewIcEC2B8nn210000EPKcS4_>:
class __code_point_view {
  using _Iterator _LIBCPP_NODEBUG = typename basic_string_view<_CharT>::const_iterator;

public:
  _LIBCPP_HIDE_FROM_ABI constexpr explicit __code_point_view(_Iterator __first, _Iterator __last)
      : __first_(__first), __last_(__last) {}
   1fa50:	55                   	push   %rbp
   1fa51:	48 89 e5             	mov    %rsp,%rbp
   1fa54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fa58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fa5c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1fa60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa64:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fa68:	48 89 08             	mov    %rcx,(%rax)
   1fa6b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1fa6f:	48 89 48 08          	mov    %rcx,0x8(%rax)
   1fa73:	5d                   	pop    %rbp
   1fa74:	c3                   	ret
   1fa75:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1fa7c:	00 00 00 
   1fa7f:	90                   	nop

000000000001fa80 <_ZNKSt3__19__unicode17__code_point_viewIcE8__at_endB8nn210000Ev>:

  _LIBCPP_HIDE_FROM_ABI constexpr bool __at_end() const noexcept { return __first_ == __last_; }
   1fa80:	55                   	push   %rbp
   1fa81:	48 89 e5             	mov    %rsp,%rbp
   1fa84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fa88:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1fa8c:	48 8b 01             	mov    (%rcx),%rax
   1fa8f:	48 3b 41 08          	cmp    0x8(%rcx),%rax
   1fa93:	0f 94 c0             	sete   %al
   1fa96:	24 01                	and    $0x1,%al
   1fa98:	5d                   	pop    %rbp
   1fa99:	c3                   	ret
   1fa9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001faa0 <_ZNKSt3__19__unicode17__code_point_viewIcE10__positionB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr _Iterator __position() const noexcept { return __first_; }
   1faa0:	55                   	push   %rbp
   1faa1:	48 89 e5             	mov    %rsp,%rbp
   1faa4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1faa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1faac:	48 8b 00             	mov    (%rax),%rax
   1faaf:	5d                   	pop    %rbp
   1fab0:	c3                   	ret
   1fab1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1fab8:	00 00 00 
   1fabb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001fac0 <_ZNSt3__19__unicode17__code_point_viewIcE9__consumeB8nn210000Ev>:

  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr __consume_result __consume() noexcept {
   1fac0:	55                   	push   %rbp
   1fac1:	48 89 e5             	mov    %rsp,%rbp
   1fac4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1fac8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    _LIBCPP_ASSERT_INTERNAL(__first_ != __last_, "can't move beyond the end of input");
    return {static_cast<char32_t>(*__first_++)};
   1facc:	48 8b 01             	mov    (%rcx),%rax
   1facf:	48 89 c2             	mov    %rax,%rdx
   1fad2:	48 83 c2 01          	add    $0x1,%rdx
   1fad6:	48 89 11             	mov    %rdx,(%rcx)
   1fad9:	0f be 08             	movsbl (%rax),%ecx
   1fadc:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1fadf:	81 e1 ff ff ff 7f    	and    $0x7fffffff,%ecx
   1fae5:	25 00 00 00 80       	and    $0x80000000,%eax
   1faea:	09 c8                	or     %ecx,%eax
   1faec:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1faef:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1faf2:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   1faf7:	83 c8 00             	or     $0x0,%eax
   1fafa:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1fafd:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1fb00:	5d                   	pop    %rbp
   1fb01:	c3                   	ret
   1fb02:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1fb09:	00 00 00 
   1fb0c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001fb10 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE>:
    basic_string<_CharT>& __str, char32_t __value, bool __last_escaped, __escape_quotation_mark __mark) {
   1fb10:	55                   	push   %rbp
   1fb11:	48 89 e5             	mov    %rsp,%rbp
   1fb14:	48 83 ec 30          	sub    $0x30,%rsp
   1fb18:	88 d0                	mov    %dl,%al
   1fb1a:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1fb1e:	89 75 ec             	mov    %esi,-0x14(%rbp)
   1fb21:	24 01                	and    $0x1,%al
   1fb23:	88 45 eb             	mov    %al,-0x15(%rbp)
   1fb26:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  switch (__value) {
   1fb29:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1fb2c:	89 45 e0             	mov    %eax,-0x20(%rbp)
   1fb2f:	83 e8 09             	sub    $0x9,%eax
   1fb32:	74 55                	je     1fb89 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x79>
   1fb34:	eb 00                	jmp    1fb36 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x26>
   1fb36:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1fb39:	83 e8 0a             	sub    $0xa,%eax
   1fb3c:	74 73                	je     1fbb1 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0xa1>
   1fb3e:	eb 00                	jmp    1fb40 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x30>
   1fb40:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1fb43:	83 e8 0d             	sub    $0xd,%eax
   1fb46:	0f 84 8d 00 00 00    	je     1fbd9 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0xc9>
   1fb4c:	eb 00                	jmp    1fb4e <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x3e>
   1fb4e:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1fb51:	83 e8 20             	sub    $0x20,%eax
   1fb54:	0f 84 47 01 00 00    	je     1fca1 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x191>
   1fb5a:	eb 00                	jmp    1fb5c <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x4c>
   1fb5c:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1fb5f:	83 e8 22             	sub    $0x22,%eax
   1fb62:	0f 84 d8 00 00 00    	je     1fc40 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x130>
   1fb68:	eb 00                	jmp    1fb6a <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x5a>
   1fb6a:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1fb6d:	83 e8 27             	sub    $0x27,%eax
   1fb70:	0f 84 8b 00 00 00    	je     1fc01 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0xf1>
   1fb76:	eb 00                	jmp    1fb78 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x68>
   1fb78:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1fb7b:	83 e8 5c             	sub    $0x5c,%eax
   1fb7e:	0f 84 f8 00 00 00    	je     1fc7c <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x16c>
   1fb84:	e9 2d 01 00 00       	jmp    1fcb6 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x1a6>
    __str += _LIBCPP_STATICALLY_WIDEN(_CharT, "\\t");
   1fb89:	48 8d 3d 58 fb 00 00 	lea    0xfb58(%rip),%rdi        # 2f6e8 <.L.str.54>
   1fb90:	48 8d 35 e1 f1 00 00 	lea    0xf1e1(%rip),%rsi        # 2ed78 <.L.str.55>
   1fb97:	e8 94 02 00 00       	call   1fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>
   1fb9c:	48 89 c6             	mov    %rax,%rsi
   1fb9f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fba3:	e8 a8 02 00 00       	call   1fe50 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000EPKc>
    return true;
   1fba8:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1fbac:	e9 34 01 00 00       	jmp    1fce5 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x1d5>
    __str += _LIBCPP_STATICALLY_WIDEN(_CharT, "\\n");
   1fbb1:	48 8d 3d 33 fb 00 00 	lea    0xfb33(%rip),%rdi        # 2f6eb <.L.str.56>
   1fbb8:	48 8d 35 c5 f1 00 00 	lea    0xf1c5(%rip),%rsi        # 2ed84 <.L.str.57>
   1fbbf:	e8 6c 02 00 00       	call   1fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>
   1fbc4:	48 89 c6             	mov    %rax,%rsi
   1fbc7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fbcb:	e8 80 02 00 00       	call   1fe50 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000EPKc>
    return true;
   1fbd0:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1fbd4:	e9 0c 01 00 00       	jmp    1fce5 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x1d5>
    __str += _LIBCPP_STATICALLY_WIDEN(_CharT, "\\r");
   1fbd9:	48 8d 3d 0e fb 00 00 	lea    0xfb0e(%rip),%rdi        # 2f6ee <.L.str.58>
   1fbe0:	48 8d 35 a9 f1 00 00 	lea    0xf1a9(%rip),%rsi        # 2ed90 <.L.str.59>
   1fbe7:	e8 44 02 00 00       	call   1fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>
   1fbec:	48 89 c6             	mov    %rax,%rsi
   1fbef:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fbf3:	e8 58 02 00 00       	call   1fe50 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000EPKc>
    return true;
   1fbf8:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1fbfc:	e9 e4 00 00 00       	jmp    1fce5 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x1d5>
    if (__mark == __escape_quotation_mark::__apostrophe)
   1fc01:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
   1fc05:	75 21                	jne    1fc28 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x118>
      __str += _LIBCPP_STATICALLY_WIDEN(_CharT, R"(\')");
   1fc07:	48 8d 3d e3 fa 00 00 	lea    0xfae3(%rip),%rdi        # 2f6f1 <.L.str.60>
   1fc0e:	48 8d 35 87 f1 00 00 	lea    0xf187(%rip),%rsi        # 2ed9c <.L.str.61>
   1fc15:	e8 16 02 00 00       	call   1fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>
   1fc1a:	48 89 c6             	mov    %rax,%rsi
   1fc1d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fc21:	e8 2a 02 00 00       	call   1fe50 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000EPKc>
   1fc26:	eb 0f                	jmp    1fc37 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x127>
      __str += __value;
   1fc28:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1fc2b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fc2f:	0f be f0             	movsbl %al,%esi
   1fc32:	e8 69 fc ff ff       	call   1f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>
    return true;
   1fc37:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1fc3b:	e9 a5 00 00 00       	jmp    1fce5 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x1d5>
    if (__mark == __escape_quotation_mark::__double_quote)
   1fc40:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
   1fc44:	75 21                	jne    1fc67 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x157>
      __str += _LIBCPP_STATICALLY_WIDEN(_CharT, R"(\")");
   1fc46:	48 8d 3d a7 fa 00 00 	lea    0xfaa7(%rip),%rdi        # 2f6f4 <.L.str.62>
   1fc4d:	48 8d 35 54 f1 00 00 	lea    0xf154(%rip),%rsi        # 2eda8 <.L.str.63>
   1fc54:	e8 d7 01 00 00       	call   1fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>
   1fc59:	48 89 c6             	mov    %rax,%rsi
   1fc5c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fc60:	e8 eb 01 00 00       	call   1fe50 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000EPKc>
   1fc65:	eb 0f                	jmp    1fc76 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x166>
      __str += __value;
   1fc67:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1fc6a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fc6e:	0f be f0             	movsbl %al,%esi
   1fc71:	e8 2a fc ff ff       	call   1f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>
    return true;
   1fc76:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1fc7a:	eb 69                	jmp    1fce5 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x1d5>
    __str += _LIBCPP_STATICALLY_WIDEN(_CharT, R"(\\)");
   1fc7c:	48 8d 3d 74 fa 00 00 	lea    0xfa74(%rip),%rdi        # 2f6f7 <.L.str.64>
   1fc83:	48 8d 35 2a f1 00 00 	lea    0xf12a(%rip),%rsi        # 2edb4 <.L.str.65>
   1fc8a:	e8 a1 01 00 00       	call   1fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>
   1fc8f:	48 89 c6             	mov    %rax,%rsi
   1fc92:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fc96:	e8 b5 01 00 00       	call   1fe50 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000EPKc>
    return true;
   1fc9b:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1fc9f:	eb 44                	jmp    1fce5 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x1d5>
    __str += __value;
   1fca1:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1fca4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fca8:	0f be f0             	movsbl %al,%esi
   1fcab:	e8 f0 fb ff ff       	call   1f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>
    return true;
   1fcb0:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1fcb4:	eb 2f                	jmp    1fce5 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDibNS0_23__escape_quotation_markE+0x1d5>
  return __formatter::__is_escaped_sequence_written(__str, __last_escaped, __formatter::__to_char32(__value));
   1fcb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fcba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1fcbe:	8a 45 eb             	mov    -0x15(%rbp),%al
   1fcc1:	88 45 df             	mov    %al,-0x21(%rbp)
   1fcc4:	8b 7d ec             	mov    -0x14(%rbp),%edi
   1fcc7:	e8 24 02 00 00       	call   1fef0 <_ZNSt3__111__formatter11__to_char32B8nn210000IDiEEDiT_>
   1fccc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   1fcd0:	89 c2                	mov    %eax,%edx
   1fcd2:	8a 45 df             	mov    -0x21(%rbp),%al
   1fcd5:	0f b6 f0             	movzbl %al,%esi
   1fcd8:	83 e6 01             	and    $0x1,%esi
   1fcdb:	e8 a0 01 00 00       	call   1fe80 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi>
   1fce0:	24 01                	and    $0x1,%al
   1fce2:	88 45 ff             	mov    %al,-0x1(%rbp)
}
   1fce5:	8a 45 ff             	mov    -0x1(%rbp),%al
   1fce8:	24 01                	and    $0x1,%al
   1fcea:	48 83 c4 30          	add    $0x30,%rsp
   1fcee:	5d                   	pop    %rbp
   1fcef:	c3                   	ret

000000000001fcf0 <_ZNKSt3__16ranges6__copyclB8nn210000ITkNS_14input_iteratorEPKcTkNS_12sentinel_forIT_EES4_TkNS_20weakly_incrementableENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEQ19indirectly_copyableIS6_T1_EEENS0_13in_out_resultIS6_SF_EES6_T0_SF_>:

struct __copy {
  template <input_iterator _InIter, sentinel_for<_InIter> _Sent, weakly_incrementable _OutIter>
    requires indirectly_copyable<_InIter, _OutIter>
  _LIBCPP_HIDE_FROM_ABI constexpr copy_result<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
   1fcf0:	55                   	push   %rbp
   1fcf1:	48 89 e5             	mov    %rsp,%rbp
   1fcf4:	48 83 ec 60          	sub    $0x60,%rsp
   1fcf8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1fcfc:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   1fd00:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   1fd04:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   1fd08:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    auto __ret = std::__copy(std::move(__first), std::move(__last), std::move(__result));
   1fd0c:	e8 4f cb ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1fd11:	48 8b 00             	mov    (%rax),%rax
   1fd14:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1fd18:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   1fd1c:	e8 3f cb ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1fd21:	48 8b 00             	mov    (%rax),%rax
   1fd24:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1fd28:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   1fd2c:	e8 7f 0c 00 00       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   1fd31:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   1fd35:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   1fd39:	48 8b 00             	mov    (%rax),%rax
   1fd3c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1fd40:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1fd44:	e8 d7 15 00 00       	call   21320 <_ZNSt3__16__copyB8nn210000IPKcS2_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESC_T0_SD_>
   1fd49:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1fd4d:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   1fd51:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   1fd55:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1fd59:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    return {std::move(__ret.first), std::move(__ret.second)};
   1fd5d:	e8 fe ca ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1fd62:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   1fd66:	48 8b 00             	mov    (%rax),%rax
   1fd69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1fd6d:	e8 3e 0c 00 00       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   1fd72:	48 8b 00             	mov    (%rax),%rax
   1fd75:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fd79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fd7d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fd81:	48 83 c4 60          	add    $0x60,%rsp
   1fd85:	5d                   	pop    %rbp
   1fd86:	c3                   	ret
   1fd87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1fd8e:	00 00 

000000000001fd90 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2B8nn210000ERS6_>:
      : container(std::addressof(__x)) {}
   1fd90:	55                   	push   %rbp
   1fd91:	48 89 e5             	mov    %rsp,%rbp
   1fd94:	48 83 ec 20          	sub    $0x20,%rsp
   1fd98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fd9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fda0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fda4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1fda8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fdac:	e8 bf 17 00 00       	call   21570 <_ZNSt3__19addressofB8nn210000INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEPT_RS7_>
   1fdb1:	48 89 c1             	mov    %rax,%rcx
   1fdb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fdb8:	48 89 08             	mov    %rcx,(%rax)
   1fdbb:	48 83 c4 20          	add    $0x20,%rsp
   1fdbf:	5d                   	pop    %rbp
   1fdc0:	c3                   	ret
   1fdc1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1fdc8:	00 00 00 
   1fdcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001fdd0 <_ZNKSt3__16ranges10__for_eachclB8nn210000ITkNS_14input_iteratorEPKcTkNS_12sentinel_forIT_EES4_NS_8identityETkNS_26indirectly_unary_invocableINS_16__projected_implIS6_T1_E6__typeEEEZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIS6_NS_11char_traitsIS6_EENS_9allocatorIS6_EEEENS_17basic_string_viewIS6_SH_EENSD_23__escape_quotation_markEEUlcE_EENS0_13in_fun_resultIS6_T2_EES6_T0_SR_SA_>:
  template <input_iterator _Iter,
            sentinel_for<_Iter> _Sent,
            class _Proj = identity,
            indirectly_unary_invocable<projected<_Iter, _Proj>> _Func>
  _LIBCPP_HIDE_FROM_ABI constexpr for_each_result<_Iter, _Func>
  operator()(_Iter __first, _Sent __last, _Func __func, _Proj __proj = {}) const {
   1fdd0:	55                   	push   %rbp
   1fdd1:	48 89 e5             	mov    %rsp,%rbp
   1fdd4:	48 83 ec 40          	sub    $0x40,%rsp
   1fdd8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   1fddc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1fde0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1fde4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1fde8:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    return __for_each_impl(std::move(__first), std::move(__last), __func, __proj);
   1fdec:	e8 6f ca ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1fdf1:	48 8b 00             	mov    (%rax),%rax
   1fdf4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1fdf8:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
   1fdfc:	e8 5f ca ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   1fe01:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1fe05:	48 8b 30             	mov    (%rax),%rsi
   1fe08:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   1fe0c:	48 8d 4d e7          	lea    -0x19(%rbp),%rcx
   1fe10:	e8 6b 17 00 00       	call   21580 <_ZNSt3__16ranges10__for_each15__for_each_implB8nn210000IPKcS4_NS_8identityEZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS9_EENS_9allocatorIS9_EEEENS_17basic_string_viewIS9_SB_EENS6_23__escape_quotation_markEEUlcE_EENS0_13in_fun_resultIS9_T2_EES9_T0_RSL_RT1_>
   1fe15:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1fe19:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1fe1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fe21:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fe25:	48 83 c4 40          	add    $0x40,%rsp
   1fe29:	5d                   	pop    %rbp
   1fe2a:	c3                   	ret
   1fe2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000001fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>:

#if _LIBCPP_STD_VER >= 20

#  if _LIBCPP_HAS_WIDE_CHARACTERS
template <__fmt_char_type _CharT>
_LIBCPP_HIDE_FROM_ABI constexpr const _CharT* __statically_widen(const char* __str, const wchar_t* __wstr) {
   1fe30:	55                   	push   %rbp
   1fe31:	48 89 e5             	mov    %rsp,%rbp
   1fe34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fe38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  if constexpr (same_as<_CharT, char>)
    return __str;
   1fe3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe40:	5d                   	pop    %rbp
   1fe41:	c3                   	ret
   1fe42:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1fe49:	00 00 00 
   1fe4c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001fe50 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000EPKc>:
  operator+=(const value_type* _LIBCPP_DIAGNOSE_NULLPTR __s) {
   1fe50:	55                   	push   %rbp
   1fe51:	48 89 e5             	mov    %rsp,%rbp
   1fe54:	48 83 ec 10          	sub    $0x10,%rsp
   1fe58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fe5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fe60:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return append(__s);
   1fe64:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1fe68:	e8 e3 87 ff ff       	call   18650 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc>
   1fe6d:	48 83 c4 10          	add    $0x10,%rsp
   1fe71:	5d                   	pop    %rbp
   1fe72:	c3                   	ret
   1fe73:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1fe7a:	00 00 00 
   1fe7d:	0f 1f 00             	nopl   (%rax)

000000000001fe80 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi>:
__is_escaped_sequence_written(basic_string<_CharT>& __str, bool __last_escaped, char32_t __value) {
   1fe80:	55                   	push   %rbp
   1fe81:	48 89 e5             	mov    %rsp,%rbp
   1fe84:	48 83 ec 20          	sub    $0x20,%rsp
   1fe88:	40 88 f0             	mov    %sil,%al
   1fe8b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1fe8f:	24 01                	and    $0x1,%al
   1fe91:	88 45 ef             	mov    %al,-0x11(%rbp)
   1fe94:	89 55 e8             	mov    %edx,-0x18(%rbp)
  if (__value > 127)
   1fe97:	83 7d e8 7f          	cmpl   $0x7f,-0x18(%rbp)
   1fe9b:	76 06                	jbe    1fea3 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi+0x23>
    return false;
   1fe9d:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1fea1:	eb 36                	jmp    1fed9 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi+0x59>
  if (!__escaped_output_table::__needs_escape(__value))
   1fea3:	8b 7d e8             	mov    -0x18(%rbp),%edi
   1fea6:	e8 55 00 00 00       	call   1ff00 <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi>
   1feab:	a8 01                	test   $0x1,%al
   1fead:	75 1a                	jne    1fec9 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi+0x49>
    if (!__last_escaped || __extended_grapheme_custer_property_boundary::__get_property(__value) !=
   1feaf:	f6 45 ef 01          	testb  $0x1,-0x11(%rbp)
   1feb3:	74 0c                	je     1fec1 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi+0x41>
   1feb5:	8b 7d e8             	mov    -0x18(%rbp),%edi
   1feb8:	e8 13 01 00 00       	call   1ffd0 <_ZNSt3__144__extended_grapheme_custer_property_boundary14__get_propertyB8nn210000EDi>
   1febd:	3c 02                	cmp    $0x2,%al
   1febf:	74 06                	je     1fec7 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi+0x47>
      return false;
   1fec1:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1fec5:	eb 12                	jmp    1fed9 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi+0x59>
                               __extended_grapheme_custer_property_boundary::__property::__Extend)
   1fec7:	eb 00                	jmp    1fec9 <_ZNSt3__111__formatter29__is_escaped_sequence_writtenB8nn210000IcEEbRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEbDi+0x49>
  __formatter::__write_well_formed_escaped_code_unit(__str, __value);
   1fec9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1fecd:	8b 75 e8             	mov    -0x18(%rbp),%esi
   1fed0:	e8 ab 01 00 00       	call   20080 <_ZNSt3__111__formatter37__write_well_formed_escaped_code_unitB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDi>
  return true;
   1fed5:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
}
   1fed9:	8a 45 ff             	mov    -0x1(%rbp),%al
   1fedc:	24 01                	and    $0x1,%al
   1fede:	48 83 c4 20          	add    $0x20,%rsp
   1fee2:	5d                   	pop    %rbp
   1fee3:	c3                   	ret
   1fee4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1feeb:	00 00 00 
   1feee:	66 90                	xchg   %ax,%ax

000000000001fef0 <_ZNSt3__111__formatter11__to_char32B8nn210000IDiEEDiT_>:
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr char32_t __to_char32(_CharT __value) {
   1fef0:	55                   	push   %rbp
   1fef1:	48 89 e5             	mov    %rsp,%rbp
   1fef4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  return static_cast<make_unsigned_t<_CharT>>(__value);
   1fef7:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1fefa:	5d                   	pop    %rbp
   1fefb:	c3                   	ret
   1fefc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001ff00 <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi>:
/// unconditionally. This is also manually coded. See the generation script for
/// more details.

///
/// \\pre The code point is a valid Unicode code point.
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr bool __needs_escape(const char32_t __code_point) noexcept {
   1ff00:	55                   	push   %rbp
   1ff01:	48 89 e5             	mov    %rsp,%rbp
   1ff04:	48 83 ec 30          	sub    $0x30,%rsp
   1ff08:	89 7d f8             	mov    %edi,-0x8(%rbp)

  // The entries in the gap at the end.
  if(__code_point >= 0x000e0100 && __code_point <= 0x000e01ef)
   1ff0b:	81 7d f8 00 01 0e 00 	cmpl   $0xe0100,-0x8(%rbp)
   1ff12:	72 12                	jb     1ff26 <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi+0x26>
   1ff14:	81 7d f8 ef 01 0e 00 	cmpl   $0xe01ef,-0x8(%rbp)
   1ff1b:	77 09                	ja     1ff26 <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi+0x26>
     return false;
   1ff1d:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1ff21:	e9 92 00 00 00       	jmp    1ffb8 <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi+0xb8>

  // The entries at the end.
  if (__code_point >= 0x000323b0)
   1ff26:	81 7d f8 b0 23 03 00 	cmpl   $0x323b0,-0x8(%rbp)
   1ff2d:	72 09                	jb     1ff38 <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi+0x38>
    return true;
   1ff2f:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
   1ff33:	e9 80 00 00 00       	jmp    1ffb8 <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi+0xb8>

  ptrdiff_t __i = std::ranges::upper_bound(__entries, (__code_point << 14) | 0x3fffu) - __entries;
   1ff38:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1ff3b:	c1 e0 0e             	shl    $0xe,%eax
   1ff3e:	0d ff 3f 00 00       	or     $0x3fff,%eax
   1ff43:	89 45 ec             	mov    %eax,-0x14(%rbp)
   1ff46:	48 8d 3d 7c f8 00 00 	lea    0xf87c(%rip),%rdi        # 2f7c9 <_ZNSt3__16ranges5__cpo11upper_boundE>
   1ff4d:	48 8d 35 ec c4 00 00 	lea    0xc4ec(%rip),%rsi        # 2c440 <_ZNSt3__122__escaped_output_table9__entriesB8nn210000E>
   1ff54:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   1ff58:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
   1ff5c:	e8 6f 01 00 00       	call   200d0 <_ZNKSt3__16ranges13__upper_boundclB8nn210000ITkNS0_13forward_rangeERA735_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS0_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS0_4lessEEENS_7_IfImplIX14borrowed_rangeISD_EEE7_SelectISF_NS0_8danglingEEEOSD_RS9_T2_SG_>
   1ff61:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1ff65:	48 29 c8             	sub    %rcx,%rax
   1ff68:	48 c1 f8 02          	sar    $0x2,%rax
   1ff6c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  if (__i == 0)
   1ff70:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1ff75:	75 06                	jne    1ff7d <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi+0x7d>
    return false;
   1ff77:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   1ff7b:	eb 3b                	jmp    1ffb8 <_ZNSt3__122__escaped_output_table14__needs_escapeB8nn210000EDi+0xb8>

  --__i;
   1ff7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ff81:	48 ff c8             	dec    %rax
   1ff84:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  uint32_t __upper_bound = (__entries[__i] >> 14) + (__entries[__i] & 0x3fffu);
   1ff88:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ff8c:	48 8d 05 ad c4 00 00 	lea    0xc4ad(%rip),%rax        # 2c440 <_ZNSt3__122__escaped_output_table9__entriesB8nn210000E>
   1ff93:	48 8d 0c 90          	lea    (%rax,%rdx,4),%rcx
   1ff97:	8b 04 90             	mov    (%rax,%rdx,4),%eax
   1ff9a:	c1 e8 0e             	shr    $0xe,%eax
   1ff9d:	8b 09                	mov    (%rcx),%ecx
   1ff9f:	81 e1 ff 3f 00 00    	and    $0x3fff,%ecx
   1ffa5:	01 c8                	add    %ecx,%eax
   1ffa7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  return __code_point <= __upper_bound;
   1ffaa:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1ffad:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
   1ffb0:	0f 96 c0             	setbe  %al
   1ffb3:	24 01                	and    $0x1,%al
   1ffb5:	88 45 ff             	mov    %al,-0x1(%rbp)
}
   1ffb8:	8a 45 ff             	mov    -0x1(%rbp),%al
   1ffbb:	24 01                	and    $0x1,%al
   1ffbd:	48 83 c4 30          	add    $0x30,%rsp
   1ffc1:	5d                   	pop    %rbp
   1ffc2:	c3                   	ret
   1ffc3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1ffca:	00 00 00 
   1ffcd:	0f 1f 00             	nopl   (%rax)

000000000001ffd0 <_ZNSt3__144__extended_grapheme_custer_property_boundary14__get_propertyB8nn210000EDi>:
    0x707b87f1,
    0x707f80f1};
// clang-format on

/// Returns the extended grapheme cluster bondary property of a code point.
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr __property __get_property(const char32_t __code_point) noexcept {
   1ffd0:	55                   	push   %rbp
   1ffd1:	48 89 e5             	mov    %rsp,%rbp
   1ffd4:	48 83 ec 30          	sub    $0x30,%rsp
   1ffd8:	89 7d f8             	mov    %edi,-0x8(%rbp)
  // be found.
  // The simple solution is to set the bits belonging to the property and
  // size. Then the upper bound for code point 3 will return the entry after
  // 0x1810. After moving to the previous entry the algorithm arrives at the
  // correct entry.
  ptrdiff_t __i = std::ranges::upper_bound(__entries, (__code_point << 11) | 0x7ffu) - __entries;
   1ffdb:	8b 45 f8             	mov    -0x8(%rbp),%eax
   1ffde:	c1 e0 0b             	shl    $0xb,%eax
   1ffe1:	0d ff 07 00 00       	or     $0x7ff,%eax
   1ffe6:	89 45 ec             	mov    %eax,-0x14(%rbp)
   1ffe9:	48 8d 3d d9 f7 00 00 	lea    0xf7d9(%rip),%rdi        # 2f7c9 <_ZNSt3__16ranges5__cpo11upper_boundE>
   1fff0:	48 8d 35 c9 cf 00 00 	lea    0xcfc9(%rip),%rsi        # 2cfc0 <_ZNSt3__144__extended_grapheme_custer_property_boundary9__entriesB8nn210000E>
   1fff7:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   1fffb:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
   1ffff:	e8 ac 04 00 00       	call   204b0 <_ZNKSt3__16ranges13__upper_boundclB8nn210000ITkNS0_13forward_rangeERA1501_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS0_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS0_4lessEEENS_7_IfImplIX14borrowed_rangeISD_EEE7_SelectISF_NS0_8danglingEEEOSD_RS9_T2_SG_>
   20004:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   20008:	48 29 c8             	sub    %rcx,%rax
   2000b:	48 c1 f8 02          	sar    $0x2,%rax
   2000f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  if (__i == 0)
   20013:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   20018:	75 06                	jne    20020 <_ZNSt3__144__extended_grapheme_custer_property_boundary14__get_propertyB8nn210000EDi+0x50>
    return __property::__none;
   2001a:	c6 45 ff 10          	movb   $0x10,-0x1(%rbp)
   2001e:	eb 52                	jmp    20072 <_ZNSt3__144__extended_grapheme_custer_property_boundary14__get_propertyB8nn210000EDi+0xa2>

  --__i;
   20020:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20024:	48 ff c8             	dec    %rax
   20027:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  uint32_t __upper_bound = (__entries[__i] >> 11) + ((__entries[__i] >> 4) & 0x7f);
   2002b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2002f:	48 8d 05 8a cf 00 00 	lea    0xcf8a(%rip),%rax        # 2cfc0 <_ZNSt3__144__extended_grapheme_custer_property_boundary9__entriesB8nn210000E>
   20036:	48 8d 0c 90          	lea    (%rax,%rdx,4),%rcx
   2003a:	8b 04 90             	mov    (%rax,%rdx,4),%eax
   2003d:	c1 e8 0b             	shr    $0xb,%eax
   20040:	8b 09                	mov    (%rcx),%ecx
   20042:	c1 e9 04             	shr    $0x4,%ecx
   20045:	83 e1 7f             	and    $0x7f,%ecx
   20048:	01 c8                	add    %ecx,%eax
   2004a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  if (__code_point <= __upper_bound)
   2004d:	8b 45 f8             	mov    -0x8(%rbp),%eax
   20050:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
   20053:	77 19                	ja     2006e <_ZNSt3__144__extended_grapheme_custer_property_boundary14__get_propertyB8nn210000EDi+0x9e>
    return static_cast<__property>(__entries[__i] & 0xf);
   20055:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   20059:	48 8d 05 60 cf 00 00 	lea    0xcf60(%rip),%rax        # 2cfc0 <_ZNSt3__144__extended_grapheme_custer_property_boundary9__entriesB8nn210000E>
   20060:	48 8d 04 88          	lea    (%rax,%rcx,4),%rax
   20064:	8b 00                	mov    (%rax),%eax
   20066:	83 e0 0f             	and    $0xf,%eax
   20069:	88 45 ff             	mov    %al,-0x1(%rbp)
   2006c:	eb 04                	jmp    20072 <_ZNSt3__144__extended_grapheme_custer_property_boundary14__get_propertyB8nn210000EDi+0xa2>

  return __property::__none;
   2006e:	c6 45 ff 10          	movb   $0x10,-0x1(%rbp)
}
   20072:	8a 45 ff             	mov    -0x1(%rbp),%al
   20075:	48 83 c4 30          	add    $0x30,%rsp
   20079:	5d                   	pop    %rbp
   2007a:	c3                   	ret
   2007b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000020080 <_ZNSt3__111__formatter37__write_well_formed_escaped_code_unitB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDi>:
_LIBCPP_HIDE_FROM_ABI void __write_well_formed_escaped_code_unit(basic_string<_CharT>& __str, char32_t __value) {
   20080:	55                   	push   %rbp
   20081:	48 89 e5             	mov    %rsp,%rbp
   20084:	48 83 ec 20          	sub    $0x20,%rsp
   20088:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2008c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  __formatter::__write_escaped_code_unit(__str, __value, _LIBCPP_STATICALLY_WIDEN(_CharT, "\\u{"));
   2008f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20093:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20097:	8b 45 f4             	mov    -0xc(%rbp),%eax
   2009a:	89 45 f0             	mov    %eax,-0x10(%rbp)
   2009d:	48 8d 3d 56 f6 00 00 	lea    0xf656(%rip),%rdi        # 2f6fa <.L.str.66>
   200a4:	48 8d 35 15 ed 00 00 	lea    0xed15(%rip),%rsi        # 2edc0 <.L.str.67>
   200ab:	e8 80 fd ff ff       	call   1fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>
   200b0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   200b4:	8b 75 f0             	mov    -0x10(%rbp),%esi
   200b7:	48 89 c2             	mov    %rax,%rdx
   200ba:	e8 21 06 00 00       	call   206e0 <_ZNSt3__111__formatter25__write_escaped_code_unitB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDiPKS3_>
}
   200bf:	48 83 c4 20          	add    $0x20,%rsp
   200c3:	5d                   	pop    %rbp
   200c4:	c3                   	ret
   200c5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   200cc:	00 00 00 
   200cf:	90                   	nop

00000000000200d0 <_ZNKSt3__16ranges13__upper_boundclB8nn210000ITkNS0_13forward_rangeERA735_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS0_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS0_4lessEEENS_7_IfImplIX14borrowed_rangeISD_EEE7_SelectISF_NS0_8danglingEEEOSD_RS9_T2_SG_>:
  template <forward_range _Range,
            class _Type,
            class _Proj                                                                          = identity,
            indirect_strict_weak_order<const _Type*, projected<iterator_t<_Range>, _Proj>> _Comp = ranges::less>
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr borrowed_iterator_t<_Range>
  operator()(_Range&& __r, const _Type& __value, _Comp __comp = {}, _Proj __proj = {}) const {
   200d0:	55                   	push   %rbp
   200d1:	48 89 e5             	mov    %rsp,%rbp
   200d4:	48 83 ec 30          	sub    $0x30,%rsp
   200d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   200dc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   200e0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    auto __comp_lhs_rhs_swapped = [&](const auto& __lhs, const auto& __rhs) -> bool {
   200e4:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   200e8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      return !std::invoke(__comp, __rhs, __lhs);
    };

    return std::__lower_bound<_RangeAlgPolicy>(
        ranges::begin(__r), ranges::end(__r), __value, __comp_lhs_rhs_swapped, __proj);
   200ec:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   200f0:	48 8d 3d d3 f6 00 00 	lea    0xf6d3(%rip),%rdi        # 2f7ca <_ZNSt3__16ranges5__cpo5beginE>
   200f7:	e8 94 00 00 00       	call   20190 <_ZNKSt3__16ranges7__begin4__fnclB8nn210000IKjLm735EEEDaRAT0__T_QgestS5_Li0E>
   200fc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   20100:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   20104:	48 8d 3d c0 f6 00 00 	lea    0xf6c0(%rip),%rdi        # 2f7cb <_ZNSt3__16ranges5__cpo3endE>
   2010b:	e8 a0 00 00 00       	call   201b0 <_ZNKSt3__16ranges5__end4__fnclB8nn210000IKjLm735EEEDaRAT0__T_QgestS5_Li0E>
   20110:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   20114:	48 89 c6             	mov    %rax,%rsi
   20117:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2011b:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   2011f:	4c 8d 45 fe          	lea    -0x2(%rbp),%r8
    return std::__lower_bound<_RangeAlgPolicy>(
   20123:	e8 08 00 00 00       	call   20130 <_ZNSt3__113__lower_boundB8nn210000INS_15_RangeAlgPolicyEPKjS3_jNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_SJ_RKSU_RT4_RT3_>
   20128:	48 83 c4 30          	add    $0x30,%rsp
   2012c:	5d                   	pop    %rbp
   2012d:	c3                   	ret
   2012e:	66 90                	xchg   %ax,%ax

0000000000020130 <_ZNSt3__113__lower_boundB8nn210000INS_15_RangeAlgPolicyEPKjS3_jNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_SJ_RKSU_RT4_RT3_>:
  return __first;
}

template <class _AlgPolicy, class _ForwardIterator, class _Sent, class _Type, class _Proj, class _Comp>
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _ForwardIterator
__lower_bound(_ForwardIterator __first, _Sent __last, const _Type& __value, _Comp& __comp, _Proj& __proj) {
   20130:	55                   	push   %rbp
   20131:	48 89 e5             	mov    %rsp,%rbp
   20134:	48 83 ec 30          	sub    $0x30,%rsp
   20138:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2013c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20140:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20144:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   20148:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  const auto __dist = _IterOps<_AlgPolicy>::distance(__first, __last);
   2014c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20150:	48 8d 3d 75 f6 00 00 	lea    0xf675(%rip),%rdi        # 2f7cc <_ZNSt3__18_IterOpsINS_15_RangeAlgPolicyEE8distanceE>
   20157:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
   2015b:	e8 70 00 00 00       	call   201d0 <_ZNKSt3__16ranges10__distanceclB8nn210000IRPKjTkNS_18sized_sentinel_forIu7__decayIT_EEES4_EENS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS7_EEEEE5valueENS_20incrementable_traitsISB_EESC_E4type15difference_typeEOS7_T0_>
   20160:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  return std::__lower_bound_bisecting<_AlgPolicy>(__first, __value, __dist, __comp, __proj);
   20164:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   20168:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   2016c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   20170:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   20174:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
   20178:	e8 83 00 00 00       	call   20200 <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_>
   2017d:	48 83 c4 30          	add    $0x30,%rsp
   20181:	5d                   	pop    %rbp
   20182:	c3                   	ret
   20183:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2018a:	00 00 00 
   2018d:	0f 1f 00             	nopl   (%rax)

0000000000020190 <_ZNKSt3__16ranges7__begin4__fnclB8nn210000IKjLm735EEEDaRAT0__T_QgestS5_Li0E>:
  }

  template <class _Tp, size_t _Np>
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr auto operator()(_Tp (&__t)[_Np]) const noexcept
    requires(sizeof(_Tp) >= 0) // Disallow incomplete element types.
  {
   20190:	55                   	push   %rbp
   20191:	48 89 e5             	mov    %rsp,%rbp
   20194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20198:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __t + 0;
   2019c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   201a0:	5d                   	pop    %rbp
   201a1:	c3                   	ret
   201a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   201a9:	00 00 00 
   201ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000201b0 <_ZNKSt3__16ranges5__end4__fnclB8nn210000IKjLm735EEEDaRAT0__T_QgestS5_Li0E>:

struct __fn {
  template <class _Tp, size_t _Np>
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr auto operator()(_Tp (&__t)[_Np]) const noexcept
    requires(sizeof(_Tp) >= 0) // Disallow incomplete element types.
  {
   201b0:	55                   	push   %rbp
   201b1:	48 89 e5             	mov    %rsp,%rbp
   201b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   201b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __t + _Np;
   201bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   201c0:	48 05 7c 0b 00 00    	add    $0xb7c,%rax
   201c6:	5d                   	pop    %rbp
   201c7:	c3                   	ret
   201c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   201cf:	00 

00000000000201d0 <_ZNKSt3__16ranges10__distanceclB8nn210000IRPKjTkNS_18sized_sentinel_forIu7__decayIT_EEES4_EENS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS7_EEEEE5valueENS_20incrementable_traitsISB_EESC_E4type15difference_typeEOS7_T0_>:
    }
    return __n;
  }

  template <class _Ip, sized_sentinel_for<decay_t<_Ip>> _Sp>
  _LIBCPP_HIDE_FROM_ABI constexpr iter_difference_t<_Ip> operator()(_Ip&& __first, _Sp __last) const {
   201d0:	55                   	push   %rbp
   201d1:	48 89 e5             	mov    %rsp,%rbp
   201d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   201d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   201dc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if constexpr (sized_sentinel_for<_Sp, __remove_cvref_t<_Ip>>) {
      return __last - __first;
   201e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   201e4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   201e8:	48 8b 09             	mov    (%rcx),%rcx
   201eb:	48 29 c8             	sub    %rcx,%rax
   201ee:	48 c1 f8 02          	sar    $0x2,%rax
   201f2:	5d                   	pop    %rbp
   201f3:	c3                   	ret
   201f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   201fb:	00 00 00 
   201fe:	66 90                	xchg   %ax,%ax

0000000000020200 <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_>:
    _Proj& __proj) {
   20200:	55                   	push   %rbp
   20201:	48 89 e5             	mov    %rsp,%rbp
   20204:	48 83 ec 40          	sub    $0x40,%rsp
   20208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2020c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20210:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20214:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   20218:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  while (__len != 0) {
   2021c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   20221:	0f 84 86 00 00 00    	je     202ad <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0xad>
    auto __l2 = std::__half_positive(__len);
   20227:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2022b:	e8 90 00 00 00       	call   202c0 <_ZNSt3__115__half_positiveB8nn210000IlTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEES2_S2_>
   20230:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    _Iter __m = __first;
   20234:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20238:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    _IterOps<_AlgPolicy>::advance(__m, __l2);
   2023c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   20240:	48 8d 3d 86 f5 00 00 	lea    0xf586(%rip),%rdi        # 2f7cd <_ZNSt3__18_IterOpsINS_15_RangeAlgPolicyEE7advanceE>
   20247:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
   2024b:	e8 90 00 00 00       	call   202e0 <_ZNKSt3__16ranges9__advanceclB8nn210000ITkNS_24input_or_output_iteratorEPKjEEvRT_NS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS5_EEEEE5valueENS_20incrementable_traitsIS9_EESA_E4type15difference_typeE>
    if (std::__invoke(__comp, std::__invoke(__proj, *__m), __value)) {
   20250:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20254:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   20258:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2025c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   20260:	e8 db 00 00 00       	call   20340 <_ZNSt3__18__invokeB8nn210000IRNS_8identityEJRKjEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS5_DpOS6_>
   20265:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   20269:	48 89 c6             	mov    %rax,%rsi
   2026c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20270:	e8 9b 00 00 00       	call   20310 <_ZNSt3__18__invokeB8nn210000IRZNKS_6ranges13__upper_boundclB8nn210000ITkNS1_13forward_rangeERA735_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS1_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS1_4lessEEENS_7_IfImplIX14borrowed_rangeISE_EEE7_SelectISG_NS1_8danglingEEEOSE_RSA_T2_SH_EUlRKSE_SR_E_JRS4_SX_EEEDTclclsr3stdE7declvalISE_EEspclsr3stdE7declvalIT0_EEEESQ_DpOSY_>
   20275:	a8 01                	test   $0x1,%al
   20277:	75 02                	jne    2027b <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0x7b>
   20279:	eb 25                	jmp    202a0 <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0xa0>
      __first = ++__m;
   2027b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2027f:	48 83 c0 04          	add    $0x4,%rax
   20283:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   20287:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __len -= __l2 + 1;
   2028b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2028f:	48 83 c1 01          	add    $0x1,%rcx
   20293:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20297:	48 29 c8             	sub    %rcx,%rax
   2029a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    } else {
   2029e:	eb 08                	jmp    202a8 <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0xa8>
      __len = __l2;
   202a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   202a4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  while (__len != 0) {
   202a8:	e9 6f ff ff ff       	jmp    2021c <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA735_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0x1c>
  return __first;
   202ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   202b1:	48 83 c4 40          	add    $0x40,%rsp
   202b5:	5d                   	pop    %rbp
   202b6:	c3                   	ret
   202b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   202be:	00 00 

00000000000202c0 <_ZNSt3__115__half_positiveB8nn210000IlTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEES2_S2_>:
_LIBCPP_BEGIN_NAMESPACE_STD

// Perform division by two quickly for positive integers (llvm.org/PR39129)

template <typename _Integral, __enable_if_t<is_integral<_Integral>::value, int> = 0>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Integral __half_positive(_Integral __value) {
   202c0:	55                   	push   %rbp
   202c1:	48 89 e5             	mov    %rsp,%rbp
   202c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Integral>(static_cast<__make_unsigned_t<_Integral> >(__value) / 2);
   202c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   202cc:	48 d1 e8             	shr    $1,%rax
   202cf:	5d                   	pop    %rbp
   202d0:	c3                   	ret
   202d1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   202d8:	00 00 00 
   202db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000202e0 <_ZNKSt3__16ranges9__advanceclB8nn210000ITkNS_24input_or_output_iteratorEPKjEEvRT_NS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS5_EEEEE5valueENS_20incrementable_traitsIS9_EESA_E4type15difference_typeE>:
  }

public:
  // Preconditions: If `I` does not model `bidirectional_iterator`, `n` is not negative.
  template <input_or_output_iterator _Ip>
  _LIBCPP_HIDE_FROM_ABI constexpr void operator()(_Ip& __i, iter_difference_t<_Ip> __n) const {
   202e0:	55                   	push   %rbp
   202e1:	48 89 e5             	mov    %rsp,%rbp
   202e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   202e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   202ec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    _LIBCPP_ASSERT_PEDANTIC(
        __n >= 0 || bidirectional_iterator<_Ip>, "If `n < 0`, then `bidirectional_iterator<I>` must be true.");

    // If `I` models `random_access_iterator`, equivalent to `i += n`.
    if constexpr (random_access_iterator<_Ip>) {
      __i += __n;
   202f0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   202f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   202f8:	48 c1 e1 02          	shl    $0x2,%rcx
   202fc:	48 03 08             	add    (%rax),%rcx
   202ff:	48 89 08             	mov    %rcx,(%rax)
      return;
   20302:	5d                   	pop    %rbp
   20303:	c3                   	ret
   20304:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2030b:	00 00 00 
   2030e:	66 90                	xchg   %ax,%ax

0000000000020310 <_ZNSt3__18__invokeB8nn210000IRZNKS_6ranges13__upper_boundclB8nn210000ITkNS1_13forward_rangeERA735_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS1_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS1_4lessEEENS_7_IfImplIX14borrowed_rangeISE_EEE7_SelectISG_NS1_8danglingEEEOSE_RSA_T2_SH_EUlRKSE_SR_E_JRS4_SX_EEEDTclclsr3stdE7declvalISE_EEspclsr3stdE7declvalIT0_EEEESQ_DpOSY_>:
   20310:	55                   	push   %rbp
   20311:	48 89 e5             	mov    %rsp,%rbp
   20314:	48 83 ec 20          	sub    $0x20,%rsp
   20318:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2031c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20320:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20324:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   20328:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2032c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20330:	e8 3b 00 00 00       	call   20370 <_ZZNKSt3__16ranges13__upper_boundclB8nn210000ITkNS0_13forward_rangeERA735_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS0_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS0_4lessEEENS_7_IfImplIX14borrowed_rangeISD_EEE7_SelectISF_NS0_8danglingEEEOSD_RS9_T2_SG_ENKUlRKSD_SQ_E_clIjjEEbST_SQ_>
   20335:	24 01                	and    $0x1,%al
   20337:	48 83 c4 20          	add    $0x20,%rsp
   2033b:	5d                   	pop    %rbp
   2033c:	c3                   	ret
   2033d:	0f 1f 00             	nopl   (%rax)

0000000000020340 <_ZNSt3__18__invokeB8nn210000IRNS_8identityEJRKjEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS5_DpOS6_>:
   20340:	55                   	push   %rbp
   20341:	48 89 e5             	mov    %rsp,%rbp
   20344:	48 83 ec 10          	sub    $0x10,%rsp
   20348:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2034c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20350:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   20354:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   20358:	e8 33 01 00 00       	call   20490 <_ZNKSt3__18identityclB8nn210000IRKjEEOT_S5_>
   2035d:	48 83 c4 10          	add    $0x10,%rsp
   20361:	5d                   	pop    %rbp
   20362:	c3                   	ret
   20363:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2036a:	00 00 00 
   2036d:	0f 1f 00             	nopl   (%rax)

0000000000020370 <_ZZNKSt3__16ranges13__upper_boundclB8nn210000ITkNS0_13forward_rangeERA735_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS0_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS0_4lessEEENS_7_IfImplIX14borrowed_rangeISD_EEE7_SelectISF_NS0_8danglingEEEOSD_RS9_T2_SG_ENKUlRKSD_SQ_E_clIjjEEbST_SQ_>:
    auto __comp_lhs_rhs_swapped = [&](const auto& __lhs, const auto& __rhs) -> bool {
   20370:	55                   	push   %rbp
   20371:	48 89 e5             	mov    %rsp,%rbp
   20374:	48 83 ec 20          	sub    $0x20,%rsp
   20378:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2037c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20380:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20384:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      return !std::invoke(__comp, __rhs, __lhs);
   20388:	48 8b 38             	mov    (%rax),%rdi
   2038b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   2038f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20393:	e8 18 00 00 00       	call   203b0 <_ZNSt3__16invokeB8nn210000IRNS_6ranges4lessEJRKjS5_EEENS_13invoke_resultIT_JDpT0_EE4typeEOS7_DpOS8_>
   20398:	34 ff                	xor    $0xff,%al
   2039a:	24 01                	and    $0x1,%al
   2039c:	48 83 c4 20          	add    $0x20,%rsp
   203a0:	5d                   	pop    %rbp
   203a1:	c3                   	ret
   203a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   203a9:	00 00 00 
   203ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000203b0 <_ZNSt3__16invokeB8nn210000IRNS_6ranges4lessEJRKjS5_EEENS_13invoke_resultIT_JDpT0_EE4typeEOS7_DpOS8_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   203b0:	55                   	push   %rbp
   203b1:	48 89 e5             	mov    %rsp,%rbp
   203b4:	48 83 ec 30          	sub    $0x30,%rsp
   203b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   203bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   203c0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   203c4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   203c8:	e8 63 00 00 00       	call   20430 <_ZNSt3__17forwardB8nn210000IRNS_6ranges4lessEEEOT_Ru20__remove_reference_tIS4_E>
   203cd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   203d1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   203d5:	e8 66 00 00 00       	call   20440 <_ZNSt3__17forwardB8nn210000IRKjEEOT_Ru20__remove_reference_tIS3_E>
   203da:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   203de:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   203e2:	e8 59 00 00 00       	call   20440 <_ZNSt3__17forwardB8nn210000IRKjEEOT_Ru20__remove_reference_tIS3_E>
   203e7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   203eb:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   203ef:	48 89 c2             	mov    %rax,%rdx
   203f2:	e8 09 00 00 00       	call   20400 <_ZNSt3__18__invokeB8nn210000IRNS_6ranges4lessEJRKjS5_EEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS6_DpOS7_>
   203f7:	24 01                	and    $0x1,%al
   203f9:	48 83 c4 30          	add    $0x30,%rsp
   203fd:	5d                   	pop    %rbp
   203fe:	c3                   	ret
   203ff:	90                   	nop

0000000000020400 <_ZNSt3__18__invokeB8nn210000IRNS_6ranges4lessEJRKjS5_EEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS6_DpOS7_>:
   20400:	55                   	push   %rbp
   20401:	48 89 e5             	mov    %rsp,%rbp
   20404:	48 83 ec 20          	sub    $0x20,%rsp
   20408:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2040c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20410:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20414:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   20418:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2041c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20420:	e8 2b 00 00 00       	call   20450 <_ZNKSt3__16ranges4lessclB8nn210000IRKjS4_Q20totally_ordered_withIT_T0_EEEbOS5_OS6_>
   20425:	24 01                	and    $0x1,%al
   20427:	48 83 c4 20          	add    $0x20,%rsp
   2042b:	5d                   	pop    %rbp
   2042c:	c3                   	ret
   2042d:	0f 1f 00             	nopl   (%rax)

0000000000020430 <_ZNSt3__17forwardB8nn210000IRNS_6ranges4lessEEEOT_Ru20__remove_reference_tIS4_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   20430:	55                   	push   %rbp
   20431:	48 89 e5             	mov    %rsp,%rbp
   20434:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   20438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2043c:	5d                   	pop    %rbp
   2043d:	c3                   	ret
   2043e:	66 90                	xchg   %ax,%ax

0000000000020440 <_ZNSt3__17forwardB8nn210000IRKjEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   20440:	55                   	push   %rbp
   20441:	48 89 e5             	mov    %rsp,%rbp
   20444:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   20448:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2044c:	5d                   	pop    %rbp
   2044d:	c3                   	ret
   2044e:	66 90                	xchg   %ax,%ax

0000000000020450 <_ZNKSt3__16ranges4lessclB8nn210000IRKjS4_Q20totally_ordered_withIT_T0_EEEbOS5_OS6_>:

struct less {
  template <class _Tp, class _Up>
    requires totally_ordered_with<_Tp, _Up>
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr bool operator()(_Tp&& __t, _Up&& __u) const
      noexcept(noexcept(bool(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))) {
   20450:	55                   	push   %rbp
   20451:	48 89 e5             	mov    %rsp,%rbp
   20454:	48 83 ec 20          	sub    $0x20,%rsp
   20458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2045c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20460:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
   20464:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   20468:	e8 d3 ff ff ff       	call   20440 <_ZNSt3__17forwardB8nn210000IRKjEEOT_Ru20__remove_reference_tIS3_E>
   2046d:	8b 00                	mov    (%rax),%eax
   2046f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   20472:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   20476:	e8 c5 ff ff ff       	call   20440 <_ZNSt3__17forwardB8nn210000IRKjEEOT_Ru20__remove_reference_tIS3_E>
   2047b:	48 89 c1             	mov    %rax,%rcx
   2047e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   20481:	3b 01                	cmp    (%rcx),%eax
   20483:	0f 92 c0             	setb   %al
   20486:	24 01                	and    $0x1,%al
   20488:	48 83 c4 20          	add    $0x20,%rsp
   2048c:	5d                   	pop    %rbp
   2048d:	c3                   	ret
   2048e:	66 90                	xchg   %ax,%ax

0000000000020490 <_ZNKSt3__18identityclB8nn210000IRKjEEOT_S5_>:

#if _LIBCPP_STD_VER >= 20

struct identity {
  template <class _Tp>
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr _Tp&& operator()(_Tp&& __t) const noexcept {
   20490:	55                   	push   %rbp
   20491:	48 89 e5             	mov    %rsp,%rbp
   20494:	48 83 ec 10          	sub    $0x10,%rsp
   20498:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2049c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return std::forward<_Tp>(__t);
   204a0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   204a4:	e8 97 ff ff ff       	call   20440 <_ZNSt3__17forwardB8nn210000IRKjEEOT_Ru20__remove_reference_tIS3_E>
   204a9:	48 83 c4 10          	add    $0x10,%rsp
   204ad:	5d                   	pop    %rbp
   204ae:	c3                   	ret
   204af:	90                   	nop

00000000000204b0 <_ZNKSt3__16ranges13__upper_boundclB8nn210000ITkNS0_13forward_rangeERA1501_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS0_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS0_4lessEEENS_7_IfImplIX14borrowed_rangeISD_EEE7_SelectISF_NS0_8danglingEEEOSD_RS9_T2_SG_>:
  operator()(_Range&& __r, const _Type& __value, _Comp __comp = {}, _Proj __proj = {}) const {
   204b0:	55                   	push   %rbp
   204b1:	48 89 e5             	mov    %rsp,%rbp
   204b4:	48 83 ec 30          	sub    $0x30,%rsp
   204b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   204bc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   204c0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    auto __comp_lhs_rhs_swapped = [&](const auto& __lhs, const auto& __rhs) -> bool {
   204c4:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   204c8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        ranges::begin(__r), ranges::end(__r), __value, __comp_lhs_rhs_swapped, __proj);
   204cc:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   204d0:	48 8d 3d f3 f2 00 00 	lea    0xf2f3(%rip),%rdi        # 2f7ca <_ZNSt3__16ranges5__cpo5beginE>
   204d7:	e8 94 00 00 00       	call   20570 <_ZNKSt3__16ranges7__begin4__fnclB8nn210000IKjLm1501EEEDaRAT0__T_QgestS5_Li0E>
   204dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   204e0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   204e4:	48 8d 3d e0 f2 00 00 	lea    0xf2e0(%rip),%rdi        # 2f7cb <_ZNSt3__16ranges5__cpo3endE>
   204eb:	e8 a0 00 00 00       	call   20590 <_ZNKSt3__16ranges5__end4__fnclB8nn210000IKjLm1501EEEDaRAT0__T_QgestS5_Li0E>
   204f0:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   204f4:	48 89 c6             	mov    %rax,%rsi
   204f7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   204fb:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   204ff:	4c 8d 45 fe          	lea    -0x2(%rbp),%r8
    return std::__lower_bound<_RangeAlgPolicy>(
   20503:	e8 08 00 00 00       	call   20510 <_ZNSt3__113__lower_boundB8nn210000INS_15_RangeAlgPolicyEPKjS3_jNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_SJ_RKSU_RT4_RT3_>
   20508:	48 83 c4 30          	add    $0x30,%rsp
   2050c:	5d                   	pop    %rbp
   2050d:	c3                   	ret
   2050e:	66 90                	xchg   %ax,%ax

0000000000020510 <_ZNSt3__113__lower_boundB8nn210000INS_15_RangeAlgPolicyEPKjS3_jNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_SJ_RKSU_RT4_RT3_>:
__lower_bound(_ForwardIterator __first, _Sent __last, const _Type& __value, _Comp& __comp, _Proj& __proj) {
   20510:	55                   	push   %rbp
   20511:	48 89 e5             	mov    %rsp,%rbp
   20514:	48 83 ec 30          	sub    $0x30,%rsp
   20518:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2051c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20520:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20524:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   20528:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  const auto __dist = _IterOps<_AlgPolicy>::distance(__first, __last);
   2052c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20530:	48 8d 3d 95 f2 00 00 	lea    0xf295(%rip),%rdi        # 2f7cc <_ZNSt3__18_IterOpsINS_15_RangeAlgPolicyEE8distanceE>
   20537:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
   2053b:	e8 90 fc ff ff       	call   201d0 <_ZNKSt3__16ranges10__distanceclB8nn210000IRPKjTkNS_18sized_sentinel_forIu7__decayIT_EEES4_EENS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS7_EEEEE5valueENS_20incrementable_traitsISB_EESC_E4type15difference_typeEOS7_T0_>
   20540:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  return std::__lower_bound_bisecting<_AlgPolicy>(__first, __value, __dist, __comp, __proj);
   20544:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   20548:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   2054c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   20550:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   20554:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
   20558:	e8 53 00 00 00       	call   205b0 <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_>
   2055d:	48 83 c4 30          	add    $0x30,%rsp
   20561:	5d                   	pop    %rbp
   20562:	c3                   	ret
   20563:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2056a:	00 00 00 
   2056d:	0f 1f 00             	nopl   (%rax)

0000000000020570 <_ZNKSt3__16ranges7__begin4__fnclB8nn210000IKjLm1501EEEDaRAT0__T_QgestS5_Li0E>:
  {
   20570:	55                   	push   %rbp
   20571:	48 89 e5             	mov    %rsp,%rbp
   20574:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20578:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __t + 0;
   2057c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20580:	5d                   	pop    %rbp
   20581:	c3                   	ret
   20582:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20589:	00 00 00 
   2058c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000020590 <_ZNKSt3__16ranges5__end4__fnclB8nn210000IKjLm1501EEEDaRAT0__T_QgestS5_Li0E>:
  {
   20590:	55                   	push   %rbp
   20591:	48 89 e5             	mov    %rsp,%rbp
   20594:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20598:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __t + _Np;
   2059c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   205a0:	48 05 74 17 00 00    	add    $0x1774,%rax
   205a6:	5d                   	pop    %rbp
   205a7:	c3                   	ret
   205a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   205af:	00 

00000000000205b0 <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_>:
    _Proj& __proj) {
   205b0:	55                   	push   %rbp
   205b1:	48 89 e5             	mov    %rsp,%rbp
   205b4:	48 83 ec 40          	sub    $0x40,%rsp
   205b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   205bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   205c0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   205c4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   205c8:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  while (__len != 0) {
   205cc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   205d1:	0f 84 86 00 00 00    	je     2065d <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0xad>
    auto __l2 = std::__half_positive(__len);
   205d7:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   205db:	e8 e0 fc ff ff       	call   202c0 <_ZNSt3__115__half_positiveB8nn210000IlTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEES2_S2_>
   205e0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    _Iter __m = __first;
   205e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   205e8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    _IterOps<_AlgPolicy>::advance(__m, __l2);
   205ec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   205f0:	48 8d 3d d6 f1 00 00 	lea    0xf1d6(%rip),%rdi        # 2f7cd <_ZNSt3__18_IterOpsINS_15_RangeAlgPolicyEE7advanceE>
   205f7:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
   205fb:	e8 e0 fc ff ff       	call   202e0 <_ZNKSt3__16ranges9__advanceclB8nn210000ITkNS_24input_or_output_iteratorEPKjEEvRT_NS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS5_EEEEE5valueENS_20incrementable_traitsIS9_EESA_E4type15difference_typeE>
    if (std::__invoke(__comp, std::__invoke(__proj, *__m), __value)) {
   20600:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20604:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   20608:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2060c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   20610:	e8 2b fd ff ff       	call   20340 <_ZNSt3__18__invokeB8nn210000IRNS_8identityEJRKjEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS5_DpOS6_>
   20615:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   20619:	48 89 c6             	mov    %rax,%rsi
   2061c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   20620:	e8 4b 00 00 00       	call   20670 <_ZNSt3__18__invokeB8nn210000IRZNKS_6ranges13__upper_boundclB8nn210000ITkNS1_13forward_rangeERA1501_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS1_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS1_4lessEEENS_7_IfImplIX14borrowed_rangeISE_EEE7_SelectISG_NS1_8danglingEEEOSE_RSA_T2_SH_EUlRKSE_SR_E_JRS4_SX_EEEDTclclsr3stdE7declvalISE_EEspclsr3stdE7declvalIT0_EEEESQ_DpOSY_>
   20625:	a8 01                	test   $0x1,%al
   20627:	75 02                	jne    2062b <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0x7b>
   20629:	eb 25                	jmp    20650 <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0xa0>
      __first = ++__m;
   2062b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2062f:	48 83 c0 04          	add    $0x4,%rax
   20633:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   20637:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __len -= __l2 + 1;
   2063b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2063f:	48 83 c1 01          	add    $0x1,%rcx
   20643:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20647:	48 29 c8             	sub    %rcx,%rax
   2064a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    } else {
   2064e:	eb 08                	jmp    20658 <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0xa8>
      __len = __l2;
   20650:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   20654:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  while (__len != 0) {
   20658:	e9 6f ff ff ff       	jmp    205cc <_ZNSt3__123__lower_bound_bisectingB8nn210000INS_15_RangeAlgPolicyEPKjjNS_8identityEZNKS_6ranges13__upper_boundclB8nn210000ITkNS5_13forward_rangeERA1501_S2_jS4_TkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS5_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS5_4lessEEENS_7_IfImplIX14borrowed_rangeISG_EEE7_SelectISI_NS5_8danglingEEEOSG_RSC_T2_SJ_EUlRKSG_ST_E_EESB_SB_RKSJ_NS_15iterator_traitsISB_E15difference_typeERT3_RSU_+0x1c>
  return __first;
   2065d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20661:	48 83 c4 40          	add    $0x40,%rsp
   20665:	5d                   	pop    %rbp
   20666:	c3                   	ret
   20667:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2066e:	00 00 

0000000000020670 <_ZNSt3__18__invokeB8nn210000IRZNKS_6ranges13__upper_boundclB8nn210000ITkNS1_13forward_rangeERA1501_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS1_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS1_4lessEEENS_7_IfImplIX14borrowed_rangeISE_EEE7_SelectISG_NS1_8danglingEEEOSE_RSA_T2_SH_EUlRKSE_SR_E_JRS4_SX_EEEDTclclsr3stdE7declvalISE_EEspclsr3stdE7declvalIT0_EEEESQ_DpOSY_>:
   20670:	55                   	push   %rbp
   20671:	48 89 e5             	mov    %rsp,%rbp
   20674:	48 83 ec 20          	sub    $0x20,%rsp
   20678:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2067c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20680:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20684:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   20688:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2068c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   20690:	e8 0b 00 00 00       	call   206a0 <_ZZNKSt3__16ranges13__upper_boundclB8nn210000ITkNS0_13forward_rangeERA1501_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS0_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS0_4lessEEENS_7_IfImplIX14borrowed_rangeISD_EEE7_SelectISF_NS0_8danglingEEEOSD_RS9_T2_SG_ENKUlRKSD_SQ_E_clIjjEEbST_SQ_>
   20695:	24 01                	and    $0x1,%al
   20697:	48 83 c4 20          	add    $0x20,%rsp
   2069b:	5d                   	pop    %rbp
   2069c:	c3                   	ret
   2069d:	0f 1f 00             	nopl   (%rax)

00000000000206a0 <_ZZNKSt3__16ranges13__upper_boundclB8nn210000ITkNS0_13forward_rangeERA1501_KjjNS_8identityETkNS_26indirect_strict_weak_orderIPKT0_NS_16__projected_implIDTclL_ZNS0_5__cpo5beginEEclsr3stdE7declvalIRT_EEEET1_E6__typeEEENS0_4lessEEENS_7_IfImplIX14borrowed_rangeISD_EEE7_SelectISF_NS0_8danglingEEEOSD_RS9_T2_SG_ENKUlRKSD_SQ_E_clIjjEEbST_SQ_>:
    auto __comp_lhs_rhs_swapped = [&](const auto& __lhs, const auto& __rhs) -> bool {
   206a0:	55                   	push   %rbp
   206a1:	48 89 e5             	mov    %rsp,%rbp
   206a4:	48 83 ec 20          	sub    $0x20,%rsp
   206a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   206ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   206b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   206b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      return !std::invoke(__comp, __rhs, __lhs);
   206b8:	48 8b 38             	mov    (%rax),%rdi
   206bb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   206bf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   206c3:	e8 e8 fc ff ff       	call   203b0 <_ZNSt3__16invokeB8nn210000IRNS_6ranges4lessEJRKjS5_EEENS_13invoke_resultIT_JDpT0_EE4typeEOS7_DpOS8_>
   206c8:	34 ff                	xor    $0xff,%al
   206ca:	24 01                	and    $0x1,%al
   206cc:	48 83 c4 20          	add    $0x20,%rsp
   206d0:	5d                   	pop    %rbp
   206d1:	c3                   	ret
   206d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   206d9:	00 00 00 
   206dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000206e0 <_ZNSt3__111__formatter25__write_escaped_code_unitB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDiPKS3_>:
__write_escaped_code_unit(basic_string<_CharT>& __str, char32_t __value, const _CharT* __prefix) {
   206e0:	55                   	push   %rbp
   206e1:	48 89 e5             	mov    %rsp,%rbp
   206e4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   206eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   206ef:	89 75 f4             	mov    %esi,-0xc(%rbp)
   206f2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  back_insert_iterator __out_it{__str};
   206f6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   206fa:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   206fe:	e8 8d f6 ff ff       	call   1fd90 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2B8nn210000ERS6_>
  std::ranges::copy(__prefix, __nul_terminator{}, __out_it);
   20703:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   20707:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2070b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2070f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   20713:	48 8d 3d ad f0 00 00 	lea    0xf0ad(%rip),%rdi        # 2f7c7 <_ZNSt3__16ranges5__cpo4copyE>
   2071a:	e8 81 00 00 00       	call   207a0 <_ZNKSt3__16ranges6__copyclB8nn210000ITkNS_14input_iteratorEPKcTkNS_12sentinel_forIT_EENS_11__formatter16__nul_terminatorETkNS_20weakly_incrementableENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEQ19indirectly_copyableIS6_T1_EEENS0_13in_out_resultIS6_SH_EES6_T0_SH_>
   2071f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   20723:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   20727:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
  to_chars_result __r = std::to_chars(std::begin(__buffer), std::end(__buffer), __value, 16);
   2072b:	e8 40 01 00 00       	call   20870 <_ZNSt3__15beginB8nn210000IcLm8EEEPT_RAT0__S1_>
   20730:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   20734:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   20738:	e8 43 01 00 00       	call   20880 <_ZNSt3__13endB8nn210000IcLm8EEEPT_RAT0__S1_>
   2073d:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   20741:	48 89 c6             	mov    %rax,%rsi
   20744:	8b 55 f4             	mov    -0xc(%rbp),%edx
   20747:	b9 10 00 00 00       	mov    $0x10,%ecx
   2074c:	e8 df 00 00 00       	call   20830 <_ZNSt3__18to_charsB8nn210000IDiTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_i>
   20751:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   20755:	89 55 b0             	mov    %edx,-0x50(%rbp)
   20758:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
  std::ranges::copy(std::begin(__buffer), __r.ptr, __out_it);
   2075c:	e8 0f 01 00 00       	call   20870 <_ZNSt3__15beginB8nn210000IcLm8EEEPT_RAT0__S1_>
   20761:	48 89 c6             	mov    %rax,%rsi
   20764:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   20768:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2076c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   20770:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   20774:	48 8d 3d 4c f0 00 00 	lea    0xf04c(%rip),%rdi        # 2f7c7 <_ZNSt3__16ranges5__cpo4copyE>
   2077b:	e8 20 01 00 00       	call   208a0 <_ZNKSt3__16ranges6__copyclB8nn210000ITkNS_14input_iteratorEPcTkNS_12sentinel_forIT_EES3_TkNS_20weakly_incrementableENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEQ19indirectly_copyableIS5_T1_EEENS0_13in_out_resultIS5_SE_EES5_T0_SE_>
   20780:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   20784:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  __str += _CharT('}');
   20788:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2078c:	be 7d 00 00 00       	mov    $0x7d,%esi
   20791:	e8 0a f1 ff ff       	call   1f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>
}
   20796:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   2079d:	5d                   	pop    %rbp
   2079e:	c3                   	ret
   2079f:	90                   	nop

00000000000207a0 <_ZNKSt3__16ranges6__copyclB8nn210000ITkNS_14input_iteratorEPKcTkNS_12sentinel_forIT_EENS_11__formatter16__nul_terminatorETkNS_20weakly_incrementableENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEQ19indirectly_copyableIS6_T1_EEENS0_13in_out_resultIS6_SH_EES6_T0_SH_>:
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
   207a0:	55                   	push   %rbp
   207a1:	48 89 e5             	mov    %rsp,%rbp
   207a4:	48 83 ec 60          	sub    $0x60,%rsp
   207a8:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   207ac:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   207b0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   207b4:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    auto __ret = std::__copy(std::move(__first), std::move(__last), std::move(__result));
   207b8:	e8 a3 c0 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   207bd:	48 8b 00             	mov    (%rax),%rax
   207c0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   207c4:	48 8d 7d ef          	lea    -0x11(%rbp),%rdi
   207c8:	e8 d3 01 00 00       	call   209a0 <_ZNSt3__14moveB8nn210000IRNS_11__formatter16__nul_terminatorEEEOu20__remove_reference_tIT_EOS4_>
   207cd:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   207d1:	e8 da 01 00 00       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   207d6:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   207da:	48 8b 00             	mov    (%rax),%rax
   207dd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   207e1:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   207e5:	e8 56 01 00 00       	call   20940 <_ZNSt3__16__copyB8nn210000IPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESE_T0_SF_>
   207ea:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   207ee:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   207f2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   207f6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   207fa:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    return {std::move(__ret.first), std::move(__ret.second)};
   207fe:	e8 5d c0 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20803:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   20807:	48 8b 00             	mov    (%rax),%rax
   2080a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2080e:	e8 9d 01 00 00       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20813:	48 8b 00             	mov    (%rax),%rax
   20816:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2081a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2081e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20822:	48 83 c4 60          	add    $0x60,%rsp
   20826:	5d                   	pop    %rbp
   20827:	c3                   	ret
   20828:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2082f:	00 

0000000000020830 <_ZNSt3__18to_charsB8nn210000IDiTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_i>:
to_chars(char* __first, char* __last, _Tp __value, int __base) {
   20830:	55                   	push   %rbp
   20831:	48 89 e5             	mov    %rsp,%rbp
   20834:	48 83 ec 30          	sub    $0x30,%rsp
   20838:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2083c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   20840:	89 55 dc             	mov    %edx,-0x24(%rbp)
   20843:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  return std::__to_chars_integral(__first, __last, static_cast<_Type>(__value), __base, is_signed<_Tp>());
   20846:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2084a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2084e:	8b 55 dc             	mov    -0x24(%rbp),%edx
   20851:	8b 4d d8             	mov    -0x28(%rbp),%ecx
   20854:	e8 a7 db ff ff       	call   1e400 <_ZNSt3__119__to_chars_integralB8nn210000IjEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE>
   20859:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2085d:	89 55 f8             	mov    %edx,-0x8(%rbp)
   20860:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20864:	8b 55 f8             	mov    -0x8(%rbp),%edx
   20867:	48 83 c4 30          	add    $0x30,%rsp
   2086b:	5d                   	pop    %rbp
   2086c:	c3                   	ret
   2086d:	0f 1f 00             	nopl   (%rax)

0000000000020870 <_ZNSt3__15beginB8nn210000IcLm8EEEPT_RAT0__S1_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp* begin(_Tp (&__array)[_Np]) _NOEXCEPT {
   20870:	55                   	push   %rbp
   20871:	48 89 e5             	mov    %rsp,%rbp
   20874:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __array;
   20878:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2087c:	5d                   	pop    %rbp
   2087d:	c3                   	ret
   2087e:	66 90                	xchg   %ax,%ax

0000000000020880 <_ZNSt3__13endB8nn210000IcLm8EEEPT_RAT0__S1_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp* end(_Tp (&__array)[_Np]) _NOEXCEPT {
   20880:	55                   	push   %rbp
   20881:	48 89 e5             	mov    %rsp,%rbp
   20884:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __array + _Np;
   20888:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2088c:	48 83 c0 08          	add    $0x8,%rax
   20890:	5d                   	pop    %rbp
   20891:	c3                   	ret
   20892:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20899:	00 00 00 
   2089c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000208a0 <_ZNKSt3__16ranges6__copyclB8nn210000ITkNS_14input_iteratorEPcTkNS_12sentinel_forIT_EES3_TkNS_20weakly_incrementableENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEQ19indirectly_copyableIS5_T1_EEENS0_13in_out_resultIS5_SE_EES5_T0_SE_>:
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
   208a0:	55                   	push   %rbp
   208a1:	48 89 e5             	mov    %rsp,%rbp
   208a4:	48 83 ec 60          	sub    $0x60,%rsp
   208a8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   208ac:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   208b0:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   208b4:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   208b8:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    auto __ret = std::__copy(std::move(__first), std::move(__last), std::move(__result));
   208bc:	e8 bf 8d ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   208c1:	48 8b 00             	mov    (%rax),%rax
   208c4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   208c8:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   208cc:	e8 af 8d ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   208d1:	48 8b 00             	mov    (%rax),%rax
   208d4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   208d8:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   208dc:	e8 cf 00 00 00       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   208e1:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   208e5:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   208e9:	48 8b 00             	mov    (%rax),%rax
   208ec:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   208f0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   208f4:	e8 b7 05 00 00       	call   20eb0 <_ZNSt3__16__copyB8nn210000IPcS1_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESB_T0_SC_>
   208f9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   208fd:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   20901:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   20905:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   20909:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    return {std::move(__ret.first), std::move(__ret.second)};
   2090d:	e8 6e 8d ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   20912:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   20916:	48 8b 00             	mov    (%rax),%rax
   20919:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2091d:	e8 8e 00 00 00       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20922:	48 8b 00             	mov    (%rax),%rax
   20925:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   20929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2092d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20931:	48 83 c4 60          	add    $0x60,%rsp
   20935:	5d                   	pop    %rbp
   20936:	c3                   	ret
   20937:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2093e:	00 00 

0000000000020940 <_ZNSt3__16__copyB8nn210000IPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESE_T0_SF_>:
__copy(_InIter __first, _Sent __last, _OutIter __result) {
   20940:	55                   	push   %rbp
   20941:	48 89 e5             	mov    %rsp,%rbp
   20944:	48 83 ec 40          	sub    $0x40,%rsp
   20948:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2094c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   20950:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  return std::__copy_move_unwrap_iters<__copy_impl>(std::move(__first), std::move(__last), std::move(__result));
   20954:	e8 07 bf ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20959:	48 8b 00             	mov    (%rax),%rax
   2095c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   20960:	48 8d 7d ef          	lea    -0x11(%rbp),%rdi
   20964:	e8 37 00 00 00       	call   209a0 <_ZNSt3__14moveB8nn210000IRNS_11__formatter16__nul_terminatorEEEOu20__remove_reference_tIT_EOS4_>
   20969:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2096d:	e8 3e 00 00 00       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20972:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   20976:	48 8b 00             	mov    (%rax),%rax
   20979:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2097d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   20981:	e8 3a 00 00 00       	call   209c0 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEETnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairISF_SG_EESF_T1_SG_>
   20986:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2098a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   2098e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20992:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20996:	48 83 c4 40          	add    $0x40,%rsp
   2099a:	5d                   	pop    %rbp
   2099b:	c3                   	ret
   2099c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000209a0 <_ZNSt3__14moveB8nn210000IRNS_11__formatter16__nul_terminatorEEEOu20__remove_reference_tIT_EOS4_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   209a0:	55                   	push   %rbp
   209a1:	48 89 e5             	mov    %rsp,%rbp
   209a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   209a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   209ac:	5d                   	pop    %rbp
   209ad:	c3                   	ret
   209ae:	66 90                	xchg   %ax,%ax

00000000000209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   209b0:	55                   	push   %rbp
   209b1:	48 89 e5             	mov    %rsp,%rbp
   209b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   209b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   209bc:	5d                   	pop    %rbp
   209bd:	c3                   	ret
   209be:	66 90                	xchg   %ax,%ax

00000000000209c0 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEETnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairISF_SG_EESF_T1_SG_>:
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
   209c0:	55                   	push   %rbp
   209c1:	48 89 e5             	mov    %rsp,%rbp
   209c4:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   209cb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   209cf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  auto __range  = std::__unwrap_range(__first, std::move(__last));
   209d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   209d7:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   209de:	48 8d 7d ef          	lea    -0x11(%rbp),%rdi
   209e2:	e8 b9 ff ff ff       	call   209a0 <_ZNSt3__14moveB8nn210000IRNS_11__formatter16__nul_terminatorEEEOu20__remove_reference_tIT_EOS4_>
   209e7:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
   209ee:	e8 ed 00 00 00       	call   20ae0 <_ZNSt3__114__unwrap_rangeB8nn210000IPKcNS_11__formatter16__nul_terminatorEEEDaT_T0_>
   209f3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   209f7:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
   209fb:	e8 60 be ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20a00:	48 8b 00             	mov    (%rax),%rax
   20a03:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   20a0a:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   20a0e:	e8 8d ff ff ff       	call   209a0 <_ZNSt3__14moveB8nn210000IRNS_11__formatter16__nul_terminatorEEEOu20__remove_reference_tIT_EOS4_>
   20a13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20a17:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   20a1b:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   20a1f:	e8 9c 01 00 00       	call   20bc0 <_ZNSt3__113__unwrap_iterB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_18__unwrap_iter_implIS8_Lb0EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalISC_EEEESC_>
   20a24:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   20a2b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   20a2f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   20a33:	48 8d 7d af          	lea    -0x51(%rbp),%rdi
   20a37:	e8 e4 00 00 00       	call   20b20 <_ZNKSt3__111__copy_implclB8nn210000IPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESF_T0_SG_>
   20a3c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   20a40:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
   20a44:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   20a4b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   20a4f:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   20a53:	e8 08 be ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20a58:	48 8b 00             	mov    (%rax),%rax
   20a5b:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   20a62:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   20a66:	e8 f5 bd ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20a6b:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   20a72:	48 8b 30             	mov    (%rax),%rsi
   20a75:	e8 c6 01 00 00       	call   20c40 <_ZNSt3__114__rewrap_rangeB8nn210000INS_11__formatter16__nul_terminatorEPKcS4_EET0_S5_T1_>
   20a7a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   20a7e:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
   20a82:	e8 29 ff ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20a87:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
   20a8e:	48 8b 00             	mov    (%rax),%rax
   20a91:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   20a95:	e8 16 ff ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20a9a:	48 8b 00             	mov    (%rax),%rax
   20a9d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   20aa4:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   20aa8:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   20aaf:	e8 cc 01 00 00       	call   20c80 <_ZNSt3__113__rewrap_iterB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEES8_NS_18__unwrap_iter_implIS8_Lb0EEEEET_SB_T0_>
   20ab4:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   20ab8:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
   20abc:	48 8d 75 88          	lea    -0x78(%rbp),%rsi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   20ac0:	e8 2b 01 00 00       	call   20bf0 <_ZNSt3__19make_pairB8nn210000IPKcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENSC_Iu7__decayIT0_EE4typeEEEOSD_OSH_>
   20ac5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   20ac9:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   20acd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20ad1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20ad5:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   20adc:	5d                   	pop    %rbp
   20add:	c3                   	ret
   20ade:	66 90                	xchg   %ax,%ax

0000000000020ae0 <_ZNSt3__114__unwrap_rangeB8nn210000IPKcNS_11__formatter16__nul_terminatorEEEDaT_T0_>:
_LIBCPP_HIDE_FROM_ABI constexpr auto __unwrap_range(_Iter __first, _Sent __last) {
   20ae0:	55                   	push   %rbp
   20ae1:	48 89 e5             	mov    %rsp,%rbp
   20ae4:	48 83 ec 30          	sub    $0x30,%rsp
   20ae8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   20aec:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  return __unwrap_range_impl<_Iter, _Sent>::__unwrap(std::move(__first), std::move(__last));
   20af0:	e8 6b bd ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20af5:	48 8b 00             	mov    (%rax),%rax
   20af8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   20afc:	48 8d 7d ef          	lea    -0x11(%rbp),%rdi
   20b00:	e8 9b fe ff ff       	call   209a0 <_ZNSt3__14moveB8nn210000IRNS_11__formatter16__nul_terminatorEEEOu20__remove_reference_tIT_EOS4_>
   20b05:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   20b09:	e8 c2 01 00 00       	call   20cd0 <_ZNSt3__119__unwrap_range_implIPKcNS_11__formatter16__nul_terminatorEE8__unwrapB8nn210000ES2_S4_>
   20b0e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   20b12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20b16:	48 83 c4 30          	add    $0x30,%rsp
   20b1a:	5d                   	pop    %rbp
   20b1b:	c3                   	ret
   20b1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000020b20 <_ZNKSt3__111__copy_implclB8nn210000IPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESF_T0_SG_>:
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
   20b20:	55                   	push   %rbp
   20b21:	48 89 e5             	mov    %rsp,%rbp
   20b24:	48 83 ec 50          	sub    $0x50,%rsp
   20b28:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   20b2c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   20b30:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    while (__first != __last) {
   20b34:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   20b38:	e8 33 02 00 00       	call   20d70 <_ZNSt3__111__formattereqB8nn210000IcEEbPKT_NS0_16__nul_terminatorE>
   20b3d:	34 ff                	xor    $0xff,%al
   20b3f:	a8 01                	test   $0x1,%al
   20b41:	75 02                	jne    20b45 <_ZNKSt3__111__copy_implclB8nn210000IPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESF_T0_SG_+0x25>
   20b43:	eb 34                	jmp    20b79 <_ZNKSt3__111__copy_implclB8nn210000IPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESF_T0_SG_+0x59>
      *__result = *__first;
   20b45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   20b49:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   20b4d:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   20b51:	e8 3a 02 00 00       	call   20d90 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeB8nn210000Ev>
   20b56:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   20b5a:	48 89 c7             	mov    %rax,%rdi
   20b5d:	e8 3e 02 00 00       	call   20da0 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEaSB8nn210000ERKc>
      ++__first;
   20b62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   20b66:	48 83 c0 01          	add    $0x1,%rax
   20b6a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   20b6e:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
      ++__result;
   20b72:	e8 69 02 00 00       	call   20de0 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppB8nn210000Ev>
    while (__first != __last) {
   20b77:	eb bb                	jmp    20b34 <_ZNKSt3__111__copy_implclB8nn210000IPKcNS_11__formatter16__nul_terminatorENS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESF_T0_SG_+0x14>
   20b79:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    return std::make_pair(std::move(__first), std::move(__result));
   20b7d:	e8 de bc ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20b82:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   20b86:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   20b8a:	e8 21 fe ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20b8f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   20b93:	48 89 c6             	mov    %rax,%rsi
   20b96:	e8 55 00 00 00       	call   20bf0 <_ZNSt3__19make_pairB8nn210000IPKcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENSC_Iu7__decayIT0_EE4typeEEEOSD_OSH_>
   20b9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   20b9f:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   20ba3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20ba7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20bab:	48 83 c4 50          	add    $0x50,%rsp
   20baf:	5d                   	pop    %rbp
   20bb0:	c3                   	ret
   20bb1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20bb8:	00 00 00 
   20bbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000020bc0 <_ZNSt3__113__unwrap_iterB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_18__unwrap_iter_implIS8_Lb0EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalISC_EEEESC_>:
__unwrap_iter(_Iter __i) _NOEXCEPT {
   20bc0:	55                   	push   %rbp
   20bc1:	48 89 e5             	mov    %rsp,%rbp
   20bc4:	48 83 ec 20          	sub    $0x20,%rsp
   20bc8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  return _Impl::__unwrap(__i);
   20bcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20bd0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20bd4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   20bd8:	e8 13 02 00 00       	call   20df0 <_ZNSt3__118__unwrap_iter_implINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEELb0EE8__unwrapB8nn210000ES8_>
   20bdd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   20be1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20be5:	48 83 c4 20          	add    $0x20,%rsp
   20be9:	5d                   	pop    %rbp
   20bea:	c3                   	ret
   20beb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000020bf0 <_ZNSt3__19make_pairB8nn210000IPKcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENSC_Iu7__decayIT0_EE4typeEEEOSD_OSH_>:
make_pair(_T1&& __t1, _T2&& __t2) {
   20bf0:	55                   	push   %rbp
   20bf1:	48 89 e5             	mov    %rsp,%rbp
   20bf4:	48 83 ec 30          	sub    $0x30,%rsp
   20bf8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20bfc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
   20c00:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   20c04:	e8 b7 be ff ff       	call   1cac0 <_ZNSt3__17forwardB8nn210000IPKcEEOT_Ru20__remove_reference_tIS3_E>
   20c09:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   20c0d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   20c11:	e8 fa 01 00 00       	call   20e10 <_ZNSt3__17forwardB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOT_Ru20__remove_reference_tIS9_E>
   20c16:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   20c1a:	48 89 c2             	mov    %rax,%rdx
   20c1d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   20c21:	e8 fa 01 00 00       	call   20e20 <_ZNSt3__14pairIPKcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEC2B8nn210000IS2_SA_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOSE_OSF_>
   20c26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20c2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20c2e:	48 83 c4 30          	add    $0x30,%rsp
   20c32:	5d                   	pop    %rbp
   20c33:	c3                   	ret
   20c34:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20c3b:	00 00 00 
   20c3e:	66 90                	xchg   %ax,%ax

0000000000020c40 <_ZNSt3__114__rewrap_rangeB8nn210000INS_11__formatter16__nul_terminatorEPKcS4_EET0_S5_T1_>:
_LIBCPP_HIDE_FROM_ABI constexpr _Iter __rewrap_range(_Iter __orig_iter, _Unwrapped __iter) {
   20c40:	55                   	push   %rbp
   20c41:	48 89 e5             	mov    %rsp,%rbp
   20c44:	48 83 ec 20          	sub    $0x20,%rsp
   20c48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20c4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20c50:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return __unwrap_range_impl<_Iter, _Sent>::__rewrap(std::move(__orig_iter), std::move(__iter));
   20c54:	e8 07 bc ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20c59:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20c5d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   20c61:	e8 fa bb ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20c66:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   20c6a:	48 8b 30             	mov    (%rax),%rsi
   20c6d:	e8 fe 01 00 00       	call   20e70 <_ZNSt3__119__unwrap_range_implIPKcNS_11__formatter16__nul_terminatorEE8__rewrapB8nn210000ERKS2_S2_Qntaa22random_access_iteratorIT_E18sized_sentinel_forIT0_S8_E>
   20c72:	48 83 c4 20          	add    $0x20,%rsp
   20c76:	5d                   	pop    %rbp
   20c77:	c3                   	ret
   20c78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   20c7f:	00 

0000000000020c80 <_ZNSt3__113__rewrap_iterB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEES8_NS_18__unwrap_iter_implIS8_Lb0EEEEET_SB_T0_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) _NOEXCEPT {
   20c80:	55                   	push   %rbp
   20c81:	48 89 e5             	mov    %rsp,%rbp
   20c84:	48 83 ec 30          	sub    $0x30,%rsp
   20c88:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   20c8c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   20c90:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
   20c94:	e8 17 fd ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20c99:	48 8b 00             	mov    (%rax),%rax
   20c9c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   20ca0:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   20ca4:	e8 07 fd ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20ca9:	48 8b 00             	mov    (%rax),%rax
   20cac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   20cb0:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   20cb4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   20cb8:	e8 d3 01 00 00       	call   20e90 <_ZNSt3__118__unwrap_iter_implINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEELb0EE8__rewrapB8nn210000ES8_S8_>
   20cbd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   20cc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20cc5:	48 83 c4 30          	add    $0x30,%rsp
   20cc9:	5d                   	pop    %rbp
   20cca:	c3                   	ret
   20ccb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000020cd0 <_ZNSt3__119__unwrap_range_implIPKcNS_11__formatter16__nul_terminatorEE8__unwrapB8nn210000ES2_S4_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr auto __unwrap(_Iter __first, _Sent __last) {
   20cd0:	55                   	push   %rbp
   20cd1:	48 89 e5             	mov    %rsp,%rbp
   20cd4:	48 83 ec 30          	sub    $0x30,%rsp
   20cd8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   20cdc:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    return pair{std::move(__first), std::move(__last)};
   20ce0:	e8 7b bb ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   20ce5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   20ce9:	48 8d 7d ef          	lea    -0x11(%rbp),%rdi
   20ced:	e8 ae fc ff ff       	call   209a0 <_ZNSt3__14moveB8nn210000IRNS_11__formatter16__nul_terminatorEEEOu20__remove_reference_tIT_EOS4_>
   20cf2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   20cf6:	48 89 c2             	mov    %rax,%rdx
   20cf9:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   20cfd:	e8 0e 00 00 00       	call   20d10 <_ZNSt3__14pairIPKcNS_11__formatter16__nul_terminatorEEC2B8nn210000IS2_S4_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS8_OS9_>
   20d02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20d06:	48 83 c4 30          	add    $0x30,%rsp
   20d0a:	5d                   	pop    %rbp
   20d0b:	c3                   	ret
   20d0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000020d10 <_ZNSt3__14pairIPKcNS_11__formatter16__nul_terminatorEEC2B8nn210000IS2_S4_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS8_OS9_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   20d10:	55                   	push   %rbp
   20d11:	48 89 e5             	mov    %rsp,%rbp
   20d14:	48 83 ec 20          	sub    $0x20,%rsp
   20d18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20d1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20d20:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20d24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20d28:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   20d2c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   20d30:	e8 8b bd ff ff       	call   1cac0 <_ZNSt3__17forwardB8nn210000IPKcEEOT_Ru20__remove_reference_tIS3_E>
   20d35:	48 89 c1             	mov    %rax,%rcx
   20d38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20d3c:	48 8b 09             	mov    (%rcx),%rcx
   20d3f:	48 89 08             	mov    %rcx,(%rax)
   20d42:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   20d46:	e8 15 00 00 00       	call   20d60 <_ZNSt3__17forwardB8nn210000INS_11__formatter16__nul_terminatorEEEOT_Ru20__remove_reference_tIS3_E>
  }
   20d4b:	48 83 c4 20          	add    $0x20,%rsp
   20d4f:	5d                   	pop    %rbp
   20d50:	c3                   	ret
   20d51:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20d58:	00 00 00 
   20d5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000020d60 <_ZNSt3__17forwardB8nn210000INS_11__formatter16__nul_terminatorEEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   20d60:	55                   	push   %rbp
   20d61:	48 89 e5             	mov    %rsp,%rbp
   20d64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   20d68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20d6c:	5d                   	pop    %rbp
   20d6d:	c3                   	ret
   20d6e:	66 90                	xchg   %ax,%ax

0000000000020d70 <_ZNSt3__111__formattereqB8nn210000IcEEbPKT_NS0_16__nul_terminatorE>:
_LIBCPP_HIDE_FROM_ABI bool operator==(const _CharT* __cstr, __nul_terminator) {
   20d70:	55                   	push   %rbp
   20d71:	48 89 e5             	mov    %rsp,%rbp
   20d74:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  return *__cstr == _CharT('\0');
   20d78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20d7c:	0f be 00             	movsbl (%rax),%eax
   20d7f:	83 f8 00             	cmp    $0x0,%eax
   20d82:	0f 94 c0             	sete   %al
   20d85:	24 01                	and    $0x1,%al
   20d87:	5d                   	pop    %rbp
   20d88:	c3                   	ret
   20d89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000020d90 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 back_insert_iterator& operator*() { return *this; }
   20d90:	55                   	push   %rbp
   20d91:	48 89 e5             	mov    %rsp,%rbp
   20d94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20d9c:	5d                   	pop    %rbp
   20d9d:	c3                   	ret
   20d9e:	66 90                	xchg   %ax,%ax

0000000000020da0 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEaSB8nn210000ERKc>:
  operator=(const typename _Container::value_type& __value) {
   20da0:	55                   	push   %rbp
   20da1:	48 89 e5             	mov    %rsp,%rbp
   20da4:	48 83 ec 20          	sub    $0x20,%rsp
   20da8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20dac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20db0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20db4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    container->push_back(__value);
   20db8:	48 8b 38             	mov    (%rax),%rdi
   20dbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20dbf:	8a 00                	mov    (%rax),%al
   20dc1:	0f be f0             	movsbl %al,%esi
   20dc4:	e8 67 79 ff ff       	call   18730 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc>
   20dc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    return *this;
   20dcd:	48 83 c4 20          	add    $0x20,%rsp
   20dd1:	5d                   	pop    %rbp
   20dd2:	c3                   	ret
   20dd3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20dda:	00 00 00 
   20ddd:	0f 1f 00             	nopl   (%rax)

0000000000020de0 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 back_insert_iterator& operator++() { return *this; }
   20de0:	55                   	push   %rbp
   20de1:	48 89 e5             	mov    %rsp,%rbp
   20de4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20de8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20dec:	5d                   	pop    %rbp
   20ded:	c3                   	ret
   20dee:	66 90                	xchg   %ax,%ax

0000000000020df0 <_ZNSt3__118__unwrap_iter_implINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEELb0EE8__unwrapB8nn210000ES8_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __unwrap(_Iter __i) _NOEXCEPT { return __i; }
   20df0:	55                   	push   %rbp
   20df1:	48 89 e5             	mov    %rsp,%rbp
   20df4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   20df8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20dfc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   20e00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e04:	5d                   	pop    %rbp
   20e05:	c3                   	ret
   20e06:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20e0d:	00 00 00 

0000000000020e10 <_ZNSt3__17forwardB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOT_Ru20__remove_reference_tIS9_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   20e10:	55                   	push   %rbp
   20e11:	48 89 e5             	mov    %rsp,%rbp
   20e14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   20e18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e1c:	5d                   	pop    %rbp
   20e1d:	c3                   	ret
   20e1e:	66 90                	xchg   %ax,%ax

0000000000020e20 <_ZNSt3__14pairIPKcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEC2B8nn210000IS2_SA_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOSE_OSF_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   20e20:	55                   	push   %rbp
   20e21:	48 89 e5             	mov    %rsp,%rbp
   20e24:	48 83 ec 20          	sub    $0x20,%rsp
   20e28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20e2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   20e30:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20e34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20e38:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   20e3c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   20e40:	e8 7b bc ff ff       	call   1cac0 <_ZNSt3__17forwardB8nn210000IPKcEEOT_Ru20__remove_reference_tIS3_E>
   20e45:	48 89 c1             	mov    %rax,%rcx
   20e48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20e4c:	48 8b 09             	mov    (%rcx),%rcx
   20e4f:	48 89 08             	mov    %rcx,(%rax)
   20e52:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   20e56:	e8 b5 ff ff ff       	call   20e10 <_ZNSt3__17forwardB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOT_Ru20__remove_reference_tIS9_E>
   20e5b:	48 89 c1             	mov    %rax,%rcx
   20e5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20e62:	48 8b 09             	mov    (%rcx),%rcx
   20e65:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   20e69:	48 83 c4 20          	add    $0x20,%rsp
   20e6d:	5d                   	pop    %rbp
   20e6e:	c3                   	ret
   20e6f:	90                   	nop

0000000000020e70 <_ZNSt3__119__unwrap_range_implIPKcNS_11__formatter16__nul_terminatorEE8__rewrapB8nn210000ERKS2_S2_Qntaa22random_access_iteratorIT_E18sized_sentinel_forIT0_S8_E>:
  {
   20e70:	55                   	push   %rbp
   20e71:	48 89 e5             	mov    %rsp,%rbp
   20e74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20e78:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __iter;
   20e7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20e80:	5d                   	pop    %rbp
   20e81:	c3                   	ret
   20e82:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   20e89:	00 00 00 
   20e8c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000020e90 <_ZNSt3__118__unwrap_iter_implINS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEELb0EE8__rewrapB8nn210000ES8_S8_>:
  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter, _Iter __iter) { return __iter; }
   20e90:	55                   	push   %rbp
   20e91:	48 89 e5             	mov    %rsp,%rbp
   20e94:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   20e98:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   20e9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20ea0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   20ea4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20ea8:	5d                   	pop    %rbp
   20ea9:	c3                   	ret
   20eaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000020eb0 <_ZNSt3__16__copyB8nn210000IPcS1_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESB_T0_SC_>:
__copy(_InIter __first, _Sent __last, _OutIter __result) {
   20eb0:	55                   	push   %rbp
   20eb1:	48 89 e5             	mov    %rsp,%rbp
   20eb4:	48 83 ec 40          	sub    $0x40,%rsp
   20eb8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20ebc:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   20ec0:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   20ec4:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  return std::__copy_move_unwrap_iters<__copy_impl>(std::move(__first), std::move(__last), std::move(__result));
   20ec8:	e8 b3 87 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   20ecd:	48 8b 00             	mov    (%rax),%rax
   20ed0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   20ed4:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   20ed8:	e8 a3 87 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   20edd:	48 8b 00             	mov    (%rax),%rax
   20ee0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   20ee4:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   20ee8:	e8 c3 fa ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   20eed:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   20ef1:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   20ef5:	48 8b 00             	mov    (%rax),%rax
   20ef8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   20efc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   20f00:	e8 1b 00 00 00       	call   20f20 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPcS2_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEETnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairISC_SD_EESC_T1_SD_>
   20f05:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   20f09:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   20f0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20f11:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20f15:	48 83 c4 40          	add    $0x40,%rsp
   20f19:	5d                   	pop    %rbp
   20f1a:	c3                   	ret
   20f1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000020f20 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPcS2_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEETnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairISC_SD_EESC_T1_SD_>:
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
   20f20:	55                   	push   %rbp
   20f21:	48 89 e5             	mov    %rsp,%rbp
   20f24:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   20f2b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   20f2f:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   20f33:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  auto __range  = std::__unwrap_range(__first, std::move(__last));
   20f37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   20f3b:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   20f42:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   20f46:	e8 35 87 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   20f4b:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
   20f52:	48 8b 30             	mov    (%rax),%rsi
   20f55:	e8 16 01 00 00       	call   21070 <_ZNSt3__114__unwrap_rangeB8nn210000IPcS1_EEDaT_T0_>
   20f5a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   20f5e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   20f62:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   20f69:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   20f6d:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
   20f71:	e8 0a 87 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   20f76:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
   20f7d:	48 8b 00             	mov    (%rax),%rax
   20f80:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   20f87:	e8 f4 86 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   20f8c:	48 8b 00             	mov    (%rax),%rax
   20f8f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   20f96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20f9a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   20f9e:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   20fa2:	e8 19 fc ff ff       	call   20bc0 <_ZNSt3__113__unwrap_iterB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_18__unwrap_iter_implIS8_Lb0EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalISC_EEEESC_>
   20fa7:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   20fae:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   20fb5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   20fb9:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   20fbd:	48 8d 7d b7          	lea    -0x49(%rbp),%rdi
   20fc1:	e8 fa 00 00 00       	call   210c0 <_ZNKSt3__111__copy_implclB8nn210000IPcS2_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESC_T0_SD_>
   20fc6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   20fca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   20fce:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   20fd5:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   20fd9:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   20fdd:	e8 9e 86 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   20fe2:	48 8b 00             	mov    (%rax),%rax
   20fe5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   20fec:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   20ff0:	e8 8b 86 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   20ff5:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
   20ffc:	48 8b 30             	mov    (%rax),%rsi
   20fff:	e8 9c 01 00 00       	call   211a0 <_ZNSt3__114__rewrap_rangeB8nn210000IPcS1_S1_EET0_S2_T1_>
   21004:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   21008:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
   2100c:	e8 9f f9 ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   21011:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
   21018:	48 8b 00             	mov    (%rax),%rax
   2101b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   2101f:	e8 8c f9 ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   21024:	48 8b 00             	mov    (%rax),%rax
   21027:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   2102b:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   2102f:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   21033:	e8 48 fc ff ff       	call   20c80 <_ZNSt3__113__rewrap_iterB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEES8_NS_18__unwrap_iter_implIS8_Lb0EEEEET_SB_T0_>
   21038:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2103c:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
   21040:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   21044:	e8 07 01 00 00       	call   21150 <_ZNSt3__19make_pairB8nn210000IPcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENSB_Iu7__decayIT0_EE4typeEEEOSC_OSG_>
   21049:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2104d:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   21051:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21055:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21059:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   21060:	5d                   	pop    %rbp
   21061:	c3                   	ret
   21062:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21069:	00 00 00 
   2106c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000021070 <_ZNSt3__114__unwrap_rangeB8nn210000IPcS1_EEDaT_T0_>:
_LIBCPP_HIDE_FROM_ABI constexpr auto __unwrap_range(_Iter __first, _Sent __last) {
   21070:	55                   	push   %rbp
   21071:	48 89 e5             	mov    %rsp,%rbp
   21074:	48 83 ec 30          	sub    $0x30,%rsp
   21078:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2107c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   21080:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return __unwrap_range_impl<_Iter, _Sent>::__unwrap(std::move(__first), std::move(__last));
   21084:	e8 f7 85 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   21089:	48 8b 00             	mov    (%rax),%rax
   2108c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   21090:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   21094:	e8 e7 85 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   21099:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2109d:	48 8b 30             	mov    (%rax),%rsi
   210a0:	e8 3b 01 00 00       	call   211e0 <_ZNSt3__119__unwrap_range_implIPcS1_E8__unwrapB8nn210000ES1_S1_>
   210a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   210a9:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   210ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   210b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   210b5:	48 83 c4 30          	add    $0x30,%rsp
   210b9:	5d                   	pop    %rbp
   210ba:	c3                   	ret
   210bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000210c0 <_ZNKSt3__111__copy_implclB8nn210000IPcS2_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESC_T0_SD_>:
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
   210c0:	55                   	push   %rbp
   210c1:	48 89 e5             	mov    %rsp,%rbp
   210c4:	48 83 ec 40          	sub    $0x40,%rsp
   210c8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   210cc:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   210d0:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   210d4:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
    while (__first != __last) {
   210d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   210dc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   210e0:	74 34                	je     21116 <_ZNKSt3__111__copy_implclB8nn210000IPcS2_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESC_T0_SD_+0x56>
      *__result = *__first;
   210e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   210e6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   210ea:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   210ee:	e8 9d fc ff ff       	call   20d90 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeB8nn210000Ev>
   210f3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   210f7:	48 89 c7             	mov    %rax,%rdi
   210fa:	e8 a1 fc ff ff       	call   20da0 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEaSB8nn210000ERKc>
      ++__first;
   210ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21103:	48 83 c0 01          	add    $0x1,%rax
   21107:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2110b:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
      ++__result;
   2110f:	e8 cc fc ff ff       	call   20de0 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppB8nn210000Ev>
    while (__first != __last) {
   21114:	eb c2                	jmp    210d8 <_ZNKSt3__111__copy_implclB8nn210000IPcS2_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESC_T0_SD_+0x18>
   21116:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    return std::make_pair(std::move(__first), std::move(__result));
   2111a:	e8 61 85 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2111f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   21123:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   21127:	e8 84 f8 ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   2112c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   21130:	48 89 c6             	mov    %rax,%rsi
   21133:	e8 18 00 00 00       	call   21150 <_ZNSt3__19make_pairB8nn210000IPcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENSB_Iu7__decayIT0_EE4typeEEEOSC_OSG_>
   21138:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2113c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   21140:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21144:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21148:	48 83 c4 40          	add    $0x40,%rsp
   2114c:	5d                   	pop    %rbp
   2114d:	c3                   	ret
   2114e:	66 90                	xchg   %ax,%ax

0000000000021150 <_ZNSt3__19make_pairB8nn210000IPcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENSB_Iu7__decayIT0_EE4typeEEEOSC_OSG_>:
make_pair(_T1&& __t1, _T2&& __t2) {
   21150:	55                   	push   %rbp
   21151:	48 89 e5             	mov    %rsp,%rbp
   21154:	48 83 ec 30          	sub    $0x30,%rsp
   21158:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2115c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
   21160:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   21164:	e8 27 ba ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   21169:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2116d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   21171:	e8 9a fc ff ff       	call   20e10 <_ZNSt3__17forwardB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOT_Ru20__remove_reference_tIS9_E>
   21176:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2117a:	48 89 c2             	mov    %rax,%rdx
   2117d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   21181:	e8 0a 01 00 00       	call   21290 <_ZNSt3__14pairIPcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEC2B8nn210000IS1_S9_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOSD_OSE_>
   21186:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2118a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2118e:	48 83 c4 30          	add    $0x30,%rsp
   21192:	5d                   	pop    %rbp
   21193:	c3                   	ret
   21194:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2119b:	00 00 00 
   2119e:	66 90                	xchg   %ax,%ax

00000000000211a0 <_ZNSt3__114__rewrap_rangeB8nn210000IPcS1_S1_EET0_S2_T1_>:
_LIBCPP_HIDE_FROM_ABI constexpr _Iter __rewrap_range(_Iter __orig_iter, _Unwrapped __iter) {
   211a0:	55                   	push   %rbp
   211a1:	48 89 e5             	mov    %rsp,%rbp
   211a4:	48 83 ec 20          	sub    $0x20,%rsp
   211a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   211ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   211b0:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return __unwrap_range_impl<_Iter, _Sent>::__rewrap(std::move(__orig_iter), std::move(__iter));
   211b4:	e8 c7 84 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   211b9:	48 8b 00             	mov    (%rax),%rax
   211bc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   211c0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   211c4:	e8 b7 84 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   211c9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   211cd:	48 8b 30             	mov    (%rax),%rsi
   211d0:	e8 0b 01 00 00       	call   212e0 <_ZNSt3__119__unwrap_range_implIPcS1_E8__rewrapB8nn210000ES1_S1_>
   211d5:	48 83 c4 20          	add    $0x20,%rsp
   211d9:	5d                   	pop    %rbp
   211da:	c3                   	ret
   211db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000211e0 <_ZNSt3__119__unwrap_range_implIPcS1_E8__unwrapB8nn210000ES1_S1_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr auto __unwrap(_Iter __first, _Iter __last) {
   211e0:	55                   	push   %rbp
   211e1:	48 89 e5             	mov    %rsp,%rbp
   211e4:	48 83 ec 30          	sub    $0x30,%rsp
   211e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   211ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   211f0:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    return pair{std::__unwrap_iter(std::move(__first)), std::__unwrap_iter(std::move(__last))};
   211f4:	e8 87 84 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   211f9:	48 8b 38             	mov    (%rax),%rdi
   211fc:	e8 1f 88 ff ff       	call   19a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
   21201:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   21205:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   21209:	e8 72 84 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2120e:	48 8b 38             	mov    (%rax),%rdi
   21211:	e8 0a 88 ff ff       	call   19a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
   21216:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2121a:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   2121e:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   21222:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   21226:	e8 15 00 00 00       	call   21240 <_ZNSt3__14pairIPcS1_EC2B8nn210000IS1_S1_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS5_OS6_>
   2122b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2122f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21233:	48 83 c4 30          	add    $0x30,%rsp
   21237:	5d                   	pop    %rbp
   21238:	c3                   	ret
   21239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000021240 <_ZNSt3__14pairIPcS1_EC2B8nn210000IS1_S1_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS5_OS6_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   21240:	55                   	push   %rbp
   21241:	48 89 e5             	mov    %rsp,%rbp
   21244:	48 83 ec 20          	sub    $0x20,%rsp
   21248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2124c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21250:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   21254:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21258:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2125c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   21260:	e8 2b b9 ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   21265:	48 89 c1             	mov    %rax,%rcx
   21268:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2126c:	48 8b 09             	mov    (%rcx),%rcx
   2126f:	48 89 08             	mov    %rcx,(%rax)
   21272:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   21276:	e8 15 b9 ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   2127b:	48 89 c1             	mov    %rax,%rcx
   2127e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21282:	48 8b 09             	mov    (%rcx),%rcx
   21285:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   21289:	48 83 c4 20          	add    $0x20,%rsp
   2128d:	5d                   	pop    %rbp
   2128e:	c3                   	ret
   2128f:	90                   	nop

0000000000021290 <_ZNSt3__14pairIPcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEC2B8nn210000IS1_S9_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOSD_OSE_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   21290:	55                   	push   %rbp
   21291:	48 89 e5             	mov    %rsp,%rbp
   21294:	48 83 ec 20          	sub    $0x20,%rsp
   21298:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2129c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   212a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   212a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   212a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   212ac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   212b0:	e8 db b8 ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   212b5:	48 89 c1             	mov    %rax,%rcx
   212b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   212bc:	48 8b 09             	mov    (%rcx),%rcx
   212bf:	48 89 08             	mov    %rcx,(%rax)
   212c2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   212c6:	e8 45 fb ff ff       	call   20e10 <_ZNSt3__17forwardB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOT_Ru20__remove_reference_tIS9_E>
   212cb:	48 89 c1             	mov    %rax,%rcx
   212ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   212d2:	48 8b 09             	mov    (%rcx),%rcx
   212d5:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   212d9:	48 83 c4 20          	add    $0x20,%rsp
   212dd:	5d                   	pop    %rbp
   212de:	c3                   	ret
   212df:	90                   	nop

00000000000212e0 <_ZNSt3__119__unwrap_range_implIPcS1_E8__rewrapB8nn210000ES1_S1_>:
  __rewrap(_Iter __orig_iter, decltype(std::__unwrap_iter(__orig_iter)) __iter) {
   212e0:	55                   	push   %rbp
   212e1:	48 89 e5             	mov    %rsp,%rbp
   212e4:	48 83 ec 20          	sub    $0x20,%rsp
   212e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   212ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   212f0:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
    return std::__rewrap_iter(std::move(__orig_iter), std::move(__iter));
   212f4:	e8 87 83 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   212f9:	48 8b 00             	mov    (%rax),%rax
   212fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   21300:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   21304:	e8 77 83 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   21309:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2130d:	48 8b 30             	mov    (%rax),%rsi
   21310:	e8 7b b6 ff ff       	call   1c990 <_ZNSt3__113__rewrap_iterB8nn210000IPcS1_NS_18__unwrap_iter_implIS1_Lb1EEEEET_S4_T0_>
   21315:	48 83 c4 20          	add    $0x20,%rsp
   21319:	5d                   	pop    %rbp
   2131a:	c3                   	ret
   2131b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000021320 <_ZNSt3__16__copyB8nn210000IPKcS2_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESC_T0_SD_>:
__copy(_InIter __first, _Sent __last, _OutIter __result) {
   21320:	55                   	push   %rbp
   21321:	48 89 e5             	mov    %rsp,%rbp
   21324:	48 83 ec 40          	sub    $0x40,%rsp
   21328:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2132c:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   21330:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   21334:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  return std::__copy_move_unwrap_iters<__copy_impl>(std::move(__first), std::move(__last), std::move(__result));
   21338:	e8 23 b5 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   2133d:	48 8b 00             	mov    (%rax),%rax
   21340:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   21344:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   21348:	e8 13 b5 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   2134d:	48 8b 00             	mov    (%rax),%rax
   21350:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   21354:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   21358:	e8 53 f6 ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   2135d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   21361:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   21365:	48 8b 00             	mov    (%rax),%rax
   21368:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2136c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   21370:	e8 1b 00 00 00       	call   21390 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPKcS3_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEETnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairISD_SE_EESD_T1_SE_>
   21375:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   21379:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   2137d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21381:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21385:	48 83 c4 40          	add    $0x40,%rsp
   21389:	5d                   	pop    %rbp
   2138a:	c3                   	ret
   2138b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000021390 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__copy_implEPKcS3_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEETnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairISD_SE_EESD_T1_SE_>:
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
   21390:	55                   	push   %rbp
   21391:	48 89 e5             	mov    %rsp,%rbp
   21394:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   2139b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2139f:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   213a3:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  auto __range  = std::__unwrap_range(__first, std::move(__last));
   213a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   213ab:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   213b2:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   213b6:	e8 a5 b4 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   213bb:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
   213c2:	48 8b 30             	mov    (%rax),%rsi
   213c5:	e8 a6 b4 ff ff       	call   1c870 <_ZNSt3__114__unwrap_rangeB8nn210000IPKcS2_EEDaT_T0_>
   213ca:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   213ce:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   213d2:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   213d9:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   213dd:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
   213e1:	e8 7a b4 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   213e6:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
   213ed:	48 8b 00             	mov    (%rax),%rax
   213f0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   213f7:	e8 64 b4 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   213fc:	48 8b 00             	mov    (%rax),%rax
   213ff:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   21406:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2140a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   2140e:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   21412:	e8 a9 f7 ff ff       	call   20bc0 <_ZNSt3__113__unwrap_iterB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_18__unwrap_iter_implIS8_Lb0EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalISC_EEEESC_>
   21417:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   2141e:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   21425:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   21429:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   2142d:	48 8d 7d b7          	lea    -0x49(%rbp),%rdi
   21431:	e8 aa 00 00 00       	call   214e0 <_ZNKSt3__111__copy_implclB8nn210000IPKcS3_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESD_T0_SE_>
   21436:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2143a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   2143e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   21445:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   21449:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   2144d:	e8 0e b4 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   21452:	48 8b 00             	mov    (%rax),%rax
   21455:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   2145c:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   21460:	e8 fb b3 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   21465:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
   2146c:	48 8b 30             	mov    (%rax),%rsi
   2146f:	e8 dc b4 ff ff       	call   1c950 <_ZNSt3__114__rewrap_rangeB8nn210000IPKcS2_S2_EET0_S3_T1_>
   21474:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   21478:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
   2147c:	e8 2f f5 ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   21481:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
   21488:	48 8b 00             	mov    (%rax),%rax
   2148b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   2148f:	e8 1c f5 ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   21494:	48 8b 00             	mov    (%rax),%rax
   21497:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   2149b:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   2149f:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   214a3:	e8 d8 f7 ff ff       	call   20c80 <_ZNSt3__113__rewrap_iterB8nn210000INS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEES8_NS_18__unwrap_iter_implIS8_Lb0EEEEET_SB_T0_>
   214a8:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   214ac:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
   214b0:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   214b4:	e8 37 f7 ff ff       	call   20bf0 <_ZNSt3__19make_pairB8nn210000IPKcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENSC_Iu7__decayIT0_EE4typeEEEOSD_OSH_>
   214b9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   214bd:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   214c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   214c5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   214c9:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   214d0:	5d                   	pop    %rbp
   214d1:	c3                   	ret
   214d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   214d9:	00 00 00 
   214dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000214e0 <_ZNKSt3__111__copy_implclB8nn210000IPKcS3_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESD_T0_SE_>:
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
   214e0:	55                   	push   %rbp
   214e1:	48 89 e5             	mov    %rsp,%rbp
   214e4:	48 83 ec 40          	sub    $0x40,%rsp
   214e8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   214ec:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   214f0:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   214f4:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
    while (__first != __last) {
   214f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   214fc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   21500:	74 34                	je     21536 <_ZNKSt3__111__copy_implclB8nn210000IPKcS3_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESD_T0_SE_+0x56>
      *__result = *__first;
   21502:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21506:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2150a:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   2150e:	e8 7d f8 ff ff       	call   20d90 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeB8nn210000Ev>
   21513:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   21517:	48 89 c7             	mov    %rax,%rdi
   2151a:	e8 81 f8 ff ff       	call   20da0 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEaSB8nn210000ERKc>
      ++__first;
   2151f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21523:	48 83 c0 01          	add    $0x1,%rax
   21527:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2152b:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
      ++__result;
   2152f:	e8 ac f8 ff ff       	call   20de0 <_ZNSt3__120back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppB8nn210000Ev>
    while (__first != __last) {
   21534:	eb c2                	jmp    214f8 <_ZNKSt3__111__copy_implclB8nn210000IPKcS3_NS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairIT_T1_EESD_T0_SE_+0x18>
   21536:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    return std::make_pair(std::move(__first), std::move(__result));
   2153a:	e8 21 b3 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   2153f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   21543:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   21547:	e8 64 f4 ff ff       	call   209b0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEOu20__remove_reference_tIT_EOSA_>
   2154c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   21550:	48 89 c6             	mov    %rax,%rsi
   21553:	e8 98 f6 ff ff       	call   20bf0 <_ZNSt3__19make_pairB8nn210000IPKcNS_20back_insert_iteratorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENSC_Iu7__decayIT0_EE4typeEEEOSD_OSH_>
   21558:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2155c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   21560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21564:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   21568:	48 83 c4 40          	add    $0x40,%rsp
   2156c:	5d                   	pop    %rbp
   2156d:	c3                   	ret
   2156e:	66 90                	xchg   %ax,%ax

0000000000021570 <_ZNSt3__19addressofB8nn210000INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEPT_RS7_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
   21570:	55                   	push   %rbp
   21571:	48 89 e5             	mov    %rsp,%rbp
   21574:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
   21578:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2157c:	5d                   	pop    %rbp
   2157d:	c3                   	ret
   2157e:	66 90                	xchg   %ax,%ax

0000000000021580 <_ZNSt3__16ranges10__for_each15__for_each_implB8nn210000IPKcS4_NS_8identityEZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS9_EENS_9allocatorIS9_EEEENS_17basic_string_viewIS9_SB_EENS6_23__escape_quotation_markEEUlcE_EENS0_13in_fun_resultIS9_T2_EES9_T0_RSL_RT1_>:
  __for_each_impl(_Iter __first, _Sent __last, _Func& __func, _Proj& __proj) {
   21580:	55                   	push   %rbp
   21581:	48 89 e5             	mov    %rsp,%rbp
   21584:	48 83 ec 40          	sub    $0x40,%rsp
   21588:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2158c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   21590:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   21594:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    for (; __first != __last; ++__first)
   21598:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2159c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   215a0:	74 2f                	je     215d1 <_ZNSt3__16ranges10__for_each15__for_each_implB8nn210000IPKcS4_NS_8identityEZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS9_EENS_9allocatorIS9_EEEENS_17basic_string_viewIS9_SB_EENS6_23__escape_quotation_markEEUlcE_EENS0_13in_fun_resultIS9_T2_EES9_T0_RSL_RT1_+0x51>
      std::invoke(__func, std::invoke(__proj, *__first));
   215a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   215a6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   215aa:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   215ae:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   215b2:	e8 89 00 00 00       	call   21640 <_ZNSt3__16invokeB8nn210000IRNS_8identityEJRKcEEENS_13invoke_resultIT_JDpT0_EE4typeEOS6_DpOS7_>
   215b7:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   215bb:	48 89 c6             	mov    %rax,%rsi
   215be:	e8 3d 00 00 00       	call   21600 <_ZNSt3__16invokeB8nn210000IRZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS4_EENS_9allocatorIS4_EEEENS_17basic_string_viewIS4_S6_EENS1_23__escape_quotation_markEEUlcE_JRKcEEENS_13invoke_resultIS4_JDpT0_EE4typeEOS4_DpOSJ_>
    for (; __first != __last; ++__first)
   215c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   215c7:	48 83 c0 01          	add    $0x1,%rax
   215cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   215cf:	eb c7                	jmp    21598 <_ZNSt3__16ranges10__for_each15__for_each_implB8nn210000IPKcS4_NS_8identityEZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS9_EENS_9allocatorIS9_EEEENS_17basic_string_viewIS9_SB_EENS6_23__escape_quotation_markEEUlcE_EENS0_13in_fun_resultIS9_T2_EES9_T0_RSL_RT1_+0x18>
   215d1:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    return {std::move(__first), std::move(__func)};
   215d5:	e8 86 b2 ff ff       	call   1c860 <_ZNSt3__14moveB8nn210000IRPKcEEOu20__remove_reference_tIT_EOS4_>
   215da:	48 8b 00             	mov    (%rax),%rax
   215dd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   215e1:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   215e5:	e8 96 00 00 00       	call   21680 <_ZNSt3__14moveB8nn210000IRZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS4_EENS_9allocatorIS4_EEEENS_17basic_string_viewIS4_S6_EENS1_23__escape_quotation_markEEUlcE_EEOu20__remove_reference_tIS4_EOS4_>
   215ea:	48 8b 00             	mov    (%rax),%rax
   215ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   215f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   215f5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   215f9:	48 83 c4 40          	add    $0x40,%rsp
   215fd:	5d                   	pop    %rbp
   215fe:	c3                   	ret
   215ff:	90                   	nop

0000000000021600 <_ZNSt3__16invokeB8nn210000IRZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS4_EENS_9allocatorIS4_EEEENS_17basic_string_viewIS4_S6_EENS1_23__escape_quotation_markEEUlcE_JRKcEEENS_13invoke_resultIS4_JDpT0_EE4typeEOS4_DpOSJ_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   21600:	55                   	push   %rbp
   21601:	48 89 e5             	mov    %rsp,%rbp
   21604:	48 83 ec 20          	sub    $0x20,%rsp
   21608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2160c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   21610:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   21614:	e8 a7 00 00 00       	call   216c0 <_ZNSt3__17forwardB8nn210000IRZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS4_EENS_9allocatorIS4_EEEENS_17basic_string_viewIS4_S6_EENS1_23__escape_quotation_markEEUlcE_EEOS4_Ru20__remove_reference_tIS4_E>
   21619:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2161d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   21621:	e8 3a 79 ff ff       	call   18f60 <_ZNSt3__17forwardB8nn210000IRKcEEOT_Ru20__remove_reference_tIS3_E>
   21626:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2162a:	48 89 c6             	mov    %rax,%rsi
   2162d:	e8 5e 00 00 00       	call   21690 <_ZNSt3__18__invokeB8nn210000IRZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS4_EENS_9allocatorIS4_EEEENS_17basic_string_viewIS4_S6_EENS1_23__escape_quotation_markEEUlcE_JRKcEEEDTclclsr3stdE7declvalIS4_EEspclsr3stdE7declvalIT0_EEEEOS4_DpOSI_>
   21632:	48 83 c4 20          	add    $0x20,%rsp
   21636:	5d                   	pop    %rbp
   21637:	c3                   	ret
   21638:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2163f:	00 

0000000000021640 <_ZNSt3__16invokeB8nn210000IRNS_8identityEJRKcEEENS_13invoke_resultIT_JDpT0_EE4typeEOS6_DpOS7_>:
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
   21640:	55                   	push   %rbp
   21641:	48 89 e5             	mov    %rsp,%rbp
   21644:	48 83 ec 20          	sub    $0x20,%rsp
   21648:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2164c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
   21650:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   21654:	e8 47 01 00 00       	call   217a0 <_ZNSt3__17forwardB8nn210000IRNS_8identityEEEOT_Ru20__remove_reference_tIS3_E>
   21659:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2165d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   21661:	e8 fa 78 ff ff       	call   18f60 <_ZNSt3__17forwardB8nn210000IRKcEEOT_Ru20__remove_reference_tIS3_E>
   21666:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2166a:	48 89 c6             	mov    %rax,%rsi
   2166d:	e8 fe 00 00 00       	call   21770 <_ZNSt3__18__invokeB8nn210000IRNS_8identityEJRKcEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS5_DpOS6_>
   21672:	48 83 c4 20          	add    $0x20,%rsp
   21676:	5d                   	pop    %rbp
   21677:	c3                   	ret
   21678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2167f:	00 

0000000000021680 <_ZNSt3__14moveB8nn210000IRZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS4_EENS_9allocatorIS4_EEEENS_17basic_string_viewIS4_S6_EENS1_23__escape_quotation_markEEUlcE_EEOu20__remove_reference_tIS4_EOS4_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   21680:	55                   	push   %rbp
   21681:	48 89 e5             	mov    %rsp,%rbp
   21684:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   21688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2168c:	5d                   	pop    %rbp
   2168d:	c3                   	ret
   2168e:	66 90                	xchg   %ax,%ax

0000000000021690 <_ZNSt3__18__invokeB8nn210000IRZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS4_EENS_9allocatorIS4_EEEENS_17basic_string_viewIS4_S6_EENS1_23__escape_quotation_markEEUlcE_JRKcEEEDTclclsr3stdE7declvalIS4_EEspclsr3stdE7declvalIT0_EEEEOS4_DpOSI_>:
   21690:	55                   	push   %rbp
   21691:	48 89 e5             	mov    %rsp,%rbp
   21694:	48 83 ec 10          	sub    $0x10,%rsp
   21698:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2169c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   216a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   216a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   216a8:	8a 00                	mov    (%rax),%al
   216aa:	0f be f0             	movsbl %al,%esi
   216ad:	e8 1e 00 00 00       	call   216d0 <_ZZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markEENKUlcE_clEc>
   216b2:	48 83 c4 10          	add    $0x10,%rsp
   216b6:	5d                   	pop    %rbp
   216b7:	c3                   	ret
   216b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   216bf:	00 

00000000000216c0 <_ZNSt3__17forwardB8nn210000IRZNS_11__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS4_EENS_9allocatorIS4_EEEENS_17basic_string_viewIS4_S6_EENS1_23__escape_quotation_markEEUlcE_EEOS4_Ru20__remove_reference_tIS4_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   216c0:	55                   	push   %rbp
   216c1:	48 89 e5             	mov    %rsp,%rbp
   216c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   216c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   216cc:	5d                   	pop    %rbp
   216cd:	c3                   	ret
   216ce:	66 90                	xchg   %ax,%ax

00000000000216d0 <_ZZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markEENKUlcE_clEc>:
      ranges::for_each(__first, __view.__position(), [&](_CharT __value) {
   216d0:	55                   	push   %rbp
   216d1:	48 89 e5             	mov    %rsp,%rbp
   216d4:	48 83 ec 20          	sub    $0x20,%rsp
   216d8:	40 88 f0             	mov    %sil,%al
   216db:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   216df:	88 45 f7             	mov    %al,-0x9(%rbp)
   216e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        __formatter::__write_escape_ill_formed_code_unit(__str, __formatter::__to_char32(__value));
   216e6:	48 8b 00             	mov    (%rax),%rax
   216e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   216ed:	8a 45 f7             	mov    -0x9(%rbp),%al
   216f0:	0f be f8             	movsbl %al,%edi
   216f3:	e8 68 00 00 00       	call   21760 <_ZNSt3__111__formatter11__to_char32B8nn210000IcEEDiT_>
   216f8:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   216fc:	89 c6                	mov    %eax,%esi
   216fe:	e8 0d 00 00 00       	call   21710 <_ZNSt3__111__formatter35__write_escape_ill_formed_code_unitB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDi>
      });
   21703:	48 83 c4 20          	add    $0x20,%rsp
   21707:	5d                   	pop    %rbp
   21708:	c3                   	ret
   21709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000021710 <_ZNSt3__111__formatter35__write_escape_ill_formed_code_unitB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDi>:
_LIBCPP_HIDE_FROM_ABI void __write_escape_ill_formed_code_unit(basic_string<_CharT>& __str, char32_t __value) {
   21710:	55                   	push   %rbp
   21711:	48 89 e5             	mov    %rsp,%rbp
   21714:	48 83 ec 20          	sub    $0x20,%rsp
   21718:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2171c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  __formatter::__write_escaped_code_unit(__str, __value, _LIBCPP_STATICALLY_WIDEN(_CharT, "\\x{"));
   2171f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21723:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   21727:	8b 45 f4             	mov    -0xc(%rbp),%eax
   2172a:	89 45 f0             	mov    %eax,-0x10(%rbp)
   2172d:	48 8d 3d ca df 00 00 	lea    0xdfca(%rip),%rdi        # 2f6fe <.L.str.68>
   21734:	48 8d 35 95 d6 00 00 	lea    0xd695(%rip),%rsi        # 2edd0 <.L.str.69>
   2173b:	e8 f0 e6 ff ff       	call   1fe30 <_ZNSt3__118__statically_widenB8nn210000ITkNS_15__fmt_char_typeEcEEPKT_PKcPKw>
   21740:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   21744:	8b 75 f0             	mov    -0x10(%rbp),%esi
   21747:	48 89 c2             	mov    %rax,%rdx
   2174a:	e8 91 ef ff ff       	call   206e0 <_ZNSt3__111__formatter25__write_escaped_code_unitB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEEDiPKS3_>
}
   2174f:	48 83 c4 20          	add    $0x20,%rsp
   21753:	5d                   	pop    %rbp
   21754:	c3                   	ret
   21755:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2175c:	00 00 00 
   2175f:	90                   	nop

0000000000021760 <_ZNSt3__111__formatter11__to_char32B8nn210000IcEEDiT_>:
[[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr char32_t __to_char32(_CharT __value) {
   21760:	55                   	push   %rbp
   21761:	48 89 e5             	mov    %rsp,%rbp
   21764:	40 88 f8             	mov    %dil,%al
   21767:	88 45 ff             	mov    %al,-0x1(%rbp)
  return static_cast<make_unsigned_t<_CharT>>(__value);
   2176a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   2176e:	5d                   	pop    %rbp
   2176f:	c3                   	ret

0000000000021770 <_ZNSt3__18__invokeB8nn210000IRNS_8identityEJRKcEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS5_DpOS6_>:
   21770:	55                   	push   %rbp
   21771:	48 89 e5             	mov    %rsp,%rbp
   21774:	48 83 ec 10          	sub    $0x10,%rsp
   21778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2177c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21780:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   21784:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   21788:	e8 23 00 00 00       	call   217b0 <_ZNKSt3__18identityclB8nn210000IRKcEEOT_S5_>
   2178d:	48 83 c4 10          	add    $0x10,%rsp
   21791:	5d                   	pop    %rbp
   21792:	c3                   	ret
   21793:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2179a:	00 00 00 
   2179d:	0f 1f 00             	nopl   (%rax)

00000000000217a0 <_ZNSt3__17forwardB8nn210000IRNS_8identityEEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   217a0:	55                   	push   %rbp
   217a1:	48 89 e5             	mov    %rsp,%rbp
   217a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   217a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   217ac:	5d                   	pop    %rbp
   217ad:	c3                   	ret
   217ae:	66 90                	xchg   %ax,%ax

00000000000217b0 <_ZNKSt3__18identityclB8nn210000IRKcEEOT_S5_>:
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr _Tp&& operator()(_Tp&& __t) const noexcept {
   217b0:	55                   	push   %rbp
   217b1:	48 89 e5             	mov    %rsp,%rbp
   217b4:	48 83 ec 10          	sub    $0x10,%rsp
   217b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   217bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return std::forward<_Tp>(__t);
   217c0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   217c4:	e8 97 77 ff ff       	call   18f60 <_ZNSt3__17forwardB8nn210000IRKcEEOT_Ru20__remove_reference_tIS3_E>
   217c9:	48 83 c4 10          	add    $0x10,%rsp
   217cd:	5d                   	pop    %rbp
   217ce:	c3                   	ret
   217cf:	90                   	nop

00000000000217d0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRiEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   217d0:	55                   	push   %rbp
   217d1:	48 89 e5             	mov    %rsp,%rbp
   217d4:	48 83 ec 10          	sub    $0x10,%rsp
   217d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   217dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   217e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   217e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   217e8:	8b 30                	mov    (%rax),%esi
   217ea:	e8 11 00 00 00       	call   21800 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIiEEDaSC_>
   217ef:	48 83 c4 10          	add    $0x10,%rsp
   217f3:	5d                   	pop    %rbp
   217f4:	c3                   	ret
   217f5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   217fc:	00 00 00 
   217ff:	90                   	nop

0000000000021800 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIiEEDaSC_>:
        [&](auto __arg) {
   21800:	55                   	push   %rbp
   21801:	48 89 e5             	mov    %rsp,%rbp
   21804:	48 83 ec 40          	sub    $0x40,%rsp
   21808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2180c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   2180f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21813:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   21817:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   2181b:	e8 70 00 00 00       	call   21890 <_ZNSt3__19formatterIicEC2Ev>
   21820:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            if (__parse)
   21824:	48 8b 40 10          	mov    0x10(%rax),%rax
   21828:	f6 00 01             	testb  $0x1,(%rax)
   2182b:	74 23                	je     21850 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIiEEDaSC_+0x50>
   2182d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   21831:	48 8b 08             	mov    (%rax),%rcx
   21834:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   21838:	48 8b 30             	mov    (%rax),%rsi
   2183b:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
   2183f:	e8 6c 00 00 00       	call   218b0 <_ZNSt3__119__formatter_integerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   21844:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   21848:	48 89 c6             	mov    %rax,%rsi
   2184b:	e8 d0 85 ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   21850:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   21854:	48 8b 48 08          	mov    0x8(%rax),%rcx
   21858:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   2185c:	8b 75 f4             	mov    -0xc(%rbp),%esi
   2185f:	48 8b 50 08          	mov    0x8(%rax),%rdx
   21863:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
   21867:	e8 94 00 00 00       	call   21900 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEiNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   2186c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   21870:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   21874:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   21878:	e8 e3 82 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   2187d:	48 83 c4 40          	add    $0x40,%rsp
   21881:	5d                   	pop    %rbp
   21882:	c3                   	ret
   21883:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2188a:	00 00 00 
   2188d:	0f 1f 00             	nopl   (%rax)

0000000000021890 <_ZNSt3__19formatterIicEC2Ev>:
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<signed char, _CharT> : public __formatter_integer<_CharT> {};
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<short, _CharT> : public __formatter_integer<_CharT> {};
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<int, _CharT> : public __formatter_integer<_CharT> {};
   21890:	55                   	push   %rbp
   21891:	48 89 e5             	mov    %rsp,%rbp
   21894:	48 83 ec 10          	sub    $0x10,%rsp
   21898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2189c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   218a0:	e8 fb 00 00 00       	call   219a0 <_ZNSt3__119__formatter_integerIcEC2Ev>
   218a5:	48 83 c4 10          	add    $0x10,%rsp
   218a9:	5d                   	pop    %rbp
   218aa:	c3                   	ret
   218ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000218b0 <_ZNSt3__119__formatter_integerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>:
  _LIBCPP_HIDE_FROM_ABI constexpr typename _ParseContext::iterator parse(_ParseContext& __ctx) {
   218b0:	55                   	push   %rbp
   218b1:	48 89 e5             	mov    %rsp,%rbp
   218b4:	48 83 ec 30          	sub    $0x30,%rsp
   218b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   218bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   218c0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   218c4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    typename _ParseContext::iterator __result = __parser_.__parse(__ctx, __format_spec::__fields_integral);
   218c8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   218cc:	66 c7 45 e6 37 01    	movw   $0x137,-0x1a(%rbp)
   218d2:	66 8b 45 e6          	mov    -0x1a(%rbp),%ax
   218d6:	66 89 c2             	mov    %ax,%dx
   218d9:	e8 42 92 ff ff       	call   1ab20 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E>
   218de:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   218e2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __format_spec::__process_parsed_integer(__parser_, "an integer");
   218e6:	48 8d 35 15 de 00 00 	lea    0xde15(%rip),%rsi        # 2f702 <.L.str.70>
   218ed:	e8 ce 00 00 00       	call   219c0 <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc>
    return __result;
   218f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   218f6:	48 83 c4 30          	add    $0x30,%rsp
   218fa:	5d                   	pop    %rbp
   218fb:	c3                   	ret
   218fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000021900 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEiNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   21900:	55                   	push   %rbp
   21901:	48 89 e5             	mov    %rsp,%rbp
   21904:	48 83 ec 60          	sub    $0x60,%rsp
   21908:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2190c:	89 75 ec             	mov    %esi,-0x14(%rbp)
   2190f:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   21913:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    __format_spec::__parsed_specifications<_CharT> __specs = __parser_.__get_parsed_std_specifications(__ctx);
   21917:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2191b:	e8 f0 a1 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   21920:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   21924:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    if (__specs.__std_.__type_ == __format_spec::__type::__char)
   21928:	80 7d d1 0a          	cmpb   $0xa,-0x2f(%rbp)
   2192c:	75 3d                	jne    2196b <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEiNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x6b>
      return __formatter::__format_char(__value, __ctx.out(), __specs);
   2192e:	8b 45 ec             	mov    -0x14(%rbp),%eax
   21931:	89 45 a4             	mov    %eax,-0x5c(%rbp)
   21934:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   21938:	e8 d3 81 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   2193d:	8b 7d a4             	mov    -0x5c(%rbp),%edi
   21940:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   21944:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   21948:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2194c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21950:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   21954:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   21958:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   2195c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   21960:	e8 bb 00 00 00       	call   21a20 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEiTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>
   21965:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21969:	eb 28                	jmp    21993 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEiNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x93>
    return __formatter::__format_integer(static_cast<_Type>(__value), __ctx, __specs);
   2196b:	8b 7d ec             	mov    -0x14(%rbp),%edi
   2196e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   21972:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   21976:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2197a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2197e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   21982:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   21986:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   2198a:	e8 51 01 00 00       	call   21ae0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralEicNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>
   2198f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   21993:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21997:	48 83 c4 60          	add    $0x60,%rsp
   2199b:	5d                   	pop    %rbp
   2199c:	c3                   	ret
   2199d:	0f 1f 00             	nopl   (%rax)

00000000000219a0 <_ZNSt3__119__formatter_integerIcEC2Ev>:
struct _LIBCPP_TEMPLATE_VIS __formatter_integer {
   219a0:	55                   	push   %rbp
   219a1:	48 89 e5             	mov    %rsp,%rbp
   219a4:	48 83 ec 10          	sub    $0x10,%rsp
   219a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   219ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   219b0:	e8 3b 90 ff ff       	call   1a9f0 <_ZNSt3__113__format_spec8__parserIcEC2Ev>
   219b5:	48 83 c4 10          	add    $0x10,%rsp
   219b9:	5d                   	pop    %rbp
   219ba:	c3                   	ret
   219bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000219c0 <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc>:

template <class _CharT>
_LIBCPP_HIDE_FROM_ABI constexpr void __process_parsed_integer(__parser<_CharT>& __parser, const char* __id) {
   219c0:	55                   	push   %rbp
   219c1:	48 89 e5             	mov    %rsp,%rbp
   219c4:	48 83 ec 20          	sub    $0x20,%rsp
   219c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   219cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  switch (__parser.__type_) {
   219d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   219d4:	8a 40 01             	mov    0x1(%rax),%al
   219d7:	88 45 ef             	mov    %al,-0x11(%rbp)
   219da:	84 c0                	test   %al,%al
   219dc:	74 16                	je     219f4 <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x34>
   219de:	eb 00                	jmp    219e0 <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x20>
   219e0:	8a 45 ef             	mov    -0x11(%rbp),%al
   219e3:	04 fe                	add    $0xfe,%al
   219e5:	2c 06                	sub    $0x6,%al
   219e7:	72 0b                	jb     219f4 <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x34>
   219e9:	eb 00                	jmp    219eb <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x2b>
   219eb:	8a 45 ef             	mov    -0x11(%rbp),%al
   219ee:	2c 0a                	sub    $0xa,%al
   219f0:	74 04                	je     219f6 <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x36>
   219f2:	eb 11                	jmp    21a05 <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x45>
  case __format_spec::__type::__binary_upper_case:
  case __format_spec::__type::__octal:
  case __format_spec::__type::__decimal:
  case __format_spec::__type::__hexadecimal_lower_case:
  case __format_spec::__type::__hexadecimal_upper_case:
    break;
   219f4:	eb 18                	jmp    21a0e <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x4e>

  case __format_spec::__type::__char:
    __format_spec::__process_display_type_char(__parser, __id);
   219f6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   219fa:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   219fe:	e8 7d dc ff ff       	call   1f680 <_ZNSt3__113__format_spec27__process_display_type_charB8nn210000IcEEvRNS0_8__parserIT_EEPKc>
    break;
   21a03:	eb 09                	jmp    21a0e <_ZNSt3__113__format_spec24__process_parsed_integerB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x4e>

  default:
    __format_spec::__throw_invalid_type_format_error(__id);
   21a05:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   21a09:	e8 c2 9b ff ff       	call   1b5d0 <_ZNSt3__113__format_spec33__throw_invalid_type_format_errorB8nn210000EPKc>
  }
}
   21a0e:	48 83 c4 20          	add    $0x20,%rsp
   21a12:	5d                   	pop    %rbp
   21a13:	c3                   	ret
   21a14:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21a1b:	00 00 00 
   21a1e:	66 90                	xchg   %ax,%ax

0000000000021a20 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEiTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>:
              __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   21a20:	55                   	push   %rbp
   21a21:	48 89 e5             	mov    %rsp,%rbp
   21a24:	48 83 ec 60          	sub    $0x60,%rsp
   21a28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21a2c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   21a30:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   21a34:	89 7d dc             	mov    %edi,-0x24(%rbp)
      if (__value < numeric_limits<_CharT>::min() || __value > numeric_limits<_CharT>::max())
   21a37:	8b 45 dc             	mov    -0x24(%rbp),%eax
   21a3a:	89 45 bc             	mov    %eax,-0x44(%rbp)
   21a3d:	e8 1e 01 00 00       	call   21b60 <_ZNSt3__114numeric_limitsIcE3minB8nn210000Ev>
   21a42:	88 c1                	mov    %al,%cl
   21a44:	8b 45 bc             	mov    -0x44(%rbp),%eax
   21a47:	0f be c9             	movsbl %cl,%ecx
   21a4a:	39 c8                	cmp    %ecx,%eax
   21a4c:	7c 17                	jl     21a65 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEiTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x45>
   21a4e:	8b 45 dc             	mov    -0x24(%rbp),%eax
   21a51:	89 45 b8             	mov    %eax,-0x48(%rbp)
   21a54:	e8 17 01 00 00       	call   21b70 <_ZNSt3__114numeric_limitsIcE3maxB8nn210000Ev>
   21a59:	88 c1                	mov    %al,%cl
   21a5b:	8b 45 b8             	mov    -0x48(%rbp),%eax
   21a5e:	0f be c9             	movsbl %cl,%ecx
   21a61:	39 c8                	cmp    %ecx,%eax
   21a63:	7e 0c                	jle    21a71 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEiTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x51>
        std::__throw_format_error("Integral value outside the range of the char type");
   21a65:	48 8d 3d a1 dc 00 00 	lea    0xdca1(%rip),%rdi        # 2f70d <.L.str.71>
   21a6c:	e8 cf 80 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  const auto __c = static_cast<_CharT>(__value);
   21a71:	8b 45 dc             	mov    -0x24(%rbp),%eax
   21a74:	88 45 db             	mov    %al,-0x25(%rbp)
   21a77:	48 8d 7d db          	lea    -0x25(%rbp),%rdi
  return __formatter::__write(std::addressof(__c), std::addressof(__c) + 1, std::move(__out_it), __specs);
   21a7b:	e8 40 71 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   21a80:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   21a84:	48 8d 7d db          	lea    -0x25(%rbp),%rdi
   21a88:	e8 33 71 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   21a8d:	48 83 c0 01          	add    $0x1,%rax
   21a91:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   21a95:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   21a99:	e8 02 81 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   21a9e:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   21aa2:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   21aa6:	48 8b 00             	mov    (%rax),%rax
   21aa9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   21aad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21ab1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   21ab5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21ab9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   21abd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   21ac1:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   21ac5:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
   21ac9:	e8 42 a5 ff ff       	call   1c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   21ace:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21ad6:	48 83 c4 60          	add    $0x60,%rsp
   21ada:	5d                   	pop    %rbp
   21adb:	c3                   	ret
   21adc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000021ae0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralEicNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>:
__format_integer(_Tp __value, _FormatContext& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) {
   21ae0:	55                   	push   %rbp
   21ae1:	48 89 e5             	mov    %rsp,%rbp
   21ae4:	48 83 ec 40          	sub    $0x40,%rsp
   21ae8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   21aec:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   21af0:	89 7d e4             	mov    %edi,-0x1c(%rbp)
   21af3:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  auto __r        = std::__to_unsigned_like(__value);
   21af7:	8b 7d e4             	mov    -0x1c(%rbp),%edi
   21afa:	e8 a1 00 00 00       	call   21ba0 <_ZNSt3__118__to_unsigned_likeB8nn210000IiEEu15__make_unsignedIT_ES1_>
   21aff:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  bool __negative = __value < 0;
   21b02:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
   21b06:	0f 9c c0             	setl   %al
   21b09:	24 01                	and    $0x1,%al
   21b0b:	88 45 d3             	mov    %al,-0x2d(%rbp)
  if (__negative)
   21b0e:	f6 45 d3 01          	testb  $0x1,-0x2d(%rbp)
   21b12:	74 0b                	je     21b1f <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralEicNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x3f>
    __r = std::__complement(__r);
   21b14:	8b 7d d4             	mov    -0x2c(%rbp),%edi
   21b17:	e8 94 00 00 00       	call   21bb0 <_ZNSt3__112__complementB8nn210000IjEET_S1_>
   21b1c:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  return __formatter::__format_integer(__r, __ctx, __specs, __negative);
   21b1f:	8b 7d d4             	mov    -0x2c(%rbp),%edi
   21b22:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   21b26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21b2a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   21b2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21b32:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   21b36:	8a 45 d3             	mov    -0x2d(%rbp),%al
   21b39:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   21b3d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   21b41:	44 0f b6 c0          	movzbl %al,%r8d
   21b45:	41 83 e0 01          	and    $0x1,%r8d
   21b49:	e8 52 a0 ff ff       	call   1bba0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   21b4e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21b52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21b56:	48 83 c4 40          	add    $0x40,%rsp
   21b5a:	5d                   	pop    %rbp
   21b5b:	c3                   	ret
   21b5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000021b60 <_ZNSt3__114numeric_limitsIcE3minB8nn210000Ev>:
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR type min() _NOEXCEPT { return __base::min(); }
   21b60:	55                   	push   %rbp
   21b61:	48 89 e5             	mov    %rsp,%rbp
   21b64:	e8 17 00 00 00       	call   21b80 <_ZNSt3__123__libcpp_numeric_limitsIcLb1EE3minB8nn210000Ev>
   21b69:	5d                   	pop    %rbp
   21b6a:	c3                   	ret
   21b6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000021b70 <_ZNSt3__114numeric_limitsIcE3maxB8nn210000Ev>:
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR type max() _NOEXCEPT { return __base::max(); }
   21b70:	55                   	push   %rbp
   21b71:	48 89 e5             	mov    %rsp,%rbp
   21b74:	e8 17 00 00 00       	call   21b90 <_ZNSt3__123__libcpp_numeric_limitsIcLb1EE3maxB8nn210000Ev>
   21b79:	5d                   	pop    %rbp
   21b7a:	c3                   	ret
   21b7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000021b80 <_ZNSt3__123__libcpp_numeric_limitsIcLb1EE3minB8nn210000Ev>:
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR type min() _NOEXCEPT { return __min; }
   21b80:	55                   	push   %rbp
   21b81:	48 89 e5             	mov    %rsp,%rbp
   21b84:	b0 80                	mov    $0x80,%al
   21b86:	5d                   	pop    %rbp
   21b87:	c3                   	ret
   21b88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   21b8f:	00 

0000000000021b90 <_ZNSt3__123__libcpp_numeric_limitsIcLb1EE3maxB8nn210000Ev>:
  [[__nodiscard__]] _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR type max() _NOEXCEPT { return __max; }
   21b90:	55                   	push   %rbp
   21b91:	48 89 e5             	mov    %rsp,%rbp
   21b94:	b0 7f                	mov    $0x7f,%al
   21b96:	5d                   	pop    %rbp
   21b97:	c3                   	ret
   21b98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   21b9f:	00 

0000000000021ba0 <_ZNSt3__118__to_unsigned_likeB8nn210000IiEEu15__make_unsignedIT_ES1_>:
template <class _Tp>
using make_unsigned_t = __make_unsigned_t<_Tp>;
#endif

template <class _Tp>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __make_unsigned_t<_Tp> __to_unsigned_like(_Tp __x) _NOEXCEPT {
   21ba0:	55                   	push   %rbp
   21ba1:	48 89 e5             	mov    %rsp,%rbp
   21ba4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  return static_cast<__make_unsigned_t<_Tp> >(__x);
   21ba7:	8b 45 fc             	mov    -0x4(%rbp),%eax
   21baa:	5d                   	pop    %rbp
   21bab:	c3                   	ret
   21bac:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000021bb0 <_ZNSt3__112__complementB8nn210000IjEET_S1_>:
};

} // namespace __itoa

template <typename _Tp>
inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI _Tp __complement(_Tp __x) {
   21bb0:	55                   	push   %rbp
   21bb1:	48 89 e5             	mov    %rsp,%rbp
   21bb4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  static_assert(is_unsigned<_Tp>::value, "cast to unsigned first");
  return _Tp(~__x + 1);
   21bb7:	8b 45 fc             	mov    -0x4(%rbp),%eax
   21bba:	83 f0 ff             	xor    $0xffffffff,%eax
   21bbd:	83 c0 01             	add    $0x1,%eax
   21bc0:	5d                   	pop    %rbp
   21bc1:	c3                   	ret
   21bc2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21bc9:	00 00 00 
   21bcc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000021bd0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRxEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   21bd0:	55                   	push   %rbp
   21bd1:	48 89 e5             	mov    %rsp,%rbp
   21bd4:	48 83 ec 10          	sub    $0x10,%rsp
   21bd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21bdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21be0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   21be4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21be8:	48 8b 30             	mov    (%rax),%rsi
   21beb:	e8 10 00 00 00       	call   21c00 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIxEEDaSC_>
   21bf0:	48 83 c4 10          	add    $0x10,%rsp
   21bf4:	5d                   	pop    %rbp
   21bf5:	c3                   	ret
   21bf6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21bfd:	00 00 00 

0000000000021c00 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIxEEDaSC_>:
        [&](auto __arg) {
   21c00:	55                   	push   %rbp
   21c01:	48 89 e5             	mov    %rsp,%rbp
   21c04:	48 83 ec 40          	sub    $0x40,%rsp
   21c08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21c0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21c10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21c14:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   21c18:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   21c1c:	e8 6f 00 00 00       	call   21c90 <_ZNSt3__19formatterIxcEC2Ev>
   21c21:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            if (__parse)
   21c25:	48 8b 40 10          	mov    0x10(%rax),%rax
   21c29:	f6 00 01             	testb  $0x1,(%rax)
   21c2c:	74 23                	je     21c51 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIxEEDaSC_+0x51>
   21c2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   21c32:	48 8b 08             	mov    (%rax),%rcx
   21c35:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   21c39:	48 8b 30             	mov    (%rax),%rsi
   21c3c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   21c40:	e8 6b fc ff ff       	call   218b0 <_ZNSt3__119__formatter_integerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   21c45:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   21c49:	48 89 c6             	mov    %rax,%rsi
   21c4c:	e8 cf 81 ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   21c51:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   21c55:	48 8b 48 08          	mov    0x8(%rax),%rcx
   21c59:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   21c5d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   21c61:	48 8b 50 08          	mov    0x8(%rax),%rdx
   21c65:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   21c69:	e8 42 00 00 00       	call   21cb0 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralExNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   21c6e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   21c72:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   21c76:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   21c7a:	e8 e1 7e ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   21c7f:	48 83 c4 40          	add    $0x40,%rsp
   21c83:	5d                   	pop    %rbp
   21c84:	c3                   	ret
   21c85:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21c8c:	00 00 00 
   21c8f:	90                   	nop

0000000000021c90 <_ZNSt3__19formatterIxcEC2Ev>:
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<long, _CharT> : public __formatter_integer<_CharT> {};
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<long long, _CharT> : public __formatter_integer<_CharT> {};
   21c90:	55                   	push   %rbp
   21c91:	48 89 e5             	mov    %rsp,%rbp
   21c94:	48 83 ec 10          	sub    $0x10,%rsp
   21c98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   21c9c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   21ca0:	e8 fb fc ff ff       	call   219a0 <_ZNSt3__119__formatter_integerIcEC2Ev>
   21ca5:	48 83 c4 10          	add    $0x10,%rsp
   21ca9:	5d                   	pop    %rbp
   21caa:	c3                   	ret
   21cab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000021cb0 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralExNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   21cb0:	55                   	push   %rbp
   21cb1:	48 89 e5             	mov    %rsp,%rbp
   21cb4:	48 83 ec 60          	sub    $0x60,%rsp
   21cb8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   21cbc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   21cc0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   21cc4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    __format_spec::__parsed_specifications<_CharT> __specs = __parser_.__get_parsed_std_specifications(__ctx);
   21cc8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   21ccc:	e8 3f 9e ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   21cd1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   21cd5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    if (__specs.__std_.__type_ == __format_spec::__type::__char)
   21cd9:	80 7d d1 0a          	cmpb   $0xa,-0x2f(%rbp)
   21cdd:	75 40                	jne    21d1f <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralExNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x6f>
      return __formatter::__format_char(__value, __ctx.out(), __specs);
   21cdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21ce3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   21ce7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   21ceb:	e8 20 7e ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   21cf0:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   21cf4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   21cf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   21cfc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   21d00:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21d04:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   21d08:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   21d0c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   21d10:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   21d14:	e8 47 00 00 00       	call   21d60 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralExTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>
   21d19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21d1d:	eb 29                	jmp    21d48 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralExNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x98>
    return __formatter::__format_integer(static_cast<_Type>(__value), __ctx, __specs);
   21d1f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   21d23:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   21d27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   21d2b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   21d2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21d33:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   21d37:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   21d3b:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   21d3f:	e8 ec 00 00 00       	call   21e30 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralElcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>
   21d44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   21d48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21d4c:	48 83 c4 60          	add    $0x60,%rsp
   21d50:	5d                   	pop    %rbp
   21d51:	c3                   	ret
   21d52:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21d59:	00 00 00 
   21d5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000021d60 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralExTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>:
              __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   21d60:	55                   	push   %rbp
   21d61:	48 89 e5             	mov    %rsp,%rbp
   21d64:	48 83 ec 70          	sub    $0x70,%rsp
   21d68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   21d6c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   21d70:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   21d74:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      if (__value < numeric_limits<_CharT>::min() || __value > numeric_limits<_CharT>::max())
   21d78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21d7c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   21d80:	e8 db fd ff ff       	call   21b60 <_ZNSt3__114numeric_limitsIcE3minB8nn210000Ev>
   21d85:	88 c1                	mov    %al,%cl
   21d87:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   21d8b:	48 0f be c9          	movsbq %cl,%rcx
   21d8f:	48 39 c8             	cmp    %rcx,%rax
   21d92:	7c 1c                	jl     21db0 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralExTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x50>
   21d94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21d98:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   21d9c:	e8 cf fd ff ff       	call   21b70 <_ZNSt3__114numeric_limitsIcE3maxB8nn210000Ev>
   21da1:	88 c1                	mov    %al,%cl
   21da3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   21da7:	48 0f be c9          	movsbq %cl,%rcx
   21dab:	48 39 c8             	cmp    %rcx,%rax
   21dae:	7e 0c                	jle    21dbc <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralExTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x5c>
        std::__throw_format_error("Integral value outside the range of the char type");
   21db0:	48 8d 3d 56 d9 00 00 	lea    0xd956(%rip),%rdi        # 2f70d <.L.str.71>
   21db7:	e8 84 7d ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  const auto __c = static_cast<_CharT>(__value);
   21dbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21dc0:	88 45 d7             	mov    %al,-0x29(%rbp)
   21dc3:	48 8d 7d d7          	lea    -0x29(%rbp),%rdi
  return __formatter::__write(std::addressof(__c), std::addressof(__c) + 1, std::move(__out_it), __specs);
   21dc7:	e8 f4 6d ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   21dcc:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   21dd0:	48 8d 7d d7          	lea    -0x29(%rbp),%rdi
   21dd4:	e8 e7 6d ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   21dd9:	48 83 c0 01          	add    $0x1,%rax
   21ddd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   21de1:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   21de5:	e8 b6 7d ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   21dea:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   21dee:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   21df2:	48 8b 00             	mov    (%rax),%rax
   21df5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   21df9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21dfd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   21e01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21e05:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   21e09:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   21e0d:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   21e11:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
   21e15:	e8 f6 a1 ff ff       	call   1c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   21e1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21e22:	48 83 c4 70          	add    $0x70,%rsp
   21e26:	5d                   	pop    %rbp
   21e27:	c3                   	ret
   21e28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   21e2f:	00 

0000000000021e30 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralElcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>:
__format_integer(_Tp __value, _FormatContext& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) {
   21e30:	55                   	push   %rbp
   21e31:	48 89 e5             	mov    %rsp,%rbp
   21e34:	48 83 ec 50          	sub    $0x50,%rsp
   21e38:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   21e3c:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   21e40:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   21e44:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  auto __r        = std::__to_unsigned_like(__value);
   21e48:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   21e4c:	e8 6f 00 00 00       	call   21ec0 <_ZNSt3__118__to_unsigned_likeB8nn210000IlEEu15__make_unsignedIT_ES1_>
   21e51:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  bool __negative = __value < 0;
   21e55:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   21e5a:	0f 9c c0             	setl   %al
   21e5d:	24 01                	and    $0x1,%al
   21e5f:	88 45 cf             	mov    %al,-0x31(%rbp)
  if (__negative)
   21e62:	f6 45 cf 01          	testb  $0x1,-0x31(%rbp)
   21e66:	74 0d                	je     21e75 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralElcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x45>
    __r = std::__complement(__r);
   21e68:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   21e6c:	e8 5f 00 00 00       	call   21ed0 <_ZNSt3__112__complementB8nn210000ImEET_S1_>
   21e71:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  return __formatter::__format_integer(__r, __ctx, __specs, __negative);
   21e75:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   21e79:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   21e7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21e81:	48 89 45 bc          	mov    %rax,-0x44(%rbp)
   21e85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21e89:	48 89 45 c4          	mov    %rax,-0x3c(%rbp)
   21e8d:	8a 45 cf             	mov    -0x31(%rbp),%al
   21e90:	48 8b 55 bc          	mov    -0x44(%rbp),%rdx
   21e94:	48 8b 4d c4          	mov    -0x3c(%rbp),%rcx
   21e98:	44 0f b6 c0          	movzbl %al,%r8d
   21e9c:	41 83 e0 01          	and    $0x1,%r8d
   21ea0:	e8 4b 00 00 00       	call   21ef0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   21ea5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21ead:	48 83 c4 50          	add    $0x50,%rsp
   21eb1:	5d                   	pop    %rbp
   21eb2:	c3                   	ret
   21eb3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21eba:	00 00 00 
   21ebd:	0f 1f 00             	nopl   (%rax)

0000000000021ec0 <_ZNSt3__118__to_unsigned_likeB8nn210000IlEEu15__make_unsignedIT_ES1_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __make_unsigned_t<_Tp> __to_unsigned_like(_Tp __x) _NOEXCEPT {
   21ec0:	55                   	push   %rbp
   21ec1:	48 89 e5             	mov    %rsp,%rbp
   21ec4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<__make_unsigned_t<_Tp> >(__x);
   21ec8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21ecc:	5d                   	pop    %rbp
   21ecd:	c3                   	ret
   21ece:	66 90                	xchg   %ax,%ax

0000000000021ed0 <_ZNSt3__112__complementB8nn210000ImEET_S1_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI _Tp __complement(_Tp __x) {
   21ed0:	55                   	push   %rbp
   21ed1:	48 89 e5             	mov    %rsp,%rbp
   21ed4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return _Tp(~__x + 1);
   21ed8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21edc:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
   21ee0:	48 83 c0 01          	add    $0x1,%rax
   21ee4:	5d                   	pop    %rbp
   21ee5:	c3                   	ret
   21ee6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   21eed:	00 00 00 

0000000000021ef0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>:
                 bool __negative = false) {
   21ef0:	55                   	push   %rbp
   21ef1:	48 89 e5             	mov    %rsp,%rbp
   21ef4:	48 81 ec 50 02 00 00 	sub    $0x250,%rsp
   21efb:	44 88 c0             	mov    %r8b,%al
   21efe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   21f02:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   21f06:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   21f0a:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   21f0e:	24 01                	and    $0x1,%al
   21f10:	88 45 d7             	mov    %al,-0x29(%rbp)
  switch (__specs.__std_.__type_) {
   21f13:	0f b6 45 e9          	movzbl -0x17(%rbp),%eax
   21f17:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
   21f1e:	48 83 e8 07          	sub    $0x7,%rax
   21f22:	0f 87 30 04 00 00    	ja     22358 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x468>
   21f28:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
   21f2f:	48 8d 05 1e cd 00 00 	lea    0xcd1e(%rip),%rax        # 2ec54 <_ZNSt3__16__itoa11__pow10_128E+0x474>
   21f36:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   21f3a:	48 01 c8             	add    %rcx,%rax
   21f3d:	ff e0                	jmp    *%rax
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0b", 2);
   21f3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21f43:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
   21f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21f4e:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
   21f55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21f59:	48 89 45 84          	mov    %rax,-0x7c(%rbp)
   21f5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21f61:	48 89 45 8c          	mov    %rax,-0x74(%rbp)
   21f65:	8a 45 d7             	mov    -0x29(%rbp),%al
   21f68:	88 85 8f fe ff ff    	mov    %al,-0x171(%rbp)
   21f6e:	48 8d 7d 94          	lea    -0x6c(%rbp),%rdi
   21f72:	e8 29 06 00 00       	call   225a0 <_ZNSt3__15arrayIcLm67EE5beginB8nn210000Ev>
   21f77:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
   21f7e:	48 8d 7d 94          	lea    -0x6c(%rbp),%rdi
   21f82:	e8 39 06 00 00       	call   225c0 <_ZNSt3__15arrayIcLm67EE3endB8nn210000Ev>
   21f87:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
   21f8e:	48 8b b5 78 fe ff ff 	mov    -0x188(%rbp),%rsi
   21f95:	4c 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%r9
   21f9c:	49 89 c2             	mov    %rax,%r10
   21f9f:	8a 85 8f fe ff ff    	mov    -0x171(%rbp),%al
   21fa5:	48 8b 55 84          	mov    -0x7c(%rbp),%rdx
   21fa9:	48 8b 4d 8c          	mov    -0x74(%rbp),%rcx
   21fad:	4c 8d 1d d8 d6 00 00 	lea    0xd6d8(%rip),%r11        # 2f68c <.L.str.44>
   21fb4:	49 89 e0             	mov    %rsp,%r8
   21fb7:	4d 89 58 08          	mov    %r11,0x8(%r8)
   21fbb:	4d 89 10             	mov    %r10,(%r8)
   21fbe:	41 c7 40 10 02 00 00 	movl   $0x2,0x10(%r8)
   21fc5:	00 
   21fc6:	44 0f b6 c0          	movzbl %al,%r8d
   21fca:	41 83 e0 01          	and    $0x1,%r8d
   21fce:	e8 9d 03 00 00       	call   22370 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   21fd3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21fd7:	e9 81 03 00 00       	jmp    2235d <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x46d>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0B", 2);
   21fdc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21fe0:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
   21fe7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   21feb:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
   21ff2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21ff6:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   21ffd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22001:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   22008:	8a 45 d7             	mov    -0x29(%rbp),%al
   2200b:	88 85 6f fe ff ff    	mov    %al,-0x191(%rbp)
   22011:	48 8d bd 41 ff ff ff 	lea    -0xbf(%rbp),%rdi
   22018:	e8 83 05 00 00       	call   225a0 <_ZNSt3__15arrayIcLm67EE5beginB8nn210000Ev>
   2201d:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
   22024:	48 8d bd 41 ff ff ff 	lea    -0xbf(%rbp),%rdi
   2202b:	e8 90 05 00 00       	call   225c0 <_ZNSt3__15arrayIcLm67EE3endB8nn210000Ev>
   22030:	48 8b bd 50 fe ff ff 	mov    -0x1b0(%rbp),%rdi
   22037:	48 8b b5 58 fe ff ff 	mov    -0x1a8(%rbp),%rsi
   2203e:	4c 8b 8d 60 fe ff ff 	mov    -0x1a0(%rbp),%r9
   22045:	49 89 c2             	mov    %rax,%r10
   22048:	8a 85 6f fe ff ff    	mov    -0x191(%rbp),%al
   2204e:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
   22055:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
   2205c:	4c 8d 1d 2c d6 00 00 	lea    0xd62c(%rip),%r11        # 2f68f <.L.str.45>
   22063:	49 89 e0             	mov    %rsp,%r8
   22066:	4d 89 58 08          	mov    %r11,0x8(%r8)
   2206a:	4d 89 10             	mov    %r10,(%r8)
   2206d:	41 c7 40 10 02 00 00 	movl   $0x2,0x10(%r8)
   22074:	00 
   22075:	44 0f b6 c0          	movzbl %al,%r8d
   22079:	41 83 e0 01          	and    $0x1,%r8d
   2207d:	e8 ee 02 00 00       	call   22370 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   22082:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22086:	e9 d2 02 00 00       	jmp    2235d <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x46d>
        __value, __ctx, __specs, __negative, __array.begin(), __array.end(), __value != 0 ? "0" : nullptr, 8);
   2208b:	31 c0                	xor    %eax,%eax
   2208d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22091:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
   22098:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2209c:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
   220a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   220a7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   220ab:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
   220b2:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   220b9:	8a 45 d7             	mov    -0x29(%rbp),%al
   220bc:	88 85 4f fe ff ff    	mov    %al,-0x1b1(%rbp)
   220c2:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
   220c9:	48 89 bd 28 fe ff ff 	mov    %rdi,-0x1d8(%rbp)
   220d0:	e8 0b 05 00 00       	call   225e0 <_ZNSt3__15arrayIcLm24EE5beginB8nn210000Ev>
   220d5:	48 8b bd 28 fe ff ff 	mov    -0x1d8(%rbp),%rdi
   220dc:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
   220e3:	e8 18 05 00 00       	call   22600 <_ZNSt3__15arrayIcLm24EE3endB8nn210000Ev>
   220e8:	48 8b bd 30 fe ff ff 	mov    -0x1d0(%rbp),%rdi
   220ef:	48 8b b5 38 fe ff ff 	mov    -0x1c8(%rbp),%rsi
   220f6:	4c 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%r9
   220fd:	49 89 c2             	mov    %rax,%r10
   22100:	8a 85 4f fe ff ff    	mov    -0x1b1(%rbp),%al
   22106:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2210a:	48 85 c9             	test   %rcx,%rcx
   2210d:	4c 8d 1d 7e d5 00 00 	lea    0xd57e(%rip),%r11        # 2f692 <.L.str.46>
   22114:	4c 0f 44 d9          	cmove  %rcx,%r11
    return __formatter::__format_integer(
   22118:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
   2211f:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
   22126:	49 89 e0             	mov    %rsp,%r8
   22129:	4d 89 58 08          	mov    %r11,0x8(%r8)
   2212d:	4d 89 10             	mov    %r10,(%r8)
   22130:	41 c7 40 10 08 00 00 	movl   $0x8,0x10(%r8)
   22137:	00 
   22138:	44 0f b6 c0          	movzbl %al,%r8d
   2213c:	41 83 e0 01          	and    $0x1,%r8d
   22140:	e8 2b 02 00 00       	call   22370 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   22145:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22149:	e9 0f 02 00 00       	jmp    2235d <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x46d>
        __value, __ctx, __specs, __negative, __array.begin(), __array.end(), nullptr, 10);
   2214e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22152:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
   22159:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2215d:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
   22164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22168:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   2216f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22173:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   2217a:	8a 45 d7             	mov    -0x29(%rbp),%al
   2217d:	88 85 27 fe ff ff    	mov    %al,-0x1d9(%rbp)
   22183:	48 8d bd f3 fe ff ff 	lea    -0x10d(%rbp),%rdi
   2218a:	e8 91 04 00 00       	call   22620 <_ZNSt3__15arrayIcLm21EE5beginB8nn210000Ev>
   2218f:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
   22196:	48 8d bd f3 fe ff ff 	lea    -0x10d(%rbp),%rdi
   2219d:	e8 9e 04 00 00       	call   22640 <_ZNSt3__15arrayIcLm21EE3endB8nn210000Ev>
   221a2:	48 8b bd 08 fe ff ff 	mov    -0x1f8(%rbp),%rdi
   221a9:	48 8b b5 10 fe ff ff 	mov    -0x1f0(%rbp),%rsi
   221b0:	4c 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%r9
   221b7:	49 89 c2             	mov    %rax,%r10
   221ba:	8a 85 27 fe ff ff    	mov    -0x1d9(%rbp),%al
    return __formatter::__format_integer(
   221c0:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
   221c7:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
   221ce:	45 31 c0             	xor    %r8d,%r8d
   221d1:	49 89 e0             	mov    %rsp,%r8
   221d4:	4d 89 10             	mov    %r10,(%r8)
   221d7:	41 c7 40 10 0a 00 00 	movl   $0xa,0x10(%r8)
   221de:	00 
   221df:	49 c7 40 08 00 00 00 	movq   $0x0,0x8(%r8)
   221e6:	00 
   221e7:	44 0f b6 c0          	movzbl %al,%r8d
   221eb:	41 83 e0 01          	and    $0x1,%r8d
   221ef:	e8 7c 01 00 00       	call   22370 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   221f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   221f8:	e9 60 01 00 00       	jmp    2235d <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x46d>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0x", 16);
   221fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22201:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
   22208:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2220c:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
   22213:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22217:	48 89 85 bc fe ff ff 	mov    %rax,-0x144(%rbp)
   2221e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22222:	48 89 85 c4 fe ff ff 	mov    %rax,-0x13c(%rbp)
   22229:	8a 45 d7             	mov    -0x29(%rbp),%al
   2222c:	88 85 07 fe ff ff    	mov    %al,-0x1f9(%rbp)
   22232:	48 8d bd cd fe ff ff 	lea    -0x133(%rbp),%rdi
   22239:	e8 22 04 00 00       	call   22660 <_ZNSt3__15arrayIcLm19EE5beginB8nn210000Ev>
   2223e:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
   22245:	48 8d bd cd fe ff ff 	lea    -0x133(%rbp),%rdi
   2224c:	e8 2f 04 00 00       	call   22680 <_ZNSt3__15arrayIcLm19EE3endB8nn210000Ev>
   22251:	48 8b bd e8 fd ff ff 	mov    -0x218(%rbp),%rdi
   22258:	48 8b b5 f0 fd ff ff 	mov    -0x210(%rbp),%rsi
   2225f:	4c 8b 8d f8 fd ff ff 	mov    -0x208(%rbp),%r9
   22266:	49 89 c2             	mov    %rax,%r10
   22269:	8a 85 07 fe ff ff    	mov    -0x1f9(%rbp),%al
   2226f:	48 8b 95 bc fe ff ff 	mov    -0x144(%rbp),%rdx
   22276:	48 8b 8d c4 fe ff ff 	mov    -0x13c(%rbp),%rcx
   2227d:	4c 8d 1d 10 d4 00 00 	lea    0xd410(%rip),%r11        # 2f694 <.L.str.47>
   22284:	49 89 e0             	mov    %rsp,%r8
   22287:	4d 89 58 08          	mov    %r11,0x8(%r8)
   2228b:	4d 89 10             	mov    %r10,(%r8)
   2228e:	41 c7 40 10 10 00 00 	movl   $0x10,0x10(%r8)
   22295:	00 
   22296:	44 0f b6 c0          	movzbl %al,%r8d
   2229a:	41 83 e0 01          	and    $0x1,%r8d
   2229e:	e8 cd 00 00 00       	call   22370 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   222a3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   222a7:	e9 b1 00 00 00       	jmp    2235d <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x46d>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0X", 16);
   222ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   222b0:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   222b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   222bb:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   222c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   222c6:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
   222cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   222d1:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
   222d8:	8a 45 d7             	mov    -0x29(%rbp),%al
   222db:	88 85 e7 fd ff ff    	mov    %al,-0x219(%rbp)
   222e1:	48 8d bd a9 fe ff ff 	lea    -0x157(%rbp),%rdi
   222e8:	e8 73 03 00 00       	call   22660 <_ZNSt3__15arrayIcLm19EE5beginB8nn210000Ev>
   222ed:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
   222f4:	48 8d bd a9 fe ff ff 	lea    -0x157(%rbp),%rdi
   222fb:	e8 80 03 00 00       	call   22680 <_ZNSt3__15arrayIcLm19EE3endB8nn210000Ev>
   22300:	48 8b bd c8 fd ff ff 	mov    -0x238(%rbp),%rdi
   22307:	48 8b b5 d0 fd ff ff 	mov    -0x230(%rbp),%rsi
   2230e:	4c 8b 8d d8 fd ff ff 	mov    -0x228(%rbp),%r9
   22315:	49 89 c2             	mov    %rax,%r10
   22318:	8a 85 e7 fd ff ff    	mov    -0x219(%rbp),%al
   2231e:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
   22325:	48 8b 8d a0 fe ff ff 	mov    -0x160(%rbp),%rcx
   2232c:	4c 8d 1d 64 d3 00 00 	lea    0xd364(%rip),%r11        # 2f697 <.L.str.48>
   22333:	49 89 e0             	mov    %rsp,%r8
   22336:	4d 89 58 08          	mov    %r11,0x8(%r8)
   2233a:	4d 89 10             	mov    %r10,(%r8)
   2233d:	41 c7 40 10 10 00 00 	movl   $0x10,0x10(%r8)
   22344:	00 
   22345:	44 0f b6 c0          	movzbl %al,%r8d
   22349:	41 83 e0 01          	and    $0x1,%r8d
   2234d:	e8 1e 00 00 00       	call   22370 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   22352:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22356:	eb 05                	jmp    2235d <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x46d>
    __libcpp_unreachable();
   22358:	e8 13 84 ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
}
   2235d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22361:	48 81 c4 50 02 00 00 	add    $0x250,%rsp
   22368:	5d                   	pop    %rbp
   22369:	c3                   	ret
   2236a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000022370 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>:
    int __base) {
   22370:	55                   	push   %rbp
   22371:	48 89 e5             	mov    %rsp,%rbp
   22374:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   2237b:	44 88 c0             	mov    %r8b,%al
   2237e:	44 8b 45 20          	mov    0x20(%rbp),%r8d
   22382:	4c 8b 45 18          	mov    0x18(%rbp),%r8
   22386:	4c 8b 45 10          	mov    0x10(%rbp),%r8
   2238a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2238e:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   22392:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   22396:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   2239a:	24 01                	and    $0x1,%al
   2239c:	88 45 d7             	mov    %al,-0x29(%rbp)
   2239f:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
  _Iterator __first = __formatter::__insert_sign(__begin, __negative, __specs.__std_.__sign_);
   223a3:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   223a7:	8a 45 d7             	mov    -0x29(%rbp),%al
   223aa:	8a 4d e8             	mov    -0x18(%rbp),%cl
   223ad:	c0 e9 03             	shr    $0x3,%cl
   223b0:	80 e1 03             	and    $0x3,%cl
   223b3:	0f b6 d1             	movzbl %cl,%edx
   223b6:	0f b6 f0             	movzbl %al,%esi
   223b9:	83 e6 01             	and    $0x1,%esi
   223bc:	e8 ff bb ff ff       	call   1dfc0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE>
   223c1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  if (__specs.__std_.__alternate_form_ && __prefix)
   223c5:	8a 45 e8             	mov    -0x18(%rbp),%al
   223c8:	c0 e8 05             	shr    $0x5,%al
   223cb:	24 01                	and    $0x1,%al
   223cd:	a8 01                	test   $0x1,%al
   223cf:	74 38                	je     22409 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x99>
   223d1:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
   223d6:	74 31                	je     22409 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x99>
    while (*__prefix)
   223d8:	eb 00                	jmp    223da <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x6a>
   223da:	48 8b 45 18          	mov    0x18(%rbp),%rax
   223de:	80 38 00             	cmpb   $0x0,(%rax)
   223e1:	74 24                	je     22407 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x97>
      *__first++ = *__prefix++;
   223e3:	48 8b 45 18          	mov    0x18(%rbp),%rax
   223e7:	48 89 c1             	mov    %rax,%rcx
   223ea:	48 83 c1 01          	add    $0x1,%rcx
   223ee:	48 89 4d 18          	mov    %rcx,0x18(%rbp)
   223f2:	8a 08                	mov    (%rax),%cl
   223f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   223f8:	48 89 c2             	mov    %rax,%rdx
   223fb:	48 83 c2 01          	add    $0x1,%rdx
   223ff:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   22403:	88 08                	mov    %cl,(%rax)
    while (*__prefix)
   22405:	eb d3                	jmp    223da <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x6a>
   22407:	eb 00                	jmp    22409 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x99>
  _Iterator __last = __formatter::__to_buffer(__first, __end, __value, __base);
   22409:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2240d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
   22411:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   22415:	8b 4d 20             	mov    0x20(%rbp),%ecx
   22418:	e8 83 02 00 00       	call   226a0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_8integralEmQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_S5_T0_i>
   2241d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  auto __out_it = __ctx.out();
   22421:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   22425:	e8 e6 76 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   2242a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  if (__specs.__alignment_ != __format_spec::__alignment::__zero_padding)
   2242e:	8a 45 e8             	mov    -0x18(%rbp),%al
   22431:	24 07                	and    $0x7,%al
   22433:	3c 04                	cmp    $0x4,%al
   22435:	74 0d                	je     22444 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0xd4>
    __first = __begin;
   22437:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2243b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2243f:	e9 80 00 00 00       	jmp    224c4 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x154>
    __out_it                  = __formatter::__copy(__begin, __first, std::move(__out_it));
   22444:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   22448:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   2244f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22453:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   2245a:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   2245e:	e8 3d 77 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   22463:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
   2246a:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   22471:	48 8b 00             	mov    (%rax),%rax
   22474:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   22478:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2247c:	e8 3f bc ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   22481:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   22485:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   22489:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    __specs.__alignment_      = __format_spec::__alignment::__right;
   2248d:	8a 45 e8             	mov    -0x18(%rbp),%al
   22490:	24 f8                	and    $0xf8,%al
   22492:	0c 03                	or     $0x3,%al
   22494:	88 45 e8             	mov    %al,-0x18(%rbp)
    __specs.__fill_.__data[0] = _CharT('0');
   22497:	c6 45 f4 30          	movb   $0x30,-0xc(%rbp)
    int32_t __size            = __first - __begin;
   2249b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2249f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   224a3:	48 29 c8             	sub    %rcx,%rax
   224a6:	89 45 9c             	mov    %eax,-0x64(%rbp)
    __specs.__width_ -= std::min(__size, __specs.__width_);
   224a9:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
   224ad:	48 83 c6 04          	add    $0x4,%rsi
   224b1:	48 8d 7d 9c          	lea    -0x64(%rbp),%rdi
   224b5:	e8 66 bc ff ff       	call   1e120 <_ZNSt3__13minB8nn210000IiEERKT_S3_S3_>
   224ba:	8b 08                	mov    (%rax),%ecx
   224bc:	8b 45 ec             	mov    -0x14(%rbp),%eax
   224bf:	29 c8                	sub    %ecx,%eax
   224c1:	89 45 ec             	mov    %eax,-0x14(%rbp)
  if (__specs.__std_.__type_ != __format_spec::__type::__hexadecimal_upper_case) [[likely]]
   224c4:	80 7d e9 07          	cmpb   $0x7,-0x17(%rbp)
   224c8:	74 58                	je     22522 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x1b2>
    return __formatter::__write(__first, __last, __ctx.out(), __specs);
   224ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   224ce:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   224d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   224d9:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   224e0:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   224e4:	e8 27 76 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   224e9:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
   224f0:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
   224f7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   224fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   224ff:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   22503:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22507:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   2250b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2250f:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   22513:	4c 8b 45 88          	mov    -0x78(%rbp),%r8
   22517:	e8 34 bc ff ff       	call   1e150 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   2251c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22520:	eb 6f                	jmp    22591 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x221>
  return __formatter::__write_transformed(__first, __last, __ctx.out(), __specs, __formatter::__hex_to_upper);
   22522:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22526:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   2252d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   22531:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   22538:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2253c:	e8 cf 75 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   22541:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
   22548:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
   2254f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   22556:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2255a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   22561:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22565:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   2256c:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   22573:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   2257a:	4c 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8
   22581:	4c 8d 0d b8 bd ff ff 	lea    -0x4248(%rip),%r9        # 1e340 <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec>
   22588:	e8 43 bc ff ff       	call   1e1d0 <_ZNSt3__111__formatter19__write_transformedB8nn210000ITkNS_19contiguous_iteratorEPcccPFccETkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_NS_13__format_spec23__parsed_specificationsIT1_EET2_>
   2258d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   22591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22595:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
   2259c:	5d                   	pop    %rbp
   2259d:	c3                   	ret
   2259e:	66 90                	xchg   %ax,%ax

00000000000225a0 <_ZNSt3__15arrayIcLm67EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   225a0:	55                   	push   %rbp
   225a1:	48 89 e5             	mov    %rsp,%rbp
   225a4:	48 83 ec 10          	sub    $0x10,%rsp
   225a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   225ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   225b0:	e8 eb 0a 00 00       	call   230a0 <_ZNSt3__15arrayIcLm67EE4dataB8nn210000Ev>
   225b5:	48 83 c4 10          	add    $0x10,%rsp
   225b9:	5d                   	pop    %rbp
   225ba:	c3                   	ret
   225bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000225c0 <_ZNSt3__15arrayIcLm67EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   225c0:	55                   	push   %rbp
   225c1:	48 89 e5             	mov    %rsp,%rbp
   225c4:	48 83 ec 10          	sub    $0x10,%rsp
   225c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   225cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   225d0:	e8 cb 0a 00 00       	call   230a0 <_ZNSt3__15arrayIcLm67EE4dataB8nn210000Ev>
   225d5:	48 83 c0 43          	add    $0x43,%rax
   225d9:	48 83 c4 10          	add    $0x10,%rsp
   225dd:	5d                   	pop    %rbp
   225de:	c3                   	ret
   225df:	90                   	nop

00000000000225e0 <_ZNSt3__15arrayIcLm24EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   225e0:	55                   	push   %rbp
   225e1:	48 89 e5             	mov    %rsp,%rbp
   225e4:	48 83 ec 10          	sub    $0x10,%rsp
   225e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   225ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   225f0:	e8 bb 0a 00 00       	call   230b0 <_ZNSt3__15arrayIcLm24EE4dataB8nn210000Ev>
   225f5:	48 83 c4 10          	add    $0x10,%rsp
   225f9:	5d                   	pop    %rbp
   225fa:	c3                   	ret
   225fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000022600 <_ZNSt3__15arrayIcLm24EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   22600:	55                   	push   %rbp
   22601:	48 89 e5             	mov    %rsp,%rbp
   22604:	48 83 ec 10          	sub    $0x10,%rsp
   22608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2260c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   22610:	e8 9b 0a 00 00       	call   230b0 <_ZNSt3__15arrayIcLm24EE4dataB8nn210000Ev>
   22615:	48 83 c0 18          	add    $0x18,%rax
   22619:	48 83 c4 10          	add    $0x10,%rsp
   2261d:	5d                   	pop    %rbp
   2261e:	c3                   	ret
   2261f:	90                   	nop

0000000000022620 <_ZNSt3__15arrayIcLm21EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   22620:	55                   	push   %rbp
   22621:	48 89 e5             	mov    %rsp,%rbp
   22624:	48 83 ec 10          	sub    $0x10,%rsp
   22628:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2262c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   22630:	e8 8b 0a 00 00       	call   230c0 <_ZNSt3__15arrayIcLm21EE4dataB8nn210000Ev>
   22635:	48 83 c4 10          	add    $0x10,%rsp
   22639:	5d                   	pop    %rbp
   2263a:	c3                   	ret
   2263b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000022640 <_ZNSt3__15arrayIcLm21EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   22640:	55                   	push   %rbp
   22641:	48 89 e5             	mov    %rsp,%rbp
   22644:	48 83 ec 10          	sub    $0x10,%rsp
   22648:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2264c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   22650:	e8 6b 0a 00 00       	call   230c0 <_ZNSt3__15arrayIcLm21EE4dataB8nn210000Ev>
   22655:	48 83 c0 15          	add    $0x15,%rax
   22659:	48 83 c4 10          	add    $0x10,%rsp
   2265d:	5d                   	pop    %rbp
   2265e:	c3                   	ret
   2265f:	90                   	nop

0000000000022660 <_ZNSt3__15arrayIcLm19EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   22660:	55                   	push   %rbp
   22661:	48 89 e5             	mov    %rsp,%rbp
   22664:	48 83 ec 10          	sub    $0x10,%rsp
   22668:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2266c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   22670:	e8 5b 0a 00 00       	call   230d0 <_ZNSt3__15arrayIcLm19EE4dataB8nn210000Ev>
   22675:	48 83 c4 10          	add    $0x10,%rsp
   22679:	5d                   	pop    %rbp
   2267a:	c3                   	ret
   2267b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000022680 <_ZNSt3__15arrayIcLm19EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   22680:	55                   	push   %rbp
   22681:	48 89 e5             	mov    %rsp,%rbp
   22684:	48 83 ec 10          	sub    $0x10,%rsp
   22688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2268c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   22690:	e8 3b 0a 00 00       	call   230d0 <_ZNSt3__15arrayIcLm19EE4dataB8nn210000Ev>
   22695:	48 83 c0 13          	add    $0x13,%rax
   22699:	48 83 c4 10          	add    $0x10,%rsp
   2269d:	5d                   	pop    %rbp
   2269e:	c3                   	ret
   2269f:	90                   	nop

00000000000226a0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_8integralEmQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_S5_T0_i>:
_LIBCPP_HIDE_FROM_ABI _Iterator __to_buffer(_Iterator __first, _Iterator __last, _Tp __value, int __base) {
   226a0:	55                   	push   %rbp
   226a1:	48 89 e5             	mov    %rsp,%rbp
   226a4:	48 83 ec 50          	sub    $0x50,%rsp
   226a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   226ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   226b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   226b4:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  to_chars_result __r = std::to_chars(std::to_address(__first), std::to_address(__last), __value, __base);
   226b7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   226bb:	e8 20 bd ff ff       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   226c0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   226c4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   226c8:	e8 13 bd ff ff       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   226cd:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   226d1:	48 89 c6             	mov    %rax,%rsi
   226d4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   226d8:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
   226db:	e8 40 00 00 00       	call   22720 <_ZNSt3__18to_charsB8nn210000ImTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_i>
   226e0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   226e4:	89 55 d8             	mov    %edx,-0x28(%rbp)
  auto __diff = __r.ptr - std::to_address(__first);
   226e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   226eb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   226ef:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   226f3:	e8 e8 bc ff ff       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   226f8:	48 89 c1             	mov    %rax,%rcx
   226fb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   226ff:	48 29 c8             	sub    %rcx,%rax
   22702:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  return __first + __diff;
   22706:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2270a:	48 03 45 c8          	add    -0x38(%rbp),%rax
   2270e:	48 83 c4 50          	add    $0x50,%rsp
   22712:	5d                   	pop    %rbp
   22713:	c3                   	ret
   22714:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2271b:	00 00 00 
   2271e:	66 90                	xchg   %ax,%ax

0000000000022720 <_ZNSt3__18to_charsB8nn210000ImTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_i>:
to_chars(char* __first, char* __last, _Tp __value, int __base) {
   22720:	55                   	push   %rbp
   22721:	48 89 e5             	mov    %rsp,%rbp
   22724:	48 83 ec 30          	sub    $0x30,%rsp
   22728:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2272c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   22730:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   22734:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  return std::__to_chars_integral(__first, __last, static_cast<_Type>(__value), __base, is_signed<_Tp>());
   22737:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2273b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2273f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   22743:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
   22746:	e8 15 00 00 00       	call   22760 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE>
   2274b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2274f:	89 55 f8             	mov    %edx,-0x8(%rbp)
   22752:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22756:	8b 55 f8             	mov    -0x8(%rbp),%edx
   22759:	48 83 c4 30          	add    $0x30,%rsp
   2275d:	5d                   	pop    %rbp
   2275e:	c3                   	ret
   2275f:	90                   	nop

0000000000022760 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE>:
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, false_type) {
   22760:	55                   	push   %rbp
   22761:	48 89 e5             	mov    %rsp,%rbp
   22764:	48 83 ec 60          	sub    $0x60,%rsp
   22768:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   2276c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   22770:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   22774:	89 4d cc             	mov    %ecx,-0x34(%rbp)
  if (__base == 10) [[likely]]
   22777:	83 7d cc 0a          	cmpl   $0xa,-0x34(%rbp)
   2277b:	75 1d                	jne    2279a <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x3a>
    return std::__to_chars_itoa(__first, __last, __value, false_type());
   2277d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   22781:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   22785:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   22789:	e8 52 01 00 00       	call   228e0 <_ZNSt3__115__to_chars_itoaB8nn210000ImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE>
   2278e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22792:	89 55 f8             	mov    %edx,-0x8(%rbp)
   22795:	e9 2b 01 00 00       	jmp    228c5 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x165>
  switch (__base) {
   2279a:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2279d:	89 45 a8             	mov    %eax,-0x58(%rbp)
   227a0:	83 e8 02             	sub    $0x2,%eax
   227a3:	74 16                	je     227bb <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x5b>
   227a5:	eb 00                	jmp    227a7 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x47>
   227a7:	8b 45 a8             	mov    -0x58(%rbp),%eax
   227aa:	83 e8 08             	sub    $0x8,%eax
   227ad:	74 29                	je     227d8 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x78>
   227af:	eb 00                	jmp    227b1 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x51>
   227b1:	8b 45 a8             	mov    -0x58(%rbp),%eax
   227b4:	83 e8 10             	sub    $0x10,%eax
   227b7:	74 3c                	je     227f5 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x95>
   227b9:	eb 57                	jmp    22812 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0xb2>
    return std::__to_chars_integral<2>(__first, __last, __value);
   227bb:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   227bf:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   227c3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   227c7:	e8 94 01 00 00       	call   22960 <_ZNSt3__119__to_chars_integralB8nn210000ILj2EmTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   227cc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   227d0:	89 55 f8             	mov    %edx,-0x8(%rbp)
   227d3:	e9 ed 00 00 00       	jmp    228c5 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x165>
    return std::__to_chars_integral<8>(__first, __last, __value);
   227d8:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   227dc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   227e0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   227e4:	e8 b7 01 00 00       	call   229a0 <_ZNSt3__119__to_chars_integralB8nn210000ILj8EmTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   227e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   227ed:	89 55 f8             	mov    %edx,-0x8(%rbp)
   227f0:	e9 d0 00 00 00       	jmp    228c5 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x165>
    return std::__to_chars_integral<16>(__first, __last, __value);
   227f5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   227f9:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   227fd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   22801:	e8 da 01 00 00       	call   229e0 <_ZNSt3__119__to_chars_integralB8nn210000ILj16EmTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   22806:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2280a:	89 55 f8             	mov    %edx,-0x8(%rbp)
   2280d:	e9 b3 00 00 00       	jmp    228c5 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x165>
  ptrdiff_t __cap = __last - __first;
   22812:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22816:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2281a:	48 29 c8             	sub    %rcx,%rax
   2281d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  int __n         = std::__to_chars_integral_width(__value, __base);
   22821:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   22825:	8b 75 cc             	mov    -0x34(%rbp),%esi
   22828:	e8 f3 01 00 00       	call   22a20 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j>
   2282d:	89 45 bc             	mov    %eax,-0x44(%rbp)
  if (__n > __cap)
   22830:	48 63 45 bc          	movslq -0x44(%rbp),%rax
   22834:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   22838:	7e 11                	jle    2284b <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0xeb>
    return {__last, errc::value_too_large};
   2283a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2283e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22842:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   22849:	eb 7a                	jmp    228c5 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x165>
  __last    = __first + __n;
   2284b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2284f:	48 63 4d bc          	movslq -0x44(%rbp),%rcx
   22853:	48 01 c8             	add    %rcx,%rax
   22856:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  char* __p = __last;
   2285a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2285e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    unsigned __c = __value % __base;
   22862:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   22866:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   2286a:	31 d2                	xor    %edx,%edx
   2286c:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
   22870:	48 f7 f1             	div    %rcx
   22873:	48 89 d0             	mov    %rdx,%rax
   22876:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2287a:	89 45 ac             	mov    %eax,-0x54(%rbp)
    __value /= __base;
   2287d:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   22881:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   22885:	48 f7 f1             	div    %rcx
   22888:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    *--__p = "0123456789abcdefghijklmnopqrstuvwxyz"[__c];
   2288c:	8b 45 ac             	mov    -0x54(%rbp),%eax
   2288f:	89 c1                	mov    %eax,%ecx
   22891:	48 8d 05 02 ce 00 00 	lea    0xce02(%rip),%rax        # 2f69a <.L.str.49>
   22898:	48 01 c8             	add    %rcx,%rax
   2289b:	8a 08                	mov    (%rax),%cl
   2289d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   228a1:	48 89 c2             	mov    %rax,%rdx
   228a4:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   228a8:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
   228ac:	88 48 ff             	mov    %cl,-0x1(%rax)
  } while (__value != 0);
   228af:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   228b4:	75 ac                	jne    22862 <_ZNSt3__119__to_chars_integralB8nn210000ImEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x102>
  return {__last, errc(0)};
   228b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   228ba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   228be:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
}
   228c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   228c9:	8b 55 f8             	mov    -0x8(%rbp),%edx
   228cc:	48 83 c4 60          	add    $0x60,%rsp
   228d0:	5d                   	pop    %rbp
   228d1:	c3                   	ret
   228d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   228d9:	00 00 00 
   228dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000228e0 <_ZNSt3__115__to_chars_itoaB8nn210000ImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE>:
__to_chars_itoa(char* __first, char* __last, _Tp __value, false_type) {
   228e0:	55                   	push   %rbp
   228e1:	48 89 e5             	mov    %rsp,%rbp
   228e4:	48 83 ec 40          	sub    $0x40,%rsp
   228e8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   228ec:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   228f0:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  auto __diff = __last - __first;
   228f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   228f8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   228fc:	48 29 c8             	sub    %rcx,%rax
   228ff:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (__tx::digits <= __diff || __tx::__width(__value) <= __diff)
   22903:	b8 14 00 00 00       	mov    $0x14,%eax
   22908:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   2290c:	7e 11                	jle    2291f <_ZNSt3__115__to_chars_itoaB8nn210000ImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0x3f>
   2290e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   22912:	e8 b9 01 00 00       	call   22ad0 <_ZNSt3__16__itoa13__traits_baseImvE7__widthB8nn210000Em>
   22917:	48 98                	cltq
   22919:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   2291d:	7f 1a                	jg     22939 <_ZNSt3__115__to_chars_itoaB8nn210000ImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0x59>
    return {__tx::__convert(__first, __value), errc(0)};
   2291f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   22923:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   22927:	e8 04 02 00 00       	call   22b30 <_ZNSt3__16__itoa13__traits_baseImvE9__convertB8nn210000EPcm>
   2292c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22930:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
   22937:	eb 0f                	jmp    22948 <_ZNSt3__115__to_chars_itoaB8nn210000ImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0x68>
    return {__last, errc::value_too_large};
   22939:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2293d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22941:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
}
   22948:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2294c:	8b 55 f8             	mov    -0x8(%rbp),%edx
   2294f:	48 83 c4 40          	add    $0x40,%rsp
   22953:	5d                   	pop    %rbp
   22954:	c3                   	ret
   22955:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2295c:	00 00 00 
   2295f:	90                   	nop

0000000000022960 <_ZNSt3__119__to_chars_integralB8nn210000ILj2EmTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   22960:	55                   	push   %rbp
   22961:	48 89 e5             	mov    %rsp,%rbp
   22964:	48 83 ec 30          	sub    $0x30,%rsp
   22968:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2296c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   22970:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   22974:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   22978:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2297c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   22980:	e8 eb 02 00 00       	call   22c70 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_>
   22985:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22989:	89 55 f8             	mov    %edx,-0x8(%rbp)
   2298c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22990:	8b 55 f8             	mov    -0x8(%rbp),%edx
   22993:	48 83 c4 30          	add    $0x30,%rsp
   22997:	5d                   	pop    %rbp
   22998:	c3                   	ret
   22999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000229a0 <_ZNSt3__119__to_chars_integralB8nn210000ILj8EmTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   229a0:	55                   	push   %rbp
   229a1:	48 89 e5             	mov    %rsp,%rbp
   229a4:	48 83 ec 30          	sub    $0x30,%rsp
   229a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   229ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   229b0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   229b4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   229b8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   229bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   229c0:	e8 eb 03 00 00       	call   22db0 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_>
   229c5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   229c9:	89 55 f8             	mov    %edx,-0x8(%rbp)
   229cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   229d0:	8b 55 f8             	mov    -0x8(%rbp),%edx
   229d3:	48 83 c4 30          	add    $0x30,%rsp
   229d7:	5d                   	pop    %rbp
   229d8:	c3                   	ret
   229d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000229e0 <_ZNSt3__119__to_chars_integralB8nn210000ILj16EmTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   229e0:	55                   	push   %rbp
   229e1:	48 89 e5             	mov    %rsp,%rbp
   229e4:	48 83 ec 30          	sub    $0x30,%rsp
   229e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   229ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   229f0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   229f4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   229f8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   229fc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   22a00:	e8 1b 05 00 00       	call   22f20 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_>
   22a05:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22a09:	89 55 f8             	mov    %edx,-0x8(%rbp)
   22a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22a10:	8b 55 f8             	mov    -0x8(%rbp),%edx
   22a13:	48 83 c4 30          	add    $0x30,%rsp
   22a17:	5d                   	pop    %rbp
   22a18:	c3                   	ret
   22a19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000022a20 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI int __to_chars_integral_width(_Tp __value, unsigned __base) {
   22a20:	55                   	push   %rbp
   22a21:	48 89 e5             	mov    %rsp,%rbp
   22a24:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   22a28:	89 75 ec             	mov    %esi,-0x14(%rbp)
  unsigned __base_2 = __base * __base;
   22a2b:	8b 45 ec             	mov    -0x14(%rbp),%eax
   22a2e:	0f af 45 ec          	imul   -0x14(%rbp),%eax
   22a32:	89 45 e8             	mov    %eax,-0x18(%rbp)
  unsigned __base_3 = __base_2 * __base;
   22a35:	8b 45 e8             	mov    -0x18(%rbp),%eax
   22a38:	0f af 45 ec          	imul   -0x14(%rbp),%eax
   22a3c:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  unsigned __base_4 = __base_2 * __base_2;
   22a3f:	8b 45 e8             	mov    -0x18(%rbp),%eax
   22a42:	0f af 45 e8          	imul   -0x18(%rbp),%eax
   22a46:	89 45 e0             	mov    %eax,-0x20(%rbp)
  int __r = 0;
   22a49:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
    if (__value < __base)
   22a50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22a54:	8b 4d ec             	mov    -0x14(%rbp),%ecx
   22a57:	48 39 c8             	cmp    %rcx,%rax
   22a5a:	73 0b                	jae    22a67 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0x47>
      return __r + 1;
   22a5c:	8b 45 dc             	mov    -0x24(%rbp),%eax
   22a5f:	83 c0 01             	add    $0x1,%eax
   22a62:	89 45 fc             	mov    %eax,-0x4(%rbp)
   22a65:	eb 62                	jmp    22ac9 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0xa9>
    if (__value < __base_2)
   22a67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22a6b:	8b 4d e8             	mov    -0x18(%rbp),%ecx
   22a6e:	48 39 c8             	cmp    %rcx,%rax
   22a71:	73 0b                	jae    22a7e <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0x5e>
      return __r + 2;
   22a73:	8b 45 dc             	mov    -0x24(%rbp),%eax
   22a76:	83 c0 02             	add    $0x2,%eax
   22a79:	89 45 fc             	mov    %eax,-0x4(%rbp)
   22a7c:	eb 4b                	jmp    22ac9 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0xa9>
    if (__value < __base_3)
   22a7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22a82:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
   22a85:	48 39 c8             	cmp    %rcx,%rax
   22a88:	73 0b                	jae    22a95 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0x75>
      return __r + 3;
   22a8a:	8b 45 dc             	mov    -0x24(%rbp),%eax
   22a8d:	83 c0 03             	add    $0x3,%eax
   22a90:	89 45 fc             	mov    %eax,-0x4(%rbp)
   22a93:	eb 34                	jmp    22ac9 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0xa9>
    if (__value < __base_4)
   22a95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22a99:	8b 4d e0             	mov    -0x20(%rbp),%ecx
   22a9c:	48 39 c8             	cmp    %rcx,%rax
   22a9f:	73 0b                	jae    22aac <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0x8c>
      return __r + 4;
   22aa1:	8b 45 dc             	mov    -0x24(%rbp),%eax
   22aa4:	83 c0 04             	add    $0x4,%eax
   22aa7:	89 45 fc             	mov    %eax,-0x4(%rbp)
   22aaa:	eb 1d                	jmp    22ac9 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0xa9>
    __value /= __base_4;
   22aac:	8b 45 e0             	mov    -0x20(%rbp),%eax
   22aaf:	89 c1                	mov    %eax,%ecx
   22ab1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22ab5:	31 d2                	xor    %edx,%edx
   22ab7:	48 f7 f1             	div    %rcx
   22aba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    __r += 4;
   22abe:	8b 45 dc             	mov    -0x24(%rbp),%eax
   22ac1:	83 c0 04             	add    $0x4,%eax
   22ac4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  while (true) {
   22ac7:	eb 87                	jmp    22a50 <_ZNSt3__125__to_chars_integral_widthB8nn210000ImEEiT_j+0x30>
}
   22ac9:	8b 45 fc             	mov    -0x4(%rbp),%eax
   22acc:	5d                   	pop    %rbp
   22acd:	c3                   	ret
   22ace:	66 90                	xchg   %ax,%ax

0000000000022ad0 <_ZNSt3__16__itoa13__traits_baseImvE7__widthB8nn210000Em>:
  static _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI int __width(_Tp __v) {
   22ad0:	55                   	push   %rbp
   22ad1:	48 89 e5             	mov    %rsp,%rbp
   22ad4:	48 83 ec 10          	sub    $0x10,%rsp
   22ad8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    auto __t = (64 - std::__libcpp_clz(static_cast<type>(__v | 1))) * 1233 >> 12;
   22adc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   22ae0:	48 83 cf 01          	or     $0x1,%rdi
   22ae4:	e8 77 00 00 00       	call   22b60 <_ZNSt3__112__libcpp_clzB8nn210000Em>
   22ae9:	89 c1                	mov    %eax,%ecx
   22aeb:	b8 40 00 00 00       	mov    $0x40,%eax
   22af0:	29 c8                	sub    %ecx,%eax
   22af2:	69 c0 d1 04 00 00    	imul   $0x4d1,%eax,%eax
   22af8:	c1 f8 0c             	sar    $0xc,%eax
   22afb:	89 45 f4             	mov    %eax,-0xc(%rbp)
    return __t - (__v < __itoa::__pow10_64[__t]) + 1;
   22afe:	8b 45 f4             	mov    -0xc(%rbp),%eax
   22b01:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   22b05:	48 63 f0             	movslq %eax,%rsi
   22b08:	48 8d 15 31 bc 00 00 	lea    0xbc31(%rip),%rdx        # 2e740 <_ZNSt3__16__itoa10__pow10_64E>
   22b0f:	48 8d 14 f2          	lea    (%rdx,%rsi,8),%rdx
   22b13:	48 3b 0a             	cmp    (%rdx),%rcx
   22b16:	0f 92 c1             	setb   %cl
   22b19:	80 e1 01             	and    $0x1,%cl
   22b1c:	0f b6 c9             	movzbl %cl,%ecx
   22b1f:	29 c8                	sub    %ecx,%eax
   22b21:	83 c0 01             	add    $0x1,%eax
   22b24:	48 83 c4 10          	add    $0x10,%rsp
   22b28:	5d                   	pop    %rbp
   22b29:	c3                   	ret
   22b2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000022b30 <_ZNSt3__16__itoa13__traits_baseImvE9__convertB8nn210000EPcm>:
  static _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI char* __convert(char* __p, _Tp __v) {
   22b30:	55                   	push   %rbp
   22b31:	48 89 e5             	mov    %rsp,%rbp
   22b34:	48 83 ec 10          	sub    $0x10,%rsp
   22b38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22b3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __itoa::__base_10_u64(__p, __v);
   22b40:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   22b44:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   22b48:	e8 33 00 00 00       	call   22b80 <_ZNSt3__16__itoa13__base_10_u64B8nn210000EPcm>
   22b4d:	48 83 c4 10          	add    $0x10,%rsp
   22b51:	5d                   	pop    %rbp
   22b52:	c3                   	ret
   22b53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   22b5a:	00 00 00 
   22b5d:	0f 1f 00             	nopl   (%rax)

0000000000022b60 <_ZNSt3__112__libcpp_clzB8nn210000Em>:
}

[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR int __libcpp_clz(unsigned long __x) _NOEXCEPT {
   22b60:	55                   	push   %rbp
   22b61:	48 89 e5             	mov    %rsp,%rbp
   22b64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_clzl(__x);
   22b68:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   22b6c:	48 0f bd c1          	bsr    %rcx,%rax
   22b70:	48 83 f0 3f          	xor    $0x3f,%rax
   22b74:	5d                   	pop    %rbp
   22b75:	c3                   	ret
   22b76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   22b7d:	00 00 00 

0000000000022b80 <_ZNSt3__16__itoa13__base_10_u64B8nn210000EPcm>:

_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char*
__base_10_u64(char* __buffer, uint64_t __value) noexcept {
   22b80:	55                   	push   %rbp
   22b81:	48 89 e5             	mov    %rsp,%rbp
   22b84:	48 83 ec 20          	sub    $0x20,%rsp
   22b88:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   22b8c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  if (__value <= UINT32_MAX)
   22b90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22b95:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   22b99:	77 15                	ja     22bb0 <_ZNSt3__16__itoa13__base_10_u64B8nn210000EPcm+0x30>
    return __itoa::__base_10_u32(__buffer, static_cast<uint32_t>(__value));
   22b9b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   22b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22ba3:	89 c6                	mov    %eax,%esi
   22ba5:	e8 56 bc ff ff       	call   1e800 <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj>
   22baa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22bae:	eb 5a                	jmp    22c0a <_ZNSt3__16__itoa13__base_10_u64B8nn210000EPcm+0x8a>

  // Numbers in the range UINT32_MAX <= val < 10'000'000'000 always contain 10
  // digits and are outputted after this if statement.
  if (__value >= 10000000000) {
   22bb0:	48 b8 00 e4 0b 54 02 	movabs $0x2540be400,%rax
   22bb7:	00 00 00 
   22bba:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   22bbe:	72 39                	jb     22bf9 <_ZNSt3__16__itoa13__base_10_u64B8nn210000EPcm+0x79>
    // This function properly deterimines the first non-zero leading digit.
    __buffer = __itoa::__base_10_u32(__buffer, static_cast<uint32_t>(__value / 10000000000));
   22bc0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   22bc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22bc8:	48 b9 00 e4 0b 54 02 	movabs $0x2540be400,%rcx
   22bcf:	00 00 00 
   22bd2:	31 d2                	xor    %edx,%edx
   22bd4:	48 f7 f1             	div    %rcx
   22bd7:	89 c6                	mov    %eax,%esi
   22bd9:	e8 22 bc ff ff       	call   1e800 <_ZNSt3__16__itoa13__base_10_u32B8nn210000EPcj>
   22bde:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    __value %= 10000000000;
   22be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22be6:	48 b9 00 e4 0b 54 02 	movabs $0x2540be400,%rcx
   22bed:	00 00 00 
   22bf0:	31 d2                	xor    %edx,%edx
   22bf2:	48 f7 f1             	div    %rcx
   22bf5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  }
  return __itoa::__append10(__buffer, __value);
   22bf9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   22bfd:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   22c01:	e8 1a 00 00 00       	call   22c20 <_ZNSt3__16__itoa10__append10B8nn210000ImEEPcS2_T_>
   22c06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   22c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22c0e:	48 83 c4 20          	add    $0x20,%rsp
   22c12:	5d                   	pop    %rbp
   22c13:	c3                   	ret
   22c14:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   22c1b:	00 00 00 
   22c1e:	66 90                	xchg   %ax,%ax

0000000000022c20 <_ZNSt3__16__itoa10__append10B8nn210000ImEEPcS2_T_>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI char* __append10(char* __first, _Tp __value) noexcept {
   22c20:	55                   	push   %rbp
   22c21:	48 89 e5             	mov    %rsp,%rbp
   22c24:	48 83 ec 10          	sub    $0x10,%rsp
   22c28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   22c2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return __itoa::__append8(__itoa::__append2(__first, static_cast<uint32_t>(__value / 100000000)),
   22c30:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   22c34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22c38:	b9 00 e1 f5 05       	mov    $0x5f5e100,%ecx
   22c3d:	31 d2                	xor    %edx,%edx
   22c3f:	48 f7 f1             	div    %rcx
   22c42:	89 c6                	mov    %eax,%esi
   22c44:	e8 17 bd ff ff       	call   1e960 <_ZNSt3__16__itoa9__append2B8nn210000EPcj>
   22c49:	48 89 c7             	mov    %rax,%rdi
                           static_cast<uint32_t>(__value % 100000000));
   22c4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22c50:	b9 00 e1 f5 05       	mov    $0x5f5e100,%ecx
   22c55:	31 d2                	xor    %edx,%edx
   22c57:	48 f7 f1             	div    %rcx
   22c5a:	89 d6                	mov    %edx,%esi
  return __itoa::__append8(__itoa::__append2(__first, static_cast<uint32_t>(__value / 100000000)),
   22c5c:	e8 cf be ff ff       	call   1eb30 <_ZNSt3__16__itoa9__append8B8nn210000EPcj>
   22c61:	48 83 c4 10          	add    $0x10,%rsp
   22c65:	5d                   	pop    %rbp
   22c66:	c3                   	ret
   22c67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   22c6e:	00 00 

0000000000022c70 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   22c70:	55                   	push   %rbp
   22c71:	48 89 e5             	mov    %rsp,%rbp
   22c74:	48 83 ec 50          	sub    $0x50,%rsp
   22c78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22c7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   22c80:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    ptrdiff_t __cap = __last - __first;
   22c84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22c88:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   22c8c:	48 29 c8             	sub    %rcx,%rax
   22c8f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    int __n         = __width(__value);
   22c93:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   22c97:	e8 e4 00 00 00       	call   22d80 <_ZNSt3__16__itoa10__integralILj2EE7__widthB8nn210000ImEEiT_>
   22c9c:	89 45 cc             	mov    %eax,-0x34(%rbp)
    if (__n > __cap)
   22c9f:	48 63 45 cc          	movslq -0x34(%rbp),%rax
   22ca3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   22ca7:	7e 14                	jle    22cbd <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x4d>
      return {__last, errc::value_too_large};
   22ca9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22cad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22cb1:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   22cb8:	e9 b5 00 00 00       	jmp    22d72 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x102>
    __last                   = __first + __n;
   22cbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22cc1:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   22cc5:	48 01 c8             	add    %rcx,%rax
   22cc8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    char* __p                = __last;
   22ccc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22cd0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    const unsigned __divisor = 16;
   22cd4:	c7 45 bc 10 00 00 00 	movl   $0x10,-0x44(%rbp)
    while (__value > __divisor) {
   22cdb:	48 83 7d d8 10       	cmpq   $0x10,-0x28(%rbp)
   22ce0:	76 41                	jbe    22d23 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xb3>
      unsigned __c = __value % __divisor;
   22ce2:	8b 45 d8             	mov    -0x28(%rbp),%eax
   22ce5:	83 e0 0f             	and    $0xf,%eax
   22ce8:	89 45 b8             	mov    %eax,-0x48(%rbp)
      __value /= __divisor;
   22ceb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22cef:	48 c1 e8 04          	shr    $0x4,%rax
   22cf3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      __p -= 4;
   22cf7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22cfb:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
   22cff:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      std::copy_n(&__base_2_lut[4 * __c], 4, __p);
   22d03:	8b 45 b8             	mov    -0x48(%rbp),%eax
   22d06:	c1 e0 02             	shl    $0x2,%eax
   22d09:	48 8d 3d 70 94 00 00 	lea    0x9470(%rip),%rdi        # 2c180 <_ZNSt3__16__itoa12__base_2_lutE>
   22d10:	48 01 c7             	add    %rax,%rdi
   22d13:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   22d17:	be 04 00 00 00       	mov    $0x4,%esi
   22d1c:	e8 ff be ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   22d21:	eb b8                	jmp    22cdb <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x6b>
    do {
   22d23:	eb 00                	jmp    22d25 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xb5>
      unsigned __c = __value % 2;
   22d25:	8b 45 d8             	mov    -0x28(%rbp),%eax
   22d28:	83 e0 01             	and    $0x1,%eax
   22d2b:	89 45 b4             	mov    %eax,-0x4c(%rbp)
      __value /= 2;
   22d2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22d32:	48 d1 e8             	shr    $1,%rax
   22d35:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      *--__p = "01"[__c];
   22d39:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   22d3c:	89 c1                	mov    %eax,%ecx
   22d3e:	48 8d 05 7a c9 00 00 	lea    0xc97a(%rip),%rax        # 2f6bf <.L.str.50>
   22d45:	48 01 c8             	add    %rcx,%rax
   22d48:	8a 08                	mov    (%rax),%cl
   22d4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22d4e:	48 89 c2             	mov    %rax,%rdx
   22d51:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   22d55:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   22d59:	88 48 ff             	mov    %cl,-0x1(%rax)
    } while (__value != 0);
   22d5c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   22d61:	75 c2                	jne    22d25 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xb5>
    return {__last, errc(0)};
   22d63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22d67:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22d6b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   22d72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22d76:	8b 55 f8             	mov    -0x8(%rbp),%edx
   22d79:	48 83 c4 50          	add    $0x50,%rsp
   22d7d:	5d                   	pop    %rbp
   22d7e:	c3                   	ret
   22d7f:	90                   	nop

0000000000022d80 <_ZNSt3__16__itoa10__integralILj2EE7__widthB8nn210000ImEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   22d80:	55                   	push   %rbp
   22d81:	48 89 e5             	mov    %rsp,%rbp
   22d84:	48 83 ec 10          	sub    $0x10,%rsp
   22d88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1);
   22d8c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   22d90:	48 83 cf 01          	or     $0x1,%rdi
   22d94:	e8 c7 fd ff ff       	call   22b60 <_ZNSt3__112__libcpp_clzB8nn210000Em>
   22d99:	89 c1                	mov    %eax,%ecx
   22d9b:	b8 40 00 00 00       	mov    $0x40,%eax
   22da0:	29 c8                	sub    %ecx,%eax
   22da2:	48 83 c4 10          	add    $0x10,%rsp
   22da6:	5d                   	pop    %rbp
   22da7:	c3                   	ret
   22da8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   22daf:	00 

0000000000022db0 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   22db0:	55                   	push   %rbp
   22db1:	48 89 e5             	mov    %rsp,%rbp
   22db4:	48 83 ec 60          	sub    $0x60,%rsp
   22db8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22dbc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   22dc0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    ptrdiff_t __cap = __last - __first;
   22dc4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22dc8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   22dcc:	48 29 c8             	sub    %rcx,%rax
   22dcf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    int __n         = __width(__value);
   22dd3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   22dd7:	e8 04 01 00 00       	call   22ee0 <_ZNSt3__16__itoa10__integralILj8EE7__widthB8nn210000ImEEiT_>
   22ddc:	89 45 cc             	mov    %eax,-0x34(%rbp)
    if (__n > __cap)
   22ddf:	48 63 45 cc          	movslq -0x34(%rbp),%rax
   22de3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   22de7:	7e 14                	jle    22dfd <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x4d>
      return {__last, errc::value_too_large};
   22de9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22ded:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22df1:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   22df8:	e9 cf 00 00 00       	jmp    22ecc <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x11c>
    __last             = __first + __n;
   22dfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22e01:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   22e05:	48 01 c8             	add    %rcx,%rax
   22e08:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    char* __p          = __last;
   22e0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22e10:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    unsigned __divisor = 64;
   22e14:	c7 45 bc 40 00 00 00 	movl   $0x40,-0x44(%rbp)
    while (__value > __divisor) {
   22e1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22e1f:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   22e22:	48 39 c8             	cmp    %rcx,%rax
   22e25:	76 55                	jbe    22e7c <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xcc>
      unsigned __c = __value % __divisor;
   22e27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22e2b:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   22e2e:	31 d2                	xor    %edx,%edx
   22e30:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   22e34:	48 f7 f1             	div    %rcx
   22e37:	48 89 d0             	mov    %rdx,%rax
   22e3a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   22e3e:	89 45 b8             	mov    %eax,-0x48(%rbp)
      __value /= __divisor;
   22e41:	8b 45 bc             	mov    -0x44(%rbp),%eax
   22e44:	89 c1                	mov    %eax,%ecx
   22e46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22e4a:	48 f7 f1             	div    %rcx
   22e4d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      __p -= 2;
   22e51:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22e55:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   22e59:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      std::copy_n(&__base_8_lut[2 * __c], 2, __p);
   22e5d:	8b 45 b8             	mov    -0x48(%rbp),%eax
   22e60:	01 c0                	add    %eax,%eax
   22e62:	48 8d 3d 57 93 00 00 	lea    0x9357(%rip),%rdi        # 2c1c0 <_ZNSt3__16__itoa12__base_8_lutE>
   22e69:	48 01 c7             	add    %rax,%rdi
   22e6c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   22e70:	be 02 00 00 00       	mov    $0x2,%esi
   22e75:	e8 a6 bd ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   22e7a:	eb 9f                	jmp    22e1b <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x6b>
    do {
   22e7c:	eb 00                	jmp    22e7e <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xce>
      unsigned __c = __value % 8;
   22e7e:	8b 45 d8             	mov    -0x28(%rbp),%eax
   22e81:	83 e0 07             	and    $0x7,%eax
   22e84:	89 45 b4             	mov    %eax,-0x4c(%rbp)
      __value /= 8;
   22e87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22e8b:	48 c1 e8 03          	shr    $0x3,%rax
   22e8f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      *--__p = "01234567"[__c];
   22e93:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   22e96:	89 c1                	mov    %eax,%ecx
   22e98:	48 8d 05 23 c8 00 00 	lea    0xc823(%rip),%rax        # 2f6c2 <.L.str.51>
   22e9f:	48 01 c8             	add    %rcx,%rax
   22ea2:	8a 08                	mov    (%rax),%cl
   22ea4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22ea8:	48 89 c2             	mov    %rax,%rdx
   22eab:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   22eaf:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   22eb3:	88 48 ff             	mov    %cl,-0x1(%rax)
    } while (__value != 0);
   22eb6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   22ebb:	75 c1                	jne    22e7e <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xce>
    return {__last, errc(0)};
   22ebd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22ec1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22ec5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   22ecc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   22ed0:	8b 55 f8             	mov    -0x8(%rbp),%edx
   22ed3:	48 83 c4 60          	add    $0x60,%rsp
   22ed7:	5d                   	pop    %rbp
   22ed8:	c3                   	ret
   22ed9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000022ee0 <_ZNSt3__16__itoa10__integralILj8EE7__widthB8nn210000ImEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   22ee0:	55                   	push   %rbp
   22ee1:	48 89 e5             	mov    %rsp,%rbp
   22ee4:	48 83 ec 10          	sub    $0x10,%rsp
   22ee8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return ((numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1)) + 2) / 3;
   22eec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   22ef0:	48 83 cf 01          	or     $0x1,%rdi
   22ef4:	e8 67 fc ff ff       	call   22b60 <_ZNSt3__112__libcpp_clzB8nn210000Em>
   22ef9:	89 c1                	mov    %eax,%ecx
   22efb:	b8 40 00 00 00       	mov    $0x40,%eax
   22f00:	29 c8                	sub    %ecx,%eax
   22f02:	83 c0 02             	add    $0x2,%eax
   22f05:	b9 03 00 00 00       	mov    $0x3,%ecx
   22f0a:	99                   	cltd
   22f0b:	f7 f9                	idiv   %ecx
   22f0d:	48 83 c4 10          	add    $0x10,%rsp
   22f11:	5d                   	pop    %rbp
   22f12:	c3                   	ret
   22f13:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   22f1a:	00 00 00 
   22f1d:	0f 1f 00             	nopl   (%rax)

0000000000022f20 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   22f20:	55                   	push   %rbp
   22f21:	48 89 e5             	mov    %rsp,%rbp
   22f24:	48 83 ec 60          	sub    $0x60,%rsp
   22f28:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22f2c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   22f30:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    ptrdiff_t __cap = __last - __first;
   22f34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22f38:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   22f3c:	48 29 c8             	sub    %rcx,%rax
   22f3f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    int __n         = __width(__value);
   22f43:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   22f47:	e8 14 01 00 00       	call   23060 <_ZNSt3__16__itoa10__integralILj16EE7__widthB8nn210000ImEEiT_>
   22f4c:	89 45 cc             	mov    %eax,-0x34(%rbp)
    if (__n > __cap)
   22f4f:	48 63 45 cc          	movslq -0x34(%rbp),%rax
   22f53:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   22f57:	7e 14                	jle    22f6d <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x4d>
      return {__last, errc::value_too_large};
   22f59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22f5d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   22f61:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   22f68:	e9 db 00 00 00       	jmp    23048 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x128>
    __last             = __first + __n;
   22f6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22f71:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   22f75:	48 01 c8             	add    %rcx,%rax
   22f78:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    char* __p          = __last;
   22f7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   22f80:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    unsigned __divisor = 256;
   22f84:	c7 45 bc 00 01 00 00 	movl   $0x100,-0x44(%rbp)
    while (__value > __divisor) {
   22f8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22f8f:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   22f92:	48 39 c8             	cmp    %rcx,%rax
   22f95:	76 55                	jbe    22fec <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xcc>
      unsigned __c = __value % __divisor;
   22f97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22f9b:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   22f9e:	31 d2                	xor    %edx,%edx
   22fa0:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   22fa4:	48 f7 f1             	div    %rcx
   22fa7:	48 89 d0             	mov    %rdx,%rax
   22faa:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   22fae:	89 45 b8             	mov    %eax,-0x48(%rbp)
      __value /= __divisor;
   22fb1:	8b 45 bc             	mov    -0x44(%rbp),%eax
   22fb4:	89 c1                	mov    %eax,%ecx
   22fb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   22fba:	48 f7 f1             	div    %rcx
   22fbd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      __p -= 2;
   22fc1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   22fc5:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   22fc9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      std::copy_n(&__base_16_lut[2 * __c], 2, __p);
   22fcd:	8b 45 b8             	mov    -0x48(%rbp),%eax
   22fd0:	01 c0                	add    %eax,%eax
   22fd2:	48 8d 3d 67 92 00 00 	lea    0x9267(%rip),%rdi        # 2c240 <_ZNSt3__16__itoa13__base_16_lutE>
   22fd9:	48 01 c7             	add    %rax,%rdi
   22fdc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   22fe0:	be 02 00 00 00       	mov    $0x2,%esi
   22fe5:	e8 36 bc ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   22fea:	eb 9f                	jmp    22f8b <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x6b>
    if (__first != __last)
   22fec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22ff0:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   22ff4:	74 43                	je     23039 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x119>
      do {
   22ff6:	eb 00                	jmp    22ff8 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xd8>
        unsigned __c = __value % 16;
   22ff8:	8b 45 d8             	mov    -0x28(%rbp),%eax
   22ffb:	83 e0 0f             	and    $0xf,%eax
   22ffe:	89 45 b4             	mov    %eax,-0x4c(%rbp)
        __value /= 16;
   23001:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   23005:	48 c1 e8 04          	shr    $0x4,%rax
   23009:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        *--__p = "0123456789abcdef"[__c];
   2300d:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   23010:	89 c1                	mov    %eax,%ecx
   23012:	48 8d 05 b2 c6 00 00 	lea    0xc6b2(%rip),%rax        # 2f6cb <.L.str.52>
   23019:	48 01 c8             	add    %rcx,%rax
   2301c:	8a 08                	mov    (%rax),%cl
   2301e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23022:	48 89 c2             	mov    %rax,%rdx
   23025:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   23029:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2302d:	88 48 ff             	mov    %cl,-0x1(%rax)
      } while (__value != 0);
   23030:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   23035:	75 c1                	jne    22ff8 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0xd8>
   23037:	eb 00                	jmp    23039 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000ImEENS_15to_chars_resultEPcS5_T_+0x119>
    return {__last, errc(0)};
   23039:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2303d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   23041:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   23048:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2304c:	8b 55 f8             	mov    -0x8(%rbp),%edx
   2304f:	48 83 c4 60          	add    $0x60,%rsp
   23053:	5d                   	pop    %rbp
   23054:	c3                   	ret
   23055:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2305c:	00 00 00 
   2305f:	90                   	nop

0000000000023060 <_ZNSt3__16__itoa10__integralILj16EE7__widthB8nn210000ImEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   23060:	55                   	push   %rbp
   23061:	48 89 e5             	mov    %rsp,%rbp
   23064:	48 83 ec 10          	sub    $0x10,%rsp
   23068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return (numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1) + 3) / 4;
   2306c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   23070:	48 83 cf 01          	or     $0x1,%rdi
   23074:	e8 e7 fa ff ff       	call   22b60 <_ZNSt3__112__libcpp_clzB8nn210000Em>
   23079:	89 c1                	mov    %eax,%ecx
   2307b:	b8 40 00 00 00       	mov    $0x40,%eax
   23080:	29 c8                	sub    %ecx,%eax
   23082:	83 c0 03             	add    $0x3,%eax
   23085:	b9 04 00 00 00       	mov    $0x4,%ecx
   2308a:	99                   	cltd
   2308b:	f7 f9                	idiv   %ecx
   2308d:	48 83 c4 10          	add    $0x10,%rsp
   23091:	5d                   	pop    %rbp
   23092:	c3                   	ret
   23093:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2309a:	00 00 00 
   2309d:	0f 1f 00             	nopl   (%rax)

00000000000230a0 <_ZNSt3__15arrayIcLm67EE4dataB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 value_type* data() _NOEXCEPT { return __elems_; }
   230a0:	55                   	push   %rbp
   230a1:	48 89 e5             	mov    %rsp,%rbp
   230a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   230a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   230ac:	5d                   	pop    %rbp
   230ad:	c3                   	ret
   230ae:	66 90                	xchg   %ax,%ax

00000000000230b0 <_ZNSt3__15arrayIcLm24EE4dataB8nn210000Ev>:
   230b0:	55                   	push   %rbp
   230b1:	48 89 e5             	mov    %rsp,%rbp
   230b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   230b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   230bc:	5d                   	pop    %rbp
   230bd:	c3                   	ret
   230be:	66 90                	xchg   %ax,%ax

00000000000230c0 <_ZNSt3__15arrayIcLm21EE4dataB8nn210000Ev>:
   230c0:	55                   	push   %rbp
   230c1:	48 89 e5             	mov    %rsp,%rbp
   230c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   230c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   230cc:	5d                   	pop    %rbp
   230cd:	c3                   	ret
   230ce:	66 90                	xchg   %ax,%ax

00000000000230d0 <_ZNSt3__15arrayIcLm19EE4dataB8nn210000Ev>:
   230d0:	55                   	push   %rbp
   230d1:	48 89 e5             	mov    %rsp,%rbp
   230d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   230d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   230dc:	5d                   	pop    %rbp
   230dd:	c3                   	ret
   230de:	66 90                	xchg   %ax,%ax

00000000000230e0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRnEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   230e0:	55                   	push   %rbp
   230e1:	48 89 e5             	mov    %rsp,%rbp
   230e4:	48 83 ec 20          	sub    $0x20,%rsp
   230e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   230ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   230f0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   230f4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   230f8:	48 8b 01             	mov    (%rcx),%rax
   230fb:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   230ff:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   23103:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   23107:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2310b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2310f:	e8 0c 00 00 00       	call   23120 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clInEEDaSC_>
   23114:	48 83 c4 20          	add    $0x20,%rsp
   23118:	5d                   	pop    %rbp
   23119:	c3                   	ret
   2311a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000023120 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clInEEDaSC_>:
        [&](auto __arg) {
   23120:	55                   	push   %rbp
   23121:	48 89 e5             	mov    %rsp,%rbp
   23124:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   2312b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2312f:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   23133:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   23137:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2313b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2313f:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   23143:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   23147:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2314b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   2314f:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   23153:	e8 88 00 00 00       	call   231e0 <_ZNSt3__19formatterIncEC2Ev>
   23158:	48 8b 45 98          	mov    -0x68(%rbp),%rax
            if (__parse)
   2315c:	48 8b 40 10          	mov    0x10(%rax),%rax
   23160:	f6 00 01             	testb  $0x1,(%rax)
   23163:	74 23                	je     23188 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clInEEDaSC_+0x68>
   23165:	48 8b 45 98          	mov    -0x68(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   23169:	48 8b 08             	mov    (%rax),%rcx
   2316c:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
   23170:	48 8b 30             	mov    (%rax),%rsi
   23173:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   23177:	e8 34 e7 ff ff       	call   218b0 <_ZNSt3__119__formatter_integerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   2317c:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   23180:	48 89 c6             	mov    %rax,%rsi
   23183:	e8 98 6c ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   23188:	48 8b 45 98          	mov    -0x68(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   2318c:	48 8b 48 08          	mov    0x8(%rax),%rcx
   23190:	48 89 c8             	mov    %rcx,%rax
   23193:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   23197:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2319b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2319f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   231a3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   231a7:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   231ab:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   231af:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   231b3:	e8 48 00 00 00       	call   23200 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEnNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   231b8:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   231bc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   231c0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   231c4:	e8 97 69 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   231c9:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   231d0:	5d                   	pop    %rbp
   231d1:	c3                   	ret
   231d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   231d9:	00 00 00 
   231dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000231e0 <_ZNSt3__19formatterIncEC2Ev>:
#  if _LIBCPP_HAS_INT128
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<__int128_t, _CharT> : public __formatter_integer<_CharT> {};
   231e0:	55                   	push   %rbp
   231e1:	48 89 e5             	mov    %rsp,%rbp
   231e4:	48 83 ec 10          	sub    $0x10,%rsp
   231e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   231ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   231f0:	e8 ab e7 ff ff       	call   219a0 <_ZNSt3__119__formatter_integerIcEC2Ev>
   231f5:	48 83 c4 10          	add    $0x10,%rsp
   231f9:	5d                   	pop    %rbp
   231fa:	c3                   	ret
   231fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000023200 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEnNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   23200:	55                   	push   %rbp
   23201:	48 89 e5             	mov    %rsp,%rbp
   23204:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   2320b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2320f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   23213:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   23217:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2321b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2321f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   23223:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   23227:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2322b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    __format_spec::__parsed_specifications<_CharT> __specs = __parser_.__get_parsed_std_specifications(__ctx);
   2322f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   23233:	e8 d8 88 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   23238:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2323c:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
    if (__specs.__std_.__type_ == __format_spec::__type::__char)
   23240:	80 7d a9 0a          	cmpb   $0xa,-0x57(%rbp)
   23244:	75 6b                	jne    232b1 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEnNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0xb1>
      return __formatter::__format_char(__value, __ctx.out(), __specs);
   23246:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2324a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   23251:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   23255:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   2325c:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   23260:	e8 ab 68 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   23265:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
   2326c:	48 89 c2             	mov    %rax,%rdx
   2326f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   23276:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
   2327a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2327e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   23282:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
   23286:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
   2328a:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
   2328e:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   23292:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   23296:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
   2329a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2329e:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   232a2:	4c 8b 45 98          	mov    -0x68(%rbp),%r8
   232a6:	e8 75 00 00 00       	call   23320 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEnTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>
   232ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   232af:	eb 55                	jmp    23306 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEnNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x106>
    return __formatter::__format_integer(static_cast<_Type>(__value), __ctx, __specs);
   232b1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   232b5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   232b9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   232bd:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   232c1:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   232c5:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
   232cc:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
   232d3:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
   232da:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   232e1:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   232e8:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   232ef:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
   232f6:	4c 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%r8
   232fd:	e8 6e 01 00 00       	call   23470 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralEncNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>
   23302:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   23306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2330a:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   23311:	5d                   	pop    %rbp
   23312:	c3                   	ret
   23313:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2331a:	00 00 00 
   2331d:	0f 1f 00             	nopl   (%rax)

0000000000023320 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEnTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>:
              __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   23320:	55                   	push   %rbp
   23321:	48 89 e5             	mov    %rsp,%rbp
   23324:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   2332b:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
   23332:	48 89 d0             	mov    %rdx,%rax
   23335:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   2333c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   23343:	48 89 f0             	mov    %rsi,%rax
   23346:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   2334d:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   23351:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   23355:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   23359:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2335d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   23361:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   23365:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
   23369:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2336d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      if (__value < numeric_limits<_CharT>::min() || __value > numeric_limits<_CharT>::max())
   23371:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   23375:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   23379:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2337d:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   23381:	e8 da e7 ff ff       	call   21b60 <_ZNSt3__114numeric_limitsIcE3minB8nn210000Ev>
   23386:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   2338a:	88 c1                	mov    %al,%cl
   2338c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   23390:	48 0f be f1          	movsbq %cl,%rsi
   23394:	48 89 f1             	mov    %rsi,%rcx
   23397:	48 c1 f9 3f          	sar    $0x3f,%rcx
   2339b:	48 29 f2             	sub    %rsi,%rdx
   2339e:	48 19 c8             	sbb    %rcx,%rax
   233a1:	7c 40                	jl     233e3 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEnTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0xc3>
   233a3:	eb 00                	jmp    233a5 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEnTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x85>
   233a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   233a9:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   233b0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   233b4:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   233bb:	e8 b0 e7 ff ff       	call   21b70 <_ZNSt3__114numeric_limitsIcE3maxB8nn210000Ev>
   233c0:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   233c7:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   233ce:	48 0f be d0          	movsbq %al,%rdx
   233d2:	48 89 d0             	mov    %rdx,%rax
   233d5:	48 c1 f8 3f          	sar    $0x3f,%rax
   233d9:	48 29 f2             	sub    %rsi,%rdx
   233dc:	48 19 c8             	sbb    %rcx,%rax
   233df:	7d 0e                	jge    233ef <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEnTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0xcf>
   233e1:	eb 00                	jmp    233e3 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEnTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0xc3>
        std::__throw_format_error("Integral value outside the range of the char type");
   233e3:	48 8d 3d 23 c3 00 00 	lea    0xc323(%rip),%rdi        # 2f70d <.L.str.71>
   233ea:	e8 51 67 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  const auto __c = static_cast<_CharT>(__value);
   233ef:	8a 45 b0             	mov    -0x50(%rbp),%al
   233f2:	88 45 af             	mov    %al,-0x51(%rbp)
   233f5:	48 8d 7d af          	lea    -0x51(%rbp),%rdi
  return __formatter::__write(std::addressof(__c), std::addressof(__c) + 1, std::move(__out_it), __specs);
   233f9:	e8 c2 57 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   233fe:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   23405:	48 8d 7d af          	lea    -0x51(%rbp),%rdi
   23409:	e8 b2 57 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   2340e:	48 83 c0 01          	add    $0x1,%rax
   23412:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   23419:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   2341d:	e8 7e 67 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   23422:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
   23429:	48 8b b5 58 ff ff ff 	mov    -0xa8(%rbp),%rsi
   23430:	48 8b 00             	mov    (%rax),%rax
   23433:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   23437:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2343b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2343f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   23443:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   23447:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2344b:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   2344f:	4c 8b 45 98          	mov    -0x68(%rbp),%r8
   23453:	e8 b8 8b ff ff       	call   1c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   23458:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2345c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23460:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   23467:	5d                   	pop    %rbp
   23468:	c3                   	ret
   23469:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000023470 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralEncNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>:
__format_integer(_Tp __value, _FormatContext& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) {
   23470:	55                   	push   %rbp
   23471:	48 89 e5             	mov    %rsp,%rbp
   23474:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   2347b:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
   23482:	48 89 f0             	mov    %rsi,%rax
   23485:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
   2348c:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   23490:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   23494:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   23498:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2349c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   234a0:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   234a4:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   234a8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   234ac:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  auto __r        = std::__to_unsigned_like(__value);
   234b0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   234b4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   234b8:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   234bc:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   234c0:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   234c4:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   234c8:	e8 f3 00 00 00       	call   235c0 <_ZNSt3__118__to_unsigned_likeB8nn210000InEEu15__make_unsignedIT_ES1_>
   234cd:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   234d1:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
   234d5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   234d9:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   234dd:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   234e1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  bool __negative = __value < 0;
   234e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   234e9:	48 c1 e8 3f          	shr    $0x3f,%rax
   234ed:	24 01                	and    $0x1,%al
   234ef:	88 85 7f ff ff ff    	mov    %al,-0x81(%rbp)
  if (__negative)
   234f5:	f6 85 7f ff ff ff 01 	testb  $0x1,-0x81(%rbp)
   234fc:	74 4d                	je     2354b <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_15signed_integralEncNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0xdb>
    __r = std::__complement(__r);
   234fe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   23502:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   23506:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
   2350d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   23514:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   2351b:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   23522:	e8 d9 00 00 00       	call   23600 <_ZNSt3__112__complementB8nn210000IoEET_S1_>
   23527:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   2352e:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
   23535:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   2353c:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
   23543:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   23547:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  return __formatter::__format_integer(__r, __ctx, __specs, __negative);
   2354b:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   2354f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   23553:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   23557:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2355b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2355f:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
   23566:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   2356d:	8a 85 7f ff ff ff    	mov    -0x81(%rbp),%al
   23573:	48 89 b5 38 ff ff ff 	mov    %rsi,-0xc8(%rbp)
   2357a:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
   23581:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
   23588:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
   2358f:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
   23596:	4c 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%r8
   2359d:	44 0f b6 c8          	movzbl %al,%r9d
   235a1:	41 83 e1 01          	and    $0x1,%r9d
   235a5:	e8 96 00 00 00       	call   23640 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   235aa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   235ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   235b2:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   235b9:	5d                   	pop    %rbp
   235ba:	c3                   	ret
   235bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000235c0 <_ZNSt3__118__to_unsigned_likeB8nn210000InEEu15__make_unsignedIT_ES1_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR __make_unsigned_t<_Tp> __to_unsigned_like(_Tp __x) _NOEXCEPT {
   235c0:	55                   	push   %rbp
   235c1:	48 89 e5             	mov    %rsp,%rbp
   235c4:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   235c8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   235cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   235d0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   235d4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   235d8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  return static_cast<__make_unsigned_t<_Tp> >(__x);
   235dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   235e0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   235e4:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   235e8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   235ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   235f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   235f4:	5d                   	pop    %rbp
   235f5:	c3                   	ret
   235f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   235fd:	00 00 00 

0000000000023600 <_ZNSt3__112__complementB8nn210000IoEET_S1_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI _Tp __complement(_Tp __x) {
   23600:	55                   	push   %rbp
   23601:	48 89 e5             	mov    %rsp,%rbp
   23604:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   23608:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   2360c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   23610:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   23614:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   23618:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  return _Tp(~__x + 1);
   2361c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   23620:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   23624:	31 c0                	xor    %eax,%eax
   23626:	48 f7 d9             	neg    %rcx
   23629:	48 19 d0             	sbb    %rdx,%rax
   2362c:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   23630:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   23634:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   23638:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2363c:	5d                   	pop    %rbp
   2363d:	c3                   	ret
   2363e:	66 90                	xchg   %ax,%ax

0000000000023640 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>:
                 bool __negative = false) {
   23640:	55                   	push   %rbp
   23641:	48 89 e5             	mov    %rsp,%rbp
   23644:	53                   	push   %rbx
   23645:	48 81 ec 28 04 00 00 	sub    $0x428,%rsp
   2364c:	48 89 8d 10 fd ff ff 	mov    %rcx,-0x2f0(%rbp)
   23653:	48 89 f9             	mov    %rdi,%rcx
   23656:	48 8b bd 10 fd ff ff 	mov    -0x2f0(%rbp),%rdi
   2365d:	44 88 c8             	mov    %r9b,%al
   23660:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   23664:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   23668:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2366c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   23670:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   23674:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   23678:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   2367c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   23680:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   23684:	24 01                	and    $0x1,%al
   23686:	88 45 b7             	mov    %al,-0x49(%rbp)
  switch (__specs.__std_.__type_) {
   23689:	0f b6 45 d1          	movzbl -0x2f(%rbp),%eax
   2368d:	48 89 85 18 fd ff ff 	mov    %rax,-0x2e8(%rbp)
   23694:	48 83 e8 07          	sub    $0x7,%rax
   23698:	0f 87 99 05 00 00    	ja     23c37 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x5f7>
   2369e:	48 8b 8d 18 fd ff ff 	mov    -0x2e8(%rbp),%rcx
   236a5:	48 8d 05 c8 b5 00 00 	lea    0xb5c8(%rip),%rax        # 2ec74 <_ZNSt3__16__itoa11__pow10_128E+0x494>
   236ac:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   236b0:	48 01 c8             	add    %rcx,%rax
   236b3:	ff e0                	jmp    *%rax
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0b", 2);
   236b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   236b9:	48 89 85 f0 fc ff ff 	mov    %rax,-0x310(%rbp)
   236c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   236c4:	48 89 85 e8 fc ff ff 	mov    %rax,-0x318(%rbp)
   236cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   236cf:	48 89 85 00 fd ff ff 	mov    %rax,-0x300(%rbp)
   236d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   236da:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   236de:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
   236e5:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   236ec:	8a 45 b7             	mov    -0x49(%rbp),%al
   236ef:	88 85 0f fd ff ff    	mov    %al,-0x2f1(%rbp)
   236f5:	48 8d bd 34 ff ff ff 	lea    -0xcc(%rbp),%rdi
   236fc:	48 89 bd e0 fc ff ff 	mov    %rdi,-0x320(%rbp)
   23703:	e8 d8 07 00 00       	call   23ee0 <_ZNSt3__15arrayIcLm131EE5beginB8nn210000Ev>
   23708:	48 8b bd e0 fc ff ff 	mov    -0x320(%rbp),%rdi
   2370f:	48 89 85 f8 fc ff ff 	mov    %rax,-0x308(%rbp)
   23716:	e8 e5 07 00 00       	call   23f00 <_ZNSt3__15arrayIcLm131EE3endB8nn210000Ev>
   2371b:	48 8b b5 e8 fc ff ff 	mov    -0x318(%rbp),%rsi
   23722:	48 8b 8d f0 fc ff ff 	mov    -0x310(%rbp),%rcx
   23729:	4c 8b 95 f8 fc ff ff 	mov    -0x308(%rbp),%r10
   23730:	48 8b 95 00 fd ff ff 	mov    -0x300(%rbp),%rdx
   23737:	49 89 c3             	mov    %rax,%r11
   2373a:	8a 85 0f fd ff ff    	mov    -0x2f1(%rbp),%al
   23740:	48 89 b5 18 ff ff ff 	mov    %rsi,-0xe8(%rbp)
   23747:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
   2374e:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
   23755:	48 8b b5 18 ff ff ff 	mov    -0xe8(%rbp),%rsi
   2375c:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
   23763:	4c 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%r8
   2376a:	48 8d 1d 1b bf 00 00 	lea    0xbf1b(%rip),%rbx        # 2f68c <.L.str.44>
   23771:	49 89 e1             	mov    %rsp,%r9
   23774:	49 89 59 10          	mov    %rbx,0x10(%r9)
   23778:	4d 89 59 08          	mov    %r11,0x8(%r9)
   2377c:	4d 89 11             	mov    %r10,(%r9)
   2377f:	41 c7 41 18 02 00 00 	movl   $0x2,0x18(%r9)
   23786:	00 
   23787:	44 0f b6 c8          	movzbl %al,%r9d
   2378b:	41 83 e1 01          	and    $0x1,%r9d
   2378f:	e8 bc 04 00 00       	call   23c50 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   23794:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   23798:	e9 9f 04 00 00       	jmp    23c3c <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x5fc>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0B", 2);
   2379d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   237a1:	48 89 85 c0 fc ff ff 	mov    %rax,-0x340(%rbp)
   237a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   237ac:	48 89 85 b8 fc ff ff 	mov    %rax,-0x348(%rbp)
   237b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   237b7:	48 89 85 d0 fc ff ff 	mov    %rax,-0x330(%rbp)
   237be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   237c2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   237c6:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
   237cd:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
   237d4:	8a 45 b7             	mov    -0x49(%rbp),%al
   237d7:	88 85 df fc ff ff    	mov    %al,-0x321(%rbp)
   237dd:	48 8d bd 8d fe ff ff 	lea    -0x173(%rbp),%rdi
   237e4:	48 89 bd b0 fc ff ff 	mov    %rdi,-0x350(%rbp)
   237eb:	e8 f0 06 00 00       	call   23ee0 <_ZNSt3__15arrayIcLm131EE5beginB8nn210000Ev>
   237f0:	48 8b bd b0 fc ff ff 	mov    -0x350(%rbp),%rdi
   237f7:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
   237fe:	e8 fd 06 00 00       	call   23f00 <_ZNSt3__15arrayIcLm131EE3endB8nn210000Ev>
   23803:	48 8b b5 b8 fc ff ff 	mov    -0x348(%rbp),%rsi
   2380a:	48 8b 8d c0 fc ff ff 	mov    -0x340(%rbp),%rcx
   23811:	4c 8b 95 c8 fc ff ff 	mov    -0x338(%rbp),%r10
   23818:	48 8b 95 d0 fc ff ff 	mov    -0x330(%rbp),%rdx
   2381f:	49 89 c3             	mov    %rax,%r11
   23822:	8a 85 df fc ff ff    	mov    -0x321(%rbp),%al
   23828:	48 89 b5 68 fe ff ff 	mov    %rsi,-0x198(%rbp)
   2382f:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
   23836:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
   2383d:	48 8b b5 68 fe ff ff 	mov    -0x198(%rbp),%rsi
   23844:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
   2384b:	4c 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%r8
   23852:	48 8d 1d 36 be 00 00 	lea    0xbe36(%rip),%rbx        # 2f68f <.L.str.45>
   23859:	49 89 e1             	mov    %rsp,%r9
   2385c:	49 89 59 10          	mov    %rbx,0x10(%r9)
   23860:	4d 89 59 08          	mov    %r11,0x8(%r9)
   23864:	4d 89 11             	mov    %r10,(%r9)
   23867:	41 c7 41 18 02 00 00 	movl   $0x2,0x18(%r9)
   2386e:	00 
   2386f:	44 0f b6 c8          	movzbl %al,%r9d
   23873:	41 83 e1 01          	and    $0x1,%r9d
   23877:	e8 d4 03 00 00       	call   23c50 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   2387c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   23880:	e9 b7 03 00 00       	jmp    23c3c <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x5fc>
        __value, __ctx, __specs, __negative, __array.begin(), __array.end(), __value != 0 ? "0" : nullptr, 8);
   23885:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23889:	48 89 85 90 fc ff ff 	mov    %rax,-0x370(%rbp)
   23890:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   23894:	48 89 85 88 fc ff ff 	mov    %rax,-0x378(%rbp)
   2389b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2389f:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
   238a6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   238aa:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   238ae:	48 89 8d 28 fe ff ff 	mov    %rcx,-0x1d8(%rbp)
   238b5:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
   238bc:	8a 45 b7             	mov    -0x49(%rbp),%al
   238bf:	88 85 af fc ff ff    	mov    %al,-0x351(%rbp)
   238c5:	48 8d bd 33 fe ff ff 	lea    -0x1cd(%rbp),%rdi
   238cc:	48 89 bd 80 fc ff ff 	mov    %rdi,-0x380(%rbp)
   238d3:	e8 58 06 00 00       	call   23f30 <_ZNSt3__15arrayIcLm45EE5beginB8nn210000Ev>
   238d8:	48 8b bd 80 fc ff ff 	mov    -0x380(%rbp),%rdi
   238df:	48 89 85 98 fc ff ff 	mov    %rax,-0x368(%rbp)
   238e6:	e8 65 06 00 00       	call   23f50 <_ZNSt3__15arrayIcLm45EE3endB8nn210000Ev>
   238eb:	48 8b b5 88 fc ff ff 	mov    -0x378(%rbp),%rsi
   238f2:	48 8b 8d 90 fc ff ff 	mov    -0x370(%rbp),%rcx
   238f9:	4c 8b 95 98 fc ff ff 	mov    -0x368(%rbp),%r10
   23900:	48 8b 95 a0 fc ff ff 	mov    -0x360(%rbp),%rdx
   23907:	49 89 c3             	mov    %rax,%r11
   2390a:	8a 85 af fc ff ff    	mov    -0x351(%rbp),%al
   23910:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   23914:	4c 8b 4d c8          	mov    -0x38(%rbp),%r9
   23918:	45 31 c0             	xor    %r8d,%r8d
   2391b:	4c 09 cf             	or     %r9,%rdi
   2391e:	48 8d 3d 6d bd 00 00 	lea    0xbd6d(%rip),%rdi        # 2f692 <.L.str.46>
   23925:	44 89 c3             	mov    %r8d,%ebx
   23928:	48 0f 45 df          	cmovne %rdi,%rbx
    return __formatter::__format_integer(
   2392c:	48 89 b5 18 fe ff ff 	mov    %rsi,-0x1e8(%rbp)
   23933:	48 89 8d 10 fe ff ff 	mov    %rcx,-0x1f0(%rbp)
   2393a:	48 8b bd 10 fe ff ff 	mov    -0x1f0(%rbp),%rdi
   23941:	48 8b b5 18 fe ff ff 	mov    -0x1e8(%rbp),%rsi
   23948:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
   2394f:	4c 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%r8
   23956:	49 89 e1             	mov    %rsp,%r9
   23959:	49 89 59 10          	mov    %rbx,0x10(%r9)
   2395d:	4d 89 59 08          	mov    %r11,0x8(%r9)
   23961:	4d 89 11             	mov    %r10,(%r9)
   23964:	41 c7 41 18 08 00 00 	movl   $0x8,0x18(%r9)
   2396b:	00 
   2396c:	44 0f b6 c8          	movzbl %al,%r9d
   23970:	41 83 e1 01          	and    $0x1,%r9d
   23974:	e8 d7 02 00 00       	call   23c50 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   23979:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2397d:	e9 ba 02 00 00       	jmp    23c3c <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x5fc>
        __value, __ctx, __specs, __negative, __array.begin(), __array.end(), nullptr, 10);
   23982:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23986:	48 89 85 60 fc ff ff 	mov    %rax,-0x3a0(%rbp)
   2398d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   23991:	48 89 85 58 fc ff ff 	mov    %rax,-0x3a8(%rbp)
   23998:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2399c:	48 89 85 70 fc ff ff 	mov    %rax,-0x390(%rbp)
   239a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   239a7:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   239ab:	48 89 8d e0 fd ff ff 	mov    %rcx,-0x220(%rbp)
   239b2:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
   239b9:	8a 45 b7             	mov    -0x49(%rbp),%al
   239bc:	88 85 7f fc ff ff    	mov    %al,-0x381(%rbp)
   239c2:	48 8d bd e8 fd ff ff 	lea    -0x218(%rbp),%rdi
   239c9:	48 89 bd 50 fc ff ff 	mov    %rdi,-0x3b0(%rbp)
   239d0:	e8 9b 05 00 00       	call   23f70 <_ZNSt3__15arrayIcLm40EE5beginB8nn210000Ev>
   239d5:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
   239dc:	48 89 85 68 fc ff ff 	mov    %rax,-0x398(%rbp)
   239e3:	e8 a8 05 00 00       	call   23f90 <_ZNSt3__15arrayIcLm40EE3endB8nn210000Ev>
   239e8:	48 8b b5 58 fc ff ff 	mov    -0x3a8(%rbp),%rsi
   239ef:	48 8b 8d 60 fc ff ff 	mov    -0x3a0(%rbp),%rcx
   239f6:	4c 8b 95 68 fc ff ff 	mov    -0x398(%rbp),%r10
   239fd:	48 8b 95 70 fc ff ff 	mov    -0x390(%rbp),%rdx
   23a04:	49 89 c3             	mov    %rax,%r11
   23a07:	8a 85 7f fc ff ff    	mov    -0x381(%rbp),%al
    return __formatter::__format_integer(
   23a0d:	48 89 b5 c8 fd ff ff 	mov    %rsi,-0x238(%rbp)
   23a14:	48 89 8d c0 fd ff ff 	mov    %rcx,-0x240(%rbp)
   23a1b:	48 8b bd c0 fd ff ff 	mov    -0x240(%rbp),%rdi
   23a22:	48 8b b5 c8 fd ff ff 	mov    -0x238(%rbp),%rsi
   23a29:	48 8b 8d d8 fd ff ff 	mov    -0x228(%rbp),%rcx
   23a30:	4c 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%r8
   23a37:	45 31 c9             	xor    %r9d,%r9d
   23a3a:	49 89 e1             	mov    %rsp,%r9
   23a3d:	4d 89 59 08          	mov    %r11,0x8(%r9)
   23a41:	4d 89 11             	mov    %r10,(%r9)
   23a44:	41 c7 41 18 0a 00 00 	movl   $0xa,0x18(%r9)
   23a4b:	00 
   23a4c:	49 c7 41 10 00 00 00 	movq   $0x0,0x10(%r9)
   23a53:	00 
   23a54:	44 0f b6 c8          	movzbl %al,%r9d
   23a58:	41 83 e1 01          	and    $0x1,%r9d
   23a5c:	e8 ef 01 00 00       	call   23c50 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   23a61:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   23a65:	e9 d2 01 00 00       	jmp    23c3c <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x5fc>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0x", 16);
   23a6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23a6e:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
   23a75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   23a79:	48 89 85 28 fc ff ff 	mov    %rax,-0x3d8(%rbp)
   23a80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   23a84:	48 89 85 40 fc ff ff 	mov    %rax,-0x3c0(%rbp)
   23a8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   23a8f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   23a93:	48 89 8d 90 fd ff ff 	mov    %rcx,-0x270(%rbp)
   23a9a:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
   23aa1:	8a 45 b7             	mov    -0x49(%rbp),%al
   23aa4:	88 85 4f fc ff ff    	mov    %al,-0x3b1(%rbp)
   23aaa:	48 8d bd 9d fd ff ff 	lea    -0x263(%rbp),%rdi
   23ab1:	48 89 bd 20 fc ff ff 	mov    %rdi,-0x3e0(%rbp)
   23ab8:	e8 43 a4 ff ff       	call   1df00 <_ZNSt3__15arrayIcLm35EE5beginB8nn210000Ev>
   23abd:	48 8b bd 20 fc ff ff 	mov    -0x3e0(%rbp),%rdi
   23ac4:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
   23acb:	e8 50 a4 ff ff       	call   1df20 <_ZNSt3__15arrayIcLm35EE3endB8nn210000Ev>
   23ad0:	48 8b b5 28 fc ff ff 	mov    -0x3d8(%rbp),%rsi
   23ad7:	48 8b 8d 30 fc ff ff 	mov    -0x3d0(%rbp),%rcx
   23ade:	4c 8b 95 38 fc ff ff 	mov    -0x3c8(%rbp),%r10
   23ae5:	48 8b 95 40 fc ff ff 	mov    -0x3c0(%rbp),%rdx
   23aec:	49 89 c3             	mov    %rax,%r11
   23aef:	8a 85 4f fc ff ff    	mov    -0x3b1(%rbp),%al
   23af5:	48 89 b5 78 fd ff ff 	mov    %rsi,-0x288(%rbp)
   23afc:	48 89 8d 70 fd ff ff 	mov    %rcx,-0x290(%rbp)
   23b03:	48 8b bd 70 fd ff ff 	mov    -0x290(%rbp),%rdi
   23b0a:	48 8b b5 78 fd ff ff 	mov    -0x288(%rbp),%rsi
   23b11:	48 8b 8d 88 fd ff ff 	mov    -0x278(%rbp),%rcx
   23b18:	4c 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%r8
   23b1f:	48 8d 1d 6e bb 00 00 	lea    0xbb6e(%rip),%rbx        # 2f694 <.L.str.47>
   23b26:	49 89 e1             	mov    %rsp,%r9
   23b29:	49 89 59 10          	mov    %rbx,0x10(%r9)
   23b2d:	4d 89 59 08          	mov    %r11,0x8(%r9)
   23b31:	4d 89 11             	mov    %r10,(%r9)
   23b34:	41 c7 41 18 10 00 00 	movl   $0x10,0x18(%r9)
   23b3b:	00 
   23b3c:	44 0f b6 c8          	movzbl %al,%r9d
   23b40:	41 83 e1 01          	and    $0x1,%r9d
   23b44:	e8 07 01 00 00       	call   23c50 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   23b49:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   23b4d:	e9 ea 00 00 00       	jmp    23c3c <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x5fc>
    return __formatter::__format_integer(__value, __ctx, __specs, __negative, __array.begin(), __array.end(), "0X", 16);
   23b52:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23b56:	48 89 85 00 fc ff ff 	mov    %rax,-0x400(%rbp)
   23b5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   23b61:	48 89 85 f8 fb ff ff 	mov    %rax,-0x408(%rbp)
   23b68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   23b6c:	48 89 85 10 fc ff ff 	mov    %rax,-0x3f0(%rbp)
   23b73:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   23b77:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   23b7b:	48 89 8d 40 fd ff ff 	mov    %rcx,-0x2c0(%rbp)
   23b82:	48 89 85 38 fd ff ff 	mov    %rax,-0x2c8(%rbp)
   23b89:	8a 45 b7             	mov    -0x49(%rbp),%al
   23b8c:	88 85 1f fc ff ff    	mov    %al,-0x3e1(%rbp)
   23b92:	48 8d bd 4d fd ff ff 	lea    -0x2b3(%rbp),%rdi
   23b99:	48 89 bd f0 fb ff ff 	mov    %rdi,-0x410(%rbp)
   23ba0:	e8 5b a3 ff ff       	call   1df00 <_ZNSt3__15arrayIcLm35EE5beginB8nn210000Ev>
   23ba5:	48 8b bd f0 fb ff ff 	mov    -0x410(%rbp),%rdi
   23bac:	48 89 85 08 fc ff ff 	mov    %rax,-0x3f8(%rbp)
   23bb3:	e8 68 a3 ff ff       	call   1df20 <_ZNSt3__15arrayIcLm35EE3endB8nn210000Ev>
   23bb8:	48 8b b5 f8 fb ff ff 	mov    -0x408(%rbp),%rsi
   23bbf:	48 8b 8d 00 fc ff ff 	mov    -0x400(%rbp),%rcx
   23bc6:	4c 8b 95 08 fc ff ff 	mov    -0x3f8(%rbp),%r10
   23bcd:	48 8b 95 10 fc ff ff 	mov    -0x3f0(%rbp),%rdx
   23bd4:	49 89 c3             	mov    %rax,%r11
   23bd7:	8a 85 1f fc ff ff    	mov    -0x3e1(%rbp),%al
   23bdd:	48 89 b5 28 fd ff ff 	mov    %rsi,-0x2d8(%rbp)
   23be4:	48 89 8d 20 fd ff ff 	mov    %rcx,-0x2e0(%rbp)
   23beb:	48 8b bd 20 fd ff ff 	mov    -0x2e0(%rbp),%rdi
   23bf2:	48 8b b5 28 fd ff ff 	mov    -0x2d8(%rbp),%rsi
   23bf9:	48 8b 8d 38 fd ff ff 	mov    -0x2c8(%rbp),%rcx
   23c00:	4c 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%r8
   23c07:	48 8d 1d 89 ba 00 00 	lea    0xba89(%rip),%rbx        # 2f697 <.L.str.48>
   23c0e:	49 89 e1             	mov    %rsp,%r9
   23c11:	49 89 59 10          	mov    %rbx,0x10(%r9)
   23c15:	4d 89 59 08          	mov    %r11,0x8(%r9)
   23c19:	4d 89 11             	mov    %r10,(%r9)
   23c1c:	41 c7 41 18 10 00 00 	movl   $0x10,0x18(%r9)
   23c23:	00 
   23c24:	44 0f b6 c8          	movzbl %al,%r9d
   23c28:	41 83 e1 01          	and    $0x1,%r9d
   23c2c:	e8 1f 00 00 00       	call   23c50 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>
   23c31:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   23c35:	eb 05                	jmp    23c3c <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb+0x5fc>
    __libcpp_unreachable();
   23c37:	e8 34 6b ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
}
   23c3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   23c40:	48 81 c4 28 04 00 00 	add    $0x428,%rsp
   23c47:	5b                   	pop    %rbx
   23c48:	5d                   	pop    %rbp
   23c49:	c3                   	ret
   23c4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000023c50 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci>:
    int __base) {
   23c50:	55                   	push   %rbp
   23c51:	48 89 e5             	mov    %rsp,%rbp
   23c54:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
   23c5b:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
   23c62:	48 89 f9             	mov    %rdi,%rcx
   23c65:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
   23c6c:	44 88 c8             	mov    %r9b,%al
   23c6f:	44 8b 4d 28          	mov    0x28(%rbp),%r9d
   23c73:	4c 8b 4d 20          	mov    0x20(%rbp),%r9
   23c77:	4c 8b 4d 18          	mov    0x18(%rbp),%r9
   23c7b:	4c 8b 4d 10          	mov    0x10(%rbp),%r9
   23c7f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   23c83:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   23c87:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   23c8b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   23c8f:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   23c93:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   23c97:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   23c9b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   23c9f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   23ca3:	24 01                	and    $0x1,%al
   23ca5:	88 45 b7             	mov    %al,-0x49(%rbp)
  _Iterator __first = __formatter::__insert_sign(__begin, __negative, __specs.__std_.__sign_);
   23ca8:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
   23cac:	8a 45 b7             	mov    -0x49(%rbp),%al
   23caf:	8a 4d d0             	mov    -0x30(%rbp),%cl
   23cb2:	c0 e9 03             	shr    $0x3,%cl
   23cb5:	80 e1 03             	and    $0x3,%cl
   23cb8:	0f b6 d1             	movzbl %cl,%edx
   23cbb:	0f b6 f0             	movzbl %al,%esi
   23cbe:	83 e6 01             	and    $0x1,%esi
   23cc1:	e8 fa a2 ff ff       	call   1dfc0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE>
   23cc6:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  if (__specs.__std_.__alternate_form_ && __prefix)
   23cca:	8a 45 d0             	mov    -0x30(%rbp),%al
   23ccd:	c0 e8 05             	shr    $0x5,%al
   23cd0:	24 01                	and    $0x1,%al
   23cd2:	a8 01                	test   $0x1,%al
   23cd4:	74 38                	je     23d0e <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0xbe>
   23cd6:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
   23cdb:	74 31                	je     23d0e <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0xbe>
    while (*__prefix)
   23cdd:	eb 00                	jmp    23cdf <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x8f>
   23cdf:	48 8b 45 20          	mov    0x20(%rbp),%rax
   23ce3:	80 38 00             	cmpb   $0x0,(%rax)
   23ce6:	74 24                	je     23d0c <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0xbc>
      *__first++ = *__prefix++;
   23ce8:	48 8b 45 20          	mov    0x20(%rbp),%rax
   23cec:	48 89 c1             	mov    %rax,%rcx
   23cef:	48 83 c1 01          	add    $0x1,%rcx
   23cf3:	48 89 4d 20          	mov    %rcx,0x20(%rbp)
   23cf7:	8a 08                	mov    (%rax),%cl
   23cf9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   23cfd:	48 89 c2             	mov    %rax,%rdx
   23d00:	48 83 c2 01          	add    $0x1,%rdx
   23d04:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   23d08:	88 08                	mov    %cl,(%rax)
    while (*__prefix)
   23d0a:	eb d3                	jmp    23cdf <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x8f>
   23d0c:	eb 00                	jmp    23d0e <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0xbe>
  _Iterator __last = __formatter::__to_buffer(__first, __end, __value, __base);
   23d0e:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   23d12:	48 8b 75 18          	mov    0x18(%rbp),%rsi
   23d16:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   23d1a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   23d1e:	44 8b 45 28          	mov    0x28(%rbp),%r8d
   23d22:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   23d26:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   23d2a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   23d2e:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   23d32:	e8 79 02 00 00       	call   23fb0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_8integralEoQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_S5_T0_i>
   23d37:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  auto __out_it = __ctx.out();
   23d3b:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   23d3f:	e8 cc 5d ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   23d44:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  if (__specs.__alignment_ != __format_spec::__alignment::__zero_padding)
   23d48:	8a 45 d0             	mov    -0x30(%rbp),%al
   23d4b:	24 07                	and    $0x7,%al
   23d4d:	3c 04                	cmp    $0x4,%al
   23d4f:	74 0d                	je     23d5e <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x10e>
    __first = __begin;
   23d51:	48 8b 45 10          	mov    0x10(%rbp),%rax
   23d55:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   23d59:	e9 8c 00 00 00       	jmp    23dea <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x19a>
    __out_it                  = __formatter::__copy(__begin, __first, std::move(__out_it));
   23d5e:	48 8b 45 10          	mov    0x10(%rbp),%rax
   23d62:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   23d69:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   23d6d:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   23d74:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
   23d78:	e8 23 5e ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   23d7d:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
   23d84:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
   23d8b:	48 8b 00             	mov    (%rax),%rax
   23d8e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   23d95:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   23d9c:	e8 1f a3 ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   23da1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   23da5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   23da9:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    __specs.__alignment_      = __format_spec::__alignment::__right;
   23dad:	8a 45 d0             	mov    -0x30(%rbp),%al
   23db0:	24 f8                	and    $0xf8,%al
   23db2:	0c 03                	or     $0x3,%al
   23db4:	88 45 d0             	mov    %al,-0x30(%rbp)
    __specs.__fill_.__data[0] = _CharT('0');
   23db7:	c6 45 dc 30          	movb   $0x30,-0x24(%rbp)
    int32_t __size            = __first - __begin;
   23dbb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   23dbf:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   23dc3:	48 29 c8             	sub    %rcx,%rax
   23dc6:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    __specs.__width_ -= std::min(__size, __specs.__width_);
   23dcc:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   23dd0:	48 83 c6 04          	add    $0x4,%rsi
   23dd4:	48 8d bd 74 ff ff ff 	lea    -0x8c(%rbp),%rdi
   23ddb:	e8 40 a3 ff ff       	call   1e120 <_ZNSt3__13minB8nn210000IiEERKT_S3_S3_>
   23de0:	8b 08                	mov    (%rax),%ecx
   23de2:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   23de5:	29 c8                	sub    %ecx,%eax
   23de7:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  if (__specs.__std_.__type_ != __format_spec::__type::__hexadecimal_upper_case) [[likely]]
   23dea:	80 7d d1 07          	cmpb   $0x7,-0x2f(%rbp)
   23dee:	74 6a                	je     23e5a <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x20a>
    return __formatter::__write(__first, __last, __ctx.out(), __specs);
   23df0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   23df4:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   23dfb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   23dff:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   23e06:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   23e0a:	e8 01 5d ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   23e0f:	48 8b bd 18 ff ff ff 	mov    -0xe8(%rbp),%rdi
   23e16:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
   23e1d:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   23e24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   23e28:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   23e2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   23e33:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   23e3a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   23e41:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
   23e48:	4c 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8
   23e4f:	e8 fc a2 ff ff       	call   1e150 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   23e54:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   23e58:	eb 6f                	jmp    23ec9 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEoTkNS_19contiguous_iteratorEPccNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT0_EEEEE5valueENS_26indirectly_readable_traitsISD_EESE_E4type10value_typeEEEENT2_8iteratorET_RSK_NS_13__format_spec23__parsed_specificationsIT1_EEbSC_SC_PKci+0x279>
  return __formatter::__write_transformed(__first, __last, __ctx.out(), __specs, __formatter::__hex_to_upper);
   23e5a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   23e5e:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   23e65:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   23e69:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   23e70:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   23e74:	e8 97 5c ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   23e79:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
   23e80:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
   23e87:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   23e8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   23e92:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   23e99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   23e9d:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   23ea4:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
   23eab:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
   23eb2:	4c 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%r8
   23eb9:	4c 8d 0d 80 a4 ff ff 	lea    -0x5b80(%rip),%r9        # 1e340 <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec>
   23ec0:	e8 0b a3 ff ff       	call   1e1d0 <_ZNSt3__111__formatter19__write_transformedB8nn210000ITkNS_19contiguous_iteratorEPcccPFccETkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SF_T3_NS_13__format_spec23__parsed_specificationsIT1_EET2_>
   23ec5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   23ec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23ecd:	48 81 c4 00 01 00 00 	add    $0x100,%rsp
   23ed4:	5d                   	pop    %rbp
   23ed5:	c3                   	ret
   23ed6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   23edd:	00 00 00 

0000000000023ee0 <_ZNSt3__15arrayIcLm131EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   23ee0:	55                   	push   %rbp
   23ee1:	48 89 e5             	mov    %rsp,%rbp
   23ee4:	48 83 ec 10          	sub    $0x10,%rsp
   23ee8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23eec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   23ef0:	e8 5b 12 00 00       	call   25150 <_ZNSt3__15arrayIcLm131EE4dataB8nn210000Ev>
   23ef5:	48 83 c4 10          	add    $0x10,%rsp
   23ef9:	5d                   	pop    %rbp
   23efa:	c3                   	ret
   23efb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000023f00 <_ZNSt3__15arrayIcLm131EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   23f00:	55                   	push   %rbp
   23f01:	48 89 e5             	mov    %rsp,%rbp
   23f04:	48 83 ec 10          	sub    $0x10,%rsp
   23f08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23f0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   23f10:	e8 3b 12 00 00       	call   25150 <_ZNSt3__15arrayIcLm131EE4dataB8nn210000Ev>
   23f15:	48 05 83 00 00 00    	add    $0x83,%rax
   23f1b:	48 83 c4 10          	add    $0x10,%rsp
   23f1f:	5d                   	pop    %rbp
   23f20:	c3                   	ret
   23f21:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   23f28:	00 00 00 
   23f2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000023f30 <_ZNSt3__15arrayIcLm45EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   23f30:	55                   	push   %rbp
   23f31:	48 89 e5             	mov    %rsp,%rbp
   23f34:	48 83 ec 10          	sub    $0x10,%rsp
   23f38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23f3c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   23f40:	e8 1b 12 00 00       	call   25160 <_ZNSt3__15arrayIcLm45EE4dataB8nn210000Ev>
   23f45:	48 83 c4 10          	add    $0x10,%rsp
   23f49:	5d                   	pop    %rbp
   23f4a:	c3                   	ret
   23f4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000023f50 <_ZNSt3__15arrayIcLm45EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   23f50:	55                   	push   %rbp
   23f51:	48 89 e5             	mov    %rsp,%rbp
   23f54:	48 83 ec 10          	sub    $0x10,%rsp
   23f58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23f5c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   23f60:	e8 fb 11 00 00       	call   25160 <_ZNSt3__15arrayIcLm45EE4dataB8nn210000Ev>
   23f65:	48 83 c0 2d          	add    $0x2d,%rax
   23f69:	48 83 c4 10          	add    $0x10,%rsp
   23f6d:	5d                   	pop    %rbp
   23f6e:	c3                   	ret
   23f6f:	90                   	nop

0000000000023f70 <_ZNSt3__15arrayIcLm40EE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator begin() _NOEXCEPT {
   23f70:	55                   	push   %rbp
   23f71:	48 89 e5             	mov    %rsp,%rbp
   23f74:	48 83 ec 10          	sub    $0x10,%rsp
   23f78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23f7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data());
   23f80:	e8 eb 11 00 00       	call   25170 <_ZNSt3__15arrayIcLm40EE4dataB8nn210000Ev>
   23f85:	48 83 c4 10          	add    $0x10,%rsp
   23f89:	5d                   	pop    %rbp
   23f8a:	c3                   	ret
   23f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000023f90 <_ZNSt3__15arrayIcLm40EE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 iterator end() _NOEXCEPT {
   23f90:	55                   	push   %rbp
   23f91:	48 89 e5             	mov    %rsp,%rbp
   23f94:	48 83 ec 10          	sub    $0x10,%rsp
   23f98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23f9c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    return iterator(data() + _Size);
   23fa0:	e8 cb 11 00 00       	call   25170 <_ZNSt3__15arrayIcLm40EE4dataB8nn210000Ev>
   23fa5:	48 83 c0 28          	add    $0x28,%rax
   23fa9:	48 83 c4 10          	add    $0x10,%rsp
   23fad:	5d                   	pop    %rbp
   23fae:	c3                   	ret
   23faf:	90                   	nop

0000000000023fb0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_8integralEoQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_S5_T0_i>:
_LIBCPP_HIDE_FROM_ABI _Iterator __to_buffer(_Iterator __first, _Iterator __last, _Tp __value, int __base) {
   23fb0:	55                   	push   %rbp
   23fb1:	48 89 e5             	mov    %rsp,%rbp
   23fb4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   23fbb:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   23fbf:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   23fc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   23fc7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   23fcb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   23fcf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   23fd3:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   23fd7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   23fdb:	44 89 45 cc          	mov    %r8d,-0x34(%rbp)
  to_chars_result __r = std::to_chars(std::to_address(__first), std::to_address(__last), __value, __base);
   23fdf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   23fe3:	e8 f8 a3 ff ff       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   23fe8:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   23fec:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   23ff0:	e8 eb a3 ff ff       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   23ff5:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   23ff9:	48 89 c6             	mov    %rax,%rsi
   23ffc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24000:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   24004:	44 8b 45 cc          	mov    -0x34(%rbp),%r8d
   24008:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   2400c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   24010:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   24014:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   24018:	e8 43 00 00 00       	call   24060 <_ZNSt3__18to_charsB8nn210000IoTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_i>
   2401d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   24021:	89 55 c0             	mov    %edx,-0x40(%rbp)
  auto __diff = __r.ptr - std::to_address(__first);
   24024:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   24028:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2402c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   24030:	e8 ab a3 ff ff       	call   1e3e0 <_ZNSt3__110to_addressB8nn210000IcEEDaPT_>
   24035:	48 89 c1             	mov    %rax,%rcx
   24038:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2403c:	48 29 c8             	sub    %rcx,%rax
   2403f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  return __first + __diff;
   24043:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24047:	48 03 45 98          	add    -0x68(%rbp),%rax
   2404b:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   24052:	5d                   	pop    %rbp
   24053:	c3                   	ret
   24054:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2405b:	00 00 00 
   2405e:	66 90                	xchg   %ax,%ax

0000000000024060 <_ZNSt3__18to_charsB8nn210000IoTnNS_9enable_ifIXsr11is_integralIT_EE5valueEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_i>:
to_chars(char* __first, char* __last, _Tp __value, int __base) {
   24060:	55                   	push   %rbp
   24061:	48 89 e5             	mov    %rsp,%rbp
   24064:	48 83 ec 60          	sub    $0x60,%rsp
   24068:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2406c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24070:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24074:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   24078:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2407c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   24080:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24084:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   24088:	44 89 45 bc          	mov    %r8d,-0x44(%rbp)
  return std::__to_chars_integral(__first, __last, static_cast<_Type>(__value), __base, is_signed<_Tp>());
   2408c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   24090:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   24094:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   24098:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2409c:	44 8b 45 bc          	mov    -0x44(%rbp),%r8d
   240a0:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   240a4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   240a8:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   240ac:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   240b0:	e8 1b 00 00 00       	call   240d0 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE>
   240b5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   240b9:	89 55 f8             	mov    %edx,-0x8(%rbp)
   240bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   240c0:	8b 55 f8             	mov    -0x8(%rbp),%edx
   240c3:	48 83 c4 60          	add    $0x60,%rsp
   240c7:	5d                   	pop    %rbp
   240c8:	c3                   	ret
   240c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000240d0 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE>:
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, false_type) {
   240d0:	55                   	push   %rbp
   240d1:	48 89 e5             	mov    %rsp,%rbp
   240d4:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   240db:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   240df:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   240e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   240e7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   240eb:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   240ef:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   240f3:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   240f7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   240fb:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  if (__base == 10) [[likely]]
   240ff:	83 7d ac 0a          	cmpl   $0xa,-0x54(%rbp)
   24103:	75 31                	jne    24136 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x66>
    return std::__to_chars_itoa(__first, __last, __value, false_type());
   24105:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24109:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   2410d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   24111:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   24115:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   24119:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2411d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   24121:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   24125:	e8 06 02 00 00       	call   24330 <_ZNSt3__115__to_chars_itoaB8nn210000IoEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE>
   2412a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2412e:	89 55 f8             	mov    %edx,-0x8(%rbp)
   24131:	e9 e5 01 00 00       	jmp    2431b <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x24b>
  switch (__base) {
   24136:	8b 45 ac             	mov    -0x54(%rbp),%eax
   24139:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
   2413f:	83 e8 02             	sub    $0x2,%eax
   24142:	74 1f                	je     24163 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x93>
   24144:	eb 00                	jmp    24146 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x76>
   24146:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
   2414c:	83 e8 08             	sub    $0x8,%eax
   2414f:	74 43                	je     24194 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0xc4>
   24151:	eb 00                	jmp    24153 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x83>
   24153:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
   24159:	83 e8 10             	sub    $0x10,%eax
   2415c:	74 73                	je     241d1 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x101>
   2415e:	e9 ab 00 00 00       	jmp    2420e <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x13e>
    return std::__to_chars_integral<2>(__first, __last, __value);
   24163:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24167:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   2416b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2416f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   24173:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
   24177:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   2417b:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   2417f:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   24183:	e8 b8 02 00 00       	call   24440 <_ZNSt3__119__to_chars_integralB8nn210000ILj2EoTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   24188:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2418c:	89 55 f8             	mov    %edx,-0x8(%rbp)
   2418f:	e9 87 01 00 00       	jmp    2431b <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x24b>
    return std::__to_chars_integral<8>(__first, __last, __value);
   24194:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24198:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   2419c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   241a0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   241a4:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
   241ab:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   241b2:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   241b9:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
   241c0:	e8 eb 02 00 00       	call   244b0 <_ZNSt3__119__to_chars_integralB8nn210000ILj8EoTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   241c5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   241c9:	89 55 f8             	mov    %edx,-0x8(%rbp)
   241cc:	e9 4a 01 00 00       	jmp    2431b <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x24b>
    return std::__to_chars_integral<16>(__first, __last, __value);
   241d1:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   241d5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   241d9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   241dd:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   241e1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
   241e8:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   241ef:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
   241f6:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   241fd:	e8 1e 03 00 00       	call   24520 <_ZNSt3__119__to_chars_integralB8nn210000ILj16EoTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>
   24202:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24206:	89 55 f8             	mov    %edx,-0x8(%rbp)
   24209:	e9 0d 01 00 00       	jmp    2431b <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x24b>
  ptrdiff_t __cap = __last - __first;
   2420e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   24212:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24216:	48 29 c8             	sub    %rcx,%rax
   24219:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  int __n         = std::__to_chars_integral_width(__value, __base);
   24220:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   24224:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   24228:	8b 55 ac             	mov    -0x54(%rbp),%edx
   2422b:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
   24232:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   24239:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
   24240:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
   24247:	e8 44 03 00 00       	call   24590 <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j>
   2424c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  if (__n > __cap)
   24252:	48 63 85 54 ff ff ff 	movslq -0xac(%rbp),%rax
   24259:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
   24260:	7e 14                	jle    24276 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x1a6>
    return {__last, errc::value_too_large};
   24262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   24266:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2426a:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   24271:	e9 a5 00 00 00       	jmp    2431b <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x24b>
  __last    = __first + __n;
   24276:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2427a:	48 63 8d 54 ff ff ff 	movslq -0xac(%rbp),%rcx
   24281:	48 01 c8             	add    %rcx,%rax
   24284:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  char* __p = __last;
   24288:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2428c:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    unsigned __c = __value % __base;
   24293:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   24297:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   2429b:	48 63 55 ac          	movslq -0x54(%rbp),%rdx
   2429f:	48 89 d1             	mov    %rdx,%rcx
   242a2:	48 c1 f9 3f          	sar    $0x3f,%rcx
   242a6:	e8 c5 73 00 00       	call   2b670 <__umodti3>
   242ab:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
    __value /= __base;
   242b1:	48 63 55 ac          	movslq -0x54(%rbp),%rdx
   242b5:	48 89 d1             	mov    %rdx,%rcx
   242b8:	48 c1 f9 3f          	sar    $0x3f,%rcx
   242bc:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   242c0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   242c4:	e8 a7 72 00 00       	call   2b570 <__udivti3>
   242c9:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   242cd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    *--__p = "0123456789abcdefghijklmnopqrstuvwxyz"[__c];
   242d1:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
   242d7:	89 c1                	mov    %eax,%ecx
   242d9:	48 8d 05 ba b3 00 00 	lea    0xb3ba(%rip),%rax        # 2f69a <.L.str.49>
   242e0:	48 01 c8             	add    %rcx,%rax
   242e3:	8a 08                	mov    (%rax),%cl
   242e5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   242ec:	48 89 c2             	mov    %rax,%rdx
   242ef:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   242f3:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
   242fa:	88 48 ff             	mov    %cl,-0x1(%rax)
  } while (__value != 0);
   242fd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   24301:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   24305:	48 09 c8             	or     %rcx,%rax
   24308:	75 89                	jne    24293 <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x1c3>
   2430a:	eb 00                	jmp    2430c <_ZNSt3__119__to_chars_integralB8nn210000IoEENS_15to_chars_resultEPcS2_T_iNS_17integral_constantIbLb0EEE+0x23c>
  return {__last, errc(0)};
   2430c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   24310:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24314:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
}
   2431b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2431f:	8b 55 f8             	mov    -0x8(%rbp),%edx
   24322:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
   24329:	5d                   	pop    %rbp
   2432a:	c3                   	ret
   2432b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000024330 <_ZNSt3__115__to_chars_itoaB8nn210000IoEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE>:
__to_chars_itoa(char* __first, char* __last, __uint128_t __value, false_type) {
   24330:	55                   	push   %rbp
   24331:	48 89 e5             	mov    %rsp,%rbp
   24334:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
   2433b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2433f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24343:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24347:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2434b:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   2434f:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
   24353:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   24357:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  if (__value <= numeric_limits<uint64_t>::max())
   2435b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2435f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   24366:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2436a:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   24371:	e8 da 65 fe ff       	call   a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>
   24376:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
   2437d:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
   24384:	48 89 c2             	mov    %rax,%rdx
   24387:	31 c0                	xor    %eax,%eax
   24389:	48 29 f2             	sub    %rsi,%rdx
   2438c:	48 19 c8             	sbb    %rcx,%rax
   2438f:	72 1c                	jb     243ad <_ZNSt3__115__to_chars_itoaB8nn210000IoEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0x7d>
   24391:	eb 00                	jmp    24393 <_ZNSt3__115__to_chars_itoaB8nn210000IoEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0x63>
    return __to_chars_itoa(__first, __last, static_cast<uint64_t>(__value), false_type());
   24393:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24397:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   2439b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   2439f:	e8 3c e5 ff ff       	call   228e0 <_ZNSt3__115__to_chars_itoaB8nn210000ImEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE>
   243a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   243a8:	89 55 f8             	mov    %edx,-0x8(%rbp)
   243ab:	eb 7c                	jmp    24429 <_ZNSt3__115__to_chars_itoaB8nn210000IoEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0xf9>
  auto __diff = __last - __first;
   243ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   243b1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   243b5:	48 29 c8             	sub    %rcx,%rax
   243b8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  if (__tx::digits <= __diff || __tx::__width(__value) <= __diff)
   243bc:	b8 27 00 00 00       	mov    $0x27,%eax
   243c1:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   243c5:	7e 25                	jle    243ec <_ZNSt3__115__to_chars_itoaB8nn210000IoEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0xbc>
   243c7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   243cb:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   243cf:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   243d3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   243d7:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   243db:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   243df:	e8 bc 02 00 00       	call   246a0 <_ZNSt3__16__itoa13__traits_baseIovE7__widthB8nn210000Eo>
   243e4:	48 98                	cltq
   243e6:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   243ea:	7f 2e                	jg     2441a <_ZNSt3__115__to_chars_itoaB8nn210000IoEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0xea>
    return {__tx::__convert(__first, __value), errc(0)};
   243ec:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   243f0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   243f4:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   243f8:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
   243fc:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   24400:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   24404:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   24408:	e8 13 03 00 00       	call   24720 <_ZNSt3__16__itoa13__traits_baseIovE9__convertB8nn210000EPco>
   2440d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24411:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
   24418:	eb 0f                	jmp    24429 <_ZNSt3__115__to_chars_itoaB8nn210000IoEENS_15to_chars_resultEPcS2_T_NS_17integral_constantIbLb0EEE+0xf9>
    return {__last, errc::value_too_large};
   2441a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2441e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24422:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
}
   24429:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2442d:	8b 55 f8             	mov    -0x8(%rbp),%edx
   24430:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
   24437:	5d                   	pop    %rbp
   24438:	c3                   	ret
   24439:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000024440 <_ZNSt3__119__to_chars_integralB8nn210000ILj2EoTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   24440:	55                   	push   %rbp
   24441:	48 89 e5             	mov    %rsp,%rbp
   24444:	48 83 ec 50          	sub    $0x50,%rsp
   24448:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2444c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24450:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24454:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   24458:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2445c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   24460:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24464:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   24468:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2446c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   24470:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   24474:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24478:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2447c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   24480:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   24484:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   24488:	e8 c3 06 00 00       	call   24b50 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_>
   2448d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24491:	89 55 f8             	mov    %edx,-0x8(%rbp)
   24494:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24498:	8b 55 f8             	mov    -0x8(%rbp),%edx
   2449b:	48 83 c4 50          	add    $0x50,%rsp
   2449f:	5d                   	pop    %rbp
   244a0:	c3                   	ret
   244a1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   244a8:	00 00 00 
   244ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000244b0 <_ZNSt3__119__to_chars_integralB8nn210000ILj8EoTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   244b0:	55                   	push   %rbp
   244b1:	48 89 e5             	mov    %rsp,%rbp
   244b4:	48 83 ec 50          	sub    $0x50,%rsp
   244b8:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   244bc:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   244c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   244c4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   244c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   244cc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   244d0:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   244d4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   244d8:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   244dc:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   244e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   244e4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   244e8:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   244ec:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   244f0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   244f4:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   244f8:	e8 63 08 00 00       	call   24d60 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_>
   244fd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24501:	89 55 f8             	mov    %edx,-0x8(%rbp)
   24504:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24508:	8b 55 f8             	mov    -0x8(%rbp),%edx
   2450b:	48 83 c4 50          	add    $0x50,%rsp
   2450f:	5d                   	pop    %rbp
   24510:	c3                   	ret
   24511:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   24518:	00 00 00 
   2451b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000024520 <_ZNSt3__119__to_chars_integralB8nn210000ILj16EoTnNS_9enable_ifIXgestT0_Lm4EEiE4typeELi0EEENS_15to_chars_resultEPcS6_S2_>:
__to_chars_integral(char* __first, char* __last, _Tp __value) {
   24520:	55                   	push   %rbp
   24521:	48 89 e5             	mov    %rsp,%rbp
   24524:	48 83 ec 50          	sub    $0x50,%rsp
   24528:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2452c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24530:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24534:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   24538:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2453c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   24540:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24544:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
   24548:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2454c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   24550:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   24554:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24558:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2455c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   24560:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   24564:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   24568:	e8 e3 09 00 00       	call   24f50 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_>
   2456d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24571:	89 55 f8             	mov    %edx,-0x8(%rbp)
   24574:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24578:	8b 55 f8             	mov    -0x8(%rbp),%edx
   2457b:	48 83 c4 50          	add    $0x50,%rsp
   2457f:	5d                   	pop    %rbp
   24580:	c3                   	ret
   24581:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   24588:	00 00 00 
   2458b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000024590 <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI int __to_chars_integral_width(_Tp __value, unsigned __base) {
   24590:	55                   	push   %rbp
   24591:	48 89 e5             	mov    %rsp,%rbp
   24594:	48 83 ec 50          	sub    $0x50,%rsp
   24598:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   2459c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   245a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   245a4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   245a8:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   245ac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   245b0:	89 55 cc             	mov    %edx,-0x34(%rbp)
  unsigned __base_2 = __base * __base;
   245b3:	8b 45 cc             	mov    -0x34(%rbp),%eax
   245b6:	0f af 45 cc          	imul   -0x34(%rbp),%eax
   245ba:	89 45 c8             	mov    %eax,-0x38(%rbp)
  unsigned __base_3 = __base_2 * __base;
   245bd:	8b 45 c8             	mov    -0x38(%rbp),%eax
   245c0:	0f af 45 cc          	imul   -0x34(%rbp),%eax
   245c4:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  unsigned __base_4 = __base_2 * __base_2;
   245c7:	8b 45 c8             	mov    -0x38(%rbp),%eax
   245ca:	0f af 45 c8          	imul   -0x38(%rbp),%eax
   245ce:	89 45 c0             	mov    %eax,-0x40(%rbp)
  int __r = 0;
   245d1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
    if (__value < __base)
   245d8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   245dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   245e0:	8b 55 cc             	mov    -0x34(%rbp),%edx
   245e3:	48 29 d1             	sub    %rdx,%rcx
   245e6:	48 83 d8 00          	sbb    $0x0,%rax
   245ea:	73 10                	jae    245fc <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0x6c>
   245ec:	eb 00                	jmp    245ee <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0x5e>
      return __r + 1;
   245ee:	8b 45 bc             	mov    -0x44(%rbp),%eax
   245f1:	83 c0 01             	add    $0x1,%eax
   245f4:	89 45 fc             	mov    %eax,-0x4(%rbp)
   245f7:	e9 8f 00 00 00       	jmp    2468b <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0xfb>
    if (__value < __base_2)
   245fc:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24600:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24604:	8b 55 c8             	mov    -0x38(%rbp),%edx
   24607:	48 29 d1             	sub    %rdx,%rcx
   2460a:	48 83 d8 00          	sbb    $0x0,%rax
   2460e:	73 0d                	jae    2461d <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0x8d>
   24610:	eb 00                	jmp    24612 <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0x82>
      return __r + 2;
   24612:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24615:	83 c0 02             	add    $0x2,%eax
   24618:	89 45 fc             	mov    %eax,-0x4(%rbp)
   2461b:	eb 6e                	jmp    2468b <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0xfb>
    if (__value < __base_3)
   2461d:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24621:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24625:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   24628:	48 29 d1             	sub    %rdx,%rcx
   2462b:	48 83 d8 00          	sbb    $0x0,%rax
   2462f:	73 0d                	jae    2463e <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0xae>
   24631:	eb 00                	jmp    24633 <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0xa3>
      return __r + 3;
   24633:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24636:	83 c0 03             	add    $0x3,%eax
   24639:	89 45 fc             	mov    %eax,-0x4(%rbp)
   2463c:	eb 4d                	jmp    2468b <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0xfb>
    if (__value < __base_4)
   2463e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24642:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24646:	8b 55 c0             	mov    -0x40(%rbp),%edx
   24649:	48 29 d1             	sub    %rdx,%rcx
   2464c:	48 83 d8 00          	sbb    $0x0,%rax
   24650:	73 0d                	jae    2465f <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0xcf>
   24652:	eb 00                	jmp    24654 <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0xc4>
      return __r + 4;
   24654:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24657:	83 c0 04             	add    $0x4,%eax
   2465a:	89 45 fc             	mov    %eax,-0x4(%rbp)
   2465d:	eb 2c                	jmp    2468b <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0xfb>
    __value /= __base_4;
   2465f:	8b 45 c0             	mov    -0x40(%rbp),%eax
   24662:	89 c2                	mov    %eax,%edx
   24664:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24668:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2466c:	31 c0                	xor    %eax,%eax
   2466e:	89 c1                	mov    %eax,%ecx
   24670:	e8 fb 6e 00 00       	call   2b570 <__udivti3>
   24675:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   24679:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    __r += 4;
   2467d:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24680:	83 c0 04             	add    $0x4,%eax
   24683:	89 45 bc             	mov    %eax,-0x44(%rbp)
  while (true) {
   24686:	e9 4d ff ff ff       	jmp    245d8 <_ZNSt3__125__to_chars_integral_widthB8nn210000IoEEiT_j+0x48>
}
   2468b:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2468e:	48 83 c4 50          	add    $0x50,%rsp
   24692:	5d                   	pop    %rbp
   24693:	c3                   	ret
   24694:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2469b:	00 00 00 
   2469e:	66 90                	xchg   %ax,%ax

00000000000246a0 <_ZNSt3__16__itoa13__traits_baseIovE7__widthB8nn210000Eo>:
  static _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI int __width(_Tp __v) {
   246a0:	55                   	push   %rbp
   246a1:	48 89 e5             	mov    %rsp,%rbp
   246a4:	48 83 ec 30          	sub    $0x30,%rsp
   246a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   246ac:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   246b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   246b4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   246b8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   246bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    auto __t = (128 - std::__libcpp_clz(static_cast<uint64_t>(__v >> 64))) * 1233 >> 12;
   246c0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   246c4:	e8 97 e4 ff ff       	call   22b60 <_ZNSt3__112__libcpp_clzB8nn210000Em>
   246c9:	89 c1                	mov    %eax,%ecx
   246cb:	b8 80 00 00 00       	mov    $0x80,%eax
   246d0:	29 c8                	sub    %ecx,%eax
   246d2:	69 c0 d1 04 00 00    	imul   $0x4d1,%eax,%eax
   246d8:	c1 f8 0c             	sar    $0xc,%eax
   246db:	89 45 dc             	mov    %eax,-0x24(%rbp)
    return __t - (__v < __itoa::__pow10_128[__t - __itoa::__pow10_128_offset]) + 1;
   246de:	48 63 55 dc          	movslq -0x24(%rbp),%rdx
   246e2:	89 d0                	mov    %edx,%eax
   246e4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   246e8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   246ec:	48 c1 e2 04          	shl    $0x4,%rdx
   246f0:	4c 8d 05 e9 a0 00 00 	lea    0xa0e9(%rip),%r8        # 2e7e0 <_ZNSt3__16__itoa11__pow10_128E>
   246f7:	4a 8b 3c 02          	mov    (%rdx,%r8,1),%rdi
   246fb:	4a 8b 54 02 08       	mov    0x8(%rdx,%r8,1),%rdx
   24700:	48 29 fe             	sub    %rdi,%rsi
   24703:	48 19 d1             	sbb    %rdx,%rcx
   24706:	0f 92 c1             	setb   %cl
   24709:	80 e1 01             	and    $0x1,%cl
   2470c:	0f b6 c9             	movzbl %cl,%ecx
   2470f:	29 c8                	sub    %ecx,%eax
   24711:	83 c0 01             	add    $0x1,%eax
   24714:	48 83 c4 30          	add    $0x30,%rsp
   24718:	5d                   	pop    %rbp
   24719:	c3                   	ret
   2471a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000024720 <_ZNSt3__16__itoa13__traits_baseIovE9__convertB8nn210000EPco>:
  static _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI char* __convert(char* __p, _Tp __v) {
   24720:	55                   	push   %rbp
   24721:	48 89 e5             	mov    %rsp,%rbp
   24724:	48 83 ec 40          	sub    $0x40,%rsp
   24728:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2472c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   24730:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24734:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   24738:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2473c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   24740:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    return __itoa::__base_10_u128(__p, __v);
   24744:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   24748:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2474c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   24750:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24754:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   24758:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   2475c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   24760:	e8 0b 00 00 00       	call   24770 <_ZNSt3__16__itoa14__base_10_u128B8nn210000EPco>
   24765:	48 83 c4 40          	add    $0x40,%rsp
   24769:	5d                   	pop    %rbp
   2476a:	c3                   	ret
   2476b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000024770 <_ZNSt3__16__itoa14__base_10_u128B8nn210000EPco>:
  _LIBCPP_ASSERT_INTERNAL(__exp >= __pow10_128_offset, "Index out of bounds");
  return __pow10_128[__exp - __pow10_128_offset];
}

_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline char*
__base_10_u128(char* __buffer, __uint128_t __value) noexcept {
   24770:	55                   	push   %rbp
   24771:	48 89 e5             	mov    %rsp,%rbp
   24774:	48 81 ec 70 01 00 00 	sub    $0x170,%rsp
   2477b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2477f:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   24783:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24787:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2478b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2478f:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   24793:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  // 64  bit                             18'446'744'073'709'551'615 (20 digits)
  // 128 bit    340'282'366'920'938'463'463'374'607'431'768'211'455 (39 digits)
  // step 1     ^                                                   ([0-1] digits)
  // step 2      ^^^^^^^^^^^^^^^^^^^^^^^^^                          ([0-19] digits)
  // step 3                               ^^^^^^^^^^^^^^^^^^^^^^^^^ (19 digits)
  if (__value >= __itoa::__pow_10(38)) {
   24797:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2479b:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   247a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   247a6:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   247ad:	bf 26 00 00 00       	mov    $0x26,%edi
   247b2:	e8 59 03 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   247b7:	48 89 c6             	mov    %rax,%rsi
   247ba:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   247c1:	48 89 d1             	mov    %rdx,%rcx
   247c4:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
   247cb:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   247cf:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   247d3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   247d7:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   247db:	48 29 f2             	sub    %rsi,%rdx
   247de:	48 19 c8             	sbb    %rcx,%rax
   247e1:	0f 82 e2 01 00 00    	jb     249c9 <_ZNSt3__16__itoa14__base_10_u128B8nn210000EPco+0x259>
   247e7:	eb 00                	jmp    247e9 <_ZNSt3__16__itoa14__base_10_u128B8nn210000EPco+0x79>
    // step 1
    __buffer = __itoa::__append1(__buffer, static_cast<uint32_t>(__value / __itoa::__pow_10(38)));
   247e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   247ed:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   247f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   247f8:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
   247ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24803:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
   2480a:	bf 26 00 00 00       	mov    $0x26,%edi
   2480f:	89 bd ec fe ff ff    	mov    %edi,-0x114(%rbp)
   24815:	e8 f6 02 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   2481a:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
   24821:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
   24828:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2482c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   24830:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   24834:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   24838:	e8 33 6d 00 00       	call   2b570 <__udivti3>
   2483d:	48 8b bd e0 fe ff ff 	mov    -0x120(%rbp),%rdi
   24844:	89 c6                	mov    %eax,%esi
   24846:	e8 e5 a0 ff ff       	call   1e930 <_ZNSt3__16__itoa9__append1B8nn210000EPcj>
   2484b:	8b bd ec fe ff ff    	mov    -0x114(%rbp),%edi
   24851:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __value %= __itoa::__pow_10(38);
   24855:	e8 b6 02 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   2485a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   2485e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   24862:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   24866:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   2486a:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   2486e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   24872:	e8 f9 6d 00 00       	call   2b670 <__umodti3>
   24877:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   2487b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    // step 2 always 19 digits.
    // They are handled here since leading zeros need to be appended to the buffer,
    __buffer = __itoa::__append9(__buffer, static_cast<uint32_t>(__value / __itoa::__pow_10(29)));
   2487f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24883:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   2488a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2488e:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   24895:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24899:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
   248a0:	bf 1d 00 00 00       	mov    $0x1d,%edi
   248a5:	89 bd 0c ff ff ff    	mov    %edi,-0xf4(%rbp)
   248ab:	e8 60 02 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   248b0:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
   248b7:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
   248be:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   248c2:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   248c6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   248ca:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   248ce:	e8 9d 6c 00 00       	call   2b570 <__udivti3>
   248d3:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
   248da:	89 c6                	mov    %eax,%esi
   248dc:	e8 9f a2 ff ff       	call   1eb80 <_ZNSt3__16__itoa9__append9B8nn210000EPcj>
   248e1:	8b bd 0c ff ff ff    	mov    -0xf4(%rbp),%edi
   248e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __value %= __itoa::__pow_10(29);
   248eb:	e8 20 02 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   248f0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   248f4:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
   248f8:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   248fc:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   24900:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24904:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   24908:	e8 63 6d 00 00       	call   2b670 <__umodti3>
   2490d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   24911:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    __buffer = __itoa::__append10(__buffer, static_cast<uint64_t>(__value / __itoa::__pow_10(19)));
   24915:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24919:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   24920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24924:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   2492b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2492f:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   24936:	bf 13 00 00 00       	mov    $0x13,%edi
   2493b:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
   24941:	e8 ca 01 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   24946:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
   2494d:	48 8b b5 18 ff ff ff 	mov    -0xe8(%rbp),%rsi
   24954:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   2495b:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
   24962:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   24969:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
   24970:	e8 fb 6b 00 00       	call   2b570 <__udivti3>
   24975:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
   2497c:	48 89 c6             	mov    %rax,%rsi
   2497f:	e8 9c e2 ff ff       	call   22c20 <_ZNSt3__16__itoa10__append10B8nn210000ImEEPcS2_T_>
   24984:	8b bd 2c ff ff ff    	mov    -0xd4(%rbp),%edi
   2498a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __value %= __itoa::__pow_10(19);
   2498e:	e8 7d 01 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   24993:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   2499a:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
   249a1:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
   249a8:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   249af:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   249b3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   249b7:	e8 b4 6c 00 00       	call   2b670 <__umodti3>
   249bc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   249c0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  } else {
   249c4:	e9 af 00 00 00       	jmp    24a78 <_ZNSt3__16__itoa14__base_10_u128B8nn210000EPco+0x308>
    // step 2
    // This version needs to determine the position of the leading non-zero digit.
    __buffer = __base_10_u64(__buffer, static_cast<uint64_t>(__value / __itoa::__pow_10(19)));
   249c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   249cd:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
   249d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   249d8:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
   249df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   249e3:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
   249ea:	bf 13 00 00 00       	mov    $0x13,%edi
   249ef:	89 bd cc fe ff ff    	mov    %edi,-0x134(%rbp)
   249f5:	e8 16 01 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   249fa:	48 8b bd b0 fe ff ff 	mov    -0x150(%rbp),%rdi
   24a01:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
   24a08:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   24a0f:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
   24a16:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
   24a1d:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
   24a24:	e8 47 6b 00 00       	call   2b570 <__udivti3>
   24a29:	48 8b bd c0 fe ff ff 	mov    -0x140(%rbp),%rdi
   24a30:	48 89 c6             	mov    %rax,%rsi
   24a33:	e8 48 e1 ff ff       	call   22b80 <_ZNSt3__16__itoa13__base_10_u64B8nn210000EPcm>
   24a38:	8b bd cc fe ff ff    	mov    -0x134(%rbp),%edi
   24a3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __value %= __itoa::__pow_10(19);
   24a42:	e8 c9 00 00 00       	call   24b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>
   24a47:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   24a4e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
   24a55:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
   24a5c:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
   24a63:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24a67:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   24a6b:	e8 00 6c 00 00       	call   2b670 <__umodti3>
   24a70:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   24a74:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  }

  // Step 3
  __buffer = __itoa::__append9(__buffer, static_cast<uint32_t>(__value / 10000000000));
   24a78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24a7c:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
   24a83:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24a87:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   24a8b:	31 c0                	xor    %eax,%eax
   24a8d:	89 c1                	mov    %eax,%ecx
   24a8f:	48 89 8d a0 fe ff ff 	mov    %rcx,-0x160(%rbp)
   24a96:	48 ba 00 e4 0b 54 02 	movabs $0x2540be400,%rdx
   24a9d:	00 00 00 
   24aa0:	48 89 95 98 fe ff ff 	mov    %rdx,-0x168(%rbp)
   24aa7:	e8 c4 6a 00 00       	call   2b570 <__udivti3>
   24aac:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
   24ab3:	89 c6                	mov    %eax,%esi
   24ab5:	e8 c6 a0 ff ff       	call   1eb80 <_ZNSt3__16__itoa9__append9B8nn210000EPcj>
   24aba:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
   24ac1:	48 8b 8d a0 fe ff ff 	mov    -0x160(%rbp),%rcx
   24ac8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  __buffer = __itoa::__append10(__buffer, static_cast<uint64_t>(__value % 10000000000));
   24acc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24ad0:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
   24ad7:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24adb:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   24adf:	e8 8c 6b 00 00       	call   2b670 <__umodti3>
   24ae4:	48 8b bd a8 fe ff ff 	mov    -0x158(%rbp),%rdi
   24aeb:	48 89 c6             	mov    %rax,%rsi
   24aee:	e8 2d e1 ff ff       	call   22c20 <_ZNSt3__16__itoa10__append10B8nn210000ImEEPcS2_T_>
   24af3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

  return __buffer;
   24af7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24afb:	48 81 c4 70 01 00 00 	add    $0x170,%rsp
   24b02:	5d                   	pop    %rbp
   24b03:	c3                   	ret
   24b04:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   24b0b:	00 00 00 
   24b0e:	66 90                	xchg   %ax,%ax

0000000000024b10 <_ZNSt3__16__itoa8__pow_10B8nn210000Ei>:
_LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI inline __uint128_t __pow_10(int __exp) noexcept {
   24b10:	55                   	push   %rbp
   24b11:	48 89 e5             	mov    %rsp,%rbp
   24b14:	89 7d ec             	mov    %edi,-0x14(%rbp)
  return __pow10_128[__exp - __pow10_128_offset];
   24b17:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
   24b1b:	48 c1 e1 04          	shl    $0x4,%rcx
   24b1f:	48 8d 15 ba 9c 00 00 	lea    0x9cba(%rip),%rdx        # 2e7e0 <_ZNSt3__16__itoa11__pow10_128E>
   24b26:	48 8b 04 11          	mov    (%rcx,%rdx,1),%rax
   24b2a:	48 8b 4c 11 08       	mov    0x8(%rcx,%rdx,1),%rcx
   24b2f:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   24b33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24b37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24b3b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   24b3f:	5d                   	pop    %rbp
   24b40:	c3                   	ret
   24b41:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   24b48:	00 00 00 
   24b4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000024b50 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   24b50:	55                   	push   %rbp
   24b51:	48 89 e5             	mov    %rsp,%rbp
   24b54:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   24b5b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   24b5f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24b63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24b67:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   24b6b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   24b6f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   24b73:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24b77:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ptrdiff_t __cap = __last - __first;
   24b7b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24b7f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   24b83:	48 29 c8             	sub    %rcx,%rax
   24b86:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    int __n         = __width(__value);
   24b8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   24b8e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24b92:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   24b96:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   24b9a:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   24b9e:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   24ba2:	e8 29 01 00 00       	call   24cd0 <_ZNSt3__16__itoa10__integralILj2EE7__widthB8nn210000IoEEiT_>
   24ba7:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    if (__n > __cap)
   24baa:	48 63 45 b4          	movslq -0x4c(%rbp),%rax
   24bae:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
   24bb2:	7e 14                	jle    24bc8 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x78>
      return {__last, errc::value_too_large};
   24bb4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24bb8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24bbc:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   24bc3:	e9 ea 00 00 00       	jmp    24cb2 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x162>
    __last                   = __first + __n;
   24bc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24bcc:	48 63 4d b4          	movslq -0x4c(%rbp),%rcx
   24bd0:	48 01 c8             	add    %rcx,%rax
   24bd3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    char* __p                = __last;
   24bd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24bdb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    const unsigned __divisor = 16;
   24bdf:	c7 45 94 10 00 00 00 	movl   $0x10,-0x6c(%rbp)
    while (__value > __divisor) {
   24be6:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   24bea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   24bee:	48 83 e9 11          	sub    $0x11,%rcx
   24bf2:	48 83 d8 00          	sbb    $0x0,%rax
   24bf6:	72 53                	jb     24c4b <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0xfb>
   24bf8:	eb 00                	jmp    24bfa <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0xaa>
      unsigned __c = __value % __divisor;
   24bfa:	8b 45 c0             	mov    -0x40(%rbp),%eax
   24bfd:	83 e0 0f             	and    $0xf,%eax
   24c00:	89 45 90             	mov    %eax,-0x70(%rbp)
      __value /= __divisor;
   24c03:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   24c07:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24c0b:	48 89 c8             	mov    %rcx,%rax
   24c0e:	48 0f a4 d0 3c       	shld   $0x3c,%rdx,%rax
   24c13:	48 c1 e9 04          	shr    $0x4,%rcx
   24c17:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24c1b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __p -= 4;
   24c1f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   24c23:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
   24c27:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      std::copy_n(&__base_2_lut[4 * __c], 4, __p);
   24c2b:	8b 45 90             	mov    -0x70(%rbp),%eax
   24c2e:	c1 e0 02             	shl    $0x2,%eax
   24c31:	48 8d 3d 48 75 00 00 	lea    0x7548(%rip),%rdi        # 2c180 <_ZNSt3__16__itoa12__base_2_lutE>
   24c38:	48 01 c7             	add    %rax,%rdi
   24c3b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   24c3f:	be 04 00 00 00       	mov    $0x4,%esi
   24c44:	e8 d7 9f ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   24c49:	eb 9b                	jmp    24be6 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x96>
    do {
   24c4b:	eb 00                	jmp    24c4d <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0xfd>
      unsigned __c = __value % 2;
   24c4d:	8b 45 c0             	mov    -0x40(%rbp),%eax
   24c50:	83 e0 01             	and    $0x1,%eax
   24c53:	89 45 8c             	mov    %eax,-0x74(%rbp)
      __value /= 2;
   24c56:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   24c5a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24c5e:	48 89 c8             	mov    %rcx,%rax
   24c61:	48 0f a4 d0 3f       	shld   $0x3f,%rdx,%rax
   24c66:	48 d1 e9             	shr    $1,%rcx
   24c69:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24c6d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      *--__p = "01"[__c];
   24c71:	8b 45 8c             	mov    -0x74(%rbp),%eax
   24c74:	89 c1                	mov    %eax,%ecx
   24c76:	48 8d 05 42 aa 00 00 	lea    0xaa42(%rip),%rax        # 2f6bf <.L.str.50>
   24c7d:	48 01 c8             	add    %rcx,%rax
   24c80:	8a 08                	mov    (%rax),%cl
   24c82:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   24c86:	48 89 c2             	mov    %rax,%rdx
   24c89:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   24c8d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   24c91:	88 48 ff             	mov    %cl,-0x1(%rax)
    } while (__value != 0);
   24c94:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   24c98:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24c9c:	48 09 c8             	or     %rcx,%rax
   24c9f:	75 ac                	jne    24c4d <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0xfd>
   24ca1:	eb 00                	jmp    24ca3 <_ZNSt3__16__itoa10__integralILj2EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x153>
    return {__last, errc(0)};
   24ca3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24ca7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24cab:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   24cb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24cb6:	8b 55 f8             	mov    -0x8(%rbp),%edx
   24cb9:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   24cc0:	5d                   	pop    %rbp
   24cc1:	c3                   	ret
   24cc2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   24cc9:	00 00 00 
   24ccc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000024cd0 <_ZNSt3__16__itoa10__integralILj2EE7__widthB8nn210000IoEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   24cd0:	55                   	push   %rbp
   24cd1:	48 89 e5             	mov    %rsp,%rbp
   24cd4:	48 83 ec 30          	sub    $0x30,%rsp
   24cd8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   24cdc:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   24ce0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24ce4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   24ce8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24cec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    return numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1);
   24cf0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24cf4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   24cf8:	48 83 c8 01          	or     $0x1,%rax
   24cfc:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   24d00:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   24d04:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24d08:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   24d0c:	e8 0f 00 00 00       	call   24d20 <_ZNSt3__112__libcpp_clzB8nn210000Eo>
   24d11:	89 c1                	mov    %eax,%ecx
   24d13:	b8 80 00 00 00       	mov    $0x80,%eax
   24d18:	29 c8                	sub    %ecx,%eax
   24d1a:	48 83 c4 30          	add    $0x30,%rsp
   24d1e:	5d                   	pop    %rbp
   24d1f:	c3                   	ret

0000000000024d20 <_ZNSt3__112__libcpp_clzB8nn210000Eo>:
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR int __libcpp_clz(unsigned long long __x) _NOEXCEPT {
  return __builtin_clzll(__x);
}

#if _LIBCPP_HAS_INT128
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR int __libcpp_clz(__uint128_t __x) _NOEXCEPT {
   24d20:	55                   	push   %rbp
   24d21:	48 89 e5             	mov    %rsp,%rbp
   24d24:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   24d28:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   24d2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24d30:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   24d34:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24d38:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#  if __has_builtin(__builtin_clzg)
  return __builtin_clzg(__x);
   24d3c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   24d40:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   24d44:	48 0f bd c2          	bsr    %rdx,%rax
   24d48:	89 c1                	mov    %eax,%ecx
   24d4a:	83 f1 3f             	xor    $0x3f,%ecx
   24d4d:	48 0f bd c6          	bsr    %rsi,%rax
   24d51:	83 f0 3f             	xor    $0x3f,%eax
   24d54:	83 c8 40             	or     $0x40,%eax
   24d57:	48 85 d2             	test   %rdx,%rdx
   24d5a:	0f 45 c1             	cmovne %ecx,%eax
   24d5d:	5d                   	pop    %rbp
   24d5e:	c3                   	ret
   24d5f:	90                   	nop

0000000000024d60 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   24d60:	55                   	push   %rbp
   24d61:	48 89 e5             	mov    %rsp,%rbp
   24d64:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   24d6b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   24d6f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24d73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24d77:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   24d7b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   24d7f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   24d83:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24d87:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ptrdiff_t __cap = __last - __first;
   24d8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24d8f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   24d93:	48 29 c8             	sub    %rcx,%rax
   24d96:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    int __n         = __width(__value);
   24d9a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   24d9e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24da2:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   24da6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   24daa:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   24dae:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   24db2:	e8 39 01 00 00       	call   24ef0 <_ZNSt3__16__itoa10__integralILj8EE7__widthB8nn210000IoEEiT_>
   24db7:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    if (__n > __cap)
   24dba:	48 63 45 b4          	movslq -0x4c(%rbp),%rax
   24dbe:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
   24dc2:	7e 14                	jle    24dd8 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x78>
      return {__last, errc::value_too_large};
   24dc4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24dc8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24dcc:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   24dd3:	e9 05 01 00 00       	jmp    24edd <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x17d>
    __last             = __first + __n;
   24dd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24ddc:	48 63 4d b4          	movslq -0x4c(%rbp),%rcx
   24de0:	48 01 c8             	add    %rcx,%rax
   24de3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    char* __p          = __last;
   24de7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24deb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    unsigned __divisor = 64;
   24def:	c7 45 94 40 00 00 00 	movl   $0x40,-0x6c(%rbp)
    while (__value > __divisor) {
   24df6:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   24dfa:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24dfe:	8b 45 94             	mov    -0x6c(%rbp),%eax
   24e01:	89 c2                	mov    %eax,%edx
   24e03:	31 c0                	xor    %eax,%eax
   24e05:	48 29 f2             	sub    %rsi,%rdx
   24e08:	48 19 c8             	sbb    %rcx,%rax
   24e0b:	73 68                	jae    24e75 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x115>
   24e0d:	eb 00                	jmp    24e0f <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0xaf>
      unsigned __c = __value % __divisor;
   24e0f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   24e13:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   24e17:	8b 45 94             	mov    -0x6c(%rbp),%eax
   24e1a:	89 c2                	mov    %eax,%edx
   24e1c:	31 c0                	xor    %eax,%eax
   24e1e:	89 c1                	mov    %eax,%ecx
   24e20:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
   24e24:	e8 47 68 00 00       	call   2b670 <__umodti3>
   24e29:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   24e2d:	89 45 90             	mov    %eax,-0x70(%rbp)
      __value /= __divisor;
   24e30:	8b 45 94             	mov    -0x6c(%rbp),%eax
   24e33:	89 c2                	mov    %eax,%edx
   24e35:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   24e39:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   24e3d:	e8 2e 67 00 00       	call   2b570 <__udivti3>
   24e42:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   24e46:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __p -= 2;
   24e4a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   24e4e:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   24e52:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      std::copy_n(&__base_8_lut[2 * __c], 2, __p);
   24e56:	8b 45 90             	mov    -0x70(%rbp),%eax
   24e59:	01 c0                	add    %eax,%eax
   24e5b:	48 8d 3d 5e 73 00 00 	lea    0x735e(%rip),%rdi        # 2c1c0 <_ZNSt3__16__itoa12__base_8_lutE>
   24e62:	48 01 c7             	add    %rax,%rdi
   24e65:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   24e69:	be 02 00 00 00       	mov    $0x2,%esi
   24e6e:	e8 ad 9d ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   24e73:	eb 81                	jmp    24df6 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x96>
    do {
   24e75:	eb 00                	jmp    24e77 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x117>
      unsigned __c = __value % 8;
   24e77:	8b 45 c0             	mov    -0x40(%rbp),%eax
   24e7a:	83 e0 07             	and    $0x7,%eax
   24e7d:	89 45 8c             	mov    %eax,-0x74(%rbp)
      __value /= 8;
   24e80:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   24e84:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24e88:	48 89 c8             	mov    %rcx,%rax
   24e8b:	48 0f a4 d0 3d       	shld   $0x3d,%rdx,%rax
   24e90:	48 c1 e9 03          	shr    $0x3,%rcx
   24e94:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24e98:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      *--__p = "01234567"[__c];
   24e9c:	8b 45 8c             	mov    -0x74(%rbp),%eax
   24e9f:	89 c1                	mov    %eax,%ecx
   24ea1:	48 8d 05 1a a8 00 00 	lea    0xa81a(%rip),%rax        # 2f6c2 <.L.str.51>
   24ea8:	48 01 c8             	add    %rcx,%rax
   24eab:	8a 08                	mov    (%rax),%cl
   24ead:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   24eb1:	48 89 c2             	mov    %rax,%rdx
   24eb4:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   24eb8:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   24ebc:	88 48 ff             	mov    %cl,-0x1(%rax)
    } while (__value != 0);
   24ebf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   24ec3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24ec7:	48 09 c8             	or     %rcx,%rax
   24eca:	75 ab                	jne    24e77 <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x117>
   24ecc:	eb 00                	jmp    24ece <_ZNSt3__16__itoa10__integralILj8EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x16e>
    return {__last, errc(0)};
   24ece:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24ed2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24ed6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   24edd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24ee1:	8b 55 f8             	mov    -0x8(%rbp),%edx
   24ee4:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   24eeb:	5d                   	pop    %rbp
   24eec:	c3                   	ret
   24eed:	0f 1f 00             	nopl   (%rax)

0000000000024ef0 <_ZNSt3__16__itoa10__integralILj8EE7__widthB8nn210000IoEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   24ef0:	55                   	push   %rbp
   24ef1:	48 89 e5             	mov    %rsp,%rbp
   24ef4:	48 83 ec 30          	sub    $0x30,%rsp
   24ef8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   24efc:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   24f00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24f04:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   24f08:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24f0c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    return ((numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1)) + 2) / 3;
   24f10:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24f14:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   24f18:	48 83 c8 01          	or     $0x1,%rax
   24f1c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   24f20:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   24f24:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   24f28:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   24f2c:	e8 ef fd ff ff       	call   24d20 <_ZNSt3__112__libcpp_clzB8nn210000Eo>
   24f31:	89 c1                	mov    %eax,%ecx
   24f33:	b8 80 00 00 00       	mov    $0x80,%eax
   24f38:	29 c8                	sub    %ecx,%eax
   24f3a:	83 c0 02             	add    $0x2,%eax
   24f3d:	b9 03 00 00 00       	mov    $0x3,%ecx
   24f42:	99                   	cltd
   24f43:	f7 f9                	idiv   %ecx
   24f45:	48 83 c4 30          	add    $0x30,%rsp
   24f49:	5d                   	pop    %rbp
   24f4a:	c3                   	ret
   24f4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000024f50 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_>:
  __to_chars(char* __first, char* __last, _Tp __value) {
   24f50:	55                   	push   %rbp
   24f51:	48 89 e5             	mov    %rsp,%rbp
   24f54:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   24f5b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   24f5f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   24f63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24f67:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   24f6b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   24f6f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   24f73:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   24f77:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ptrdiff_t __cap = __last - __first;
   24f7b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24f7f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   24f83:	48 29 c8             	sub    %rcx,%rax
   24f86:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    int __n         = __width(__value);
   24f8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   24f8e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24f92:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   24f96:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   24f9a:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   24f9e:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   24fa2:	e8 49 01 00 00       	call   250f0 <_ZNSt3__16__itoa10__integralILj16EE7__widthB8nn210000IoEEiT_>
   24fa7:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    if (__n > __cap)
   24faa:	48 63 45 b4          	movslq -0x4c(%rbp),%rax
   24fae:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
   24fb2:	7e 14                	jle    24fc8 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x78>
      return {__last, errc::value_too_large};
   24fb4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24fb8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24fbc:	c7 45 f8 4b 00 00 00 	movl   $0x4b,-0x8(%rbp)
   24fc3:	e9 11 01 00 00       	jmp    250d9 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x189>
    __last             = __first + __n;
   24fc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24fcc:	48 63 4d b4          	movslq -0x4c(%rbp),%rcx
   24fd0:	48 01 c8             	add    %rcx,%rax
   24fd3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    char* __p          = __last;
   24fd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   24fdb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    unsigned __divisor = 256;
   24fdf:	c7 45 94 00 01 00 00 	movl   $0x100,-0x6c(%rbp)
    while (__value > __divisor) {
   24fe6:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   24fea:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   24fee:	8b 45 94             	mov    -0x6c(%rbp),%eax
   24ff1:	89 c2                	mov    %eax,%edx
   24ff3:	31 c0                	xor    %eax,%eax
   24ff5:	48 29 f2             	sub    %rsi,%rdx
   24ff8:	48 19 c8             	sbb    %rcx,%rax
   24ffb:	73 68                	jae    25065 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x115>
   24ffd:	eb 00                	jmp    24fff <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0xaf>
      unsigned __c = __value % __divisor;
   24fff:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   25003:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   25007:	8b 45 94             	mov    -0x6c(%rbp),%eax
   2500a:	89 c2                	mov    %eax,%edx
   2500c:	31 c0                	xor    %eax,%eax
   2500e:	89 c1                	mov    %eax,%ecx
   25010:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
   25014:	e8 57 66 00 00       	call   2b670 <__umodti3>
   25019:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   2501d:	89 45 90             	mov    %eax,-0x70(%rbp)
      __value /= __divisor;
   25020:	8b 45 94             	mov    -0x6c(%rbp),%eax
   25023:	89 c2                	mov    %eax,%edx
   25025:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   25029:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   2502d:	e8 3e 65 00 00       	call   2b570 <__udivti3>
   25032:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   25036:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      __p -= 2;
   2503a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2503e:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   25042:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      std::copy_n(&__base_16_lut[2 * __c], 2, __p);
   25046:	8b 45 90             	mov    -0x70(%rbp),%eax
   25049:	01 c0                	add    %eax,%eax
   2504b:	48 8d 3d ee 71 00 00 	lea    0x71ee(%rip),%rdi        # 2c240 <_ZNSt3__16__itoa13__base_16_lutE>
   25052:	48 01 c7             	add    %rax,%rdi
   25055:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   25059:	be 02 00 00 00       	mov    $0x2,%esi
   2505e:	e8 bd 9b ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
    while (__value > __divisor) {
   25063:	eb 81                	jmp    24fe6 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x96>
    if (__first != __last)
   25065:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25069:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   2506d:	74 5b                	je     250ca <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x17a>
      do {
   2506f:	eb 00                	jmp    25071 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x121>
        unsigned __c = __value % 16;
   25071:	8b 45 c0             	mov    -0x40(%rbp),%eax
   25074:	83 e0 0f             	and    $0xf,%eax
   25077:	89 45 8c             	mov    %eax,-0x74(%rbp)
        __value /= 16;
   2507a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   2507e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   25082:	48 89 c8             	mov    %rcx,%rax
   25085:	48 0f a4 d0 3c       	shld   $0x3c,%rdx,%rax
   2508a:	48 c1 e9 04          	shr    $0x4,%rcx
   2508e:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   25092:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        *--__p = "0123456789abcdef"[__c];
   25096:	8b 45 8c             	mov    -0x74(%rbp),%eax
   25099:	89 c1                	mov    %eax,%ecx
   2509b:	48 8d 05 29 a6 00 00 	lea    0xa629(%rip),%rax        # 2f6cb <.L.str.52>
   250a2:	48 01 c8             	add    %rcx,%rax
   250a5:	8a 08                	mov    (%rax),%cl
   250a7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   250ab:	48 89 c2             	mov    %rax,%rdx
   250ae:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
   250b2:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   250b6:	88 48 ff             	mov    %cl,-0x1(%rax)
      } while (__value != 0);
   250b9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   250bd:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   250c1:	48 09 c8             	or     %rcx,%rax
   250c4:	75 ab                	jne    25071 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x121>
   250c6:	eb 00                	jmp    250c8 <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x178>
   250c8:	eb 00                	jmp    250ca <_ZNSt3__16__itoa10__integralILj16EE10__to_charsB8nn210000IoEENS_15to_chars_resultEPcS5_T_+0x17a>
    return {__last, errc(0)};
   250ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   250ce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   250d2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  }
   250d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   250dd:	8b 55 f8             	mov    -0x8(%rbp),%edx
   250e0:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   250e7:	5d                   	pop    %rbp
   250e8:	c3                   	ret
   250e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000250f0 <_ZNSt3__16__itoa10__integralILj16EE7__widthB8nn210000IoEEiT_>:
  _LIBCPP_HIDE_FROM_ABI static constexpr int __width(_Tp __value) noexcept {
   250f0:	55                   	push   %rbp
   250f1:	48 89 e5             	mov    %rsp,%rbp
   250f4:	48 83 ec 30          	sub    $0x30,%rsp
   250f8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   250fc:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   25100:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   25104:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   25108:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   2510c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    return (numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1) + 3) / 4;
   25110:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25114:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   25118:	48 83 c8 01          	or     $0x1,%rax
   2511c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   25120:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   25124:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   25128:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2512c:	e8 ef fb ff ff       	call   24d20 <_ZNSt3__112__libcpp_clzB8nn210000Eo>
   25131:	89 c1                	mov    %eax,%ecx
   25133:	b8 80 00 00 00       	mov    $0x80,%eax
   25138:	29 c8                	sub    %ecx,%eax
   2513a:	83 c0 03             	add    $0x3,%eax
   2513d:	b9 04 00 00 00       	mov    $0x4,%ecx
   25142:	99                   	cltd
   25143:	f7 f9                	idiv   %ecx
   25145:	48 83 c4 30          	add    $0x30,%rsp
   25149:	5d                   	pop    %rbp
   2514a:	c3                   	ret
   2514b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000025150 <_ZNSt3__15arrayIcLm131EE4dataB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 value_type* data() _NOEXCEPT { return __elems_; }
   25150:	55                   	push   %rbp
   25151:	48 89 e5             	mov    %rsp,%rbp
   25154:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25158:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2515c:	5d                   	pop    %rbp
   2515d:	c3                   	ret
   2515e:	66 90                	xchg   %ax,%ax

0000000000025160 <_ZNSt3__15arrayIcLm45EE4dataB8nn210000Ev>:
   25160:	55                   	push   %rbp
   25161:	48 89 e5             	mov    %rsp,%rbp
   25164:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25168:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2516c:	5d                   	pop    %rbp
   2516d:	c3                   	ret
   2516e:	66 90                	xchg   %ax,%ax

0000000000025170 <_ZNSt3__15arrayIcLm40EE4dataB8nn210000Ev>:
   25170:	55                   	push   %rbp
   25171:	48 89 e5             	mov    %rsp,%rbp
   25174:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25178:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2517c:	5d                   	pop    %rbp
   2517d:	c3                   	ret
   2517e:	66 90                	xchg   %ax,%ax

0000000000025180 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRjEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   25180:	55                   	push   %rbp
   25181:	48 89 e5             	mov    %rsp,%rbp
   25184:	48 83 ec 10          	sub    $0x10,%rsp
   25188:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2518c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   25190:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25194:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   25198:	8b 30                	mov    (%rax),%esi
   2519a:	e8 11 00 00 00       	call   251b0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIjEEDaSC_>
   2519f:	48 83 c4 10          	add    $0x10,%rsp
   251a3:	5d                   	pop    %rbp
   251a4:	c3                   	ret
   251a5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   251ac:	00 00 00 
   251af:	90                   	nop

00000000000251b0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIjEEDaSC_>:
        [&](auto __arg) {
   251b0:	55                   	push   %rbp
   251b1:	48 89 e5             	mov    %rsp,%rbp
   251b4:	48 83 ec 40          	sub    $0x40,%rsp
   251b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   251bc:	89 75 f4             	mov    %esi,-0xc(%rbp)
   251bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   251c3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   251c7:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   251cb:	e8 70 00 00 00       	call   25240 <_ZNSt3__19formatterIjcEC2Ev>
   251d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            if (__parse)
   251d4:	48 8b 40 10          	mov    0x10(%rax),%rax
   251d8:	f6 00 01             	testb  $0x1,(%rax)
   251db:	74 23                	je     25200 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIjEEDaSC_+0x50>
   251dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   251e1:	48 8b 08             	mov    (%rax),%rcx
   251e4:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   251e8:	48 8b 30             	mov    (%rax),%rsi
   251eb:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
   251ef:	e8 bc c6 ff ff       	call   218b0 <_ZNSt3__119__formatter_integerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   251f4:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   251f8:	48 89 c6             	mov    %rax,%rsi
   251fb:	e8 20 4c ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   25200:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   25204:	48 8b 48 08          	mov    0x8(%rax),%rcx
   25208:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   2520c:	8b 75 f4             	mov    -0xc(%rbp),%esi
   2520f:	48 8b 50 08          	mov    0x8(%rax),%rdx
   25213:	48 8d 7d e4          	lea    -0x1c(%rbp),%rdi
   25217:	e8 44 00 00 00       	call   25260 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEjNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   2521c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   25220:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   25224:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   25228:	e8 33 49 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   2522d:	48 83 c4 40          	add    $0x40,%rsp
   25231:	5d                   	pop    %rbp
   25232:	c3                   	ret
   25233:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2523a:	00 00 00 
   2523d:	0f 1f 00             	nopl   (%rax)

0000000000025240 <_ZNSt3__19formatterIjcEC2Ev>:
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<unsigned char, _CharT> : public __formatter_integer<_CharT> {};
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<unsigned short, _CharT> : public __formatter_integer<_CharT> {};
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<unsigned, _CharT> : public __formatter_integer<_CharT> {};
   25240:	55                   	push   %rbp
   25241:	48 89 e5             	mov    %rsp,%rbp
   25244:	48 83 ec 10          	sub    $0x10,%rsp
   25248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2524c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25250:	e8 4b c7 ff ff       	call   219a0 <_ZNSt3__119__formatter_integerIcEC2Ev>
   25255:	48 83 c4 10          	add    $0x10,%rsp
   25259:	5d                   	pop    %rbp
   2525a:	c3                   	ret
   2525b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000025260 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEjNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   25260:	55                   	push   %rbp
   25261:	48 89 e5             	mov    %rsp,%rbp
   25264:	48 83 ec 60          	sub    $0x60,%rsp
   25268:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2526c:	89 75 ec             	mov    %esi,-0x14(%rbp)
   2526f:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25273:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    __format_spec::__parsed_specifications<_CharT> __specs = __parser_.__get_parsed_std_specifications(__ctx);
   25277:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2527b:	e8 90 68 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   25280:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   25284:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    if (__specs.__std_.__type_ == __format_spec::__type::__char)
   25288:	80 7d d1 0a          	cmpb   $0xa,-0x2f(%rbp)
   2528c:	75 3d                	jne    252cb <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEjNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x6b>
      return __formatter::__format_char(__value, __ctx.out(), __specs);
   2528e:	8b 45 ec             	mov    -0x14(%rbp),%eax
   25291:	89 45 a4             	mov    %eax,-0x5c(%rbp)
   25294:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   25298:	e8 73 48 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   2529d:	8b 7d a4             	mov    -0x5c(%rbp),%edi
   252a0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   252a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   252a8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   252ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   252b0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   252b4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   252b8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   252bc:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   252c0:	e8 4b 00 00 00       	call   25310 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEjTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>
   252c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   252c9:	eb 2d                	jmp    252f8 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEjNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x98>
    return __formatter::__format_integer(static_cast<_Type>(__value), __ctx, __specs);
   252cb:	8b 7d ec             	mov    -0x14(%rbp),%edi
   252ce:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   252d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   252d6:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   252da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   252de:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   252e2:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   252e6:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   252ea:	31 c0                	xor    %eax,%eax
   252ec:	45 31 c0             	xor    %r8d,%r8d
   252ef:	e8 ac 68 ff ff       	call   1bba0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEjcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   252f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   252f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   252fc:	48 83 c4 60          	add    $0x60,%rsp
   25300:	5d                   	pop    %rbp
   25301:	c3                   	ret
   25302:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   25309:	00 00 00 
   2530c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000025310 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEjTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>:
              __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   25310:	55                   	push   %rbp
   25311:	48 89 e5             	mov    %rsp,%rbp
   25314:	48 83 ec 60          	sub    $0x60,%rsp
   25318:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2531c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25320:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   25324:	89 7d dc             	mov    %edi,-0x24(%rbp)
      if (__value > static_cast<make_unsigned_t<_CharT>>(numeric_limits<_CharT>::max()))
   25327:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2532a:	89 45 bc             	mov    %eax,-0x44(%rbp)
   2532d:	e8 3e c8 ff ff       	call   21b70 <_ZNSt3__114numeric_limitsIcE3maxB8nn210000Ev>
   25332:	88 c1                	mov    %al,%cl
   25334:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25337:	0f b6 c9             	movzbl %cl,%ecx
   2533a:	39 c8                	cmp    %ecx,%eax
   2533c:	76 0c                	jbe    2534a <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEjTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x3a>
        std::__throw_format_error("Integral value outside the range of the char type");
   2533e:	48 8d 3d c8 a3 00 00 	lea    0xa3c8(%rip),%rdi        # 2f70d <.L.str.71>
   25345:	e8 f6 47 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  const auto __c = static_cast<_CharT>(__value);
   2534a:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2534d:	88 45 db             	mov    %al,-0x25(%rbp)
   25350:	48 8d 7d db          	lea    -0x25(%rbp),%rdi
  return __formatter::__write(std::addressof(__c), std::addressof(__c) + 1, std::move(__out_it), __specs);
   25354:	e8 67 38 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   25359:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2535d:	48 8d 7d db          	lea    -0x25(%rbp),%rdi
   25361:	e8 5a 38 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   25366:	48 83 c0 01          	add    $0x1,%rax
   2536a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2536e:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   25372:	e8 29 48 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   25377:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   2537b:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   2537f:	48 8b 00             	mov    (%rax),%rax
   25382:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   25386:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2538a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2538e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25392:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   25396:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   2539a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   2539e:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
   253a2:	e8 69 6c ff ff       	call   1c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   253a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   253ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   253af:	48 83 c4 60          	add    $0x60,%rsp
   253b3:	5d                   	pop    %rbp
   253b4:	c3                   	ret
   253b5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   253bc:	00 00 00 
   253bf:	90                   	nop

00000000000253c0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRyEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   253c0:	55                   	push   %rbp
   253c1:	48 89 e5             	mov    %rsp,%rbp
   253c4:	48 83 ec 10          	sub    $0x10,%rsp
   253c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   253cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   253d0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   253d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   253d8:	48 8b 30             	mov    (%rax),%rsi
   253db:	e8 10 00 00 00       	call   253f0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIyEEDaSC_>
   253e0:	48 83 c4 10          	add    $0x10,%rsp
   253e4:	5d                   	pop    %rbp
   253e5:	c3                   	ret
   253e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   253ed:	00 00 00 

00000000000253f0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIyEEDaSC_>:
        [&](auto __arg) {
   253f0:	55                   	push   %rbp
   253f1:	48 89 e5             	mov    %rsp,%rbp
   253f4:	48 83 ec 40          	sub    $0x40,%rsp
   253f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   253fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   25400:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25404:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   25408:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   2540c:	e8 6f 00 00 00       	call   25480 <_ZNSt3__19formatterIycEC2Ev>
   25411:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            if (__parse)
   25415:	48 8b 40 10          	mov    0x10(%rax),%rax
   25419:	f6 00 01             	testb  $0x1,(%rax)
   2541c:	74 23                	je     25441 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIyEEDaSC_+0x51>
   2541e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   25422:	48 8b 08             	mov    (%rax),%rcx
   25425:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   25429:	48 8b 30             	mov    (%rax),%rsi
   2542c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   25430:	e8 7b c4 ff ff       	call   218b0 <_ZNSt3__119__formatter_integerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   25435:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   25439:	48 89 c6             	mov    %rax,%rsi
   2543c:	e8 df 49 ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   25441:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   25445:	48 8b 48 08          	mov    0x8(%rax),%rcx
   25449:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   2544d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   25451:	48 8b 50 08          	mov    0x8(%rax),%rdx
   25455:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   25459:	e8 42 00 00 00       	call   254a0 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEyNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   2545e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   25462:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   25466:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2546a:	e8 f1 46 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   2546f:	48 83 c4 40          	add    $0x40,%rsp
   25473:	5d                   	pop    %rbp
   25474:	c3                   	ret
   25475:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2547c:	00 00 00 
   2547f:	90                   	nop

0000000000025480 <_ZNSt3__19formatterIycEC2Ev>:
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<unsigned long, _CharT> : public __formatter_integer<_CharT> {};
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<unsigned long long, _CharT> : public __formatter_integer<_CharT> {};
   25480:	55                   	push   %rbp
   25481:	48 89 e5             	mov    %rsp,%rbp
   25484:	48 83 ec 10          	sub    $0x10,%rsp
   25488:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2548c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25490:	e8 0b c5 ff ff       	call   219a0 <_ZNSt3__119__formatter_integerIcEC2Ev>
   25495:	48 83 c4 10          	add    $0x10,%rsp
   25499:	5d                   	pop    %rbp
   2549a:	c3                   	ret
   2549b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000254a0 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEyNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   254a0:	55                   	push   %rbp
   254a1:	48 89 e5             	mov    %rsp,%rbp
   254a4:	48 83 ec 60          	sub    $0x60,%rsp
   254a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   254ac:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   254b0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   254b4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    __format_spec::__parsed_specifications<_CharT> __specs = __parser_.__get_parsed_std_specifications(__ctx);
   254b8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   254bc:	e8 4f 66 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   254c1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   254c5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    if (__specs.__std_.__type_ == __format_spec::__type::__char)
   254c9:	80 7d d1 0a          	cmpb   $0xa,-0x2f(%rbp)
   254cd:	75 40                	jne    2550f <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEyNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x6f>
      return __formatter::__format_char(__value, __ctx.out(), __specs);
   254cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   254d3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   254d7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   254db:	e8 30 46 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   254e0:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   254e4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   254e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   254ec:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   254f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   254f4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   254f8:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   254fc:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   25500:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   25504:	e8 47 00 00 00       	call   25550 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEyTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>
   25509:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2550d:	eb 2e                	jmp    2553d <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEyNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x9d>
    return __formatter::__format_integer(static_cast<_Type>(__value), __ctx, __specs);
   2550f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   25513:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   25517:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2551b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2551f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25523:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   25527:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2552b:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   2552f:	31 c0                	xor    %eax,%eax
   25531:	45 31 c0             	xor    %r8d,%r8d
   25534:	e8 b7 c9 ff ff       	call   21ef0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   25539:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   2553d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25541:	48 83 c4 60          	add    $0x60,%rsp
   25545:	5d                   	pop    %rbp
   25546:	c3                   	ret
   25547:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2554e:	00 00 

0000000000025550 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEyTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>:
              __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   25550:	55                   	push   %rbp
   25551:	48 89 e5             	mov    %rsp,%rbp
   25554:	48 83 ec 60          	sub    $0x60,%rsp
   25558:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2555c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25560:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   25564:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      if (__value > static_cast<make_unsigned_t<_CharT>>(numeric_limits<_CharT>::max()))
   25568:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2556c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   25570:	e8 fb c5 ff ff       	call   21b70 <_ZNSt3__114numeric_limitsIcE3maxB8nn210000Ev>
   25575:	88 c1                	mov    %al,%cl
   25577:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2557b:	0f b6 c9             	movzbl %cl,%ecx
   2557e:	48 39 c8             	cmp    %rcx,%rax
   25581:	76 0c                	jbe    2558f <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEyTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x3f>
        std::__throw_format_error("Integral value outside the range of the char type");
   25583:	48 8d 3d 83 a1 00 00 	lea    0xa183(%rip),%rdi        # 2f70d <.L.str.71>
   2558a:	e8 b1 45 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  const auto __c = static_cast<_CharT>(__value);
   2558f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25593:	88 45 d7             	mov    %al,-0x29(%rbp)
   25596:	48 8d 7d d7          	lea    -0x29(%rbp),%rdi
  return __formatter::__write(std::addressof(__c), std::addressof(__c) + 1, std::move(__out_it), __specs);
   2559a:	e8 21 36 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   2559f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   255a3:	48 8d 7d d7          	lea    -0x29(%rbp),%rdi
   255a7:	e8 14 36 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   255ac:	48 83 c0 01          	add    $0x1,%rax
   255b0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   255b4:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   255b8:	e8 e3 45 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   255bd:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   255c1:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   255c5:	48 8b 00             	mov    (%rax),%rax
   255c8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   255cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   255d0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   255d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   255d8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   255dc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   255e0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   255e4:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
   255e8:	e8 23 6a ff ff       	call   1c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   255ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   255f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   255f5:	48 83 c4 60          	add    $0x60,%rsp
   255f9:	5d                   	pop    %rbp
   255fa:	c3                   	ret
   255fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000025600 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRoEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   25600:	55                   	push   %rbp
   25601:	48 89 e5             	mov    %rsp,%rbp
   25604:	48 83 ec 20          	sub    $0x20,%rsp
   25608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2560c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   25610:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25614:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   25618:	48 8b 01             	mov    (%rcx),%rax
   2561b:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   2561f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   25623:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   25627:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2562b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2562f:	e8 0c 00 00 00       	call   25640 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIoEEDaSC_>
   25634:	48 83 c4 20          	add    $0x20,%rsp
   25638:	5d                   	pop    %rbp
   25639:	c3                   	ret
   2563a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000025640 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIoEEDaSC_>:
        [&](auto __arg) {
   25640:	55                   	push   %rbp
   25641:	48 89 e5             	mov    %rsp,%rbp
   25644:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   2564b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2564f:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   25653:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   25657:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2565b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2565f:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   25663:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   25667:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2566b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   2566f:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   25673:	e8 88 00 00 00       	call   25700 <_ZNSt3__19formatterIocEC2Ev>
   25678:	48 8b 45 98          	mov    -0x68(%rbp),%rax
            if (__parse)
   2567c:	48 8b 40 10          	mov    0x10(%rax),%rax
   25680:	f6 00 01             	testb  $0x1,(%rax)
   25683:	74 23                	je     256a8 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIoEEDaSC_+0x68>
   25685:	48 8b 45 98          	mov    -0x68(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   25689:	48 8b 08             	mov    (%rax),%rcx
   2568c:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
   25690:	48 8b 30             	mov    (%rax),%rsi
   25693:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   25697:	e8 14 c2 ff ff       	call   218b0 <_ZNSt3__119__formatter_integerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   2569c:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   256a0:	48 89 c6             	mov    %rax,%rsi
   256a3:	e8 78 47 ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   256a8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   256ac:	48 8b 48 08          	mov    0x8(%rax),%rcx
   256b0:	48 89 c8             	mov    %rcx,%rax
   256b3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   256b7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   256bb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   256bf:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   256c3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   256c7:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   256cb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   256cf:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   256d3:	e8 48 00 00 00       	call   25720 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEoNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   256d8:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   256dc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   256e0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   256e4:	e8 77 44 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   256e9:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   256f0:	5d                   	pop    %rbp
   256f1:	c3                   	ret
   256f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   256f9:	00 00 00 
   256fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000025700 <_ZNSt3__19formatterIocEC2Ev>:
#  if _LIBCPP_HAS_INT128
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<__uint128_t, _CharT> : public __formatter_integer<_CharT> {};
   25700:	55                   	push   %rbp
   25701:	48 89 e5             	mov    %rsp,%rbp
   25704:	48 83 ec 10          	sub    $0x10,%rsp
   25708:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2570c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25710:	e8 8b c2 ff ff       	call   219a0 <_ZNSt3__119__formatter_integerIcEC2Ev>
   25715:	48 83 c4 10          	add    $0x10,%rsp
   25719:	5d                   	pop    %rbp
   2571a:	c3                   	ret
   2571b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000025720 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEoNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   25720:	55                   	push   %rbp
   25721:	48 89 e5             	mov    %rsp,%rbp
   25724:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   2572b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2572f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   25733:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25737:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2573b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2573f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   25743:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   25747:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2574b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    __format_spec::__parsed_specifications<_CharT> __specs = __parser_.__get_parsed_std_specifications(__ctx);
   2574f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   25753:	e8 b8 63 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   25758:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2575c:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
    if (__specs.__std_.__type_ == __format_spec::__type::__char)
   25760:	80 7d a9 0a          	cmpb   $0xa,-0x57(%rbp)
   25764:	75 6b                	jne    257d1 <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEoNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0xb1>
      return __formatter::__format_char(__value, __ctx.out(), __specs);
   25766:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2576a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   25771:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25775:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   2577c:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   25780:	e8 8b 43 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   25785:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
   2578c:	48 89 c2             	mov    %rax,%rdx
   2578f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   25796:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
   2579a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2579e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   257a2:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
   257a6:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
   257aa:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
   257ae:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   257b2:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   257b6:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
   257ba:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   257be:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   257c2:	4c 8b 45 98          	mov    -0x68(%rbp),%r8
   257c6:	e8 75 00 00 00       	call   25840 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEoTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>
   257cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   257cf:	eb 5a                	jmp    2582b <_ZNKSt3__119__formatter_integerIcE6formatB8nn210000ITkNS_8integralEoNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_+0x10b>
    return __formatter::__format_integer(static_cast<_Type>(__value), __ctx, __specs);
   257d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   257d5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   257d9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   257dd:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   257e1:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   257e5:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
   257ec:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
   257f3:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
   257fa:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   25801:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   25808:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   2580f:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
   25816:	4c 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%r8
   2581d:	31 c0                	xor    %eax,%eax
   2581f:	45 31 c9             	xor    %r9d,%r9d
   25822:	e8 19 de ff ff       	call   23640 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEocNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   25827:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   2582b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2582f:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   25836:	5d                   	pop    %rbp
   25837:	c3                   	ret
   25838:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2583f:	00 

0000000000025840 <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEoTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE>:
              __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   25840:	55                   	push   %rbp
   25841:	48 89 e5             	mov    %rsp,%rbp
   25844:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   2584b:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
   25852:	48 89 d0             	mov    %rdx,%rax
   25855:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   2585c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   25863:	48 89 f0             	mov    %rsi,%rax
   25866:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   2586d:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   25871:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   25875:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25879:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2587d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   25881:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   25885:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
   25889:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2588d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      if (__value > static_cast<make_unsigned_t<_CharT>>(numeric_limits<_CharT>::max()))
   25891:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   25895:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   25899:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2589d:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   258a1:	e8 ca c2 ff ff       	call   21b70 <_ZNSt3__114numeric_limitsIcE3maxB8nn210000Ev>
   258a6:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   258aa:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   258ae:	0f b6 c0             	movzbl %al,%eax
   258b1:	89 c2                	mov    %eax,%edx
   258b3:	31 c0                	xor    %eax,%eax
   258b5:	48 29 f2             	sub    %rsi,%rdx
   258b8:	48 19 c8             	sbb    %rcx,%rax
   258bb:	73 0e                	jae    258cb <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEoTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x8b>
   258bd:	eb 00                	jmp    258bf <_ZNSt3__111__formatter13__format_charB8nn210000ITkNS_15__fmt_char_typeEcTkNS_8integralEoTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ET0_T1_NS_13__format_spec23__parsed_specificationsIS3_EE+0x7f>
        std::__throw_format_error("Integral value outside the range of the char type");
   258bf:	48 8d 3d 47 9e 00 00 	lea    0x9e47(%rip),%rdi        # 2f70d <.L.str.71>
   258c6:	e8 75 42 ff ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
  const auto __c = static_cast<_CharT>(__value);
   258cb:	8a 45 b0             	mov    -0x50(%rbp),%al
   258ce:	88 45 af             	mov    %al,-0x51(%rbp)
   258d1:	48 8d 7d af          	lea    -0x51(%rbp),%rdi
  return __formatter::__write(std::addressof(__c), std::addressof(__c) + 1, std::move(__out_it), __specs);
   258d5:	e8 e6 32 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   258da:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   258e1:	48 8d 7d af          	lea    -0x51(%rbp),%rdi
   258e5:	e8 d6 32 ff ff       	call   18bc0 <_ZNSt3__19addressofB8nn210000IKcEEPT_RS2_>
   258ea:	48 83 c0 01          	add    $0x1,%rax
   258ee:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   258f5:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   258f9:	e8 a2 42 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   258fe:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
   25905:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
   2590c:	48 8b 00             	mov    (%rax),%rax
   2590f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   25913:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   25917:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2591b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2591f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   25923:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   25927:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   2592b:	4c 8b 45 98          	mov    -0x68(%rbp),%r8
   2592f:	e8 dc 66 ff ff       	call   1c010 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   25934:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   25938:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2593c:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   25943:	5d                   	pop    %rbp
   25944:	c3                   	ret
   25945:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2594c:	00 00 00 
   2594f:	90                   	nop

0000000000025950 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRfEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   25950:	55                   	push   %rbp
   25951:	48 89 e5             	mov    %rsp,%rbp
   25954:	48 83 ec 20          	sub    $0x20,%rsp
   25958:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2595c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   25960:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25964:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   25968:	d9 00                	flds   (%rax)
   2596a:	48 89 e0             	mov    %rsp,%rax
   2596d:	d9 18                	fstps  (%rax)
   2596f:	e8 0c 00 00 00       	call   25980 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIfEEDaSC_>
   25974:	48 83 c4 20          	add    $0x20,%rsp
   25978:	5d                   	pop    %rbp
   25979:	c3                   	ret
   2597a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000025980 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIfEEDaSC_>:
        [&](auto __arg) {
   25980:	55                   	push   %rbp
   25981:	48 89 e5             	mov    %rsp,%rbp
   25984:	48 83 ec 40          	sub    $0x40,%rsp
   25988:	d9 45 10             	flds   0x10(%rbp)
   2598b:	dd d8                	fstp   %st(0)
   2598d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25991:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25995:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   25999:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   2599d:	e8 6e 00 00 00       	call   25a10 <_ZNSt3__19formatterIfcEC2Ev>
   259a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
            if (__parse)
   259a6:	48 8b 40 10          	mov    0x10(%rax),%rax
   259aa:	f6 00 01             	testb  $0x1,(%rax)
   259ad:	74 23                	je     259d2 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIfEEDaSC_+0x52>
   259af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   259b3:	48 8b 08             	mov    (%rax),%rcx
   259b6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   259ba:	48 8b 30             	mov    (%rax),%rsi
   259bd:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   259c1:	e8 6a 00 00 00       	call   25a30 <_ZNSt3__126__formatter_floating_pointIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   259c6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   259ca:	48 89 c6             	mov    %rax,%rsi
   259cd:	e8 4e 44 ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   259d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   259d6:	48 8b 48 08          	mov    0x8(%rax),%rcx
   259da:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   259de:	d9 45 10             	flds   0x10(%rbp)
   259e1:	48 8b 70 08          	mov    0x8(%rax),%rsi
   259e5:	48 89 e0             	mov    %rsp,%rax
   259e8:	d9 18                	fstps  (%rax)
   259ea:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   259ee:	e8 8d 00 00 00       	call   25a80 <_ZNKSt3__126__formatter_floating_pointIcE6formatB8nn210000ITkNS_14floating_pointEfNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   259f3:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   259f7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   259fb:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   259ff:	e8 5c 41 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   25a04:	48 83 c4 40          	add    $0x40,%rsp
   25a08:	5d                   	pop    %rbp
   25a09:	c3                   	ret
   25a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000025a10 <_ZNSt3__19formatterIfcEC2Ev>:

  __format_spec::__parser<_CharT> __parser_;
};

template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<float, _CharT> : public __formatter_floating_point<_CharT> {};
   25a10:	55                   	push   %rbp
   25a11:	48 89 e5             	mov    %rsp,%rbp
   25a14:	48 83 ec 10          	sub    $0x10,%rsp
   25a18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25a1c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25a20:	e8 bb 00 00 00       	call   25ae0 <_ZNSt3__126__formatter_floating_pointIcEC2Ev>
   25a25:	48 83 c4 10          	add    $0x10,%rsp
   25a29:	5d                   	pop    %rbp
   25a2a:	c3                   	ret
   25a2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000025a30 <_ZNSt3__126__formatter_floating_pointIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>:
  _LIBCPP_HIDE_FROM_ABI constexpr typename _ParseContext::iterator parse(_ParseContext& __ctx) {
   25a30:	55                   	push   %rbp
   25a31:	48 89 e5             	mov    %rsp,%rbp
   25a34:	48 83 ec 30          	sub    $0x30,%rsp
   25a38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25a3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   25a40:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25a44:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    typename _ParseContext::iterator __result = __parser_.__parse(__ctx, __format_spec::__fields_floating_point);
   25a48:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   25a4c:	66 c7 45 e6 3f 01    	movw   $0x13f,-0x1a(%rbp)
   25a52:	66 8b 45 e6          	mov    -0x1a(%rbp),%ax
   25a56:	66 89 c2             	mov    %ax,%dx
   25a59:	e8 c2 50 ff ff       	call   1ab20 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E>
   25a5e:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   25a62:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    __format_spec::__process_parsed_floating_point(__parser_, "a floating-point");
   25a66:	48 8d 35 d2 9c 00 00 	lea    0x9cd2(%rip),%rsi        # 2f73f <.L.str.72>
   25a6d:	e8 8e 00 00 00       	call   25b00 <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc>
    return __result;
   25a72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25a76:	48 83 c4 30          	add    $0x30,%rsp
   25a7a:	5d                   	pop    %rbp
   25a7b:	c3                   	ret
   25a7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000025a80 <_ZNKSt3__126__formatter_floating_pointIcE6formatB8nn210000ITkNS_14floating_pointEfNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   25a80:	55                   	push   %rbp
   25a81:	48 89 e5             	mov    %rsp,%rbp
   25a84:	48 83 ec 40          	sub    $0x40,%rsp
   25a88:	d9 45 10             	flds   0x10(%rbp)
   25a8b:	dd d8                	fstp   %st(0)
   25a8d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   25a91:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   25a95:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    return __formatter::__format_floating_point(__value, __ctx, __parser_.__get_parsed_std_specifications(__ctx));
   25a99:	d9 45 10             	flds   0x10(%rbp)
   25a9c:	d9 5d cc             	fstps  -0x34(%rbp)
   25a9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25aa3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   25aa7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   25aab:	e8 60 60 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   25ab0:	d9 45 cc             	flds   -0x34(%rbp)
   25ab3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   25ab7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   25abb:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25abf:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   25ac3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   25ac7:	48 89 e0             	mov    %rsp,%rax
   25aca:	d9 18                	fstps  (%rax)
   25acc:	e8 9f 00 00 00       	call   25b70 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>
   25ad1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   25ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25ad9:	48 83 c4 40          	add    $0x40,%rsp
   25add:	5d                   	pop    %rbp
   25ade:	c3                   	ret
   25adf:	90                   	nop

0000000000025ae0 <_ZNSt3__126__formatter_floating_pointIcEC2Ev>:
struct _LIBCPP_TEMPLATE_VIS __formatter_floating_point {
   25ae0:	55                   	push   %rbp
   25ae1:	48 89 e5             	mov    %rsp,%rbp
   25ae4:	48 83 ec 10          	sub    $0x10,%rsp
   25ae8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25aec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25af0:	e8 fb 4e ff ff       	call   1a9f0 <_ZNSt3__113__format_spec8__parserIcEC2Ev>
   25af5:	48 83 c4 10          	add    $0x10,%rsp
   25af9:	5d                   	pop    %rbp
   25afa:	c3                   	ret
   25afb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000025b00 <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc>:

template <class _CharT>
_LIBCPP_HIDE_FROM_ABI constexpr void __process_parsed_floating_point(__parser<_CharT>& __parser, const char* __id) {
   25b00:	55                   	push   %rbp
   25b01:	48 89 e5             	mov    %rsp,%rbp
   25b04:	48 83 ec 20          	sub    $0x20,%rsp
   25b08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   25b0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  switch (__parser.__type_) {
   25b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25b14:	8a 40 01             	mov    0x1(%rax),%al
   25b17:	88 45 ef             	mov    %al,-0x11(%rbp)
   25b1a:	84 c0                	test   %al,%al
   25b1c:	74 18                	je     25b36 <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x36>
   25b1e:	eb 00                	jmp    25b20 <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x20>
   25b20:	8a 45 ef             	mov    -0x11(%rbp),%al
   25b23:	04 f5                	add    $0xf5,%al
   25b25:	2c 02                	sub    $0x2,%al
   25b27:	72 0d                	jb     25b36 <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x36>
   25b29:	eb 00                	jmp    25b2b <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x2b>
   25b2b:	8a 45 ef             	mov    -0x11(%rbp),%al
   25b2e:	04 f3                	add    $0xf3,%al
   25b30:	2c 06                	sub    $0x6,%al
   25b32:	72 04                	jb     25b38 <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x38>
   25b34:	eb 2b                	jmp    25b61 <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x61>
  case __format_spec::__type::__default:
  case __format_spec::__type::__hexfloat_lower_case:
  case __format_spec::__type::__hexfloat_upper_case:
    // Precision specific behavior will be handled later.
    break;
   25b36:	eb 32                	jmp    25b6a <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x6a>
  case __format_spec::__type::__scientific_upper_case:
  case __format_spec::__type::__fixed_lower_case:
  case __format_spec::__type::__fixed_upper_case:
  case __format_spec::__type::__general_lower_case:
  case __format_spec::__type::__general_upper_case:
    if (!__parser.__precision_as_arg_ && __parser.__precision_ == -1)
   25b38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25b3c:	66 8b 40 02          	mov    0x2(%rax),%ax
   25b40:	66 c1 e8 0f          	shr    $0xf,%ax
   25b44:	66 a9 01 00          	test   $0x1,%ax
   25b48:	75 15                	jne    25b5f <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x5f>
   25b4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25b4e:	83 78 08 ff          	cmpl   $0xffffffff,0x8(%rax)
   25b52:	75 0b                	jne    25b5f <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x5f>
      // Set the default precision for the call to to_chars.
      __parser.__precision_ = 6;
   25b54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25b58:	c7 40 08 06 00 00 00 	movl   $0x6,0x8(%rax)
    break;
   25b5f:	eb 09                	jmp    25b6a <_ZNSt3__113__format_spec31__process_parsed_floating_pointB8nn210000IcEEvRNS0_8__parserIT_EEPKc+0x6a>

  default:
    __format_spec::__throw_invalid_type_format_error(__id);
   25b61:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   25b65:	e8 66 5a ff ff       	call   1b5d0 <_ZNSt3__113__format_spec33__throw_invalid_type_format_errorB8nn210000EPKc>
  }
}
   25b6a:	48 83 c4 20          	add    $0x20,%rsp
   25b6e:	5d                   	pop    %rbp
   25b6f:	c3                   	ret

0000000000025b70 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>:
__format_floating_point(_Tp __value, _FormatContext& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) {
   25b70:	55                   	push   %rbp
   25b71:	48 89 e5             	mov    %rsp,%rbp
   25b74:	48 81 ec a0 02 00 00 	sub    $0x2a0,%rsp
   25b7b:	d9 45 10             	flds   0x10(%rbp)
   25b7e:	dd d8                	fstp   %st(0)
   25b80:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   25b84:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   25b88:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
  bool __negative = std::signbit(__value);
   25b8c:	d9 45 10             	flds   0x10(%rbp)
   25b8f:	48 89 e0             	mov    %rsp,%rax
   25b92:	d9 18                	fstps  (%rax)
   25b94:	e8 27 06 00 00       	call   261c0 <_ZNSt3__16__math7signbitB8nn210000IvEEbf>
   25b99:	88 45 df             	mov    %al,-0x21(%rbp)
  if (!std::isfinite(__value)) [[unlikely]]
   25b9c:	d9 45 10             	flds   0x10(%rbp)
   25b9f:	48 89 e0             	mov    %rsp,%rax
   25ba2:	d9 18                	fstps  (%rax)
   25ba4:	e8 37 06 00 00       	call   261e0 <_ZNSt3__16__math8isfiniteB8nn210000Ef>
   25ba9:	a8 01                	test   $0x1,%al
   25bab:	75 61                	jne    25c0e <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x9e>
    return __formatter::__format_floating_point_non_finite(__ctx.out(), __specs, __negative, std::isnan(__value));
   25bad:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   25bb1:	e8 5a 3f ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   25bb6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   25bba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25bbe:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   25bc2:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   25bc6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   25bca:	8a 45 df             	mov    -0x21(%rbp),%al
   25bcd:	88 85 e7 fd ff ff    	mov    %al,-0x219(%rbp)
   25bd3:	d9 45 10             	flds   0x10(%rbp)
   25bd6:	48 89 e0             	mov    %rsp,%rax
   25bd9:	d9 18                	fstps  (%rax)
   25bdb:	e8 50 07 00 00       	call   26330 <_ZNSt3__16__math5isnanB8nn210000Ef>
   25be0:	8a 8d e7 fd ff ff    	mov    -0x219(%rbp),%cl
   25be6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   25bea:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   25bee:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   25bf2:	0f b6 c9             	movzbl %cl,%ecx
   25bf5:	83 e1 01             	and    $0x1,%ecx
   25bf8:	44 0f b6 c0          	movzbl %al,%r8d
   25bfc:	41 83 e0 01          	and    $0x1,%r8d
   25c00:	e8 0b 06 00 00       	call   26210 <_ZNSt3__111__formatter34__format_floating_point_non_finiteB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEET_S7_NS_13__format_spec23__parsed_specificationsIT0_EEbb>
   25c05:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   25c09:	e9 9f 05 00 00       	jmp    261ad <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x63d>
  if (__negative)
   25c0e:	f6 45 df 01          	testb  $0x1,-0x21(%rbp)
   25c12:	74 08                	je     25c1c <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0xac>
    __value = -__value;
   25c14:	8a 45 13             	mov    0x13(%rbp),%al
   25c17:	04 80                	add    $0x80,%al
   25c19:	88 45 13             	mov    %al,0x13(%rbp)
  __float_buffer<_Fp> __buffer(__specs.__precision_);
   25c1c:	8b 75 f0             	mov    -0x10(%rbp),%esi
   25c1f:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
   25c26:	e8 25 07 00 00       	call   26350 <_ZNSt3__111__formatter14__float_bufferIfEC2B8nn210000Ei>
      __buffer, __value, __negative, (__specs.__has_precision()), __specs.__std_.__sign_, __specs.__std_.__type_);
   25c2b:	d9 45 10             	flds   0x10(%rbp)
   25c2e:	d9 9d e0 fd ff ff    	fstps  -0x220(%rbp)
   25c34:	8a 45 df             	mov    -0x21(%rbp),%al
   25c37:	88 85 e6 fd ff ff    	mov    %al,-0x21a(%rbp)
   25c3d:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   25c41:	e8 ba 0a 00 00       	call   26700 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE15__has_precisionB8nn210000Ev>
   25c46:	d9 85 e0 fd ff ff    	flds   -0x220(%rbp)
   25c4c:	8a 8d e6 fd ff ff    	mov    -0x21a(%rbp),%cl
   25c52:	40 8a 75 e8          	mov    -0x18(%rbp),%sil
   25c56:	40 c0 ee 03          	shr    $0x3,%sil
   25c5a:	40 80 e6 03          	and    $0x3,%sil
   25c5e:	8a 55 e9             	mov    -0x17(%rbp),%dl
  __float_result __result = __formatter::__format_buffer(
   25c61:	48 89 e7             	mov    %rsp,%rdi
   25c64:	d9 1f                	fstps  (%rdi)
   25c66:	44 0f b6 c6          	movzbl %sil,%r8d
   25c6a:	44 0f b6 ca          	movzbl %dl,%r9d
   25c6e:	0f b6 d1             	movzbl %cl,%edx
   25c71:	83 e2 01             	and    $0x1,%edx
   25c74:	0f b6 c8             	movzbl %al,%ecx
   25c77:	83 e1 01             	and    $0x1,%ecx
   25c7a:	48 8d bd 88 fe ff ff 	lea    -0x178(%rbp),%rdi
   25c81:	48 8d b5 a8 fe ff ff 	lea    -0x158(%rbp),%rsi
   25c88:	e8 83 07 00 00       	call   26410 <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE>
  if (__specs.__std_.__alternate_form_) {
   25c8d:	8a 45 e8             	mov    -0x18(%rbp),%al
   25c90:	c0 e8 05             	shr    $0x5,%al
   25c93:	24 01                	and    $0x1,%al
   25c95:	a8 01                	test   $0x1,%al
   25c97:	0f 84 85 01 00 00    	je     25e22 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b2>
    if (__result.__radix_point == __result.__last) {
   25c9d:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
   25ca4:	48 3b 85 a0 fe ff ff 	cmp    -0x160(%rbp),%rax
   25cab:	75 56                	jne    25d03 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x193>
      *__result.__last++ = '.';
   25cad:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   25cb4:	48 89 c1             	mov    %rax,%rcx
   25cb7:	48 83 c1 01          	add    $0x1,%rcx
   25cbb:	48 89 8d a0 fe ff ff 	mov    %rcx,-0x160(%rbp)
   25cc2:	c6 00 2e             	movb   $0x2e,(%rax)
      std::rotate(__result.__exponent, __result.__last - 1, __result.__last);
   25cc5:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
   25ccc:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
   25cd3:	48 83 c6 ff          	add    $0xffffffffffffffff,%rsi
   25cd7:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
   25cde:	e8 3d 0a 00 00       	call   26720 <_ZNSt3__16rotateB8nn210000IPcEET_S2_S2_S2_>
      __result.__radix_point = __result.__exponent;
   25ce3:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
   25cea:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
      ++__result.__exponent;
   25cf1:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
   25cf8:	48 83 c0 01          	add    $0x1,%rax
   25cfc:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    bool __is_general = __specs.__std_.__type_ == __format_spec::__type::__general_lower_case ||
   25d03:	b0 01                	mov    $0x1,%al
   25d05:	80 7d e9 11          	cmpb   $0x11,-0x17(%rbp)
   25d09:	88 85 df fd ff ff    	mov    %al,-0x221(%rbp)
   25d0f:	74 0d                	je     25d1e <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1ae>
                        __specs.__std_.__type_ == __format_spec::__type::__general_upper_case;
   25d11:	80 7d e9 12          	cmpb   $0x12,-0x17(%rbp)
   25d15:	0f 94 c0             	sete   %al
   25d18:	88 85 df fd ff ff    	mov    %al,-0x221(%rbp)
   25d1e:	8a 85 df fd ff ff    	mov    -0x221(%rbp),%al
    bool __is_general = __specs.__std_.__type_ == __format_spec::__type::__general_lower_case ||
   25d24:	24 01                	and    $0x1,%al
   25d26:	88 85 87 fe ff ff    	mov    %al,-0x179(%rbp)
    if (__is_general) {
   25d2c:	f6 85 87 fe ff ff 01 	testb  $0x1,-0x179(%rbp)
   25d33:	0f 84 e7 00 00 00    	je     25e20 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b0>
      int __p = std::max<int>(1, (__specs.__has_precision() ? __specs.__precision_ : 6));
   25d39:	c7 85 7c fe ff ff 01 	movl   $0x1,-0x184(%rbp)
   25d40:	00 00 00 
   25d43:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   25d47:	e8 b4 09 00 00       	call   26700 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE15__has_precisionB8nn210000Ev>
   25d4c:	a8 01                	test   $0x1,%al
   25d4e:	75 02                	jne    25d52 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1e2>
   25d50:	eb 0b                	jmp    25d5d <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1ed>
   25d52:	8b 45 f0             	mov    -0x10(%rbp),%eax
   25d55:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
   25d5b:	eb 0d                	jmp    25d6a <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1fa>
   25d5d:	b8 06 00 00 00       	mov    $0x6,%eax
   25d62:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
   25d68:	eb 00                	jmp    25d6a <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1fa>
   25d6a:	8b 85 d8 fd ff ff    	mov    -0x228(%rbp),%eax
   25d70:	89 85 78 fe ff ff    	mov    %eax,-0x188(%rbp)
   25d76:	48 8d bd 7c fe ff ff 	lea    -0x184(%rbp),%rdi
   25d7d:	48 8d b5 78 fe ff ff 	lea    -0x188(%rbp),%rsi
   25d84:	e8 f7 09 00 00       	call   26780 <_ZNSt3__13maxB8nn210000IiEERKT_S3_S3_>
   25d89:	8b 00                	mov    (%rax),%eax
   25d8b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
      if (__result.__exponent == __result.__last)
   25d91:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
   25d98:	48 3b 85 a0 fe ff ff 	cmp    -0x160(%rbp),%rax
   25d9f:	75 23                	jne    25dc4 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x254>
        __p -= __result.__radix_point - __result.__integral;
   25da1:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
   25da8:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
   25daf:	48 29 c1             	sub    %rax,%rcx
   25db2:	48 63 85 80 fe ff ff 	movslq -0x180(%rbp),%rax
   25db9:	48 29 c8             	sub    %rcx,%rax
   25dbc:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
   25dc2:	eb 0f                	jmp    25dd3 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x263>
        --__p;
   25dc4:	8b 85 80 fe ff ff    	mov    -0x180(%rbp),%eax
   25dca:	83 c0 ff             	add    $0xffffffff,%eax
   25dcd:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
      ptrdiff_t __precision = (__result.__exponent - __result.__radix_point) - 1;
   25dd3:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
   25dda:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
   25de1:	48 29 c8             	sub    %rcx,%rax
   25de4:	48 83 e8 01          	sub    $0x1,%rax
   25de8:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
      if (__precision < __p)
   25def:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
   25df6:	48 63 8d 80 fe ff ff 	movslq -0x180(%rbp),%rcx
   25dfd:	48 39 c8             	cmp    %rcx,%rax
   25e00:	7d 1c                	jge    25e1e <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2ae>
        __buffer.__add_trailing_zeros(__p - __precision);
   25e02:	48 63 85 80 fe ff ff 	movslq -0x180(%rbp),%rax
   25e09:	48 2b 85 70 fe ff ff 	sub    -0x190(%rbp),%rax
   25e10:	89 c6                	mov    %eax,%esi
   25e12:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
   25e19:	e8 92 09 00 00       	call   267b0 <_ZNSt3__111__formatter14__float_bufferIfE20__add_trailing_zerosB8nn210000Ei>
    }
   25e1e:	eb 00                	jmp    25e20 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b0>
  }
   25e20:	eb 00                	jmp    25e22 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b2>
  ptrdiff_t __size         = __result.__last - __buffer.begin();
   25e22:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   25e29:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   25e30:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
   25e37:	e8 94 09 00 00       	call   267d0 <_ZNKSt3__111__formatter14__float_bufferIfE5beginB8nn210000Ev>
   25e3c:	48 89 c1             	mov    %rax,%rcx
   25e3f:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   25e46:	48 29 c8             	sub    %rcx,%rax
   25e49:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
   25e50:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
  int __num_trailing_zeros = __buffer.__num_trailing_zeros();
   25e57:	e8 94 09 00 00       	call   267f0 <_ZNKSt3__111__formatter14__float_bufferIfE20__num_trailing_zerosB8nn210000Ev>
   25e5c:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%rbp)
  if (__size + __num_trailing_zeros >= __specs.__width_) {
   25e62:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
   25e69:	48 63 8d 64 fe ff ff 	movslq -0x19c(%rbp),%rcx
   25e70:	48 01 c8             	add    %rcx,%rax
   25e73:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
   25e77:	48 39 c8             	cmp    %rcx,%rax
   25e7a:	0f 8c 58 01 00 00    	jl     25fd8 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x468>
    if (__num_trailing_zeros && __result.__exponent != __result.__last)
   25e80:	83 bd 64 fe ff ff 00 	cmpl   $0x0,-0x19c(%rbp)
   25e87:	0f 84 ce 00 00 00    	je     25f5b <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x3eb>
   25e8d:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
   25e94:	48 3b 85 a0 fe ff ff 	cmp    -0x160(%rbp),%rax
   25e9b:	0f 84 ba 00 00 00    	je     25f5b <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x3eb>
          __result.__exponent,
   25ea1:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
   25ea8:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
          __result.__last,
   25eaf:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   25eb6:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   25ebd:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
          __formatter::__fill(__formatter::__copy(__buffer.begin(), __result.__exponent, __ctx.out()),
   25ec4:	e8 07 09 00 00       	call   267d0 <_ZNKSt3__111__formatter14__float_bufferIfE5beginB8nn210000Ev>
   25ec9:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
   25ed0:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
   25ed7:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
   25ede:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   25ee2:	e8 29 3c ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   25ee7:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
   25eee:	48 8b b5 b8 fd ff ff 	mov    -0x248(%rbp),%rsi
   25ef5:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
   25efc:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
   25f03:	e8 b8 81 ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   25f08:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
                              __num_trailing_zeros,
   25f0f:	48 63 b5 64 fe ff ff 	movslq -0x19c(%rbp),%rsi
          __formatter::__fill(__formatter::__copy(__buffer.begin(), __result.__exponent, __ctx.out()),
   25f16:	48 8b bd 50 fe ff ff 	mov    -0x1b0(%rbp),%rdi
   25f1d:	ba 30 00 00 00       	mov    $0x30,%edx
   25f22:	e8 19 6e ff ff       	call   1cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>
   25f27:	48 8b bd c0 fd ff ff 	mov    -0x240(%rbp),%rdi
   25f2e:	48 8b b5 c8 fd ff ff 	mov    -0x238(%rbp),%rsi
   25f35:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
      return __formatter::__copy(
   25f3c:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
   25f43:	e8 78 81 ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   25f48:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   25f4c:	c7 85 44 fe ff ff 01 	movl   $0x1,-0x1bc(%rbp)
   25f53:	00 00 00 
   25f56:	e9 46 02 00 00       	jmp    261a1 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x631>
   25f5b:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
        __formatter::__copy(__buffer.begin(), __result.__last, __ctx.out()), __num_trailing_zeros, _CharT('0'));
   25f62:	e8 69 08 00 00       	call   267d0 <_ZNKSt3__111__formatter14__float_bufferIfE5beginB8nn210000Ev>
   25f67:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
   25f6e:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   25f75:	48 89 85 a8 fd ff ff 	mov    %rax,-0x258(%rbp)
   25f7c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   25f80:	e8 8b 3b ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   25f85:	48 8b bd a0 fd ff ff 	mov    -0x260(%rbp),%rdi
   25f8c:	48 8b b5 a8 fd ff ff 	mov    -0x258(%rbp),%rsi
   25f93:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
   25f9a:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
   25fa1:	e8 1a 81 ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   25fa6:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
   25fad:	48 63 b5 64 fe ff ff 	movslq -0x19c(%rbp),%rsi
    return __formatter::__fill(
   25fb4:	48 8b bd 38 fe ff ff 	mov    -0x1c8(%rbp),%rdi
   25fbb:	ba 30 00 00 00       	mov    $0x30,%edx
   25fc0:	e8 7b 6d ff ff       	call   1cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>
   25fc5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   25fc9:	c7 85 44 fe ff ff 01 	movl   $0x1,-0x1bc(%rbp)
   25fd0:	00 00 00 
   25fd3:	e9 c9 01 00 00       	jmp    261a1 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x631>
  auto __out_it = __ctx.out();
   25fd8:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   25fdc:	e8 2f 3b ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   25fe1:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
   25fe8:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
  char* __first = __buffer.begin();
   25fef:	e8 dc 07 00 00       	call   267d0 <_ZNKSt3__111__formatter14__float_bufferIfE5beginB8nn210000Ev>
   25ff4:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  if (__specs.__alignment_ == __format_spec::__alignment ::__zero_padding) {
   25ffb:	8a 45 e8             	mov    -0x18(%rbp),%al
   25ffe:	24 07                	and    $0x7,%al
   26000:	3c 04                	cmp    $0x4,%al
   26002:	75 69                	jne    2606d <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x4fd>
    if (__first != __result.__integral)
   26004:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
   2600b:	48 3b 85 88 fe ff ff 	cmp    -0x178(%rbp),%rax
   26012:	74 4b                	je     2605f <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x4ef>
      *__out_it++ = *__first++;
   26014:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
   2601b:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
   26022:	48 83 c0 01          	add    $0x1,%rax
   26026:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
   2602d:	31 c0                	xor    %eax,%eax
   2602f:	48 8d bd 28 fe ff ff 	lea    -0x1d8(%rbp),%rdi
   26036:	31 f6                	xor    %esi,%esi
   26038:	e8 b3 3c ff ff       	call   19cf0 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEppB8nn210000Ei>
   2603d:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
   26044:	48 8d bd 18 fe ff ff 	lea    -0x1e8(%rbp),%rdi
   2604b:	e8 c0 3c ff ff       	call   19d10 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEdeB8nn210000Ev>
   26050:	48 8b b5 98 fd ff ff 	mov    -0x268(%rbp),%rsi
   26057:	48 89 c7             	mov    %rax,%rdi
   2605a:	e8 c1 3c ff ff       	call   19d20 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEaSB8nn210000ERKc>
    __specs.__alignment_      = __format_spec::__alignment::__right;
   2605f:	8a 45 e8             	mov    -0x18(%rbp),%al
   26062:	24 f8                	and    $0xf8,%al
   26064:	0c 03                	or     $0x3,%al
   26066:	88 45 e8             	mov    %al,-0x18(%rbp)
    __specs.__fill_.__data[0] = _CharT('0');
   26069:	c6 45 f4 30          	movb   $0x30,-0xc(%rbp)
  if (__num_trailing_zeros)
   2606d:	83 bd 64 fe ff ff 00 	cmpl   $0x0,-0x19c(%rbp)
   26074:	0f 84 a2 00 00 00    	je     2611c <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x5ac>
        __first, __result.__last, std::move(__out_it), __specs, __size, __result.__exponent, __num_trailing_zeros);
   2607a:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
   26081:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
   26088:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   2608f:	48 89 85 90 fd ff ff 	mov    %rax,-0x270(%rbp)
   26096:	48 8d bd 28 fe ff ff 	lea    -0x1d8(%rbp),%rdi
   2609d:	e8 fe 3a ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   260a2:	48 8b bd 88 fd ff ff 	mov    -0x278(%rbp),%rdi
   260a9:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
   260b0:	48 8b 00             	mov    (%rax),%rax
   260b3:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
   260ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   260be:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
   260c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   260c9:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
   260d0:	4c 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%r9
   260d7:	4c 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%r10
   260de:	4c 63 9d 64 fe ff ff 	movslq -0x19c(%rbp),%r11
    return __formatter::__write_using_trailing_zeros(
   260e5:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
   260ec:	48 8b 8d 00 fe ff ff 	mov    -0x200(%rbp),%rcx
   260f3:	4c 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%r8
   260fa:	48 89 e0             	mov    %rsp,%rax
   260fd:	4c 89 58 08          	mov    %r11,0x8(%rax)
   26101:	4c 89 10             	mov    %r10,(%rax)
   26104:	e8 07 07 00 00       	call   26810 <_ZNSt3__111__formatter28__write_using_trailing_zerosB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_EPS4_SC_T1_NS_13__format_spec23__parsed_specificationsIT0_EEmSC_m>
   26109:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2610d:	c7 85 44 fe ff ff 01 	movl   $0x1,-0x1bc(%rbp)
   26114:	00 00 00 
   26117:	e9 85 00 00 00       	jmp    261a1 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEfcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x631>
  return __formatter::__write(__first, __result.__last, std::move(__out_it), __specs, __size);
   2611c:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
   26123:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
   2612a:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   26131:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
   26138:	48 8d bd 28 fe ff ff 	lea    -0x1d8(%rbp),%rdi
   2613f:	e8 5c 3a ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   26144:	48 8b bd 78 fd ff ff 	mov    -0x288(%rbp),%rdi
   2614b:	48 8b b5 80 fd ff ff 	mov    -0x280(%rbp),%rsi
   26152:	48 8b 00             	mov    (%rax),%rax
   26155:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
   2615c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26160:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
   26167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2616b:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
   26172:	4c 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%r9
   26179:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
   26180:	48 8b 8d e8 fd ff ff 	mov    -0x218(%rbp),%rcx
   26187:	4c 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%r8
   2618e:	e8 8d 8f ff ff       	call   1f120 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   26193:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   26197:	c7 85 44 fe ff ff 01 	movl   $0x1,-0x1bc(%rbp)
   2619e:	00 00 00 
   261a1:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
}
   261a8:	e8 f3 07 00 00       	call   269a0 <_ZNSt3__111__formatter14__float_bufferIfED2B8nn210000Ev>
   261ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   261b1:	48 81 c4 a0 02 00 00 	add    $0x2a0,%rsp
   261b8:	5d                   	pop    %rbp
   261b9:	c3                   	ret
   261ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000261c0 <_ZNSt3__16__math7signbitB8nn210000IvEEbf>:

// The universal C runtime (UCRT) in the WinSDK provides floating point overloads
// for std::signbit(). By defining our overloads as templates, we can work around
// this issue as templates are less preferred than non-template functions.
template <class = void>
[[__nodiscard__]] inline _LIBCPP_SIGNBIT_CONSTEXPR _LIBCPP_HIDE_FROM_ABI bool signbit(float __x) _NOEXCEPT {
   261c0:	55                   	push   %rbp
   261c1:	48 89 e5             	mov    %rsp,%rbp
   261c4:	d9 45 10             	flds   0x10(%rbp)
   261c7:	dd d8                	fstp   %st(0)
  return __builtin_signbit(__x);
   261c9:	d9 45 10             	flds   0x10(%rbp)
   261cc:	d9 5d fc             	fstps  -0x4(%rbp)
   261cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
   261d2:	83 f8 00             	cmp    $0x0,%eax
   261d5:	0f 9c c0             	setl   %al
   261d8:	24 01                	and    $0x1,%al
   261da:	5d                   	pop    %rbp
   261db:	c3                   	ret
   261dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000261e0 <_ZNSt3__16__math8isfiniteB8nn210000Ef>:
template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI bool isfinite(_A1) _NOEXCEPT {
  return true;
}

[[__nodiscard__]] inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI bool isfinite(float __x) _NOEXCEPT {
   261e0:	55                   	push   %rbp
   261e1:	48 89 e5             	mov    %rsp,%rbp
   261e4:	d9 45 10             	flds   0x10(%rbp)
   261e7:	dd d8                	fstp   %st(0)
  return __builtin_isfinite(__x);
   261e9:	d9 45 10             	flds   0x10(%rbp)
   261ec:	d9 5d fc             	fstps  -0x4(%rbp)
   261ef:	8b 45 fc             	mov    -0x4(%rbp),%eax
   261f2:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   261f7:	2d 00 00 80 7f       	sub    $0x7f800000,%eax
   261fc:	0f 9c c0             	setl   %al
   261ff:	24 01                	and    $0x1,%al
   26201:	5d                   	pop    %rbp
   26202:	c3                   	ret
   26203:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2620a:	00 00 00 
   2620d:	0f 1f 00             	nopl   (%rax)

0000000000026210 <_ZNSt3__111__formatter34__format_floating_point_non_finiteB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEET_S7_NS_13__format_spec23__parsed_specificationsIT0_EEbb>:
    _OutIt __out_it, __format_spec::__parsed_specifications<_CharT> __specs, bool __negative, bool __isnan) {
   26210:	55                   	push   %rbp
   26211:	48 89 e5             	mov    %rsp,%rbp
   26214:	48 83 ec 70          	sub    $0x70,%rsp
   26218:	44 88 c0             	mov    %r8b,%al
   2621b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2621f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   26223:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   26227:	80 e1 01             	and    $0x1,%cl
   2622a:	88 4d df             	mov    %cl,-0x21(%rbp)
   2622d:	24 01                	and    $0x1,%al
   2622f:	88 45 de             	mov    %al,-0x22(%rbp)
  char* __last = __formatter::__insert_sign(__buffer, __negative, __specs.__std_.__sign_);
   26232:	48 8d 7d da          	lea    -0x26(%rbp),%rdi
   26236:	8a 45 df             	mov    -0x21(%rbp),%al
   26239:	8a 4d e0             	mov    -0x20(%rbp),%cl
   2623c:	c0 e9 03             	shr    $0x3,%cl
   2623f:	80 e1 03             	and    $0x3,%cl
   26242:	0f b6 d1             	movzbl %cl,%edx
   26245:	0f b6 f0             	movzbl %al,%esi
   26248:	83 e6 01             	and    $0x1,%esi
   2624b:	e8 70 7d ff ff       	call   1dfc0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE>
   26250:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      __specs.__std_.__type_ == __format_spec::__type::__hexfloat_upper_case ||
   26254:	b0 01                	mov    $0x1,%al
   26256:	80 7d e1 0c          	cmpb   $0xc,-0x1f(%rbp)
   2625a:	88 45 af             	mov    %al,-0x51(%rbp)
   2625d:	74 20                	je     2627f <_ZNSt3__111__formatter34__format_floating_point_non_finiteB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEET_S7_NS_13__format_spec23__parsed_specificationsIT0_EEbb+0x6f>
      __specs.__std_.__type_ == __format_spec::__type::__scientific_upper_case ||
   2625f:	b0 01                	mov    $0x1,%al
   26261:	80 7d e1 0e          	cmpb   $0xe,-0x1f(%rbp)
   26265:	88 45 af             	mov    %al,-0x51(%rbp)
   26268:	74 15                	je     2627f <_ZNSt3__111__formatter34__format_floating_point_non_finiteB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEET_S7_NS_13__format_spec23__parsed_specificationsIT0_EEbb+0x6f>
      __specs.__std_.__type_ == __format_spec::__type::__fixed_upper_case ||
   2626a:	b0 01                	mov    $0x1,%al
   2626c:	80 7d e1 10          	cmpb   $0x10,-0x1f(%rbp)
   26270:	88 45 af             	mov    %al,-0x51(%rbp)
   26273:	74 0a                	je     2627f <_ZNSt3__111__formatter34__format_floating_point_non_finiteB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEET_S7_NS_13__format_spec23__parsed_specificationsIT0_EEbb+0x6f>
      __specs.__std_.__type_ == __format_spec::__type::__general_upper_case;
   26275:	80 7d e1 12          	cmpb   $0x12,-0x1f(%rbp)
   26279:	0f 94 c0             	sete   %al
   2627c:	88 45 af             	mov    %al,-0x51(%rbp)
   2627f:	8a 45 af             	mov    -0x51(%rbp),%al
  bool __upper_case =
   26282:	24 01                	and    $0x1,%al
   26284:	88 45 cf             	mov    %al,-0x31(%rbp)
  __last = std::copy_n(&("infnanINFNAN"[6 * __upper_case + 3 * __isnan]), 3, __last);
   26287:	0f b6 4d cf          	movzbl -0x31(%rbp),%ecx
   2628b:	83 e1 01             	and    $0x1,%ecx
   2628e:	89 c8                	mov    %ecx,%eax
   26290:	8d 04 40             	lea    (%rax,%rax,2),%eax
   26293:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
   26297:	83 e2 01             	and    $0x1,%edx
   2629a:	89 d1                	mov    %edx,%ecx
   2629c:	8d 14 49             	lea    (%rcx,%rcx,2),%edx
   2629f:	89 c1                	mov    %eax,%ecx
   262a1:	89 d0                	mov    %edx,%eax
   262a3:	8d 04 48             	lea    (%rax,%rcx,2),%eax
   262a6:	48 8d 3d a3 94 00 00 	lea    0x94a3(%rip),%rdi        # 2f750 <.L.str.74>
   262ad:	48 01 c7             	add    %rax,%rdi
   262b0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   262b4:	be 03 00 00 00       	mov    $0x3,%esi
   262b9:	e8 62 89 ff ff       	call   1ec20 <_ZNSt3__16copy_nB8nn210000IPKciPcTnNS_9enable_ifIXsr37__has_random_access_iterator_categoryIT_EE5valueEiE4typeELi0EEET1_S5_T0_S8_>
   262be:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  if (__specs.__alignment_ == __format_spec::__alignment::__zero_padding)
   262c2:	8a 45 e0             	mov    -0x20(%rbp),%al
   262c5:	24 07                	and    $0x7,%al
   262c7:	3c 04                	cmp    $0x4,%al
   262c9:	75 0a                	jne    262d5 <_ZNSt3__111__formatter34__format_floating_point_non_finiteB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEET_S7_NS_13__format_spec23__parsed_specificationsIT0_EEbb+0xc5>
    __specs.__alignment_ = __format_spec::__alignment::__right;
   262cb:	8a 45 e0             	mov    -0x20(%rbp),%al
   262ce:	24 f8                	and    $0xf8,%al
   262d0:	0c 03                	or     $0x3,%al
   262d2:	88 45 e0             	mov    %al,-0x20(%rbp)
  return __formatter::__write(__buffer, __last, std::move(__out_it), __specs);
   262d5:	48 8d 45 da          	lea    -0x26(%rbp),%rax
   262d9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   262dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   262e1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   262e5:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   262e9:	e8 b2 38 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   262ee:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   262f2:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   262f6:	48 8b 00             	mov    (%rax),%rax
   262f9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   262fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26301:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   26305:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26309:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2630d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   26311:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   26315:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
   26319:	e8 32 7e ff ff       	call   1e150 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EE>
   2631e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   26322:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26326:	48 83 c4 70          	add    $0x70,%rsp
   2632a:	5d                   	pop    %rbp
   2632b:	c3                   	ret
   2632c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000026330 <_ZNSt3__16__math5isnanB8nn210000Ef>:
template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI bool isnan(_A1) _NOEXCEPT {
  return false;
}

[[__nodiscard__]] inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI bool isnan(float __x) _NOEXCEPT {
   26330:	55                   	push   %rbp
   26331:	48 89 e5             	mov    %rsp,%rbp
   26334:	d9 45 10             	flds   0x10(%rbp)
   26337:	dd d8                	fstp   %st(0)
  return __builtin_isnan(__x);
   26339:	d9 45 10             	flds   0x10(%rbp)
   2633c:	df e8                	fucomip %st(0),%st
   2633e:	0f 9a c0             	setp   %al
   26341:	24 01                	and    $0x1,%al
   26343:	5d                   	pop    %rbp
   26344:	c3                   	ret
   26345:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2634c:	00 00 00 
   2634f:	90                   	nop

0000000000026350 <_ZNSt3__111__formatter14__float_bufferIfEC2B8nn210000Ei>:
      : __precision_(__precision != -1 ? __precision : _Traits::__max_fractional) {
   26350:	55                   	push   %rbp
   26351:	48 89 e5             	mov    %rsp,%rbp
   26354:	48 83 ec 20          	sub    $0x20,%rsp
   26358:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2635c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   2635f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26363:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   26367:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%rbp)
   2636b:	74 08                	je     26375 <_ZNSt3__111__formatter14__float_bufferIfEC2B8nn210000Ei+0x25>
   2636d:	8b 45 f4             	mov    -0xc(%rbp),%eax
   26370:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   26373:	eb 0a                	jmp    2637f <_ZNSt3__111__formatter14__float_bufferIfEC2B8nn210000Ei+0x2f>
   26375:	b8 95 00 00 00       	mov    $0x95,%eax
   2637a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   2637d:	eb 00                	jmp    2637f <_ZNSt3__111__formatter14__float_bufferIfEC2B8nn210000Ei+0x2f>
   2637f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26383:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
   26386:	89 08                	mov    %ecx,(%rax)
  int __num_trailing_zeros_{0};
   26388:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    if (__precision_ > _Traits::__max_fractional) {
   2638f:	81 38 95 00 00 00    	cmpl   $0x95,(%rax)
   26395:	7e 15                	jle    263ac <_ZNSt3__111__formatter14__float_bufferIfEC2B8nn210000Ei+0x5c>
   26397:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      __num_trailing_zeros_ = __precision_ - _Traits::__max_fractional;
   2639b:	8b 08                	mov    (%rax),%ecx
   2639d:	81 e9 95 00 00 00    	sub    $0x95,%ecx
   263a3:	89 48 04             	mov    %ecx,0x4(%rax)
      __precision_          = _Traits::__max_fractional;
   263a6:	c7 00 95 00 00 00    	movl   $0x95,(%rax)
   263ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    __size_ = __formatter::__float_buffer_size<_Fp>(__precision_);
   263b0:	8b 38                	mov    (%rax),%edi
   263b2:	e8 39 06 00 00       	call   269f0 <_ZNSt3__111__formatter19__float_buffer_sizeB8nn210000ITkNS_14floating_pointEfEEmi>
   263b7:	48 89 c1             	mov    %rax,%rcx
   263ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   263be:	48 89 48 08          	mov    %rcx,0x8(%rax)
    if (__size_ > _Traits::__stack_buffer_size)
   263c2:	48 81 78 08 00 01 00 	cmpq   $0x100,0x8(%rax)
   263c9:	00 
   263ca:	76 27                	jbe    263f3 <_ZNSt3__111__formatter14__float_bufferIfEC2B8nn210000Ei+0xa3>
   263cc:	48 8d 7d f3          	lea    -0xd(%rbp),%rdi
      __begin_ = allocator<char>{}.allocate(__size_);
   263d0:	e8 5b 56 ff ff       	call   1ba30 <_ZNSt3__19allocatorIcEC2B8nn210000Ev>
   263d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   263d9:	48 8b 70 08          	mov    0x8(%rax),%rsi
   263dd:	48 8d 7d f3          	lea    -0xd(%rbp),%rdi
   263e1:	e8 aa 29 ff ff       	call   18d90 <_ZNSt3__19allocatorIcE8allocateB8nn210000Em>
   263e6:	48 89 c1             	mov    %rax,%rcx
   263e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   263ed:	48 89 48 10          	mov    %rcx,0x10(%rax)
   263f1:	eb 0f                	jmp    26402 <_ZNSt3__111__formatter14__float_bufferIfEC2B8nn210000Ei+0xb2>
   263f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      __begin_ = __buffer_;
   263f7:	48 89 c1             	mov    %rax,%rcx
   263fa:	48 83 c1 18          	add    $0x18,%rcx
   263fe:	48 89 48 10          	mov    %rcx,0x10(%rax)
  }
   26402:	48 83 c4 20          	add    $0x20,%rsp
   26406:	5d                   	pop    %rbp
   26407:	c3                   	ret
   26408:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2640f:	00 

0000000000026410 <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE>:
    __format_spec::__type __type) {
   26410:	55                   	push   %rbp
   26411:	48 89 e5             	mov    %rsp,%rbp
   26414:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   2641b:	44 89 45 bc          	mov    %r8d,-0x44(%rbp)
   2641f:	89 c8                	mov    %ecx,%eax
   26421:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   26424:	89 45 c0             	mov    %eax,-0x40(%rbp)
   26427:	89 d0                	mov    %edx,%eax
   26429:	8b 55 c0             	mov    -0x40(%rbp),%edx
   2642c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2642f:	48 89 f0             	mov    %rsi,%rax
   26432:	8b 75 c4             	mov    -0x3c(%rbp),%esi
   26435:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   26439:	49 89 f8             	mov    %rdi,%r8
   2643c:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   26440:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
   26444:	44 88 c8             	mov    %r9b,%al
   26447:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   2644b:	d9 45 10             	flds   0x10(%rbp)
   2644e:	dd d8                	fstp   %st(0)
   26450:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26454:	40 80 e6 01          	and    $0x1,%sil
   26458:	40 88 75 f7          	mov    %sil,-0x9(%rbp)
   2645c:	80 e2 01             	and    $0x1,%dl
   2645f:	88 55 f6             	mov    %dl,-0xa(%rbp)
   26462:	88 4d f5             	mov    %cl,-0xb(%rbp)
   26465:	88 45 f4             	mov    %al,-0xc(%rbp)
  char* __first = __formatter::__insert_sign(__buffer.begin(), __negative, __sign);
   26468:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2646c:	e8 5f 03 00 00       	call   267d0 <_ZNKSt3__111__formatter14__float_bufferIfE5beginB8nn210000Ev>
   26471:	48 89 c7             	mov    %rax,%rdi
   26474:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   26478:	0f b6 75 f7          	movzbl -0x9(%rbp),%esi
   2647c:	83 e6 01             	and    $0x1,%esi
   2647f:	e8 3c 7b ff ff       	call   1dfc0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE>
   26484:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  switch (__type) {
   26488:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   2648c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   26490:	48 83 e8 12          	sub    $0x12,%rax
   26494:	0f 87 4c 02 00 00    	ja     266e6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2d6>
   2649a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2649e:	48 8d 05 ef 87 00 00 	lea    0x87ef(%rip),%rax        # 2ec94 <_ZNSt3__16__itoa11__pow10_128E+0x4b4>
   264a5:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   264a9:	48 01 c8             	add    %rcx,%rax
   264ac:	ff e0                	jmp    *%rax
    if (__has_precision)
   264ae:	f6 45 f6 01          	testb  $0x1,-0xa(%rbp)
   264b2:	74 37                	je     264eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0xdb>
      return __formatter::__format_buffer_general_lower_case(__buffer, __value, __buffer.__precision(), __first);
   264b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   264b8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   264bc:	d9 45 10             	flds   0x10(%rbp)
   264bf:	d9 5d ac             	fstps  -0x54(%rbp)
   264c2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   264c6:	e8 65 06 00 00       	call   26b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>
   264cb:	d9 45 ac             	flds   -0x54(%rbp)
   264ce:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   264d2:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   264d6:	89 c2                	mov    %eax,%edx
   264d8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   264dc:	48 89 e0             	mov    %rsp,%rax
   264df:	d9 18                	fstps  (%rax)
   264e1:	e8 2a 05 00 00       	call   26a10 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   264e6:	e9 00 02 00 00       	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
   264eb:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
      return __formatter::__format_buffer_default(__buffer, __value, __first);
   264ef:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   264f3:	d9 45 10             	flds   0x10(%rbp)
   264f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   264fa:	48 89 e0             	mov    %rsp,%rax
   264fd:	d9 18                	fstps  (%rax)
   264ff:	e8 3c 06 00 00       	call   26b40 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc>
   26504:	e9 e2 01 00 00       	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
        __buffer, __value, __has_precision ? __buffer.__precision() : -1, __first);
   26509:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2650d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   26511:	d9 45 10             	flds   0x10(%rbp)
   26514:	d9 5d a8             	fstps  -0x58(%rbp)
   26517:	f6 45 f6 01          	testb  $0x1,-0xa(%rbp)
   2651b:	74 0e                	je     2652b <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x11b>
   2651d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26521:	e8 0a 06 00 00       	call   26b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>
   26526:	89 45 9c             	mov    %eax,-0x64(%rbp)
   26529:	eb 0a                	jmp    26535 <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x125>
   2652b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   26530:	89 45 9c             	mov    %eax,-0x64(%rbp)
   26533:	eb 00                	jmp    26535 <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x125>
   26535:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   26539:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   2653d:	d9 45 a8             	flds   -0x58(%rbp)
   26540:	8b 55 9c             	mov    -0x64(%rbp),%edx
   26543:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    return __formatter::__format_buffer_hexadecimal_lower_case(
   26547:	48 89 e0             	mov    %rsp,%rax
   2654a:	d9 18                	fstps  (%rax)
   2654c:	e8 9f 06 00 00       	call   26bf0 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   26551:	e9 95 01 00 00       	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
        __buffer, __value, __has_precision ? __buffer.__precision() : -1, __first);
   26556:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2655a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2655e:	d9 45 10             	flds   0x10(%rbp)
   26561:	d9 5d 98             	fstps  -0x68(%rbp)
   26564:	f6 45 f6 01          	testb  $0x1,-0xa(%rbp)
   26568:	74 0e                	je     26578 <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x168>
   2656a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2656e:	e8 bd 05 00 00       	call   26b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>
   26573:	89 45 8c             	mov    %eax,-0x74(%rbp)
   26576:	eb 0a                	jmp    26582 <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x172>
   26578:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2657d:	89 45 8c             	mov    %eax,-0x74(%rbp)
   26580:	eb 00                	jmp    26582 <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x172>
   26582:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
   26586:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   2658a:	d9 45 98             	flds   -0x68(%rbp)
   2658d:	8b 55 8c             	mov    -0x74(%rbp),%edx
   26590:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    return __formatter::__format_buffer_hexadecimal_upper_case(
   26594:	48 89 e0             	mov    %rsp,%rax
   26597:	d9 18                	fstps  (%rax)
   26599:	e8 72 07 00 00       	call   26d10 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_upper_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   2659e:	e9 48 01 00 00       	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
    return __formatter::__format_buffer_scientific_lower_case(__buffer, __value, __buffer.__precision(), __first);
   265a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   265a7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   265ab:	d9 45 10             	flds   0x10(%rbp)
   265ae:	d9 9d 7c ff ff ff    	fstps  -0x84(%rbp)
   265b4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   265b8:	e8 73 05 00 00       	call   26b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>
   265bd:	d9 85 7c ff ff ff    	flds   -0x84(%rbp)
   265c3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   265c7:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   265cb:	89 c2                	mov    %eax,%edx
   265cd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   265d1:	48 89 e0             	mov    %rsp,%rax
   265d4:	d9 18                	fstps  (%rax)
   265d6:	e8 a5 07 00 00       	call   26d80 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   265db:	e9 0b 01 00 00       	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
    return __formatter::__format_buffer_scientific_upper_case(__buffer, __value, __buffer.__precision(), __first);
   265e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   265e4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   265eb:	d9 45 10             	flds   0x10(%rbp)
   265ee:	d9 9d 6c ff ff ff    	fstps  -0x94(%rbp)
   265f4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   265f8:	e8 33 05 00 00       	call   26b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>
   265fd:	d9 85 6c ff ff ff    	flds   -0x94(%rbp)
   26603:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   26607:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
   2660e:	89 c2                	mov    %eax,%edx
   26610:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   26614:	48 89 e0             	mov    %rsp,%rax
   26617:	d9 18                	fstps  (%rax)
   26619:	e8 22 08 00 00       	call   26e40 <_ZNSt3__111__formatter37__format_buffer_scientific_upper_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   2661e:	e9 c8 00 00 00       	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
    return __formatter::__format_buffer_fixed(__buffer, __value, __buffer.__precision(), __first);
   26623:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26627:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   2662e:	d9 45 10             	flds   0x10(%rbp)
   26631:	d9 9d 5c ff ff ff    	fstps  -0xa4(%rbp)
   26637:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2663b:	e8 f0 04 00 00       	call   26b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>
   26640:	d9 85 5c ff ff ff    	flds   -0xa4(%rbp)
   26646:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   2664a:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   26651:	89 c2                	mov    %eax,%edx
   26653:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   26657:	48 89 e0             	mov    %rsp,%rax
   2665a:	d9 18                	fstps  (%rax)
   2665c:	e8 2f 08 00 00       	call   26e90 <_ZNSt3__111__formatter21__format_buffer_fixedB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   26661:	e9 85 00 00 00       	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
    return __formatter::__format_buffer_general_lower_case(__buffer, __value, __buffer.__precision(), __first);
   26666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2666a:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   26671:	d9 45 10             	flds   0x10(%rbp)
   26674:	d9 9d 4c ff ff ff    	fstps  -0xb4(%rbp)
   2667a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2667e:	e8 ad 04 00 00       	call   26b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>
   26683:	d9 85 4c ff ff ff    	flds   -0xb4(%rbp)
   26689:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   2668d:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
   26694:	89 c2                	mov    %eax,%edx
   26696:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2669a:	48 89 e0             	mov    %rsp,%rax
   2669d:	d9 18                	fstps  (%rax)
   2669f:	e8 6c 03 00 00       	call   26a10 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   266a4:	eb 45                	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
    return __formatter::__format_buffer_general_upper_case(__buffer, __value, __buffer.__precision(), __first);
   266a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   266aa:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   266b1:	d9 45 10             	flds   0x10(%rbp)
   266b4:	d9 9d 3c ff ff ff    	fstps  -0xc4(%rbp)
   266ba:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   266be:	e8 6d 04 00 00       	call   26b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>
   266c3:	d9 85 3c ff ff ff    	flds   -0xc4(%rbp)
   266c9:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   266cd:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
   266d4:	89 c2                	mov    %eax,%edx
   266d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   266da:	48 89 e0             	mov    %rsp,%rax
   266dd:	d9 18                	fstps  (%rax)
   266df:	e8 4c 08 00 00       	call   26f30 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   266e4:	eb 05                	jmp    266eb <_ZNSt3__111__formatter15__format_bufferB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2db>
    __libcpp_unreachable();
   266e6:	e8 85 40 ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
   266eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
   266ef:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
   266f6:	5d                   	pop    %rbp
   266f7:	c3                   	ret
   266f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   266ff:	00 

0000000000026700 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE15__has_precisionB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __has_precision() const { return __precision_ >= 0; }
   26700:	55                   	push   %rbp
   26701:	48 89 e5             	mov    %rsp,%rbp
   26704:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26708:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2670c:	83 78 08 00          	cmpl   $0x0,0x8(%rax)
   26710:	0f 9d c0             	setge  %al
   26713:	24 01                	and    $0x1,%al
   26715:	5d                   	pop    %rbp
   26716:	c3                   	ret
   26717:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2671e:	00 00 

0000000000026720 <_ZNSt3__16rotateB8nn210000IPcEET_S2_S2_S2_>:
  return std::make_pair(__r, __last);
}

template <class _ForwardIterator>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _ForwardIterator
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last) {
   26720:	55                   	push   %rbp
   26721:	48 89 e5             	mov    %rsp,%rbp
   26724:	48 83 ec 40          	sub    $0x40,%rsp
   26728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2672c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   26730:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   26734:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  return std::__rotate<_ClassicAlgPolicy>(std::move(__first), std::move(__middle), std::move(__last)).first;
   26738:	e8 43 2f ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2673d:	48 8b 00             	mov    (%rax),%rax
   26740:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   26744:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   26748:	e8 33 2f ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2674d:	48 8b 00             	mov    (%rax),%rax
   26750:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   26754:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   26758:	e8 23 2f ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2675d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   26761:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   26765:	48 8b 10             	mov    (%rax),%rdx
   26768:	e8 a3 0b 00 00       	call   27310 <_ZNSt3__18__rotateB8nn210000INS_17_ClassicAlgPolicyEPcS2_EENS_4pairIT0_S4_EES4_S4_T1_>
   2676d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   26771:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   26775:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26779:	48 83 c4 40          	add    $0x40,%rsp
   2677d:	5d                   	pop    %rbp
   2677e:	c3                   	ret
   2677f:	90                   	nop

0000000000026780 <_ZNSt3__13maxB8nn210000IiEERKT_S3_S3_>:
max(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b) {
   26780:	55                   	push   %rbp
   26781:	48 89 e5             	mov    %rsp,%rbp
   26784:	48 83 ec 20          	sub    $0x20,%rsp
   26788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2678c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::max(__a, __b, __less<>());
   26790:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26794:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   26798:	e8 43 19 00 00       	call   280e0 <_ZNSt3__13maxB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_>
   2679d:	48 83 c4 20          	add    $0x20,%rsp
   267a1:	5d                   	pop    %rbp
   267a2:	c3                   	ret
   267a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   267aa:	00 00 00 
   267ad:	0f 1f 00             	nopl   (%rax)

00000000000267b0 <_ZNSt3__111__formatter14__float_bufferIfE20__add_trailing_zerosB8nn210000Ei>:
  _LIBCPP_HIDE_FROM_ABI void __add_trailing_zeros(int __zeros) { __num_trailing_zeros_ += __zeros; }
   267b0:	55                   	push   %rbp
   267b1:	48 89 e5             	mov    %rsp,%rbp
   267b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   267b8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   267bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   267bf:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   267c2:	03 48 04             	add    0x4(%rax),%ecx
   267c5:	89 48 04             	mov    %ecx,0x4(%rax)
   267c8:	5d                   	pop    %rbp
   267c9:	c3                   	ret
   267ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000267d0 <_ZNKSt3__111__formatter14__float_bufferIfE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI char* begin() const { return __begin_; }
   267d0:	55                   	push   %rbp
   267d1:	48 89 e5             	mov    %rsp,%rbp
   267d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   267d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   267dc:	48 8b 40 10          	mov    0x10(%rax),%rax
   267e0:	5d                   	pop    %rbp
   267e1:	c3                   	ret
   267e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   267e9:	00 00 00 
   267ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000267f0 <_ZNKSt3__111__formatter14__float_bufferIfE20__num_trailing_zerosB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI int __num_trailing_zeros() const { return __num_trailing_zeros_; }
   267f0:	55                   	push   %rbp
   267f1:	48 89 e5             	mov    %rsp,%rbp
   267f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   267f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   267fc:	8b 40 04             	mov    0x4(%rax),%eax
   267ff:	5d                   	pop    %rbp
   26800:	c3                   	ret
   26801:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   26808:	00 00 00 
   2680b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000026810 <_ZNSt3__111__formatter28__write_using_trailing_zerosB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_EPS4_SC_T1_NS_13__format_spec23__parsed_specificationsIT0_EEmSC_m>:
    size_t __num_trailing_zeros) -> decltype(__out_it) {
   26810:	55                   	push   %rbp
   26811:	48 89 e5             	mov    %rsp,%rbp
   26814:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   2681b:	48 8b 45 18          	mov    0x18(%rbp),%rax
   2681f:	48 8b 45 10          	mov    0x10(%rbp),%rax
   26823:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   26827:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   2682b:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
   2682f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   26833:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   26837:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
      __formatter::__padding_size(__size + __num_trailing_zeros, __specs.__width_, __specs.__alignment_);
   2683b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2683f:	48 03 7d 18          	add    0x18(%rbp),%rdi
   26843:	48 63 75 e4          	movslq -0x1c(%rbp),%rsi
   26847:	8a 45 e0             	mov    -0x20(%rbp),%al
   2684a:	24 07                	and    $0x7,%al
   2684c:	0f b6 d0             	movzbl %al,%edx
   2684f:	e8 ec 5a ff ff       	call   1c340 <_ZNSt3__111__formatter14__padding_sizeB8nn210000EmmNS_13__format_spec11__alignmentE>
   26854:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   26858:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2685c:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  __out_it = __formatter::__fill(std::move(__out_it), __padding.__before_, __specs.__fill_);
   26860:	e8 3b 33 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   26865:	48 8b 00             	mov    (%rax),%rax
   26868:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2686c:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   26870:	8b 45 ec             	mov    -0x14(%rbp),%eax
   26873:	89 45 a4             	mov    %eax,-0x5c(%rbp)
   26876:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   2687a:	8b 55 a4             	mov    -0x5c(%rbp),%edx
   2687d:	e8 6e 5b ff ff       	call   1c3f0 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mNS_13__format_spec12__code_pointIS3_EE>
   26882:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   26886:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2688a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  __out_it = __formatter::__copy(__first, __exponent, std::move(__out_it));
   2688e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26892:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   26899:	48 8b 45 10          	mov    0x10(%rbp),%rax
   2689d:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   268a4:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   268a8:	e8 f3 32 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   268ad:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
   268b4:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
   268bb:	48 8b 00             	mov    (%rax),%rax
   268be:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   268c2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   268c6:	e8 65 18 00 00       	call   28130 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPKcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SE_T2_>
   268cb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   268cf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   268d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   268d7:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  __out_it = __formatter::__fill(std::move(__out_it), __num_trailing_zeros, _CharT('0'));
   268db:	e8 c0 32 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   268e0:	48 8b 00             	mov    (%rax),%rax
   268e3:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   268e7:	48 8b 75 18          	mov    0x18(%rbp),%rsi
   268eb:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   268ef:	ba 30 00 00 00       	mov    $0x30,%edx
   268f4:	e8 47 64 ff ff       	call   1cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>
   268f9:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   268fd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   26901:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  __out_it = __formatter::__copy(__exponent, __last, std::move(__out_it));
   26905:	48 8b 45 10          	mov    0x10(%rbp),%rax
   26909:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   26910:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   26914:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   2691b:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   2691f:	e8 7c 32 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   26924:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
   2692b:	48 8b b5 58 ff ff ff 	mov    -0xa8(%rbp),%rsi
   26932:	48 8b 00             	mov    (%rax),%rax
   26935:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   2693c:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   26943:	e8 e8 17 00 00       	call   28130 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPKcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SE_T2_>
   26948:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   2694f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   26956:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2695a:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  return __formatter::__fill(std::move(__out_it), __padding.__after_, __specs.__fill_);
   2695e:	e8 3d 32 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   26963:	48 8b 00             	mov    (%rax),%rax
   26966:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   2696d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   26971:	8b 45 ec             	mov    -0x14(%rbp),%eax
   26974:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
   2697a:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   26981:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
   26987:	e8 64 5a ff ff       	call   1c3f0 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mNS_13__format_spec12__code_pointIS3_EE>
   2698c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   26990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26994:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
   2699b:	5d                   	pop    %rbp
   2699c:	c3                   	ret
   2699d:	0f 1f 00             	nopl   (%rax)

00000000000269a0 <_ZNSt3__111__formatter14__float_bufferIfED2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI ~__float_buffer() {
   269a0:	55                   	push   %rbp
   269a1:	48 89 e5             	mov    %rsp,%rbp
   269a4:	48 83 ec 20          	sub    $0x20,%rsp
   269a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   269ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   269b0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (__size_ > _Traits::__stack_buffer_size)
   269b4:	48 81 78 08 00 01 00 	cmpq   $0x100,0x8(%rax)
   269bb:	00 
   269bc:	76 1e                	jbe    269dc <_ZNSt3__111__formatter14__float_bufferIfED2B8nn210000Ev+0x3c>
   269be:	48 8d 7d f7          	lea    -0x9(%rbp),%rdi
      allocator<char>{}.deallocate(__begin_, __size_);
   269c2:	e8 69 50 ff ff       	call   1ba30 <_ZNSt3__19allocatorIcEC2B8nn210000Ev>
   269c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   269cb:	48 8b 70 10          	mov    0x10(%rax),%rsi
   269cf:	48 8b 50 08          	mov    0x8(%rax),%rdx
   269d3:	48 8d 7d f7          	lea    -0x9(%rbp),%rdi
   269d7:	e8 f4 21 ff ff       	call   18bd0 <_ZNSt3__19allocatorIcE10deallocateB8nn210000EPcm>
  }
   269dc:	48 83 c4 20          	add    $0x20,%rsp
   269e0:	5d                   	pop    %rbp
   269e1:	c3                   	ret
   269e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   269e9:	00 00 00 
   269ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000269f0 <_ZNSt3__111__formatter19__float_buffer_sizeB8nn210000ITkNS_14floating_pointEfEEmi>:
_LIBCPP_HIDE_FROM_ABI constexpr size_t __float_buffer_size(int __precision) {
   269f0:	55                   	push   %rbp
   269f1:	48 89 e5             	mov    %rsp,%rbp
   269f4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  return 4 + _Traits::__max_integral + __precision + _Traits::__max_fractional_value;
   269f7:	8b 45 fc             	mov    -0x4(%rbp),%eax
   269fa:	83 c0 2a             	add    $0x2a,%eax
   269fd:	83 c0 03             	add    $0x3,%eax
   26a00:	48 98                	cltq
   26a02:	5d                   	pop    %rbp
   26a03:	c3                   	ret
   26a04:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   26a0b:	00 00 00 
   26a0e:	66 90                	xchg   %ax,%ax

0000000000026a10 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_general_lower_case(__float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   26a10:	55                   	push   %rbp
   26a11:	48 89 e5             	mov    %rsp,%rbp
   26a14:	48 83 ec 50          	sub    $0x50,%rsp
   26a18:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   26a1c:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   26a20:	d9 45 10             	flds   0x10(%rbp)
   26a23:	dd d8                	fstp   %st(0)
   26a25:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   26a29:	89 55 f4             	mov    %edx,-0xc(%rbp)
   26a2c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __buffer.__remove_trailing_zeros();
   26a30:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26a34:	e8 57 05 00 00       	call   26f90 <_ZNSt3__111__formatter14__float_bufferIfE23__remove_trailing_zerosB8nn210000Ev>
   26a39:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  __result.__integral = __integral;
   26a3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26a41:	48 89 07             	mov    %rax,(%rdi)
  __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::general, __precision);
   26a44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26a48:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   26a4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26a50:	e8 ab 05 00 00       	call   27000 <_ZNKSt3__111__formatter14__float_bufferIfE3endB8nn210000Ev>
   26a55:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   26a59:	48 89 c6             	mov    %rax,%rsi
   26a5c:	d9 45 10             	flds   0x10(%rbp)
   26a5f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   26a62:	48 89 e0             	mov    %rsp,%rax
   26a65:	d9 18                	fstps  (%rax)
   26a67:	ba 03 00 00 00       	mov    $0x3,%edx
   26a6c:	e8 3f 05 00 00       	call   26fb0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_NS_12chars_formatEi>
   26a71:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   26a75:	48 89 47 18          	mov    %rax,0x18(%rdi)
  char* __first = __integral + 1;
   26a79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26a7d:	48 83 c0 01          	add    $0x1,%rax
   26a81:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (__first == __result.__last) {
   26a85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26a89:	48 3b 47 18          	cmp    0x18(%rdi),%rax
   26a8d:	75 16                	jne    26aa5 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x95>
   26a8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    __result.__radix_point = __result.__last;
   26a93:	48 8b 48 18          	mov    0x18(%rax),%rcx
   26a97:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __result.__last;
   26a9b:	48 8b 48 18          	mov    0x18(%rax),%rcx
   26a9f:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   26aa3:	eb 79                	jmp    26b1e <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10e>
   26aa5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    __result.__exponent = __formatter::__find_exponent(__first, __result.__last);
   26aa9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   26aad:	48 8b 70 18          	mov    0x18(%rax),%rsi
   26ab1:	e8 6a 05 00 00       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   26ab6:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   26aba:	48 89 41 10          	mov    %rax,0x10(%rcx)
    if (__result.__exponent != __result.__last)
   26abe:	48 8b 41 10          	mov    0x10(%rcx),%rax
   26ac2:	48 3b 41 18          	cmp    0x18(%rcx),%rax
   26ac6:	74 30                	je     26af8 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xe8>
      __result.__radix_point = *__first == '.' ? __first : __result.__last;
   26ac8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26acc:	0f be 00             	movsbl (%rax),%eax
   26acf:	83 f8 2e             	cmp    $0x2e,%eax
   26ad2:	75 0a                	jne    26ade <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xce>
   26ad4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26ad8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   26adc:	eb 0c                	jmp    26aea <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xda>
   26ade:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   26ae2:	48 8b 40 18          	mov    0x18(%rax),%rax
   26ae6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   26aea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   26aee:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   26af2:	48 89 48 08          	mov    %rcx,0x8(%rax)
   26af6:	eb 24                	jmp    26b1c <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10c>
   26af8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
      __result.__radix_point = std::find(__first, __result.__last, '.');
   26afc:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   26b00:	48 8b 70 18          	mov    0x18(%rax),%rsi
   26b04:	c6 45 df 2e          	movb   $0x2e,-0x21(%rbp)
   26b08:	48 8d 55 df          	lea    -0x21(%rbp),%rdx
   26b0c:	e8 bf 05 00 00       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   26b11:	48 89 c1             	mov    %rax,%rcx
   26b14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   26b18:	48 89 48 08          	mov    %rcx,0x8(%rax)
   26b1c:	eb 00                	jmp    26b1e <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10e>
   26b1e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  return __result;
   26b22:	48 83 c4 50          	add    $0x50,%rsp
   26b26:	5d                   	pop    %rbp
   26b27:	c3                   	ret
   26b28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   26b2f:	00 

0000000000026b30 <_ZNKSt3__111__formatter14__float_bufferIfE11__precisionB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI int __precision() const { return __precision_; }
   26b30:	55                   	push   %rbp
   26b31:	48 89 e5             	mov    %rsp,%rbp
   26b34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26b38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26b3c:	8b 00                	mov    (%rax),%eax
   26b3e:	5d                   	pop    %rbp
   26b3f:	c3                   	ret

0000000000026b40 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc>:
__format_buffer_default(const __float_buffer<_Fp>& __buffer, _Tp __value, char* __integral) {
   26b40:	55                   	push   %rbp
   26b41:	48 89 e5             	mov    %rsp,%rbp
   26b44:	48 83 ec 40          	sub    $0x40,%rsp
   26b48:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   26b4c:	48 89 f8             	mov    %rdi,%rax
   26b4f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   26b53:	d9 45 10             	flds   0x10(%rbp)
   26b56:	dd d8                	fstp   %st(0)
   26b58:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   26b5c:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  __result.__integral = __integral;
   26b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   26b64:	48 89 07             	mov    %rax,(%rdi)
  __result.__last     = __formatter::__to_buffer(__integral, __buffer.end(), __value);
   26b67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   26b6b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   26b6f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26b73:	e8 88 04 00 00       	call   27000 <_ZNKSt3__111__formatter14__float_bufferIfE3endB8nn210000Ev>
   26b78:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   26b7c:	48 89 c6             	mov    %rax,%rsi
   26b7f:	d9 45 10             	flds   0x10(%rbp)
   26b82:	48 89 e0             	mov    %rsp,%rax
   26b85:	d9 18                	fstps  (%rax)
   26b87:	e8 f4 06 00 00       	call   27280 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_>
   26b8c:	48 89 c1             	mov    %rax,%rcx
   26b8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26b93:	48 89 48 18          	mov    %rcx,0x18(%rax)
  __result.__exponent = __formatter::__find_exponent(__result.__integral, __result.__last);
   26b97:	48 8b 38             	mov    (%rax),%rdi
   26b9a:	48 8b 70 18          	mov    0x18(%rax),%rsi
   26b9e:	e8 7d 04 00 00       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   26ba3:	48 89 c1             	mov    %rax,%rcx
   26ba6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26baa:	48 89 48 10          	mov    %rcx,0x10(%rax)
  __result.__radix_point = std::find(__result.__integral + 1, __result.__exponent, '.');
   26bae:	48 8b 38             	mov    (%rax),%rdi
   26bb1:	48 83 c7 01          	add    $0x1,%rdi
   26bb5:	48 8b 70 10          	mov    0x10(%rax),%rsi
   26bb9:	c6 45 ef 2e          	movb   $0x2e,-0x11(%rbp)
   26bbd:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   26bc1:	e8 0a 05 00 00       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   26bc6:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   26bca:	48 89 47 08          	mov    %rax,0x8(%rdi)
  if (__result.__radix_point == __result.__exponent)
   26bce:	48 8b 47 08          	mov    0x8(%rdi),%rax
   26bd2:	48 3b 47 10          	cmp    0x10(%rdi),%rax
   26bd6:	75 0c                	jne    26be4 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc+0xa4>
   26bd8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    __result.__radix_point = __result.__last;
   26bdc:	48 8b 48 18          	mov    0x18(%rax),%rcx
   26be0:	48 89 48 08          	mov    %rcx,0x8(%rax)
   26be4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  return __result;
   26be8:	48 83 c4 40          	add    $0x40,%rsp
   26bec:	5d                   	pop    %rbp
   26bed:	c3                   	ret
   26bee:	66 90                	xchg   %ax,%ax

0000000000026bf0 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   26bf0:	55                   	push   %rbp
   26bf1:	48 89 e5             	mov    %rsp,%rbp
   26bf4:	48 83 ec 60          	sub    $0x60,%rsp
   26bf8:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   26bfc:	48 89 f8             	mov    %rdi,%rax
   26bff:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   26c03:	d9 45 10             	flds   0x10(%rbp)
   26c06:	dd d8                	fstp   %st(0)
   26c08:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   26c0c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   26c0f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __result.__integral = __integral;
   26c13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26c17:	48 89 07             	mov    %rax,(%rdi)
  if (__precision == -1)
   26c1a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%rbp)
   26c1e:	75 37                	jne    26c57 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x67>
    __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::hex);
   26c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26c24:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   26c28:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26c2c:	e8 cf 03 00 00       	call   27000 <_ZNKSt3__111__formatter14__float_bufferIfE3endB8nn210000Ev>
   26c31:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   26c35:	48 89 c6             	mov    %rax,%rsi
   26c38:	d9 45 10             	flds   0x10(%rbp)
   26c3b:	48 89 e0             	mov    %rsp,%rax
   26c3e:	d9 18                	fstps  (%rax)
   26c40:	ba 04 00 00 00       	mov    $0x4,%edx
   26c45:	e8 76 06 00 00       	call   272c0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_NS_12chars_formatE>
   26c4a:	48 89 c1             	mov    %rax,%rcx
   26c4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   26c51:	48 89 48 18          	mov    %rcx,0x18(%rax)
   26c55:	eb 38                	jmp    26c8f <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x9f>
    __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::hex, __precision);
   26c57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26c5b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   26c5f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26c63:	e8 98 03 00 00       	call   27000 <_ZNKSt3__111__formatter14__float_bufferIfE3endB8nn210000Ev>
   26c68:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   26c6c:	48 89 c6             	mov    %rax,%rsi
   26c6f:	d9 45 10             	flds   0x10(%rbp)
   26c72:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   26c75:	48 89 e0             	mov    %rsp,%rax
   26c78:	d9 18                	fstps  (%rax)
   26c7a:	ba 04 00 00 00       	mov    $0x4,%edx
   26c7f:	e8 2c 03 00 00       	call   26fb0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_NS_12chars_formatEi>
   26c84:	48 89 c1             	mov    %rax,%rcx
   26c87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   26c8b:	48 89 48 18          	mov    %rcx,0x18(%rax)
  char* __first = __integral + 1;
   26c8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26c93:	48 83 c0 01          	add    $0x1,%rax
   26c97:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (*__first == '.') {
   26c9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26c9f:	0f be 00             	movsbl (%rax),%eax
   26ca2:	83 f8 2e             	cmp    $0x2e,%eax
   26ca5:	75 46                	jne    26ced <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xfd>
   26ca7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    __result.__radix_point = __first;
   26cab:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   26caf:	48 89 48 08          	mov    %rcx,0x8(%rax)
    char* __last        = __result.__last - 2;
   26cb3:	48 8b 40 18          	mov    0x18(%rax),%rax
   26cb7:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   26cbb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    __first             = __last - __traits<_Fp>::__hex_precision_digits;
   26cbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26cc3:	48 83 c0 fd          	add    $0xfffffffffffffffd,%rax
   26cc7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    __result.__exponent = std::find(__first, __last, 'p');
   26ccb:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   26ccf:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   26cd3:	c6 45 d7 70          	movb   $0x70,-0x29(%rbp)
   26cd7:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
   26cdb:	e8 f0 03 00 00       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   26ce0:	48 89 c1             	mov    %rax,%rcx
   26ce3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   26ce7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   26ceb:	eb 14                	jmp    26d01 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x111>
   26ced:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    __result.__radix_point = __result.__last;
   26cf1:	48 8b 48 18          	mov    0x18(%rax),%rcx
   26cf5:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __first;
   26cf9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   26cfd:	48 89 48 10          	mov    %rcx,0x10(%rax)
   26d01:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  return __result;
   26d05:	48 83 c4 60          	add    $0x60,%rsp
   26d09:	5d                   	pop    %rbp
   26d0a:	c3                   	ret
   26d0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000026d10 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_upper_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   26d10:	55                   	push   %rbp
   26d11:	48 89 e5             	mov    %rsp,%rbp
   26d14:	48 83 ec 30          	sub    $0x30,%rsp
   26d18:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   26d1c:	48 89 f8             	mov    %rdi,%rax
   26d1f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   26d23:	d9 45 10             	flds   0x10(%rbp)
   26d26:	dd d8                	fstp   %st(0)
   26d28:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   26d2c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   26d2f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
      __formatter::__format_buffer_hexadecimal_lower_case(__buffer, __value, __precision, __integral);
   26d33:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   26d37:	d9 45 10             	flds   0x10(%rbp)
   26d3a:	8b 55 f4             	mov    -0xc(%rbp),%edx
   26d3d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   26d41:	48 89 e0             	mov    %rsp,%rax
   26d44:	d9 18                	fstps  (%rax)
   26d46:	e8 a5 fe ff ff       	call   26bf0 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   26d4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  std::transform(__result.__integral, __result.__exponent, __result.__integral, __hex_to_upper);
   26d4f:	48 8b 38             	mov    (%rax),%rdi
   26d52:	48 8b 70 10          	mov    0x10(%rax),%rsi
   26d56:	48 8b 10             	mov    (%rax),%rdx
   26d59:	48 8d 0d e0 75 ff ff 	lea    -0x8a20(%rip),%rcx        # 1e340 <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec>
   26d60:	e8 bb 85 ff ff       	call   1f320 <_ZNSt3__19transformB8nn210000IPcS1_PFccEEET0_T_S5_S4_T1_>
   26d65:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   26d69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  *__result.__exponent = 'P';
   26d6d:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
   26d71:	c6 01 50             	movb   $0x50,(%rcx)
  return __result;
   26d74:	48 83 c4 30          	add    $0x30,%rsp
   26d78:	5d                   	pop    %rbp
   26d79:	c3                   	ret
   26d7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000026d80 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   26d80:	55                   	push   %rbp
   26d81:	48 89 e5             	mov    %rsp,%rbp
   26d84:	48 83 ec 40          	sub    $0x40,%rsp
   26d88:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   26d8c:	48 89 f8             	mov    %rdi,%rax
   26d8f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   26d93:	d9 45 10             	flds   0x10(%rbp)
   26d96:	dd d8                	fstp   %st(0)
   26d98:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   26d9c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   26d9f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __result.__integral = __integral;
   26da3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26da7:	48 89 07             	mov    %rax,(%rdi)
      __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::scientific, __precision);
   26daa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26dae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   26db2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26db6:	e8 45 02 00 00       	call   27000 <_ZNKSt3__111__formatter14__float_bufferIfE3endB8nn210000Ev>
   26dbb:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   26dbf:	48 89 c6             	mov    %rax,%rsi
   26dc2:	d9 45 10             	flds   0x10(%rbp)
   26dc5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   26dc8:	48 89 e0             	mov    %rsp,%rax
   26dcb:	d9 18                	fstps  (%rax)
   26dcd:	ba 01 00 00 00       	mov    $0x1,%edx
   26dd2:	e8 d9 01 00 00       	call   26fb0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_NS_12chars_formatEi>
   26dd7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  __result.__last =
   26ddb:	48 89 47 18          	mov    %rax,0x18(%rdi)
  char* __first = __integral + 1;
   26ddf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26de3:	48 83 c0 01          	add    $0x1,%rax
   26de7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (*__first == '.') {
   26deb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26def:	0f be 00             	movsbl (%rax),%eax
   26df2:	83 f8 2e             	cmp    $0x2e,%eax
   26df5:	75 2a                	jne    26e21 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xa1>
   26df7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    __result.__radix_point = __first;
   26dfb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   26dff:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __formatter::__find_exponent(__first + 1, __result.__last);
   26e03:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   26e07:	48 83 c7 01          	add    $0x1,%rdi
   26e0b:	48 8b 70 18          	mov    0x18(%rax),%rsi
   26e0f:	e8 0c 02 00 00       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   26e14:	48 89 c1             	mov    %rax,%rcx
   26e17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26e1b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   26e1f:	eb 14                	jmp    26e35 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xb5>
   26e21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    __result.__radix_point = __result.__last;
   26e25:	48 8b 48 18          	mov    0x18(%rax),%rcx
   26e29:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __first;
   26e2d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   26e31:	48 89 48 10          	mov    %rcx,0x10(%rax)
   26e35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  return __result;
   26e39:	48 83 c4 40          	add    $0x40,%rsp
   26e3d:	5d                   	pop    %rbp
   26e3e:	c3                   	ret
   26e3f:	90                   	nop

0000000000026e40 <_ZNSt3__111__formatter37__format_buffer_scientific_upper_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   26e40:	55                   	push   %rbp
   26e41:	48 89 e5             	mov    %rsp,%rbp
   26e44:	48 83 ec 30          	sub    $0x30,%rsp
   26e48:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   26e4c:	48 89 f8             	mov    %rdi,%rax
   26e4f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   26e53:	d9 45 10             	flds   0x10(%rbp)
   26e56:	dd d8                	fstp   %st(0)
   26e58:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   26e5c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   26e5f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
      __formatter::__format_buffer_scientific_lower_case(__buffer, __value, __precision, __integral);
   26e63:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   26e67:	d9 45 10             	flds   0x10(%rbp)
   26e6a:	8b 55 f4             	mov    -0xc(%rbp),%edx
   26e6d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   26e71:	48 89 e0             	mov    %rsp,%rax
   26e74:	d9 18                	fstps  (%rax)
   26e76:	e8 05 ff ff ff       	call   26d80 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   26e7b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   26e7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  *__result.__exponent = 'E';
   26e83:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
   26e87:	c6 01 45             	movb   $0x45,(%rcx)
  return __result;
   26e8a:	48 83 c4 30          	add    $0x30,%rsp
   26e8e:	5d                   	pop    %rbp
   26e8f:	c3                   	ret

0000000000026e90 <_ZNSt3__111__formatter21__format_buffer_fixedB8nn210000IffEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_fixed(const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   26e90:	55                   	push   %rbp
   26e91:	48 89 e5             	mov    %rsp,%rbp
   26e94:	48 83 ec 40          	sub    $0x40,%rsp
   26e98:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   26e9c:	48 89 f8             	mov    %rdi,%rax
   26e9f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   26ea3:	d9 45 10             	flds   0x10(%rbp)
   26ea6:	dd d8                	fstp   %st(0)
   26ea8:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   26eac:	89 55 f4             	mov    %edx,-0xc(%rbp)
   26eaf:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __result.__integral = __integral;
   26eb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26eb7:	48 89 07             	mov    %rax,(%rdi)
  __result.__last     = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::fixed, __precision);
   26eba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26ebe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   26ec2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26ec6:	e8 35 01 00 00       	call   27000 <_ZNKSt3__111__formatter14__float_bufferIfE3endB8nn210000Ev>
   26ecb:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   26ecf:	48 89 c6             	mov    %rax,%rsi
   26ed2:	d9 45 10             	flds   0x10(%rbp)
   26ed5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   26ed8:	48 89 e0             	mov    %rsp,%rax
   26edb:	d9 18                	fstps  (%rax)
   26edd:	ba 02 00 00 00       	mov    $0x2,%edx
   26ee2:	e8 c9 00 00 00       	call   26fb0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_NS_12chars_formatEi>
   26ee7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   26eeb:	48 89 c1             	mov    %rax,%rcx
   26eee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26ef2:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
  __result.__radix_point = __result.__last - (__precision + bool(__precision));
   26ef6:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
   26efa:	8b 55 f4             	mov    -0xc(%rbp),%edx
   26efd:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   26f01:	40 0f 95 c6          	setne  %sil
   26f05:	40 80 e6 01          	and    $0x1,%sil
   26f09:	40 0f b6 f6          	movzbl %sil,%esi
   26f0d:	01 f2                	add    %esi,%edx
   26f0f:	48 63 f2             	movslq %edx,%rsi
   26f12:	31 d2                	xor    %edx,%edx
   26f14:	48 29 f2             	sub    %rsi,%rdx
   26f17:	48 01 d1             	add    %rdx,%rcx
   26f1a:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  __result.__exponent    = __result.__last;
   26f1e:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
   26f22:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  return __result;
   26f26:	48 83 c4 40          	add    $0x40,%rsp
   26f2a:	5d                   	pop    %rbp
   26f2b:	c3                   	ret
   26f2c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000026f30 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_general_upper_case(__float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   26f30:	55                   	push   %rbp
   26f31:	48 89 e5             	mov    %rsp,%rbp
   26f34:	48 83 ec 30          	sub    $0x30,%rsp
   26f38:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   26f3c:	48 89 f8             	mov    %rdi,%rax
   26f3f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   26f43:	d9 45 10             	flds   0x10(%rbp)
   26f46:	dd d8                	fstp   %st(0)
   26f48:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   26f4c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   26f4f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __float_result __result = __formatter::__format_buffer_general_lower_case(__buffer, __value, __precision, __integral);
   26f53:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   26f57:	d9 45 10             	flds   0x10(%rbp)
   26f5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
   26f5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   26f61:	48 89 e0             	mov    %rsp,%rax
   26f64:	d9 18                	fstps  (%rax)
   26f66:	e8 a5 fa ff ff       	call   26a10 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   26f6b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  if (__result.__exponent != __result.__last)
   26f6f:	48 8b 47 10          	mov    0x10(%rdi),%rax
   26f73:	48 3b 47 18          	cmp    0x18(%rdi),%rax
   26f77:	74 0b                	je     26f84 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IffEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x54>
   26f79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    *__result.__exponent = 'E';
   26f7d:	48 8b 40 10          	mov    0x10(%rax),%rax
   26f81:	c6 00 45             	movb   $0x45,(%rax)
   26f84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  return __result;
   26f88:	48 83 c4 30          	add    $0x30,%rsp
   26f8c:	5d                   	pop    %rbp
   26f8d:	c3                   	ret
   26f8e:	66 90                	xchg   %ax,%ax

0000000000026f90 <_ZNSt3__111__formatter14__float_bufferIfE23__remove_trailing_zerosB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI void __remove_trailing_zeros() { __num_trailing_zeros_ = 0; }
   26f90:	55                   	push   %rbp
   26f91:	48 89 e5             	mov    %rsp,%rbp
   26f94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   26f9c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   26fa3:	5d                   	pop    %rbp
   26fa4:	c3                   	ret
   26fa5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   26fac:	00 00 00 
   26faf:	90                   	nop

0000000000026fb0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_NS_12chars_formatEi>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value, chars_format __fmt, int __precision) {
   26fb0:	55                   	push   %rbp
   26fb1:	48 89 e5             	mov    %rsp,%rbp
   26fb4:	48 83 ec 30          	sub    $0x30,%rsp
   26fb8:	d9 45 10             	flds   0x10(%rbp)
   26fbb:	dd d8                	fstp   %st(0)
   26fbd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   26fc1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   26fc5:	89 55 ec             	mov    %edx,-0x14(%rbp)
   26fc8:	89 4d e8             	mov    %ecx,-0x18(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value, __fmt, __precision);
   26fcb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26fcf:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   26fd3:	d9 45 10             	flds   0x10(%rbp)
   26fd6:	8b 55 ec             	mov    -0x14(%rbp),%edx
   26fd9:	8b 4d e8             	mov    -0x18(%rbp),%ecx
   26fdc:	48 89 e0             	mov    %rsp,%rax
   26fdf:	d9 18                	fstps  (%rax)
   26fe1:	e8 2a 0b ff ff       	call   17b10 <_ZNSt3__18to_charsEPcS0_fNS_12chars_formatEi>
   26fe6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   26fea:	89 55 e0             	mov    %edx,-0x20(%rbp)
  return __r.ptr;
   26fed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26ff1:	48 83 c4 30          	add    $0x30,%rsp
   26ff5:	5d                   	pop    %rbp
   26ff6:	c3                   	ret
   26ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   26ffe:	00 00 

0000000000027000 <_ZNKSt3__111__formatter14__float_bufferIfE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI char* end() const { return __begin_ + __size_; }
   27000:	55                   	push   %rbp
   27001:	48 89 e5             	mov    %rsp,%rbp
   27004:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27008:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2700c:	48 8b 41 10          	mov    0x10(%rcx),%rax
   27010:	48 03 41 08          	add    0x8(%rcx),%rax
   27014:	5d                   	pop    %rbp
   27015:	c3                   	ret
   27016:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2701d:	00 00 00 

0000000000027020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>:
constexpr inline _LIBCPP_HIDE_FROM_ABI char* __find_exponent(char* __first, char* __last) {
   27020:	55                   	push   %rbp
   27021:	48 89 e5             	mov    %rsp,%rbp
   27024:	48 83 ec 30          	sub    $0x30,%rsp
   27028:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2702c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  ptrdiff_t __size = __last - __first;
   27030:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27034:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   27038:	48 29 c8             	sub    %rcx,%rax
   2703b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (__size >= 4) {
   2703f:	48 83 7d e0 04       	cmpq   $0x4,-0x20(%rbp)
   27044:	7c 69                	jl     270af <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_+0x8f>
    __first = __last - std::min(__size, ptrdiff_t(6));
   27046:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2704a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2704e:	48 c7 45 d8 06 00 00 	movq   $0x6,-0x28(%rbp)
   27055:	00 
   27056:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2705a:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   2705e:	e8 cd 00 00 00       	call   27130 <_ZNSt3__13minB8nn210000IlEERKT_S3_S3_>
   27063:	48 89 c2             	mov    %rax,%rdx
   27066:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2706a:	31 c9                	xor    %ecx,%ecx
   2706c:	48 2b 0a             	sub    (%rdx),%rcx
   2706f:	48 01 c8             	add    %rcx,%rax
   27072:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for (; __first != __last - 3; ++__first) {
   27076:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2707a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2707e:	48 83 c1 fd          	add    $0xfffffffffffffffd,%rcx
   27082:	48 39 c8             	cmp    %rcx,%rax
   27085:	74 26                	je     270ad <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_+0x8d>
      if (*__first == 'e')
   27087:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2708b:	0f be 00             	movsbl (%rax),%eax
   2708e:	83 f8 65             	cmp    $0x65,%eax
   27091:	75 0a                	jne    2709d <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_+0x7d>
        return __first;
   27093:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27097:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2709b:	eb 1a                	jmp    270b7 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_+0x97>
    }
   2709d:	eb 00                	jmp    2709f <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_+0x7f>
    for (; __first != __last - 3; ++__first) {
   2709f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   270a3:	48 83 c0 01          	add    $0x1,%rax
   270a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   270ab:	eb c9                	jmp    27076 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_+0x56>
  }
   270ad:	eb 00                	jmp    270af <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_+0x8f>
  return __last;
   270af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   270b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   270b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   270bb:	48 83 c4 30          	add    $0x30,%rsp
   270bf:	5d                   	pop    %rbp
   270c0:	c3                   	ret
   270c1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   270c8:	00 00 00 
   270cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>:
};

// public API
template <class _InputIterator, class _Tp>
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _InputIterator
find(_InputIterator __first, _InputIterator __last, const _Tp& __value) {
   270d0:	55                   	push   %rbp
   270d1:	48 89 e5             	mov    %rsp,%rbp
   270d4:	48 83 ec 30          	sub    $0x30,%rsp
   270d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   270dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   270e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  __identity __proj;
  return std::__rewrap_iter(
      __first, std::__find(std::__unwrap_iter(__first), std::__unwrap_iter(__last), __value, __proj));
   270e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   270e8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   270ec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   270f0:	e8 2b 29 ff ff       	call   19a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
   270f5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   270f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   270fd:	e8 1e 29 ff ff       	call   19a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
   27102:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   27106:	48 89 c6             	mov    %rax,%rsi
   27109:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2710d:	48 8d 4d e7          	lea    -0x19(%rbp),%rcx
   27111:	e8 ca 00 00 00       	call   271e0 <_ZNSt3__16__findB8nn210000IccNS_10__identityETnNS_9enable_ifIXaaaasr13__is_identityIT1_EE5valuesr41__libcpp_is_trivially_equality_comparableIT_T0_EE5valueeqstS4_Li1EEiE4typeELi0EEEPS4_S8_S8_RKS5_RS3_>
   27116:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2711a:	48 89 c6             	mov    %rax,%rsi
  return std::__rewrap_iter(
   2711d:	e8 6e 58 ff ff       	call   1c990 <_ZNSt3__113__rewrap_iterB8nn210000IPcS1_NS_18__unwrap_iter_implIS1_Lb1EEEEET_S4_T0_>
   27122:	48 83 c4 30          	add    $0x30,%rsp
   27126:	5d                   	pop    %rbp
   27127:	c3                   	ret
   27128:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2712f:	00 

0000000000027130 <_ZNSt3__13minB8nn210000IlEERKT_S3_S3_>:
min(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b) {
   27130:	55                   	push   %rbp
   27131:	48 89 e5             	mov    %rsp,%rbp
   27134:	48 83 ec 20          	sub    $0x20,%rsp
   27138:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2713c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::min(__a, __b, __less<>());
   27140:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   27144:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   27148:	e8 13 00 00 00       	call   27160 <_ZNSt3__13minB8nn210000IlNS_6__lessIvvEEEERKT_S5_S5_T0_>
   2714d:	48 83 c4 20          	add    $0x20,%rsp
   27151:	5d                   	pop    %rbp
   27152:	c3                   	ret
   27153:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2715a:	00 00 00 
   2715d:	0f 1f 00             	nopl   (%rax)

0000000000027160 <_ZNSt3__13minB8nn210000IlNS_6__lessIvvEEEERKT_S5_S5_T0_>:
min(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b, _Compare __comp) {
   27160:	55                   	push   %rbp
   27161:	48 89 e5             	mov    %rsp,%rbp
   27164:	48 83 ec 20          	sub    $0x20,%rsp
   27168:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2716c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  return __comp(__b, __a) ? __b : __a;
   27170:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   27174:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   27178:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
   2717c:	e8 2f 00 00 00       	call   271b0 <_ZNKSt3__16__lessIvvEclB8nn210000IllEEbRKT_RKT0_>
   27181:	a8 01                	test   $0x1,%al
   27183:	75 02                	jne    27187 <_ZNSt3__13minB8nn210000IlNS_6__lessIvvEEEERKT_S5_S5_T0_+0x27>
   27185:	eb 0a                	jmp    27191 <_ZNSt3__13minB8nn210000IlNS_6__lessIvvEEEERKT_S5_S5_T0_+0x31>
   27187:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2718b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2718f:	eb 08                	jmp    27199 <_ZNSt3__13minB8nn210000IlNS_6__lessIvvEEEERKT_S5_S5_T0_+0x39>
   27191:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27195:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   27199:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2719d:	48 83 c4 20          	add    $0x20,%rsp
   271a1:	5d                   	pop    %rbp
   271a2:	c3                   	ret
   271a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   271aa:	00 00 00 
   271ad:	0f 1f 00             	nopl   (%rax)

00000000000271b0 <_ZNKSt3__16__lessIvvEclB8nn210000IllEEbRKT_RKT0_>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 bool operator()(const _Tp& __lhs, const _Up& __rhs) const {
   271b0:	55                   	push   %rbp
   271b1:	48 89 e5             	mov    %rsp,%rbp
   271b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   271b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   271bc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    return __lhs < __rhs;
   271c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   271c4:	48 8b 00             	mov    (%rax),%rax
   271c7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   271cb:	48 3b 01             	cmp    (%rcx),%rax
   271ce:	0f 9c c0             	setl   %al
   271d1:	24 01                	and    $0x1,%al
   271d3:	5d                   	pop    %rbp
   271d4:	c3                   	ret
   271d5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   271dc:	00 00 00 
   271df:	90                   	nop

00000000000271e0 <_ZNSt3__16__findB8nn210000IccNS_10__identityETnNS_9enable_ifIXaaaasr13__is_identityIT1_EE5valuesr41__libcpp_is_trivially_equality_comparableIT_T0_EE5valueeqstS4_Li1EEiE4typeELi0EEEPS4_S8_S8_RKS5_RS3_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 _Tp* __find(_Tp* __first, _Tp* __last, const _Up& __value, _Proj&) {
   271e0:	55                   	push   %rbp
   271e1:	48 89 e5             	mov    %rsp,%rbp
   271e4:	48 83 ec 30          	sub    $0x30,%rsp
   271e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   271ec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   271f0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   271f4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  if (auto __ret = std::__constexpr_memchr(__first, __value, __last - __first))
   271f8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   271fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27200:	8a 00                	mov    (%rax),%al
   27202:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   27206:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   2720a:	48 29 ca             	sub    %rcx,%rdx
   2720d:	0f be f0             	movsbl %al,%esi
   27210:	e8 2b 00 00 00       	call   27240 <_ZNSt3__118__constexpr_memchrB8nn210000IccEEPT_S2_T0_m>
   27215:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   27219:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   2721e:	74 0a                	je     2722a <_ZNSt3__16__findB8nn210000IccNS_10__identityETnNS_9enable_ifIXaaaasr13__is_identityIT1_EE5valuesr41__libcpp_is_trivially_equality_comparableIT_T0_EE5valueeqstS4_Li1EEiE4typeELi0EEEPS4_S8_S8_RKS5_RS3_+0x4a>
    return __ret;
   27220:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   27224:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   27228:	eb 08                	jmp    27232 <_ZNSt3__16__findB8nn210000IccNS_10__identityETnNS_9enable_ifIXaaaasr13__is_identityIT1_EE5valuesr41__libcpp_is_trivially_equality_comparableIT_T0_EE5valueeqstS4_Li1EEiE4typeELi0EEEPS4_S8_S8_RKS5_RS3_+0x52>
  return __last;
   2722a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2722e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   27232:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27236:	48 83 c4 30          	add    $0x30,%rsp
   2723a:	5d                   	pop    %rbp
   2723b:	c3                   	ret
   2723c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000027240 <_ZNSt3__118__constexpr_memchrB8nn210000IccEEPT_S2_T0_m>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 _Tp* __constexpr_memchr(_Tp* __str, _Up __value, size_t __count) {
   27240:	55                   	push   %rbp
   27241:	48 89 e5             	mov    %rsp,%rbp
   27244:	48 83 ec 20          	sub    $0x20,%rsp
   27248:	40 88 f0             	mov    %sil,%al
   2724b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2724f:	88 45 f7             	mov    %al,-0x9(%rbp)
   27252:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    char __value_buffer = 0;
   27256:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
   2725a:	48 8d 7d f7          	lea    -0x9(%rbp),%rdi
    __builtin_memcpy(&__value_buffer, std::addressof(__value), sizeof(char));
   2725e:	e8 7d 1a ff ff       	call   18ce0 <_ZNSt3__19addressofB8nn210000IcEEPT_RS1_>
   27263:	8a 00                	mov    (%rax),%al
   27265:	88 45 e7             	mov    %al,-0x19(%rbp)
    return static_cast<_Tp*>(__builtin_memchr(__str, __value_buffer, __count));
   27268:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2726c:	0f be 75 e7          	movsbl -0x19(%rbp),%esi
   27270:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   27274:	e8 97 04 ff ff       	call   17710 <memchr>
   27279:	48 83 c4 20          	add    $0x20,%rsp
   2727d:	5d                   	pop    %rbp
   2727e:	c3                   	ret
   2727f:	90                   	nop

0000000000027280 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value) {
   27280:	55                   	push   %rbp
   27281:	48 89 e5             	mov    %rsp,%rbp
   27284:	48 83 ec 30          	sub    $0x30,%rsp
   27288:	d9 45 10             	flds   0x10(%rbp)
   2728b:	dd d8                	fstp   %st(0)
   2728d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27291:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value);
   27295:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   27299:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2729d:	d9 45 10             	flds   0x10(%rbp)
   272a0:	48 89 e0             	mov    %rsp,%rax
   272a3:	d9 18                	fstps  (%rax)
   272a5:	e8 e6 06 ff ff       	call   17990 <_ZNSt3__18to_charsEPcS0_f>
   272aa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   272ae:	89 55 e8             	mov    %edx,-0x18(%rbp)
  return __r.ptr;
   272b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   272b5:	48 83 c4 30          	add    $0x30,%rsp
   272b9:	5d                   	pop    %rbp
   272ba:	c3                   	ret
   272bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000272c0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEfEEPcS2_S2_T_NS_12chars_formatE>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value, chars_format __fmt) {
   272c0:	55                   	push   %rbp
   272c1:	48 89 e5             	mov    %rsp,%rbp
   272c4:	48 83 ec 30          	sub    $0x30,%rsp
   272c8:	d9 45 10             	flds   0x10(%rbp)
   272cb:	dd d8                	fstp   %st(0)
   272cd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   272d1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   272d5:	89 55 ec             	mov    %edx,-0x14(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value, __fmt);
   272d8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   272dc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   272e0:	d9 45 10             	flds   0x10(%rbp)
   272e3:	8b 55 ec             	mov    -0x14(%rbp),%edx
   272e6:	48 89 e0             	mov    %rsp,%rax
   272e9:	d9 18                	fstps  (%rax)
   272eb:	e8 60 07 ff ff       	call   17a50 <_ZNSt3__18to_charsEPcS0_fNS_12chars_formatE>
   272f0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   272f4:	89 55 e0             	mov    %edx,-0x20(%rbp)
  return __r.ptr;
   272f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   272fb:	48 83 c4 30          	add    $0x30,%rsp
   272ff:	5d                   	pop    %rbp
   27300:	c3                   	ret
   27301:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27308:	00 00 00 
   2730b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000027310 <_ZNSt3__18__rotateB8nn210000INS_17_ClassicAlgPolicyEPcS2_EENS_4pairIT0_S4_EES4_S4_T1_>:
__rotate(_Iterator __first, _Iterator __middle, _Sentinel __last) {
   27310:	55                   	push   %rbp
   27311:	48 89 e5             	mov    %rsp,%rbp
   27314:	48 83 ec 60          	sub    $0x60,%rsp
   27318:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2731c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27320:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  _Iterator __last_iter = _IterOps<_AlgPolicy>::next(__middle, __last);
   27324:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   27328:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2732c:	e8 bf 00 00 00       	call   273f0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE4nextB8nn210000IPcEET_S5_S5_>
   27331:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  if (__first == __middle)
   27335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27339:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   2733d:	75 15                	jne    27354 <_ZNSt3__18__rotateB8nn210000INS_17_ClassicAlgPolicyEPcS2_EENS_4pairIT0_S4_EES4_S4_T1_+0x44>
   2733f:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   27343:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    return _Ret(__last_iter, __last_iter);
   27347:	48 89 d6             	mov    %rdx,%rsi
   2734a:	e8 c1 00 00 00       	call   27410 <_ZNSt3__14pairIPcS1_EC2B8nn210000IRS1_S4_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>
   2734f:	e9 85 00 00 00       	jmp    273d9 <_ZNSt3__18__rotateB8nn210000INS_17_ClassicAlgPolicyEPcS2_EENS_4pairIT0_S4_EES4_S4_T1_+0xc9>
  if (__middle == __last)
   27354:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27358:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   2735c:	75 28                	jne    27386 <_ZNSt3__18__rotateB8nn210000INS_17_ClassicAlgPolicyEPcS2_EENS_4pairIT0_S4_EES4_S4_T1_+0x76>
   2735e:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    return _Ret(std::move(__first), std::move(__last_iter));
   27362:	e8 19 23 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27367:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2736b:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   2736f:	e8 0c 23 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27374:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   27378:	48 89 c2             	mov    %rax,%rdx
   2737b:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   2737f:	e8 bc 9e ff ff       	call   21240 <_ZNSt3__14pairIPcS1_EC2B8nn210000IS1_S1_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS5_OS6_>
   27384:	eb 53                	jmp    273d9 <_ZNSt3__18__rotateB8nn210000INS_17_ClassicAlgPolicyEPcS2_EENS_4pairIT0_S4_EES4_S4_T1_+0xc9>
   27386:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  auto __result = std::__rotate_impl<_AlgPolicy>(std::move(__first), std::move(__middle), __last_iter, _IterCategory());
   2738a:	e8 f1 22 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2738f:	48 8b 00             	mov    (%rax),%rax
   27392:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   27396:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2739a:	e8 e1 22 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2739f:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   273a3:	48 8b 30             	mov    (%rax),%rsi
   273a6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   273aa:	e8 b1 00 00 00       	call   27460 <_ZNSt3__113__rotate_implB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_NS_26random_access_iterator_tagE>
   273af:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   273b3:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  return _Ret(std::move(__result), std::move(__last_iter));
   273b7:	e8 c4 22 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   273bc:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   273c0:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   273c4:	e8 b7 22 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   273c9:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   273cd:	48 89 c2             	mov    %rax,%rdx
   273d0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   273d4:	e8 67 9e ff ff       	call   21240 <_ZNSt3__14pairIPcS1_EC2B8nn210000IS1_S1_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS5_OS6_>
}
   273d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   273dd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   273e1:	48 83 c4 60          	add    $0x60,%rsp
   273e5:	5d                   	pop    %rbp
   273e6:	c3                   	ret
   273e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   273ee:	00 00 

00000000000273f0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE4nextB8nn210000IPcEET_S5_S5_>:
    std::iter_swap(std::forward<_Iter1>(__a), std::forward<_Iter2>(__b));
  }

  // next
  template <class _Iterator>
  _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR_SINCE_CXX14 _Iterator next(_Iterator, _Iterator __last) {
   273f0:	55                   	push   %rbp
   273f1:	48 89 e5             	mov    %rsp,%rbp
   273f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   273f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return __last;
   273fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27400:	5d                   	pop    %rbp
   27401:	c3                   	ret
   27402:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27409:	00 00 00 
   2740c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000027410 <_ZNSt3__14pairIPcS1_EC2B8nn210000IRS1_S4_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   27410:	55                   	push   %rbp
   27411:	48 89 e5             	mov    %rsp,%rbp
   27414:	48 83 ec 20          	sub    $0x20,%rsp
   27418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2741c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   27420:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   27424:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27428:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2742c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   27430:	e8 bb 00 00 00       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   27435:	48 89 c1             	mov    %rax,%rcx
   27438:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2743c:	48 8b 09             	mov    (%rcx),%rcx
   2743f:	48 89 08             	mov    %rcx,(%rax)
   27442:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   27446:	e8 a5 00 00 00       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   2744b:	48 89 c1             	mov    %rax,%rcx
   2744e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27452:	48 8b 09             	mov    (%rcx),%rcx
   27455:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   27459:	48 83 c4 20          	add    $0x20,%rsp
   2745d:	5d                   	pop    %rbp
   2745e:	c3                   	ret
   2745f:	90                   	nop

0000000000027460 <_ZNSt3__113__rotate_implB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_NS_26random_access_iterator_tagE>:
    random_access_iterator_tag) {
   27460:	55                   	push   %rbp
   27461:	48 89 e5             	mov    %rsp,%rbp
   27464:	48 83 ec 30          	sub    $0x30,%rsp
   27468:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2746c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27470:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   27474:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   27478:	be 01 00 00 00       	mov    $0x1,%esi
    if (_IterOps<_AlgPolicy>::next(__first) == __middle)
   2747d:	e8 7e 00 00 00       	call   27500 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE4nextB8nn210000IRPcEEu14__remove_cvrefIT_EOS6_NS_15iterator_traitsIS7_E15difference_typeE>
   27482:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   27486:	75 13                	jne    2749b <_ZNSt3__113__rotate_implB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_NS_26random_access_iterator_tagE+0x3b>
      return std::__rotate_left<_AlgPolicy>(__first, __last);
   27488:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2748c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   27490:	e8 9b 00 00 00       	call   27530 <_ZNSt3__113__rotate_leftB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_>
   27495:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   27499:	eb 3c                	jmp    274d7 <_ZNSt3__113__rotate_implB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_NS_26random_access_iterator_tagE+0x77>
   2749b:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2749f:	be 01 00 00 00       	mov    $0x1,%esi
    if (_IterOps<_AlgPolicy>::next(__middle) == __last)
   274a4:	e8 57 00 00 00       	call   27500 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE4nextB8nn210000IRPcEEu14__remove_cvrefIT_EOS6_NS_15iterator_traitsIS7_E15difference_typeE>
   274a9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   274ad:	75 13                	jne    274c2 <_ZNSt3__113__rotate_implB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_NS_26random_access_iterator_tagE+0x62>
      return std::__rotate_right<_AlgPolicy>(__first, __last);
   274af:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   274b3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   274b7:	e8 e4 00 00 00       	call   275a0 <_ZNSt3__114__rotate_rightB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_>
   274bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   274c0:	eb 15                	jmp    274d7 <_ZNSt3__113__rotate_implB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_NS_26random_access_iterator_tagE+0x77>
    return std::__rotate_gcd<_AlgPolicy>(__first, __middle, __last);
   274c2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   274c6:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   274ca:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   274ce:	e8 5d 01 00 00       	call   27630 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_>
   274d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   274d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   274db:	48 83 c4 30          	add    $0x30,%rsp
   274df:	5d                   	pop    %rbp
   274e0:	c3                   	ret
   274e1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   274e8:	00 00 00 
   274eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>:
forward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {
   274f0:	55                   	push   %rbp
   274f1:	48 89 e5             	mov    %rsp,%rbp
   274f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Tp&&>(__t);
   274f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   274fc:	5d                   	pop    %rbp
   274fd:	c3                   	ret
   274fe:	66 90                	xchg   %ax,%ax

0000000000027500 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE4nextB8nn210000IRPcEEu14__remove_cvrefIT_EOS6_NS_15iterator_traitsIS7_E15difference_typeE>:
  }

  template <class _Iter>
  _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR_SINCE_CXX14 __remove_cvref_t<_Iter>
  next(_Iter&& __it, typename iterator_traits<__remove_cvref_t<_Iter> >::difference_type __n = 1) {
   27500:	55                   	push   %rbp
   27501:	48 89 e5             	mov    %rsp,%rbp
   27504:	48 83 ec 10          	sub    $0x10,%rsp
   27508:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2750c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return std::next(std::forward<_Iter>(__it), __n);
   27510:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   27514:	e8 d7 ff ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   27519:	48 8b 38             	mov    (%rax),%rdi
   2751c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   27520:	e8 5b 02 00 00       	call   27780 <_ZNSt3__14nextB8nn210000IPcTnNS_9enable_ifIXsr29__has_input_iterator_categoryIT_EE5valueEiE4typeELi0EEES3_S3_NS_15iterator_traitsIS3_E15difference_typeE>
   27525:	48 83 c4 10          	add    $0x10,%rsp
   27529:	5d                   	pop    %rbp
   2752a:	c3                   	ret
   2752b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000027530 <_ZNSt3__113__rotate_leftB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_>:
__rotate_left(_ForwardIterator __first, _ForwardIterator __last) {
   27530:	55                   	push   %rbp
   27531:	48 89 e5             	mov    %rsp,%rbp
   27534:	48 83 ec 30          	sub    $0x30,%rsp
   27538:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2753c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   27540:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
  value_type __tmp       = _Ops::__iter_move(__first);
   27544:	e8 b7 02 00 00       	call   27800 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE11__iter_moveB8nn210000IRPcTnNS_9enable_ifIXsr12is_referenceIDTdeclsr3stdE7declvalIRT_EEEEE5valueEiE4typeELi0EEEDTclsr3stdE4movedeclsr3stdE7declvalIS8_EEEEOS7_>
   27549:	8a 00                	mov    (%rax),%al
   2754b:	88 45 ef             	mov    %al,-0x11(%rbp)
   2754e:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   27552:	be 01 00 00 00       	mov    $0x1,%esi
  _ForwardIterator __lm1 = std::__move<_AlgPolicy>(_Ops::next(__first), __last, __first).second;
   27557:	e8 a4 ff ff ff       	call   27500 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE4nextB8nn210000IRPcEEu14__remove_cvrefIT_EOS6_NS_15iterator_traitsIS7_E15difference_typeE>
   2755c:	48 89 c7             	mov    %rax,%rdi
   2755f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   27563:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27567:	e8 c4 02 00 00       	call   27830 <_ZNSt3__16__moveB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_EENS_4pairIT0_T2_EES4_T1_S5_>
   2756c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   27570:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   27574:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   27578:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2757c:	48 8d 7d ef          	lea    -0x11(%rbp),%rdi
  *__lm1                 = std::move(__tmp);
   27580:	e8 1b 03 00 00       	call   278a0 <_ZNSt3__14moveB8nn210000IRcEEOu20__remove_reference_tIT_EOS2_>
   27585:	8a 08                	mov    (%rax),%cl
   27587:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2758b:	88 08                	mov    %cl,(%rax)
  return __lm1;
   2758d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27591:	48 83 c4 30          	add    $0x30,%rsp
   27595:	5d                   	pop    %rbp
   27596:	c3                   	ret
   27597:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2759e:	00 00 

00000000000275a0 <_ZNSt3__114__rotate_rightB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_>:
__rotate_right(_BidirectionalIterator __first, _BidirectionalIterator __last) {
   275a0:	55                   	push   %rbp
   275a1:	48 89 e5             	mov    %rsp,%rbp
   275a4:	48 83 ec 50          	sub    $0x50,%rsp
   275a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   275ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   275b0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   275b4:	be 01 00 00 00       	mov    $0x1,%esi
  _BidirectionalIterator __lm1 = _Ops::prev(__last);
   275b9:	e8 12 06 00 00       	call   27bd0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE4prevB8nn210000IRPcEEu14__remove_cvrefIT_EOS6_NS_15iterator_traitsIS7_E15difference_typeE>
   275be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   275c2:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  value_type __tmp             = _Ops::__iter_move(__lm1);
   275c6:	e8 35 02 00 00       	call   27800 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE11__iter_moveB8nn210000IRPcTnNS_9enable_ifIXsr12is_referenceIDTdeclsr3stdE7declvalIRT_EEEEE5valueEiE4typeELi0EEEDTclsr3stdE4movedeclsr3stdE7declvalIS8_EEEEOS7_>
   275cb:	8a 00                	mov    (%rax),%al
   275cd:	88 45 e7             	mov    %al,-0x19(%rbp)
  _BidirectionalIterator __fp1 = std::__move_backward<_AlgPolicy>(__first, __lm1, std::move(__last)).second;
   275d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   275d4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   275d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   275dc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   275e0:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   275e4:	e8 97 20 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   275e9:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   275ed:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   275f1:	48 8b 10             	mov    (%rax),%rdx
   275f4:	e8 07 06 00 00       	call   27c00 <_ZNSt3__115__move_backwardB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_EENS_4pairIT0_T2_EES4_T1_S5_>
   275f9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   275fd:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   27601:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   27605:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   27609:	48 8d 7d e7          	lea    -0x19(%rbp),%rdi
  *__first                     = std::move(__tmp);
   2760d:	e8 8e 02 00 00       	call   278a0 <_ZNSt3__14moveB8nn210000IRcEEOu20__remove_reference_tIT_EOS2_>
   27612:	8a 08                	mov    (%rax),%cl
   27614:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27618:	88 08                	mov    %cl,(%rax)
  return __fp1;
   2761a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2761e:	48 83 c4 50          	add    $0x50,%rsp
   27622:	5d                   	pop    %rbp
   27623:	c3                   	ret
   27624:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2762b:	00 00 00 
   2762e:	66 90                	xchg   %ax,%ax

0000000000027630 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_>:
__rotate_gcd(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last) {
   27630:	55                   	push   %rbp
   27631:	48 89 e5             	mov    %rsp,%rbp
   27634:	48 83 ec 70          	sub    $0x70,%rsp
   27638:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2763c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   27640:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  const difference_type __m1 = __middle - __first;
   27644:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27648:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   2764c:	48 29 c8             	sub    %rcx,%rax
   2764f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  const difference_type __m2 = _Ops::distance(__middle, __last);
   27653:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   27657:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2765b:	e8 60 08 00 00       	call   27ec0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE8distanceB8nn210000IPcEENS_15iterator_traitsIT_E15difference_typeES6_S6_>
   27660:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  if (__m1 == __m2) {
   27664:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   27668:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   2766c:	75 2a                	jne    27698 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_+0x68>
    std::__swap_ranges<_AlgPolicy>(__first, __middle, __middle, __last);
   2766e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   27672:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   27676:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2767a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2767e:	e8 6d 08 00 00       	call   27ef0 <_ZNSt3__113__swap_rangesB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_S2_EENS_4pairIT0_T2_EES4_T1_S5_T3_>
   27683:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   27687:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    return __middle;
   2768b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2768f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   27693:	e9 dc 00 00 00       	jmp    27774 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_+0x144>
  const difference_type __g = std::__algo_gcd(__m1, __m2);
   27698:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2769c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   276a0:	e8 eb 08 00 00       	call   27f90 <_ZNSt3__110__algo_gcdB8nn210000IlEET_S1_S1_>
   276a5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  for (_RandomAccessIterator __p = __first + __g; __p != __first;) {
   276a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   276ad:	48 03 45 b8          	add    -0x48(%rbp),%rax
   276b1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   276b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   276b9:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   276bd:	0f 84 a5 00 00 00    	je     27768 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_+0x138>
    value_type __t(_Ops::__iter_move(--__p));
   276c3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   276c7:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   276cb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   276cf:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   276d3:	e8 28 01 00 00       	call   27800 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE11__iter_moveB8nn210000IRPcTnNS_9enable_ifIXsr12is_referenceIDTdeclsr3stdE7declvalIRT_EEEEE5valueEiE4typeELi0EEEDTclsr3stdE4movedeclsr3stdE7declvalIS8_EEEEOS7_>
   276d8:	8a 00                	mov    (%rax),%al
   276da:	88 45 af             	mov    %al,-0x51(%rbp)
    _RandomAccessIterator __p1 = __p;
   276dd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   276e1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    _RandomAccessIterator __p2 = __p1 + __m1;
   276e5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   276e9:	48 03 45 d8          	add    -0x28(%rbp),%rax
   276ed:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   276f1:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
      *__p1                     = _Ops::__iter_move(__p2);
   276f5:	e8 06 01 00 00       	call   27800 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE11__iter_moveB8nn210000IRPcTnNS_9enable_ifIXsr12is_referenceIDTdeclsr3stdE7declvalIRT_EEEEE5valueEiE4typeELi0EEEDTclsr3stdE4movedeclsr3stdE7declvalIS8_EEEEOS7_>
   276fa:	8a 08                	mov    (%rax),%cl
   276fc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   27700:	88 08                	mov    %cl,(%rax)
      __p1                      = __p2;
   27702:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   27706:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      const difference_type __d = _Ops::distance(__p2, __last);
   2770a:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   2770e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   27712:	e8 a9 07 00 00       	call   27ec0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE8distanceB8nn210000IPcEENS_15iterator_traitsIT_E15difference_typeES6_S6_>
   27717:	48 89 45 90          	mov    %rax,-0x70(%rbp)
      if (__m1 < __d)
   2771b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2771f:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
   27723:	7d 0e                	jge    27733 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_+0x103>
        __p2 += __m1;
   27725:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   27729:	48 03 45 98          	add    -0x68(%rbp),%rax
   2772d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   27731:	eb 13                	jmp    27746 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_+0x116>
        __p2 = __first + (__m1 - __d);
   27733:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27737:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   2773b:	48 2b 4d 90          	sub    -0x70(%rbp),%rcx
   2773f:	48 01 c8             	add    %rcx,%rax
   27742:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    } while (__p2 != __p);
   27746:	eb 00                	jmp    27748 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_+0x118>
   27748:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2774c:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
   27750:	75 9f                	jne    276f1 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_+0xc1>
   27752:	48 8d 7d af          	lea    -0x51(%rbp),%rdi
    *__p1 = std::move(__t);
   27756:	e8 45 01 00 00       	call   278a0 <_ZNSt3__14moveB8nn210000IRcEEOu20__remove_reference_tIT_EOS2_>
   2775b:	8a 08                	mov    (%rax),%cl
   2775d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   27761:	88 08                	mov    %cl,(%rax)
  for (_RandomAccessIterator __p = __first + __g; __p != __first;) {
   27763:	e9 4d ff ff ff       	jmp    276b5 <_ZNSt3__112__rotate_gcdB8nn210000INS_17_ClassicAlgPolicyEPcEET0_S3_S3_S3_+0x85>
  return __first + __m2;
   27768:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2776c:	48 03 45 d0          	add    -0x30(%rbp),%rax
   27770:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   27774:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27778:	48 83 c4 70          	add    $0x70,%rsp
   2777c:	5d                   	pop    %rbp
   2777d:	c3                   	ret
   2777e:	66 90                	xchg   %ax,%ax

0000000000027780 <_ZNSt3__14nextB8nn210000IPcTnNS_9enable_ifIXsr29__has_input_iterator_categoryIT_EE5valueEiE4typeELi0EEES3_S3_NS_15iterator_traitsIS3_E15difference_typeE>:

_LIBCPP_BEGIN_NAMESPACE_STD

template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 _InputIter
next(_InputIter __x, typename iterator_traits<_InputIter>::difference_type __n = 1) {
   27780:	55                   	push   %rbp
   27781:	48 89 e5             	mov    %rsp,%rbp
   27784:	48 83 ec 10          	sub    $0x10,%rsp
   27788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2778c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  // Calling `advance` with a negative value on a non-bidirectional iterator is a no-op in the current implementation.
  // Note that this check duplicates the similar check in `std::advance`.
  _LIBCPP_ASSERT_PEDANTIC(__n >= 0 || __has_bidirectional_iterator_category<_InputIter>::value,
                          "Attempt to next(it, n) with negative n on a non-bidirectional iterator");

  std::advance(__x, __n);
   27790:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   27794:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   27798:	e8 13 00 00 00       	call   277b0 <_ZNSt3__17advanceB8nn210000IPcllTnNS_9enable_ifIXsr11is_integralIT1_EE5valueEiE4typeELi0EEEvRT_T0_>
  return __x;
   2779d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   277a1:	48 83 c4 10          	add    $0x10,%rsp
   277a5:	5d                   	pop    %rbp
   277a6:	c3                   	ret
   277a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   277ae:	00 00 

00000000000277b0 <_ZNSt3__17advanceB8nn210000IPcllTnNS_9enable_ifIXsr11is_integralIT1_EE5valueEiE4typeELi0EEEvRT_T0_>:
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 void advance(_InputIter& __i, _Distance __orig_n) {
   277b0:	55                   	push   %rbp
   277b1:	48 89 e5             	mov    %rsp,%rbp
   277b4:	48 83 ec 20          	sub    $0x20,%rsp
   277b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   277bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  _Difference __n = static_cast<_Difference>(std::__convert_to_integral(__orig_n));
   277c0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   277c4:	e8 37 bf fd ff       	call   3700 <_ZNSt3__121__convert_to_integralB8nn210000El>
   277c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  std::__advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());
   277cd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   277d1:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   277d5:	e8 06 00 00 00       	call   277e0 <_ZNSt3__19__advanceB8nn210000IPcEEvRT_NS_15iterator_traitsIS2_E15difference_typeENS_26random_access_iterator_tagE>
}
   277da:	48 83 c4 20          	add    $0x20,%rsp
   277de:	5d                   	pop    %rbp
   277df:	c3                   	ret

00000000000277e0 <_ZNSt3__19__advanceB8nn210000IPcEEvRT_NS_15iterator_traitsIS2_E15difference_typeENS_26random_access_iterator_tagE>:
__advance(_RandIter& __i, typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag) {
   277e0:	55                   	push   %rbp
   277e1:	48 89 e5             	mov    %rsp,%rbp
   277e4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   277e8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  __i += __n;
   277ec:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   277f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   277f4:	48 03 08             	add    (%rax),%rcx
   277f7:	48 89 08             	mov    %rcx,(%rax)
}
   277fa:	5d                   	pop    %rbp
   277fb:	c3                   	ret
   277fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000027800 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE11__iter_moveB8nn210000IRPcTnNS_9enable_ifIXsr12is_referenceIDTdeclsr3stdE7declvalIRT_EEEEE5valueEiE4typeELi0EEEDTclsr3stdE4movedeclsr3stdE7declvalIS8_EEEEOS7_>:
      __iter_move(_Iter&& __i) {
   27800:	55                   	push   %rbp
   27801:	48 89 e5             	mov    %rsp,%rbp
   27804:	48 83 ec 10          	sub    $0x10,%rsp
   27808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __validate_iter_reference<_Iter>();
   2780c:	e8 9f 00 00 00       	call   278b0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE25__validate_iter_referenceB8nn210000IRPcEEvv>
    return std::move(*std::forward<_Iter>(__i));
   27811:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   27815:	e8 d6 fc ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   2781a:	48 8b 38             	mov    (%rax),%rdi
   2781d:	e8 7e 00 00 00       	call   278a0 <_ZNSt3__14moveB8nn210000IRcEEOu20__remove_reference_tIT_EOS2_>
   27822:	48 83 c4 10          	add    $0x10,%rsp
   27826:	5d                   	pop    %rbp
   27827:	c3                   	ret
   27828:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2782f:	00 

0000000000027830 <_ZNSt3__16__moveB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_EENS_4pairIT0_T2_EES4_T1_S5_>:
  }
};

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 pair<_InIter, _OutIter>
__move(_InIter __first, _Sent __last, _OutIter __result) {
   27830:	55                   	push   %rbp
   27831:	48 89 e5             	mov    %rsp,%rbp
   27834:	48 83 ec 40          	sub    $0x40,%rsp
   27838:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2783c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27840:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   27844:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return std::__copy_move_unwrap_iters<__move_impl<_AlgPolicy> >(
      std::move(__first), std::move(__last), std::move(__result));
   27848:	e8 33 1e ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2784d:	48 8b 00             	mov    (%rax),%rax
   27850:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   27854:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   27858:	e8 23 1e ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2785d:	48 8b 00             	mov    (%rax),%rax
   27860:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   27864:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   27868:	e8 13 1e ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2786d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   27871:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   27875:	48 8b 10             	mov    (%rax),%rdx
  return std::__copy_move_unwrap_iters<__move_impl<_AlgPolicy> >(
   27878:	e8 43 00 00 00       	call   278c0 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__move_implINS_17_ClassicAlgPolicyEEEPcS4_S4_TnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairIS6_S7_EES6_T1_S7_>
   2787d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   27881:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   27885:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27889:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2788d:	48 83 c4 40          	add    $0x40,%rsp
   27891:	5d                   	pop    %rbp
   27892:	c3                   	ret
   27893:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2789a:	00 00 00 
   2789d:	0f 1f 00             	nopl   (%rax)

00000000000278a0 <_ZNSt3__14moveB8nn210000IRcEEOu20__remove_reference_tIT_EOS2_>:
move(_LIBCPP_LIFETIMEBOUND _Tp&& __t) _NOEXCEPT {
   278a0:	55                   	push   %rbp
   278a1:	48 89 e5             	mov    %rsp,%rbp
   278a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return static_cast<_Up&&>(__t);
   278a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   278ac:	5d                   	pop    %rbp
   278ad:	c3                   	ret
   278ae:	66 90                	xchg   %ax,%ax

00000000000278b0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE25__validate_iter_referenceB8nn210000IRPcEEvv>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 static void __validate_iter_reference() {
   278b0:	55                   	push   %rbp
   278b1:	48 89 e5             	mov    %rsp,%rbp
  }
   278b4:	5d                   	pop    %rbp
   278b5:	c3                   	ret
   278b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   278bd:	00 00 00 

00000000000278c0 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_11__move_implINS_17_ClassicAlgPolicyEEEPcS4_S4_TnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairIS6_S7_EES6_T1_S7_>:
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
   278c0:	55                   	push   %rbp
   278c1:	48 89 e5             	mov    %rsp,%rbp
   278c4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   278cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   278cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   278d3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  auto __range  = std::__unwrap_range(__first, std::move(__last));
   278d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   278db:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   278e2:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   278e6:	e8 95 1d ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   278eb:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   278f2:	48 8b 30             	mov    (%rax),%rsi
   278f5:	e8 76 97 ff ff       	call   21070 <_ZNSt3__114__unwrap_rangeB8nn210000IPcS1_EEDaT_T0_>
   278fa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   278fe:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   27902:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   27909:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   2790d:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
   27911:	e8 6a 1d ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27916:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
   2791d:	48 8b 00             	mov    (%rax),%rax
   27920:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   27927:	e8 54 1d ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2792c:	48 8b 00             	mov    (%rax),%rax
   2792f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   27933:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   27937:	e8 e4 20 ff ff       	call   19a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
   2793c:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   27943:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   27947:	48 89 c1             	mov    %rax,%rcx
   2794a:	48 8d 7d b7          	lea    -0x49(%rbp),%rdi
   2794e:	e8 8d 00 00 00       	call   279e0 <_ZNKSt3__111__move_implINS_17_ClassicAlgPolicyEEclB8nn210000IccTnNS_9enable_ifIXsr38__can_lower_move_assignment_to_memmoveIT_T0_EE5valueEiE4typeELi0EEENS_4pairIPS5_PS6_EESA_SA_SB_>
   27953:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   27957:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   2795b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2795f:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   27963:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   27967:	e8 14 1d ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2796c:	48 8b 00             	mov    (%rax),%rax
   2796f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   27973:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   27977:	e8 04 1d ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   2797c:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   27980:	48 8b 30             	mov    (%rax),%rsi
   27983:	e8 18 98 ff ff       	call   211a0 <_ZNSt3__114__rewrap_rangeB8nn210000IPcS1_S1_EET0_S2_T1_>
   27988:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2798c:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
   27990:	e8 eb 1c ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27995:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   27999:	48 8b 00             	mov    (%rax),%rax
   2799c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   279a0:	e8 db 1c ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   279a5:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   279a9:	48 8b 30             	mov    (%rax),%rsi
   279ac:	e8 df 4f ff ff       	call   1c990 <_ZNSt3__113__rewrap_iterB8nn210000IPcS1_NS_18__unwrap_iter_implIS1_Lb1EEEEET_S4_T0_>
   279b1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   279b5:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
   279b9:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   279bd:	e8 5e 00 00 00       	call   27a20 <_ZNSt3__19make_pairB8nn210000IPcS1_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS3_Iu7__decayIT0_EE4typeEEEOS4_OS8_>
   279c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   279c6:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   279ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   279ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   279d2:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   279d9:	5d                   	pop    %rbp
   279da:	c3                   	ret
   279db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000279e0 <_ZNKSt3__111__move_implINS_17_ClassicAlgPolicyEEclB8nn210000IccTnNS_9enable_ifIXsr38__can_lower_move_assignment_to_memmoveIT_T0_EE5valueEiE4typeELi0EEENS_4pairIPS5_PS6_EESA_SA_SB_>:
  operator()(_In* __first, _In* __last, _Out* __result) const {
   279e0:	55                   	push   %rbp
   279e1:	48 89 e5             	mov    %rsp,%rbp
   279e4:	48 83 ec 30          	sub    $0x30,%rsp
   279e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   279ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   279f0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   279f4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    return std::__copy_trivial_impl(__first, __last, __result);
   279f8:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   279fc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   27a00:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   27a04:	e8 67 00 00 00       	call   27a70 <_ZNSt3__119__copy_trivial_implB8nn210000IccEENS_4pairIPT_PT0_EES3_S3_S5_>
   27a09:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   27a0d:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   27a11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27a15:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27a19:	48 83 c4 30          	add    $0x30,%rsp
   27a1d:	5d                   	pop    %rbp
   27a1e:	c3                   	ret
   27a1f:	90                   	nop

0000000000027a20 <_ZNSt3__19make_pairB8nn210000IPcS1_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS3_Iu7__decayIT0_EE4typeEEEOS4_OS8_>:
make_pair(_T1&& __t1, _T2&& __t2) {
   27a20:	55                   	push   %rbp
   27a21:	48 89 e5             	mov    %rsp,%rbp
   27a24:	48 83 ec 30          	sub    $0x30,%rsp
   27a28:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27a2c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
   27a30:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   27a34:	e8 57 51 ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   27a39:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   27a3d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   27a41:	e8 4a 51 ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   27a46:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   27a4a:	48 89 c2             	mov    %rax,%rdx
   27a4d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   27a51:	e8 ea 97 ff ff       	call   21240 <_ZNSt3__14pairIPcS1_EC2B8nn210000IS1_S1_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS5_OS6_>
   27a56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27a5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27a5e:	48 83 c4 30          	add    $0x30,%rsp
   27a62:	5d                   	pop    %rbp
   27a63:	c3                   	ret
   27a64:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27a6b:	00 00 00 
   27a6e:	66 90                	xchg   %ax,%ax

0000000000027a70 <_ZNSt3__119__copy_trivial_implB8nn210000IccEENS_4pairIPT_PT0_EES3_S3_S5_>:
__copy_trivial_impl(_In* __first, _In* __last, _Out* __result) {
   27a70:	55                   	push   %rbp
   27a71:	48 89 e5             	mov    %rsp,%rbp
   27a74:	48 83 ec 40          	sub    $0x40,%rsp
   27a78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27a7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27a80:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  const size_t __n = static_cast<size_t>(__last - __first);
   27a84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27a88:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   27a8c:	48 29 c8             	sub    %rcx,%rax
   27a8f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  std::__constexpr_memmove(__result, __first, __element_count(__n));
   27a93:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   27a97:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   27a9b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   27a9f:	e8 3c 00 00 00       	call   27ae0 <_ZNSt3__119__constexpr_memmoveB8nn210000IccEEPT_S2_PT0_NS_15__element_countE>
  return std::make_pair(__last, __result + __n);
   27aa4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   27aa8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   27aac:	48 01 c8             	add    %rcx,%rax
   27aaf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   27ab3:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   27ab7:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
   27abb:	e8 70 00 00 00       	call   27b30 <_ZNSt3__19make_pairB8nn210000IRPcS1_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS4_Iu7__decayIT0_EE4typeEEEOS5_OS9_>
   27ac0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   27ac4:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   27ac8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27acc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27ad0:	48 83 c4 40          	add    $0x40,%rsp
   27ad4:	5d                   	pop    %rbp
   27ad5:	c3                   	ret
   27ad6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27add:	00 00 00 

0000000000027ae0 <_ZNSt3__119__constexpr_memmoveB8nn210000IccEEPT_S2_PT0_NS_15__element_countE>:
__constexpr_memmove(_Tp* __dest, _Up* __src, __element_count __n) {
   27ae0:	55                   	push   %rbp
   27ae1:	48 89 e5             	mov    %rsp,%rbp
   27ae4:	48 83 ec 20          	sub    $0x20,%rsp
   27ae8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27aec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   27af0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  size_t __count = static_cast<size_t>(__n);
   27af4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27af8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  } else if (__count > 0) {
   27afc:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   27b01:	76 1d                	jbe    27b20 <_ZNSt3__119__constexpr_memmoveB8nn210000IccEEPT_S2_PT0_NS_15__element_countE+0x40>
    ::__builtin_memmove(__dest, __src, (__count - 1) * sizeof(_Tp) + __datasizeof_v<_Tp>);
   27b03:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   27b07:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   27b0b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   27b0f:	48 83 ea 01          	sub    $0x1,%rdx
   27b13:	48 c1 e2 00          	shl    $0x0,%rdx
   27b17:	48 83 c2 01          	add    $0x1,%rdx
   27b1b:	e8 a0 16 ff ff       	call   191c0 <memmove>
  return __dest;
   27b20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27b24:	48 83 c4 20          	add    $0x20,%rsp
   27b28:	5d                   	pop    %rbp
   27b29:	c3                   	ret
   27b2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000027b30 <_ZNSt3__19make_pairB8nn210000IRPcS1_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS4_Iu7__decayIT0_EE4typeEEEOS5_OS9_>:
make_pair(_T1&& __t1, _T2&& __t2) {
   27b30:	55                   	push   %rbp
   27b31:	48 89 e5             	mov    %rsp,%rbp
   27b34:	48 83 ec 30          	sub    $0x30,%rsp
   27b38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27b3c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
   27b40:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   27b44:	e8 a7 f9 ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   27b49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   27b4d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   27b51:	e8 3a 50 ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   27b56:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   27b5a:	48 89 c2             	mov    %rax,%rdx
   27b5d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   27b61:	e8 1a 00 00 00       	call   27b80 <_ZNSt3__14pairIPcS1_EC2B8nn210000IRS1_S1_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>
   27b66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27b6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27b6e:	48 83 c4 30          	add    $0x30,%rsp
   27b72:	5d                   	pop    %rbp
   27b73:	c3                   	ret
   27b74:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27b7b:	00 00 00 
   27b7e:	66 90                	xchg   %ax,%ax

0000000000027b80 <_ZNSt3__14pairIPcS1_EC2B8nn210000IRS1_S1_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>:
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
   27b80:	55                   	push   %rbp
   27b81:	48 89 e5             	mov    %rsp,%rbp
   27b84:	48 83 ec 20          	sub    $0x20,%rsp
   27b88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27b8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   27b90:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   27b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27b98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   27b9c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   27ba0:	e8 4b f9 ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   27ba5:	48 89 c1             	mov    %rax,%rcx
   27ba8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27bac:	48 8b 09             	mov    (%rcx),%rcx
   27baf:	48 89 08             	mov    %rcx,(%rax)
   27bb2:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   27bb6:	e8 d5 4f ff ff       	call   1cb90 <_ZNSt3__17forwardB8nn210000IPcEEOT_Ru20__remove_reference_tIS2_E>
   27bbb:	48 89 c1             	mov    %rax,%rcx
   27bbe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27bc2:	48 8b 09             	mov    (%rcx),%rcx
   27bc5:	48 89 48 08          	mov    %rcx,0x8(%rax)
  }
   27bc9:	48 83 c4 20          	add    $0x20,%rsp
   27bcd:	5d                   	pop    %rbp
   27bce:	c3                   	ret
   27bcf:	90                   	nop

0000000000027bd0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE4prevB8nn210000IRPcEEu14__remove_cvrefIT_EOS6_NS_15iterator_traitsIS7_E15difference_typeE>:
  }

  // prev
  template <class _Iter>
  _LIBCPP_HIDE_FROM_ABI static _LIBCPP_CONSTEXPR_SINCE_CXX14 __remove_cvref_t<_Iter>
  prev(_Iter&& __iter, typename iterator_traits<__remove_cvref_t<_Iter> >::difference_type __n = 1) {
   27bd0:	55                   	push   %rbp
   27bd1:	48 89 e5             	mov    %rsp,%rbp
   27bd4:	48 83 ec 10          	sub    $0x10,%rsp
   27bd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27bdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return std::prev(std::forward<_Iter>(__iter), __n);
   27be0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   27be4:	e8 07 f9 ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   27be9:	48 8b 38             	mov    (%rax),%rdi
   27bec:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   27bf0:	e8 7b 00 00 00       	call   27c70 <_ZNSt3__14prevB8nn210000IPcTnNS_9enable_ifIXsr29__has_input_iterator_categoryIT_EE5valueEiE4typeELi0EEES3_S3_NS_15iterator_traitsIS3_E15difference_typeE>
   27bf5:	48 83 c4 10          	add    $0x10,%rsp
   27bf9:	5d                   	pop    %rbp
   27bfa:	c3                   	ret
   27bfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000027c00 <_ZNSt3__115__move_backwardB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_EENS_4pairIT0_T2_EES4_T1_S5_>:
  }
};

template <class _AlgPolicy, class _BidirectionalIterator1, class _Sentinel, class _BidirectionalIterator2>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 pair<_BidirectionalIterator1, _BidirectionalIterator2>
__move_backward(_BidirectionalIterator1 __first, _Sentinel __last, _BidirectionalIterator2 __result) {
   27c00:	55                   	push   %rbp
   27c01:	48 89 e5             	mov    %rsp,%rbp
   27c04:	48 83 ec 40          	sub    $0x40,%rsp
   27c08:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27c0c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27c10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   27c14:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  static_assert(std::is_copy_constructible<_BidirectionalIterator1>::value &&
                    std::is_copy_constructible<_BidirectionalIterator1>::value,
                "Iterators must be copy constructible.");

  return std::__copy_move_unwrap_iters<__move_backward_impl<_AlgPolicy> >(
      std::move(__first), std::move(__last), std::move(__result));
   27c18:	e8 63 1a ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27c1d:	48 8b 00             	mov    (%rax),%rax
   27c20:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   27c24:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   27c28:	e8 53 1a ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27c2d:	48 8b 00             	mov    (%rax),%rax
   27c30:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   27c34:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   27c38:	e8 43 1a ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27c3d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   27c41:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   27c45:	48 8b 10             	mov    (%rax),%rdx
  return std::__copy_move_unwrap_iters<__move_backward_impl<_AlgPolicy> >(
   27c48:	e8 53 00 00 00       	call   27ca0 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_20__move_backward_implINS_17_ClassicAlgPolicyEEEPcS4_S4_TnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairIS6_S7_EES6_T1_S7_>
   27c4d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   27c51:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   27c55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27c59:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27c5d:	48 83 c4 40          	add    $0x40,%rsp
   27c61:	5d                   	pop    %rbp
   27c62:	c3                   	ret
   27c63:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27c6a:	00 00 00 
   27c6d:	0f 1f 00             	nopl   (%rax)

0000000000027c70 <_ZNSt3__14prevB8nn210000IPcTnNS_9enable_ifIXsr29__has_input_iterator_categoryIT_EE5valueEiE4typeELi0EEES3_S3_NS_15iterator_traitsIS3_E15difference_typeE>:

_LIBCPP_BEGIN_NAMESPACE_STD

template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
[[__nodiscard__]] inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 _InputIter
prev(_InputIter __x, typename iterator_traits<_InputIter>::difference_type __n) {
   27c70:	55                   	push   %rbp
   27c71:	48 89 e5             	mov    %rsp,%rbp
   27c74:	48 83 ec 10          	sub    $0x10,%rsp
   27c78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27c7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  // Calling `advance` with a negative value on a non-bidirectional iterator is a no-op in the current implementation.
  // Note that this check duplicates the similar check in `std::advance`.
  _LIBCPP_ASSERT_PEDANTIC(__n <= 0 || __has_bidirectional_iterator_category<_InputIter>::value,
                          "Attempt to prev(it, n) with a positive n on a non-bidirectional iterator");
  std::advance(__x, -__n);
   27c80:	31 c0                	xor    %eax,%eax
   27c82:	89 c6                	mov    %eax,%esi
   27c84:	48 2b 75 f0          	sub    -0x10(%rbp),%rsi
   27c88:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   27c8c:	e8 1f fb ff ff       	call   277b0 <_ZNSt3__17advanceB8nn210000IPcllTnNS_9enable_ifIXsr11is_integralIT1_EE5valueEiE4typeELi0EEEvRT_T0_>
  return __x;
   27c91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27c95:	48 83 c4 10          	add    $0x10,%rsp
   27c99:	5d                   	pop    %rbp
   27c9a:	c3                   	ret
   27c9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000027ca0 <_ZNSt3__124__copy_move_unwrap_itersB8nn210000INS_20__move_backward_implINS_17_ClassicAlgPolicyEEEPcS4_S4_TnNS_9enable_ifIXsr12__can_rewrapIT0_T2_EE5valueEiE4typeELi0EEENS_4pairIS6_S7_EES6_T1_S7_>:
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
   27ca0:	55                   	push   %rbp
   27ca1:	48 89 e5             	mov    %rsp,%rbp
   27ca4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   27cab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27caf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27cb3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  auto __range  = std::__unwrap_range(__first, std::move(__last));
   27cb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27cbb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   27cc2:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   27cc6:	e8 b5 19 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27ccb:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   27cd2:	48 8b 30             	mov    (%rax),%rsi
   27cd5:	e8 96 93 ff ff       	call   21070 <_ZNSt3__114__unwrap_rangeB8nn210000IPcS1_EEDaT_T0_>
   27cda:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   27cde:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   27ce2:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   27ce9:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   27ced:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
   27cf1:	e8 8a 19 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27cf6:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
   27cfd:	48 8b 00             	mov    (%rax),%rax
   27d00:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   27d07:	e8 74 19 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27d0c:	48 8b 00             	mov    (%rax),%rax
   27d0f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   27d13:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   27d17:	e8 04 1d ff ff       	call   19a20 <_ZNSt3__113__unwrap_iterB8nn210000IPcNS_18__unwrap_iter_implIS1_Lb1EEETnNS_9enable_ifIXsr21is_copy_constructibleIT_EE5valueEiE4typeELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIS5_EEEES5_>
   27d1c:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   27d23:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   27d27:	48 89 c1             	mov    %rax,%rcx
   27d2a:	48 8d 7d b7          	lea    -0x49(%rbp),%rdi
   27d2e:	e8 8d 00 00 00       	call   27dc0 <_ZNKSt3__120__move_backward_implINS_17_ClassicAlgPolicyEEclB8nn210000IccTnNS_9enable_ifIXsr38__can_lower_move_assignment_to_memmoveIT_T0_EE5valueEiE4typeELi0EEENS_4pairIPS5_PS6_EESA_SA_SB_>
   27d33:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   27d37:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   27d3b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   27d3f:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   27d43:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   27d47:	e8 34 19 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27d4c:	48 8b 00             	mov    (%rax),%rax
   27d4f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   27d53:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   27d57:	e8 24 19 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27d5c:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
   27d60:	48 8b 30             	mov    (%rax),%rsi
   27d63:	e8 38 94 ff ff       	call   211a0 <_ZNSt3__114__rewrap_rangeB8nn210000IPcS1_S1_EET0_S2_T1_>
   27d68:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   27d6c:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
   27d70:	e8 0b 19 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27d75:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   27d79:	48 8b 00             	mov    (%rax),%rax
   27d7c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   27d80:	e8 fb 18 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27d85:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   27d89:	48 8b 30             	mov    (%rax),%rsi
   27d8c:	e8 ff 4b ff ff       	call   1c990 <_ZNSt3__113__rewrap_iterB8nn210000IPcS1_NS_18__unwrap_iter_implIS1_Lb1EEEEET_S4_T0_>
   27d91:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   27d95:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
   27d99:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
   27d9d:	e8 7e fc ff ff       	call   27a20 <_ZNSt3__19make_pairB8nn210000IPcS1_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS3_Iu7__decayIT0_EE4typeEEEOS4_OS8_>
   27da2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   27da6:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   27daa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27dae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27db2:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   27db9:	5d                   	pop    %rbp
   27dba:	c3                   	ret
   27dbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000027dc0 <_ZNKSt3__120__move_backward_implINS_17_ClassicAlgPolicyEEclB8nn210000IccTnNS_9enable_ifIXsr38__can_lower_move_assignment_to_memmoveIT_T0_EE5valueEiE4typeELi0EEENS_4pairIPS5_PS6_EESA_SA_SB_>:
  operator()(_In* __first, _In* __last, _Out* __result) const {
   27dc0:	55                   	push   %rbp
   27dc1:	48 89 e5             	mov    %rsp,%rbp
   27dc4:	48 83 ec 30          	sub    $0x30,%rsp
   27dc8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27dcc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27dd0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   27dd4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    return std::__copy_backward_trivial_impl(__first, __last, __result);
   27dd8:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   27ddc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   27de0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   27de4:	e8 17 00 00 00       	call   27e00 <_ZNSt3__128__copy_backward_trivial_implB8nn210000IccEENS_4pairIPT_PT0_EES3_S3_S5_>
   27de9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   27ded:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   27df1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27df5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27df9:	48 83 c4 30          	add    $0x30,%rsp
   27dfd:	5d                   	pop    %rbp
   27dfe:	c3                   	ret
   27dff:	90                   	nop

0000000000027e00 <_ZNSt3__128__copy_backward_trivial_implB8nn210000IccEENS_4pairIPT_PT0_EES3_S3_S5_>:
__copy_backward_trivial_impl(_In* __first, _In* __last, _Out* __result) {
   27e00:	55                   	push   %rbp
   27e01:	48 89 e5             	mov    %rsp,%rbp
   27e04:	48 83 ec 30          	sub    $0x30,%rsp
   27e08:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27e0c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27e10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  const size_t __n = static_cast<size_t>(__last - __first);
   27e14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   27e18:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   27e1c:	48 29 c8             	sub    %rcx,%rax
   27e1f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  __result -= __n;
   27e23:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   27e27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   27e2b:	48 29 c8             	sub    %rcx,%rax
   27e2e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  std::__constexpr_memmove(__result, __first, __element_count(__n));
   27e32:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   27e36:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   27e3a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   27e3e:	e8 9d fc ff ff       	call   27ae0 <_ZNSt3__119__constexpr_memmoveB8nn210000IccEEPT_S2_PT0_NS_15__element_countE>
   27e43:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   27e47:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  return std::make_pair(__last, __result);
   27e4b:	e8 20 00 00 00       	call   27e70 <_ZNSt3__19make_pairB8nn210000IRPcS2_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS4_Iu7__decayIT0_EE4typeEEEOS5_OS9_>
   27e50:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   27e54:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   27e58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27e5c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27e60:	48 83 c4 30          	add    $0x30,%rsp
   27e64:	5d                   	pop    %rbp
   27e65:	c3                   	ret
   27e66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27e6d:	00 00 00 

0000000000027e70 <_ZNSt3__19make_pairB8nn210000IRPcS2_EENS_4pairINS_18__unwrap_referenceIu7__decayIT_EE4typeENS4_Iu7__decayIT0_EE4typeEEEOS5_OS9_>:
make_pair(_T1&& __t1, _T2&& __t2) {
   27e70:	55                   	push   %rbp
   27e71:	48 89 e5             	mov    %rsp,%rbp
   27e74:	48 83 ec 30          	sub    $0x30,%rsp
   27e78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27e7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return pair<__unwrap_ref_decay_t<_T1>, __unwrap_ref_decay_t<_T2> >(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
   27e80:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   27e84:	e8 67 f6 ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   27e89:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   27e8d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   27e91:	e8 5a f6 ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   27e96:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   27e9a:	48 89 c2             	mov    %rax,%rdx
   27e9d:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   27ea1:	e8 6a f5 ff ff       	call   27410 <_ZNSt3__14pairIPcS1_EC2B8nn210000IRS1_S4_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS6_OS7_>
   27ea6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27eaa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27eae:	48 83 c4 30          	add    $0x30,%rsp
   27eb2:	5d                   	pop    %rbp
   27eb3:	c3                   	ret
   27eb4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27ebb:	00 00 00 
   27ebe:	66 90                	xchg   %ax,%ax

0000000000027ec0 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE8distanceB8nn210000IPcEENS_15iterator_traitsIT_E15difference_typeES6_S6_>:
  distance(_Iter __first, _Iter __last) {
   27ec0:	55                   	push   %rbp
   27ec1:	48 89 e5             	mov    %rsp,%rbp
   27ec4:	48 83 ec 10          	sub    $0x10,%rsp
   27ec8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27ecc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return std::distance(__first, __last);
   27ed0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   27ed4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   27ed8:	e8 f3 00 00 00       	call   27fd0 <_ZNSt3__18distanceB8nn210000IPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_>
   27edd:	48 83 c4 10          	add    $0x10,%rsp
   27ee1:	5d                   	pop    %rbp
   27ee2:	c3                   	ret
   27ee3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27eea:	00 00 00 
   27eed:	0f 1f 00             	nopl   (%rax)

0000000000027ef0 <_ZNSt3__113__swap_rangesB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_S2_EENS_4pairIT0_T2_EES4_T1_S5_T3_>:
}

// 2+2 iterators: the shorter size will be used.
template <class _AlgPolicy, class _ForwardIterator1, class _Sentinel1, class _ForwardIterator2, class _Sentinel2>
_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 pair<_ForwardIterator1, _ForwardIterator2>
__swap_ranges(_ForwardIterator1 __first1, _Sentinel1 __last1, _ForwardIterator2 __first2, _Sentinel2 __last2) {
   27ef0:	55                   	push   %rbp
   27ef1:	48 89 e5             	mov    %rsp,%rbp
   27ef4:	48 83 ec 40          	sub    $0x40,%rsp
   27ef8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   27efc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   27f00:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   27f04:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  while (__first1 != __last1 && __first2 != __last2) {
   27f08:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   27f0c:	31 c0                	xor    %eax,%eax
   27f0e:	48 3b 4d e0          	cmp    -0x20(%rbp),%rcx
   27f12:	88 45 cf             	mov    %al,-0x31(%rbp)
   27f15:	74 0e                	je     27f25 <_ZNSt3__113__swap_rangesB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_S2_EENS_4pairIT0_T2_EES4_T1_S5_T3_+0x35>
   27f17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   27f1b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   27f1f:	0f 95 c0             	setne  %al
   27f22:	88 45 cf             	mov    %al,-0x31(%rbp)
   27f25:	8a 45 cf             	mov    -0x31(%rbp),%al
   27f28:	a8 01                	test   $0x1,%al
   27f2a:	75 02                	jne    27f2e <_ZNSt3__113__swap_rangesB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_S2_EENS_4pairIT0_T2_EES4_T1_S5_T3_+0x3e>
   27f2c:	eb 27                	jmp    27f55 <_ZNSt3__113__swap_rangesB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_S2_EENS_4pairIT0_T2_EES4_T1_S5_T3_+0x65>
   27f2e:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   27f32:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
    _IterOps<_AlgPolicy>::iter_swap(__first1, __first2);
   27f36:	e8 e5 00 00 00       	call   28020 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE9iter_swapB8nn210000IRPcS5_EEvOT_OT0_>
    ++__first1;
   27f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27f3f:	48 83 c0 01          	add    $0x1,%rax
   27f43:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ++__first2;
   27f47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   27f4b:	48 83 c0 01          	add    $0x1,%rax
   27f4f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  while (__first1 != __last1 && __first2 != __last2) {
   27f53:	eb b3                	jmp    27f08 <_ZNSt3__113__swap_rangesB8nn210000INS_17_ClassicAlgPolicyEPcS2_S2_S2_EENS_4pairIT0_T2_EES4_T1_S5_T3_+0x18>
   27f55:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  }

  return pair<_ForwardIterator1, _ForwardIterator2>(std::move(__first1), std::move(__first2));
   27f59:	e8 22 17 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27f5e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   27f62:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   27f66:	e8 15 17 ff ff       	call   19680 <_ZNSt3__14moveB8nn210000IRPcEEOu20__remove_reference_tIT_EOS3_>
   27f6b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   27f6f:	48 89 c2             	mov    %rax,%rdx
   27f72:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   27f76:	e8 c5 92 ff ff       	call   21240 <_ZNSt3__14pairIPcS1_EC2B8nn210000IS1_S1_TnNS_9enable_ifIXclsr10_CheckArgsE23__is_pair_constructibleIT_T0_EEEiE4typeELi0EEEOS5_OS6_>
   27f7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27f7f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   27f83:	48 83 c4 40          	add    $0x40,%rsp
   27f87:	5d                   	pop    %rbp
   27f88:	c3                   	ret
   27f89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000027f90 <_ZNSt3__110__algo_gcdB8nn210000IlEET_S1_S1_>:
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX17 _Integral __algo_gcd(_Integral __x, _Integral __y) {
   27f90:	55                   	push   %rbp
   27f91:	48 89 e5             	mov    %rsp,%rbp
   27f94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27f98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    _Integral __t = __x % __y;
   27f9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27fa0:	48 99                	cqto
   27fa2:	48 f7 7d f0          	idivq  -0x10(%rbp)
   27fa6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    __x           = __y;
   27faa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   27fae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    __y           = __t;
   27fb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   27fb6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  } while (__y);
   27fba:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   27fbf:	75 db                	jne    27f9c <_ZNSt3__110__algo_gcdB8nn210000IlEET_S1_S1_+0xc>
  return __x;
   27fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   27fc5:	5d                   	pop    %rbp
   27fc6:	c3                   	ret
   27fc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   27fce:	00 00 

0000000000027fd0 <_ZNSt3__18distanceB8nn210000IPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_>:
distance(_InputIter __first, _InputIter __last) {
   27fd0:	55                   	push   %rbp
   27fd1:	48 89 e5             	mov    %rsp,%rbp
   27fd4:	48 83 ec 20          	sub    $0x20,%rsp
   27fd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   27fdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return std::__distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category());
   27fe0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   27fe4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   27fe8:	e8 13 00 00 00       	call   28000 <_ZNSt3__110__distanceB8nn210000IPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE>
   27fed:	48 83 c4 20          	add    $0x20,%rsp
   27ff1:	5d                   	pop    %rbp
   27ff2:	c3                   	ret
   27ff3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   27ffa:	00 00 00 
   27ffd:	0f 1f 00             	nopl   (%rax)

0000000000028000 <_ZNSt3__110__distanceB8nn210000IPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE>:
__distance(_RandIter __first, _RandIter __last, random_access_iterator_tag) {
   28000:	55                   	push   %rbp
   28001:	48 89 e5             	mov    %rsp,%rbp
   28004:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   28008:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  return __last - __first;
   2800c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28010:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   28014:	48 29 c8             	sub    %rcx,%rax
   28017:	5d                   	pop    %rbp
   28018:	c3                   	ret
   28019:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000028020 <_ZNSt3__18_IterOpsINS_17_ClassicAlgPolicyEE9iter_swapB8nn210000IRPcS5_EEvOT_OT0_>:
  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 static void iter_swap(_Iter1&& __a, _Iter2&& __b) {
   28020:	55                   	push   %rbp
   28021:	48 89 e5             	mov    %rsp,%rbp
   28024:	48 83 ec 20          	sub    $0x20,%rsp
   28028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2802c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    std::iter_swap(std::forward<_Iter1>(__a), std::forward<_Iter2>(__b));
   28030:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28034:	e8 b7 f4 ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   28039:	48 8b 00             	mov    (%rax),%rax
   2803c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   28040:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   28044:	e8 a7 f4 ff ff       	call   274f0 <_ZNSt3__17forwardB8nn210000IRPcEEOT_Ru20__remove_reference_tIS3_E>
   28049:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2804d:	48 8b 30             	mov    (%rax),%rsi
   28050:	e8 0b 00 00 00       	call   28060 <_ZNSt3__19iter_swapB8nn210000IPcS1_EEvT_T0_>
  }
   28055:	48 83 c4 20          	add    $0x20,%rsp
   28059:	5d                   	pop    %rbp
   2805a:	c3                   	ret
   2805b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000028060 <_ZNSt3__19iter_swapB8nn210000IPcS1_EEvT_T0_>:
_LIBCPP_BEGIN_NAMESPACE_STD

template <class _ForwardIterator1, class _ForwardIterator2>
inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    //                                  _NOEXCEPT_(_NOEXCEPT_(swap(*__a, *__b)))
    _NOEXCEPT_(_NOEXCEPT_(swap(*std::declval<_ForwardIterator1>(), *std::declval<_ForwardIterator2>()))) {
   28060:	55                   	push   %rbp
   28061:	48 89 e5             	mov    %rsp,%rbp
   28064:	48 83 ec 10          	sub    $0x10,%rsp
   28068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2806c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  swap(*__a, *__b);
   28070:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28074:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   28078:	e8 13 00 00 00       	call   28090 <_ZNSt3__14swapB8nn210000IcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_>
}
   2807d:	48 83 c4 10          	add    $0x10,%rsp
   28081:	5d                   	pop    %rbp
   28082:	c3                   	ret
   28083:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2808a:	00 00 00 
   2808d:	0f 1f 00             	nopl   (%rax)

0000000000028090 <_ZNSt3__14swapB8nn210000IcEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS2_EE5valueEvE4typeERS2_S5_>:
using __swap_result_t _LIBCPP_NODEBUG = void;
#endif

template <class _Tp>
inline _LIBCPP_HIDE_FROM_ABI __swap_result_t<_Tp> _LIBCPP_CONSTEXPR_SINCE_CXX20 swap(_Tp& __x, _Tp& __y)
    _NOEXCEPT_(is_nothrow_move_constructible<_Tp>::value&& is_nothrow_move_assignable<_Tp>::value) {
   28090:	55                   	push   %rbp
   28091:	48 89 e5             	mov    %rsp,%rbp
   28094:	48 83 ec 20          	sub    $0x20,%rsp
   28098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2809c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  _Tp __t(std::move(__x));
   280a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   280a4:	e8 f7 f7 ff ff       	call   278a0 <_ZNSt3__14moveB8nn210000IRcEEOu20__remove_reference_tIT_EOS2_>
   280a9:	8a 00                	mov    (%rax),%al
   280ab:	88 45 ef             	mov    %al,-0x11(%rbp)
  __x = std::move(__y);
   280ae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   280b2:	e8 e9 f7 ff ff       	call   278a0 <_ZNSt3__14moveB8nn210000IRcEEOu20__remove_reference_tIT_EOS2_>
   280b7:	8a 08                	mov    (%rax),%cl
   280b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   280bd:	88 08                	mov    %cl,(%rax)
   280bf:	48 8d 7d ef          	lea    -0x11(%rbp),%rdi
  __y = std::move(__t);
   280c3:	e8 d8 f7 ff ff       	call   278a0 <_ZNSt3__14moveB8nn210000IRcEEOu20__remove_reference_tIT_EOS2_>
   280c8:	8a 08                	mov    (%rax),%cl
   280ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   280ce:	88 08                	mov    %cl,(%rax)
}
   280d0:	48 83 c4 20          	add    $0x20,%rsp
   280d4:	5d                   	pop    %rbp
   280d5:	c3                   	ret
   280d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   280dd:	00 00 00 

00000000000280e0 <_ZNSt3__13maxB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_>:
max(_LIBCPP_LIFETIMEBOUND const _Tp& __a, _LIBCPP_LIFETIMEBOUND const _Tp& __b, _Compare __comp) {
   280e0:	55                   	push   %rbp
   280e1:	48 89 e5             	mov    %rsp,%rbp
   280e4:	48 83 ec 20          	sub    $0x20,%rsp
   280e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   280ec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  return __comp(__a, __b) ? __b : __a;
   280f0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   280f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   280f8:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
   280fc:	e8 ef 6f ff ff       	call   1f0f0 <_ZNKSt3__16__lessIvvEclB8nn210000IiiEEbRKT_RKT0_>
   28101:	a8 01                	test   $0x1,%al
   28103:	75 02                	jne    28107 <_ZNSt3__13maxB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_+0x27>
   28105:	eb 0a                	jmp    28111 <_ZNSt3__13maxB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_+0x31>
   28107:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2810b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2810f:	eb 08                	jmp    28119 <_ZNSt3__13maxB8nn210000IiNS_6__lessIvvEEEERKT_S5_S5_T0_+0x39>
   28111:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   28115:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   28119:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2811d:	48 83 c4 20          	add    $0x20,%rsp
   28121:	5d                   	pop    %rbp
   28122:	c3                   	ret
   28123:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2812a:	00 00 00 
   2812d:	0f 1f 00             	nopl   (%rax)

0000000000028130 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPKcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SE_T2_>:
__copy(_Iterator __first, _Iterator __last, output_iterator<const _OutCharT&> auto __out_it) -> decltype(__out_it) {
   28130:	55                   	push   %rbp
   28131:	48 89 e5             	mov    %rsp,%rbp
   28134:	48 83 ec 40          	sub    $0x40,%rsp
   28138:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   2813c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   28140:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  return __formatter::__copy(basic_string_view{__first, __last}, std::move(__out_it));
   28144:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   28148:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2814c:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   28150:	e8 4b 41 ff ff       	call   1c2a0 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ITkNS_19contiguous_iteratorEPKcTkNS_18sized_sentinel_forITL0__EES6_Qaa9is_same_vINS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS8_EEEEE5valueENS_26indirectly_readable_traitsISB_EESC_E4type10value_typeET_Ent16is_convertible_vITL0_0_mEEESI_T0_>
   28155:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   28159:	e8 42 1a ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   2815e:	48 8b 00             	mov    (%rax),%rax
   28161:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   28165:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28169:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2816d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   28171:	e8 7a 41 ff ff       	call   1c2f0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIT_NS_11char_traitsISD_EEEET1_>
   28176:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2817a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2817e:	48 83 c4 40          	add    $0x40,%rsp
   28182:	5d                   	pop    %rbp
   28183:	c3                   	ret
   28184:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2818b:	00 00 00 
   2818e:	66 90                	xchg   %ax,%ax

0000000000028190 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRdEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   28190:	55                   	push   %rbp
   28191:	48 89 e5             	mov    %rsp,%rbp
   28194:	48 83 ec 20          	sub    $0x20,%rsp
   28198:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2819c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   281a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   281a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   281a8:	dd 00                	fldl   (%rax)
   281aa:	48 89 e0             	mov    %rsp,%rax
   281ad:	dd 18                	fstpl  (%rax)
   281af:	e8 0c 00 00 00       	call   281c0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIdEEDaSC_>
   281b4:	48 83 c4 20          	add    $0x20,%rsp
   281b8:	5d                   	pop    %rbp
   281b9:	c3                   	ret
   281ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000281c0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIdEEDaSC_>:
        [&](auto __arg) {
   281c0:	55                   	push   %rbp
   281c1:	48 89 e5             	mov    %rsp,%rbp
   281c4:	48 83 ec 40          	sub    $0x40,%rsp
   281c8:	dd 45 10             	fldl   0x10(%rbp)
   281cb:	dd d8                	fstp   %st(0)
   281cd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   281d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   281d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   281d9:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   281dd:	e8 6e 00 00 00       	call   28250 <_ZNSt3__19formatterIdcEC2Ev>
   281e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
            if (__parse)
   281e6:	48 8b 40 10          	mov    0x10(%rax),%rax
   281ea:	f6 00 01             	testb  $0x1,(%rax)
   281ed:	74 23                	je     28212 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIdEEDaSC_+0x52>
   281ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   281f3:	48 8b 08             	mov    (%rax),%rcx
   281f6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   281fa:	48 8b 30             	mov    (%rax),%rsi
   281fd:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   28201:	e8 2a d8 ff ff       	call   25a30 <_ZNSt3__126__formatter_floating_pointIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   28206:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   2820a:	48 89 c6             	mov    %rax,%rsi
   2820d:	e8 0e 1c ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   28212:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   28216:	48 8b 48 08          	mov    0x8(%rax),%rcx
   2821a:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   2821e:	dd 45 10             	fldl   0x10(%rbp)
   28221:	48 8b 70 08          	mov    0x8(%rax),%rsi
   28225:	48 89 e0             	mov    %rsp,%rax
   28228:	dd 18                	fstpl  (%rax)
   2822a:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   2822e:	e8 3d 00 00 00       	call   28270 <_ZNKSt3__126__formatter_floating_pointIcE6formatB8nn210000ITkNS_14floating_pointEdNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   28233:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   28237:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2823b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2823f:	e8 1c 19 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   28244:	48 83 c4 40          	add    $0x40,%rsp
   28248:	5d                   	pop    %rbp
   28249:	c3                   	ret
   2824a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000028250 <_ZNSt3__19formatterIdcEC2Ev>:
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<double, _CharT> : public __formatter_floating_point<_CharT> {};
   28250:	55                   	push   %rbp
   28251:	48 89 e5             	mov    %rsp,%rbp
   28254:	48 83 ec 10          	sub    $0x10,%rsp
   28258:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2825c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28260:	e8 7b d8 ff ff       	call   25ae0 <_ZNSt3__126__formatter_floating_pointIcEC2Ev>
   28265:	48 83 c4 10          	add    $0x10,%rsp
   28269:	5d                   	pop    %rbp
   2826a:	c3                   	ret
   2826b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000028270 <_ZNKSt3__126__formatter_floating_pointIcE6formatB8nn210000ITkNS_14floating_pointEdNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   28270:	55                   	push   %rbp
   28271:	48 89 e5             	mov    %rsp,%rbp
   28274:	48 83 ec 40          	sub    $0x40,%rsp
   28278:	dd 45 10             	fldl   0x10(%rbp)
   2827b:	dd d8                	fstp   %st(0)
   2827d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   28281:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   28285:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    return __formatter::__format_floating_point(__value, __ctx, __parser_.__get_parsed_std_specifications(__ctx));
   28289:	dd 45 10             	fldl   0x10(%rbp)
   2828c:	dd 5d c8             	fstpl  -0x38(%rbp)
   2828f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28293:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   28297:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   2829b:	e8 70 38 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   282a0:	dd 45 c8             	fldl   -0x38(%rbp)
   282a3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   282a7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   282ab:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   282af:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   282b3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   282b7:	48 89 e0             	mov    %rsp,%rax
   282ba:	dd 18                	fstpl  (%rax)
   282bc:	e8 0f 00 00 00       	call   282d0 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>
   282c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   282c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   282c9:	48 83 c4 40          	add    $0x40,%rsp
   282cd:	5d                   	pop    %rbp
   282ce:	c3                   	ret
   282cf:	90                   	nop

00000000000282d0 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>:
__format_floating_point(_Tp __value, _FormatContext& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) {
   282d0:	55                   	push   %rbp
   282d1:	48 89 e5             	mov    %rsp,%rbp
   282d4:	48 81 ec a0 05 00 00 	sub    $0x5a0,%rsp
   282db:	dd 45 10             	fldl   0x10(%rbp)
   282de:	dd d8                	fstp   %st(0)
   282e0:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   282e4:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   282e8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
  bool __negative = std::signbit(__value);
   282ec:	dd 45 10             	fldl   0x10(%rbp)
   282ef:	48 89 e0             	mov    %rsp,%rax
   282f2:	dd 18                	fstpl  (%rax)
   282f4:	e8 27 06 00 00       	call   28920 <_ZNSt3__16__math7signbitB8nn210000IvEEbd>
   282f9:	88 45 df             	mov    %al,-0x21(%rbp)
  if (!std::isfinite(__value)) [[unlikely]]
   282fc:	dd 45 10             	fldl   0x10(%rbp)
   282ff:	48 89 e0             	mov    %rsp,%rax
   28302:	dd 18                	fstpl  (%rax)
   28304:	e8 37 06 00 00       	call   28940 <_ZNSt3__16__math8isfiniteB8nn210000Ed>
   28309:	a8 01                	test   $0x1,%al
   2830b:	75 61                	jne    2836e <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x9e>
    return __formatter::__format_floating_point_non_finite(__ctx.out(), __specs, __negative, std::isnan(__value));
   2830d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   28311:	e8 fa 17 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   28316:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2831a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2831e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   28322:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   28326:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2832a:	8a 45 df             	mov    -0x21(%rbp),%al
   2832d:	88 85 e7 fa ff ff    	mov    %al,-0x519(%rbp)
   28333:	dd 45 10             	fldl   0x10(%rbp)
   28336:	48 89 e0             	mov    %rsp,%rax
   28339:	dd 18                	fstpl  (%rax)
   2833b:	e8 40 06 00 00       	call   28980 <_ZNSt3__16__math5isnanB8nn210000EUa9enable_ifILb1EEd>
   28340:	8a 8d e7 fa ff ff    	mov    -0x519(%rbp),%cl
   28346:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   2834a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   2834e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   28352:	0f b6 c9             	movzbl %cl,%ecx
   28355:	83 e1 01             	and    $0x1,%ecx
   28358:	44 0f b6 c0          	movzbl %al,%r8d
   2835c:	41 83 e0 01          	and    $0x1,%r8d
   28360:	e8 ab de ff ff       	call   26210 <_ZNSt3__111__formatter34__format_floating_point_non_finiteB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEET_S7_NS_13__format_spec23__parsed_specificationsIT0_EEbb>
   28365:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   28369:	e9 9f 05 00 00       	jmp    2890d <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x63d>
  if (__negative)
   2836e:	f6 45 df 01          	testb  $0x1,-0x21(%rbp)
   28372:	74 08                	je     2837c <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0xac>
    __value = -__value;
   28374:	8a 45 17             	mov    0x17(%rbp),%al
   28377:	04 80                	add    $0x80,%al
   28379:	88 45 17             	mov    %al,0x17(%rbp)
  __float_buffer<_Fp> __buffer(__specs.__precision_);
   2837c:	8b 75 f0             	mov    -0x10(%rbp),%esi
   2837f:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
   28386:	e8 15 06 00 00       	call   289a0 <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei>
      __buffer, __value, __negative, (__specs.__has_precision()), __specs.__std_.__sign_, __specs.__std_.__type_);
   2838b:	dd 45 10             	fldl   0x10(%rbp)
   2838e:	dd 9d dc fa ff ff    	fstpl  -0x524(%rbp)
   28394:	8a 45 df             	mov    -0x21(%rbp),%al
   28397:	88 85 e6 fa ff ff    	mov    %al,-0x51a(%rbp)
   2839d:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   283a1:	e8 5a e3 ff ff       	call   26700 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE15__has_precisionB8nn210000Ev>
   283a6:	dd 85 dc fa ff ff    	fldl   -0x524(%rbp)
   283ac:	8a 8d e6 fa ff ff    	mov    -0x51a(%rbp),%cl
   283b2:	40 8a 75 e8          	mov    -0x18(%rbp),%sil
   283b6:	40 c0 ee 03          	shr    $0x3,%sil
   283ba:	40 80 e6 03          	and    $0x3,%sil
   283be:	8a 55 e9             	mov    -0x17(%rbp),%dl
  __float_result __result = __formatter::__format_buffer(
   283c1:	48 89 e7             	mov    %rsp,%rdi
   283c4:	dd 1f                	fstpl  (%rdi)
   283c6:	44 0f b6 c6          	movzbl %sil,%r8d
   283ca:	44 0f b6 ca          	movzbl %dl,%r9d
   283ce:	0f b6 d1             	movzbl %cl,%edx
   283d1:	83 e2 01             	and    $0x1,%edx
   283d4:	0f b6 c8             	movzbl %al,%ecx
   283d7:	83 e1 01             	and    $0x1,%ecx
   283da:	48 8d bd 88 fb ff ff 	lea    -0x478(%rbp),%rdi
   283e1:	48 8d b5 a8 fb ff ff 	lea    -0x458(%rbp),%rsi
   283e8:	e8 73 06 00 00       	call   28a60 <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE>
  if (__specs.__std_.__alternate_form_) {
   283ed:	8a 45 e8             	mov    -0x18(%rbp),%al
   283f0:	c0 e8 05             	shr    $0x5,%al
   283f3:	24 01                	and    $0x1,%al
   283f5:	a8 01                	test   $0x1,%al
   283f7:	0f 84 85 01 00 00    	je     28582 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b2>
    if (__result.__radix_point == __result.__last) {
   283fd:	48 8b 85 90 fb ff ff 	mov    -0x470(%rbp),%rax
   28404:	48 3b 85 a0 fb ff ff 	cmp    -0x460(%rbp),%rax
   2840b:	75 56                	jne    28463 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x193>
      *__result.__last++ = '.';
   2840d:	48 8b 85 a0 fb ff ff 	mov    -0x460(%rbp),%rax
   28414:	48 89 c1             	mov    %rax,%rcx
   28417:	48 83 c1 01          	add    $0x1,%rcx
   2841b:	48 89 8d a0 fb ff ff 	mov    %rcx,-0x460(%rbp)
   28422:	c6 00 2e             	movb   $0x2e,(%rax)
      std::rotate(__result.__exponent, __result.__last - 1, __result.__last);
   28425:	48 8b bd 98 fb ff ff 	mov    -0x468(%rbp),%rdi
   2842c:	48 8b b5 a0 fb ff ff 	mov    -0x460(%rbp),%rsi
   28433:	48 83 c6 ff          	add    $0xffffffffffffffff,%rsi
   28437:	48 8b 95 a0 fb ff ff 	mov    -0x460(%rbp),%rdx
   2843e:	e8 dd e2 ff ff       	call   26720 <_ZNSt3__16rotateB8nn210000IPcEET_S2_S2_S2_>
      __result.__radix_point = __result.__exponent;
   28443:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
   2844a:	48 89 85 90 fb ff ff 	mov    %rax,-0x470(%rbp)
      ++__result.__exponent;
   28451:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
   28458:	48 83 c0 01          	add    $0x1,%rax
   2845c:	48 89 85 98 fb ff ff 	mov    %rax,-0x468(%rbp)
    bool __is_general = __specs.__std_.__type_ == __format_spec::__type::__general_lower_case ||
   28463:	b0 01                	mov    $0x1,%al
   28465:	80 7d e9 11          	cmpb   $0x11,-0x17(%rbp)
   28469:	88 85 db fa ff ff    	mov    %al,-0x525(%rbp)
   2846f:	74 0d                	je     2847e <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1ae>
                        __specs.__std_.__type_ == __format_spec::__type::__general_upper_case;
   28471:	80 7d e9 12          	cmpb   $0x12,-0x17(%rbp)
   28475:	0f 94 c0             	sete   %al
   28478:	88 85 db fa ff ff    	mov    %al,-0x525(%rbp)
   2847e:	8a 85 db fa ff ff    	mov    -0x525(%rbp),%al
    bool __is_general = __specs.__std_.__type_ == __format_spec::__type::__general_lower_case ||
   28484:	24 01                	and    $0x1,%al
   28486:	88 85 87 fb ff ff    	mov    %al,-0x479(%rbp)
    if (__is_general) {
   2848c:	f6 85 87 fb ff ff 01 	testb  $0x1,-0x479(%rbp)
   28493:	0f 84 e7 00 00 00    	je     28580 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b0>
      int __p = std::max<int>(1, (__specs.__has_precision() ? __specs.__precision_ : 6));
   28499:	c7 85 7c fb ff ff 01 	movl   $0x1,-0x484(%rbp)
   284a0:	00 00 00 
   284a3:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   284a7:	e8 54 e2 ff ff       	call   26700 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE15__has_precisionB8nn210000Ev>
   284ac:	a8 01                	test   $0x1,%al
   284ae:	75 02                	jne    284b2 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1e2>
   284b0:	eb 0b                	jmp    284bd <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1ed>
   284b2:	8b 45 f0             	mov    -0x10(%rbp),%eax
   284b5:	89 85 d4 fa ff ff    	mov    %eax,-0x52c(%rbp)
   284bb:	eb 0d                	jmp    284ca <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1fa>
   284bd:	b8 06 00 00 00       	mov    $0x6,%eax
   284c2:	89 85 d4 fa ff ff    	mov    %eax,-0x52c(%rbp)
   284c8:	eb 00                	jmp    284ca <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1fa>
   284ca:	8b 85 d4 fa ff ff    	mov    -0x52c(%rbp),%eax
   284d0:	89 85 78 fb ff ff    	mov    %eax,-0x488(%rbp)
   284d6:	48 8d bd 7c fb ff ff 	lea    -0x484(%rbp),%rdi
   284dd:	48 8d b5 78 fb ff ff 	lea    -0x488(%rbp),%rsi
   284e4:	e8 97 e2 ff ff       	call   26780 <_ZNSt3__13maxB8nn210000IiEERKT_S3_S3_>
   284e9:	8b 00                	mov    (%rax),%eax
   284eb:	89 85 80 fb ff ff    	mov    %eax,-0x480(%rbp)
      if (__result.__exponent == __result.__last)
   284f1:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
   284f8:	48 3b 85 a0 fb ff ff 	cmp    -0x460(%rbp),%rax
   284ff:	75 23                	jne    28524 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x254>
        __p -= __result.__radix_point - __result.__integral;
   28501:	48 8b 8d 90 fb ff ff 	mov    -0x470(%rbp),%rcx
   28508:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
   2850f:	48 29 c1             	sub    %rax,%rcx
   28512:	48 63 85 80 fb ff ff 	movslq -0x480(%rbp),%rax
   28519:	48 29 c8             	sub    %rcx,%rax
   2851c:	89 85 80 fb ff ff    	mov    %eax,-0x480(%rbp)
   28522:	eb 0f                	jmp    28533 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x263>
        --__p;
   28524:	8b 85 80 fb ff ff    	mov    -0x480(%rbp),%eax
   2852a:	83 c0 ff             	add    $0xffffffff,%eax
   2852d:	89 85 80 fb ff ff    	mov    %eax,-0x480(%rbp)
      ptrdiff_t __precision = (__result.__exponent - __result.__radix_point) - 1;
   28533:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
   2853a:	48 8b 8d 90 fb ff ff 	mov    -0x470(%rbp),%rcx
   28541:	48 29 c8             	sub    %rcx,%rax
   28544:	48 83 e8 01          	sub    $0x1,%rax
   28548:	48 89 85 70 fb ff ff 	mov    %rax,-0x490(%rbp)
      if (__precision < __p)
   2854f:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
   28556:	48 63 8d 80 fb ff ff 	movslq -0x480(%rbp),%rcx
   2855d:	48 39 c8             	cmp    %rcx,%rax
   28560:	7d 1c                	jge    2857e <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2ae>
        __buffer.__add_trailing_zeros(__p - __precision);
   28562:	48 63 85 80 fb ff ff 	movslq -0x480(%rbp),%rax
   28569:	48 2b 85 70 fb ff ff 	sub    -0x490(%rbp),%rax
   28570:	89 c6                	mov    %eax,%esi
   28572:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
   28579:	e8 e2 07 00 00       	call   28d60 <_ZNSt3__111__formatter14__float_bufferIdE20__add_trailing_zerosB8nn210000Ei>
    }
   2857e:	eb 00                	jmp    28580 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b0>
  }
   28580:	eb 00                	jmp    28582 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b2>
  ptrdiff_t __size         = __result.__last - __buffer.begin();
   28582:	48 8b 85 a0 fb ff ff 	mov    -0x460(%rbp),%rax
   28589:	48 89 85 c8 fa ff ff 	mov    %rax,-0x538(%rbp)
   28590:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
   28597:	e8 e4 07 00 00       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   2859c:	48 89 c1             	mov    %rax,%rcx
   2859f:	48 8b 85 c8 fa ff ff 	mov    -0x538(%rbp),%rax
   285a6:	48 29 c8             	sub    %rcx,%rax
   285a9:	48 89 85 68 fb ff ff 	mov    %rax,-0x498(%rbp)
   285b0:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
  int __num_trailing_zeros = __buffer.__num_trailing_zeros();
   285b7:	e8 e4 07 00 00       	call   28da0 <_ZNKSt3__111__formatter14__float_bufferIdE20__num_trailing_zerosB8nn210000Ev>
   285bc:	89 85 64 fb ff ff    	mov    %eax,-0x49c(%rbp)
  if (__size + __num_trailing_zeros >= __specs.__width_) {
   285c2:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
   285c9:	48 63 8d 64 fb ff ff 	movslq -0x49c(%rbp),%rcx
   285d0:	48 01 c8             	add    %rcx,%rax
   285d3:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
   285d7:	48 39 c8             	cmp    %rcx,%rax
   285da:	0f 8c 58 01 00 00    	jl     28738 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x468>
    if (__num_trailing_zeros && __result.__exponent != __result.__last)
   285e0:	83 bd 64 fb ff ff 00 	cmpl   $0x0,-0x49c(%rbp)
   285e7:	0f 84 ce 00 00 00    	je     286bb <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x3eb>
   285ed:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
   285f4:	48 3b 85 a0 fb ff ff 	cmp    -0x460(%rbp),%rax
   285fb:	0f 84 ba 00 00 00    	je     286bb <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x3eb>
          __result.__exponent,
   28601:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
   28608:	48 89 85 b8 fa ff ff 	mov    %rax,-0x548(%rbp)
          __result.__last,
   2860f:	48 8b 85 a0 fb ff ff 	mov    -0x460(%rbp),%rax
   28616:	48 89 85 c0 fa ff ff 	mov    %rax,-0x540(%rbp)
   2861d:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
          __formatter::__fill(__formatter::__copy(__buffer.begin(), __result.__exponent, __ctx.out()),
   28624:	e8 57 07 00 00       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   28629:	48 89 85 a8 fa ff ff 	mov    %rax,-0x558(%rbp)
   28630:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
   28637:	48 89 85 b0 fa ff ff 	mov    %rax,-0x550(%rbp)
   2863e:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   28642:	e8 c9 14 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   28647:	48 8b bd a8 fa ff ff 	mov    -0x558(%rbp),%rdi
   2864e:	48 8b b5 b0 fa ff ff 	mov    -0x550(%rbp),%rsi
   28655:	48 89 85 48 fb ff ff 	mov    %rax,-0x4b8(%rbp)
   2865c:	48 8b 95 48 fb ff ff 	mov    -0x4b8(%rbp),%rdx
   28663:	e8 58 5a ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   28668:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
                              __num_trailing_zeros,
   2866f:	48 63 b5 64 fb ff ff 	movslq -0x49c(%rbp),%rsi
          __formatter::__fill(__formatter::__copy(__buffer.begin(), __result.__exponent, __ctx.out()),
   28676:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
   2867d:	ba 30 00 00 00       	mov    $0x30,%edx
   28682:	e8 b9 46 ff ff       	call   1cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>
   28687:	48 8b bd b8 fa ff ff 	mov    -0x548(%rbp),%rdi
   2868e:	48 8b b5 c0 fa ff ff 	mov    -0x540(%rbp),%rsi
   28695:	48 89 85 58 fb ff ff 	mov    %rax,-0x4a8(%rbp)
      return __formatter::__copy(
   2869c:	48 8b 95 58 fb ff ff 	mov    -0x4a8(%rbp),%rdx
   286a3:	e8 18 5a ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   286a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   286ac:	c7 85 44 fb ff ff 01 	movl   $0x1,-0x4bc(%rbp)
   286b3:	00 00 00 
   286b6:	e9 46 02 00 00       	jmp    28901 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x631>
   286bb:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
        __formatter::__copy(__buffer.begin(), __result.__last, __ctx.out()), __num_trailing_zeros, _CharT('0'));
   286c2:	e8 b9 06 00 00       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   286c7:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
   286ce:	48 8b 85 a0 fb ff ff 	mov    -0x460(%rbp),%rax
   286d5:	48 89 85 a0 fa ff ff 	mov    %rax,-0x560(%rbp)
   286dc:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   286e0:	e8 2b 14 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   286e5:	48 8b bd 98 fa ff ff 	mov    -0x568(%rbp),%rdi
   286ec:	48 8b b5 a0 fa ff ff 	mov    -0x560(%rbp),%rsi
   286f3:	48 89 85 30 fb ff ff 	mov    %rax,-0x4d0(%rbp)
   286fa:	48 8b 95 30 fb ff ff 	mov    -0x4d0(%rbp),%rdx
   28701:	e8 ba 59 ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   28706:	48 89 85 38 fb ff ff 	mov    %rax,-0x4c8(%rbp)
   2870d:	48 63 b5 64 fb ff ff 	movslq -0x49c(%rbp),%rsi
    return __formatter::__fill(
   28714:	48 8b bd 38 fb ff ff 	mov    -0x4c8(%rbp),%rdi
   2871b:	ba 30 00 00 00       	mov    $0x30,%edx
   28720:	e8 1b 46 ff ff       	call   1cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>
   28725:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   28729:	c7 85 44 fb ff ff 01 	movl   $0x1,-0x4bc(%rbp)
   28730:	00 00 00 
   28733:	e9 c9 01 00 00       	jmp    28901 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x631>
  auto __out_it = __ctx.out();
   28738:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   2873c:	e8 cf 13 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   28741:	48 89 85 28 fb ff ff 	mov    %rax,-0x4d8(%rbp)
   28748:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
  char* __first = __buffer.begin();
   2874f:	e8 2c 06 00 00       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   28754:	48 89 85 20 fb ff ff 	mov    %rax,-0x4e0(%rbp)
  if (__specs.__alignment_ == __format_spec::__alignment ::__zero_padding) {
   2875b:	8a 45 e8             	mov    -0x18(%rbp),%al
   2875e:	24 07                	and    $0x7,%al
   28760:	3c 04                	cmp    $0x4,%al
   28762:	75 69                	jne    287cd <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x4fd>
    if (__first != __result.__integral)
   28764:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
   2876b:	48 3b 85 88 fb ff ff 	cmp    -0x478(%rbp),%rax
   28772:	74 4b                	je     287bf <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x4ef>
      *__out_it++ = *__first++;
   28774:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
   2877b:	48 89 85 90 fa ff ff 	mov    %rax,-0x570(%rbp)
   28782:	48 83 c0 01          	add    $0x1,%rax
   28786:	48 89 85 20 fb ff ff 	mov    %rax,-0x4e0(%rbp)
   2878d:	31 c0                	xor    %eax,%eax
   2878f:	48 8d bd 28 fb ff ff 	lea    -0x4d8(%rbp),%rdi
   28796:	31 f6                	xor    %esi,%esi
   28798:	e8 53 15 ff ff       	call   19cf0 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEppB8nn210000Ei>
   2879d:	48 89 85 18 fb ff ff 	mov    %rax,-0x4e8(%rbp)
   287a4:	48 8d bd 18 fb ff ff 	lea    -0x4e8(%rbp),%rdi
   287ab:	e8 60 15 ff ff       	call   19d10 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEdeB8nn210000Ev>
   287b0:	48 8b b5 90 fa ff ff 	mov    -0x570(%rbp),%rsi
   287b7:	48 89 c7             	mov    %rax,%rdi
   287ba:	e8 61 15 ff ff       	call   19d20 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEaSB8nn210000ERKc>
    __specs.__alignment_      = __format_spec::__alignment::__right;
   287bf:	8a 45 e8             	mov    -0x18(%rbp),%al
   287c2:	24 f8                	and    $0xf8,%al
   287c4:	0c 03                	or     $0x3,%al
   287c6:	88 45 e8             	mov    %al,-0x18(%rbp)
    __specs.__fill_.__data[0] = _CharT('0');
   287c9:	c6 45 f4 30          	movb   $0x30,-0xc(%rbp)
  if (__num_trailing_zeros)
   287cd:	83 bd 64 fb ff ff 00 	cmpl   $0x0,-0x49c(%rbp)
   287d4:	0f 84 a2 00 00 00    	je     2887c <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x5ac>
        __first, __result.__last, std::move(__out_it), __specs, __size, __result.__exponent, __num_trailing_zeros);
   287da:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
   287e1:	48 89 85 80 fa ff ff 	mov    %rax,-0x580(%rbp)
   287e8:	48 8b 85 a0 fb ff ff 	mov    -0x460(%rbp),%rax
   287ef:	48 89 85 88 fa ff ff 	mov    %rax,-0x578(%rbp)
   287f6:	48 8d bd 28 fb ff ff 	lea    -0x4d8(%rbp),%rdi
   287fd:	e8 9e 13 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   28802:	48 8b bd 80 fa ff ff 	mov    -0x580(%rbp),%rdi
   28809:	48 8b b5 88 fa ff ff 	mov    -0x578(%rbp),%rsi
   28810:	48 8b 00             	mov    (%rax),%rax
   28813:	48 89 85 10 fb ff ff 	mov    %rax,-0x4f0(%rbp)
   2881a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2881e:	48 89 85 00 fb ff ff 	mov    %rax,-0x500(%rbp)
   28825:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   28829:	48 89 85 08 fb ff ff 	mov    %rax,-0x4f8(%rbp)
   28830:	4c 8b 8d 68 fb ff ff 	mov    -0x498(%rbp),%r9
   28837:	4c 8b 95 98 fb ff ff 	mov    -0x468(%rbp),%r10
   2883e:	4c 63 9d 64 fb ff ff 	movslq -0x49c(%rbp),%r11
    return __formatter::__write_using_trailing_zeros(
   28845:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
   2884c:	48 8b 8d 00 fb ff ff 	mov    -0x500(%rbp),%rcx
   28853:	4c 8b 85 08 fb ff ff 	mov    -0x4f8(%rbp),%r8
   2885a:	48 89 e0             	mov    %rsp,%rax
   2885d:	4c 89 58 08          	mov    %r11,0x8(%rax)
   28861:	4c 89 10             	mov    %r10,(%rax)
   28864:	e8 a7 df ff ff       	call   26810 <_ZNSt3__111__formatter28__write_using_trailing_zerosB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_EPS4_SC_T1_NS_13__format_spec23__parsed_specificationsIT0_EEmSC_m>
   28869:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2886d:	c7 85 44 fb ff ff 01 	movl   $0x1,-0x4bc(%rbp)
   28874:	00 00 00 
   28877:	e9 85 00 00 00       	jmp    28901 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEdcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x631>
  return __formatter::__write(__first, __result.__last, std::move(__out_it), __specs, __size);
   2887c:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
   28883:	48 89 85 70 fa ff ff 	mov    %rax,-0x590(%rbp)
   2888a:	48 8b 85 a0 fb ff ff 	mov    -0x460(%rbp),%rax
   28891:	48 89 85 78 fa ff ff 	mov    %rax,-0x588(%rbp)
   28898:	48 8d bd 28 fb ff ff 	lea    -0x4d8(%rbp),%rdi
   2889f:	e8 fc 12 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   288a4:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
   288ab:	48 8b b5 78 fa ff ff 	mov    -0x588(%rbp),%rsi
   288b2:	48 8b 00             	mov    (%rax),%rax
   288b5:	48 89 85 f8 fa ff ff 	mov    %rax,-0x508(%rbp)
   288bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   288c0:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
   288c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   288cb:	48 89 85 f0 fa ff ff 	mov    %rax,-0x510(%rbp)
   288d2:	4c 8b 8d 68 fb ff ff 	mov    -0x498(%rbp),%r9
   288d9:	48 8b 95 f8 fa ff ff 	mov    -0x508(%rbp),%rdx
   288e0:	48 8b 8d e8 fa ff ff 	mov    -0x518(%rbp),%rcx
   288e7:	4c 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%r8
   288ee:	e8 2d 68 ff ff       	call   1f120 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   288f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   288f7:	c7 85 44 fb ff ff 01 	movl   $0x1,-0x4bc(%rbp)
   288fe:	00 00 00 
   28901:	48 8d bd a8 fb ff ff 	lea    -0x458(%rbp),%rdi
}
   28908:	e8 b3 04 00 00       	call   28dc0 <_ZNSt3__111__formatter14__float_bufferIdED2B8nn210000Ev>
   2890d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28911:	48 81 c4 a0 05 00 00 	add    $0x5a0,%rsp
   28918:	5d                   	pop    %rbp
   28919:	c3                   	ret
   2891a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000028920 <_ZNSt3__16__math7signbitB8nn210000IvEEbd>:
[[__nodiscard__]] inline _LIBCPP_SIGNBIT_CONSTEXPR _LIBCPP_HIDE_FROM_ABI bool signbit(double __x) _NOEXCEPT {
   28920:	55                   	push   %rbp
   28921:	48 89 e5             	mov    %rsp,%rbp
   28924:	dd 45 10             	fldl   0x10(%rbp)
   28927:	dd d8                	fstp   %st(0)
  return __builtin_signbit(__x);
   28929:	dd 45 10             	fldl   0x10(%rbp)
   2892c:	dd 5d f8             	fstpl  -0x8(%rbp)
   2892f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28933:	48 83 f8 00          	cmp    $0x0,%rax
   28937:	0f 9c c0             	setl   %al
   2893a:	24 01                	and    $0x1,%al
   2893c:	5d                   	pop    %rbp
   2893d:	c3                   	ret
   2893e:	66 90                	xchg   %ax,%ax

0000000000028940 <_ZNSt3__16__math8isfiniteB8nn210000Ed>:
[[__nodiscard__]] inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI bool isfinite(double __x) _NOEXCEPT {
   28940:	55                   	push   %rbp
   28941:	48 89 e5             	mov    %rsp,%rbp
   28944:	dd 45 10             	fldl   0x10(%rbp)
   28947:	dd d8                	fstp   %st(0)
  return __builtin_isfinite(__x);
   28949:	dd 45 10             	fldl   0x10(%rbp)
   2894c:	dd 5d f8             	fstpl  -0x8(%rbp)
   2894f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28953:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
   2895a:	ff ff 7f 
   2895d:	48 21 c8             	and    %rcx,%rax
   28960:	48 b9 00 00 00 00 00 	movabs $0x7ff0000000000000,%rcx
   28967:	00 f0 7f 
   2896a:	48 29 c8             	sub    %rcx,%rax
   2896d:	0f 9c c0             	setl   %al
   28970:	24 01                	and    $0x1,%al
   28972:	5d                   	pop    %rbp
   28973:	c3                   	ret
   28974:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2897b:	00 00 00 
   2897e:	66 90                	xchg   %ax,%ax

0000000000028980 <_ZNSt3__16__math5isnanB8nn210000EUa9enable_ifILb1EEd>:
[[__nodiscard__]] inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI
#ifdef _LIBCPP_PREFERRED_OVERLOAD
_LIBCPP_PREFERRED_OVERLOAD
#endif
    bool
    isnan(double __x) _NOEXCEPT {
   28980:	55                   	push   %rbp
   28981:	48 89 e5             	mov    %rsp,%rbp
   28984:	dd 45 10             	fldl   0x10(%rbp)
   28987:	dd d8                	fstp   %st(0)
  return __builtin_isnan(__x);
   28989:	dd 45 10             	fldl   0x10(%rbp)
   2898c:	df e8                	fucomip %st(0),%st
   2898e:	0f 9a c0             	setp   %al
   28991:	24 01                	and    $0x1,%al
   28993:	5d                   	pop    %rbp
   28994:	c3                   	ret
   28995:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2899c:	00 00 00 
   2899f:	90                   	nop

00000000000289a0 <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei>:
      : __precision_(__precision != -1 ? __precision : _Traits::__max_fractional) {
   289a0:	55                   	push   %rbp
   289a1:	48 89 e5             	mov    %rsp,%rbp
   289a4:	48 83 ec 20          	sub    $0x20,%rsp
   289a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   289ac:	89 75 f4             	mov    %esi,-0xc(%rbp)
   289af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   289b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   289b7:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%rbp)
   289bb:	74 08                	je     289c5 <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei+0x25>
   289bd:	8b 45 f4             	mov    -0xc(%rbp),%eax
   289c0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   289c3:	eb 0a                	jmp    289cf <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei+0x2f>
   289c5:	b8 32 04 00 00       	mov    $0x432,%eax
   289ca:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   289cd:	eb 00                	jmp    289cf <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei+0x2f>
   289cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   289d3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
   289d6:	89 08                	mov    %ecx,(%rax)
  int __num_trailing_zeros_{0};
   289d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    if (__precision_ > _Traits::__max_fractional) {
   289df:	81 38 32 04 00 00    	cmpl   $0x432,(%rax)
   289e5:	7e 15                	jle    289fc <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei+0x5c>
   289e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      __num_trailing_zeros_ = __precision_ - _Traits::__max_fractional;
   289eb:	8b 08                	mov    (%rax),%ecx
   289ed:	81 e9 32 04 00 00    	sub    $0x432,%ecx
   289f3:	89 48 04             	mov    %ecx,0x4(%rax)
      __precision_          = _Traits::__max_fractional;
   289f6:	c7 00 32 04 00 00    	movl   $0x432,(%rax)
   289fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    __size_ = __formatter::__float_buffer_size<_Fp>(__precision_);
   28a00:	8b 38                	mov    (%rax),%edi
   28a02:	e8 09 04 00 00       	call   28e10 <_ZNSt3__111__formatter19__float_buffer_sizeB8nn210000ITkNS_14floating_pointEdEEmi>
   28a07:	48 89 c1             	mov    %rax,%rcx
   28a0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28a0e:	48 89 48 08          	mov    %rcx,0x8(%rax)
    if (__size_ > _Traits::__stack_buffer_size)
   28a12:	48 81 78 08 00 04 00 	cmpq   $0x400,0x8(%rax)
   28a19:	00 
   28a1a:	76 27                	jbe    28a43 <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei+0xa3>
   28a1c:	48 8d 7d f3          	lea    -0xd(%rbp),%rdi
      __begin_ = allocator<char>{}.allocate(__size_);
   28a20:	e8 0b 30 ff ff       	call   1ba30 <_ZNSt3__19allocatorIcEC2B8nn210000Ev>
   28a25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28a29:	48 8b 70 08          	mov    0x8(%rax),%rsi
   28a2d:	48 8d 7d f3          	lea    -0xd(%rbp),%rdi
   28a31:	e8 5a 03 ff ff       	call   18d90 <_ZNSt3__19allocatorIcE8allocateB8nn210000Em>
   28a36:	48 89 c1             	mov    %rax,%rcx
   28a39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28a3d:	48 89 48 10          	mov    %rcx,0x10(%rax)
   28a41:	eb 0f                	jmp    28a52 <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei+0xb2>
   28a43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      __begin_ = __buffer_;
   28a47:	48 89 c1             	mov    %rax,%rcx
   28a4a:	48 83 c1 18          	add    $0x18,%rcx
   28a4e:	48 89 48 10          	mov    %rcx,0x10(%rax)
  }
   28a52:	48 83 c4 20          	add    $0x20,%rsp
   28a56:	5d                   	pop    %rbp
   28a57:	c3                   	ret
   28a58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   28a5f:	00 

0000000000028a60 <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE>:
    __format_spec::__type __type) {
   28a60:	55                   	push   %rbp
   28a61:	48 89 e5             	mov    %rsp,%rbp
   28a64:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   28a6b:	44 89 45 bc          	mov    %r8d,-0x44(%rbp)
   28a6f:	89 c8                	mov    %ecx,%eax
   28a71:	8b 4d bc             	mov    -0x44(%rbp),%ecx
   28a74:	89 45 c0             	mov    %eax,-0x40(%rbp)
   28a77:	89 d0                	mov    %edx,%eax
   28a79:	8b 55 c0             	mov    -0x40(%rbp),%edx
   28a7c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   28a7f:	48 89 f0             	mov    %rsi,%rax
   28a82:	8b 75 c4             	mov    -0x3c(%rbp),%esi
   28a85:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   28a89:	49 89 f8             	mov    %rdi,%r8
   28a8c:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   28a90:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
   28a94:	44 88 c8             	mov    %r9b,%al
   28a97:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   28a9b:	dd 45 10             	fldl   0x10(%rbp)
   28a9e:	dd d8                	fstp   %st(0)
   28aa0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   28aa4:	40 80 e6 01          	and    $0x1,%sil
   28aa8:	40 88 75 f7          	mov    %sil,-0x9(%rbp)
   28aac:	80 e2 01             	and    $0x1,%dl
   28aaf:	88 55 f6             	mov    %dl,-0xa(%rbp)
   28ab2:	88 4d f5             	mov    %cl,-0xb(%rbp)
   28ab5:	88 45 f4             	mov    %al,-0xc(%rbp)
  char* __first = __formatter::__insert_sign(__buffer.begin(), __negative, __sign);
   28ab8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28abc:	e8 bf 02 00 00       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   28ac1:	48 89 c7             	mov    %rax,%rdi
   28ac4:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   28ac8:	0f b6 75 f7          	movzbl -0x9(%rbp),%esi
   28acc:	83 e6 01             	and    $0x1,%esi
   28acf:	e8 ec 54 ff ff       	call   1dfc0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE>
   28ad4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  switch (__type) {
   28ad8:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   28adc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   28ae0:	48 83 e8 12          	sub    $0x12,%rax
   28ae4:	0f 87 5b 02 00 00    	ja     28d45 <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2e5>
   28aea:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   28aee:	48 8d 05 eb 61 00 00 	lea    0x61eb(%rip),%rax        # 2ece0 <_ZNSt3__16__itoa11__pow10_128E+0x500>
   28af5:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   28af9:	48 01 c8             	add    %rcx,%rax
   28afc:	ff e0                	jmp    *%rax
    if (__has_precision)
   28afe:	f6 45 f6 01          	testb  $0x1,-0xa(%rbp)
   28b02:	74 37                	je     28b3b <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0xdb>
      return __formatter::__format_buffer_general_lower_case(__buffer, __value, __buffer.__precision(), __first);
   28b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28b08:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   28b0c:	dd 45 10             	fldl   0x10(%rbp)
   28b0f:	dd 5d a8             	fstpl  -0x58(%rbp)
   28b12:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28b16:	e8 35 04 00 00       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   28b1b:	dd 45 a8             	fldl   -0x58(%rbp)
   28b1e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28b22:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   28b26:	89 c2                	mov    %eax,%edx
   28b28:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   28b2c:	48 89 e0             	mov    %rsp,%rax
   28b2f:	dd 18                	fstpl  (%rax)
   28b31:	e8 fa 02 00 00       	call   28e30 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   28b36:	e9 0f 02 00 00       	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
   28b3b:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
      return __formatter::__format_buffer_default(__buffer, __value, __first);
   28b3f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   28b43:	dd 45 10             	fldl   0x10(%rbp)
   28b46:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   28b4a:	48 89 e0             	mov    %rsp,%rax
   28b4d:	dd 18                	fstpl  (%rax)
   28b4f:	e8 0c 04 00 00       	call   28f60 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc>
   28b54:	e9 f1 01 00 00       	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
        __buffer, __value, __has_precision ? __buffer.__precision() : -1, __first);
   28b59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28b5d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   28b61:	dd 45 10             	fldl   0x10(%rbp)
   28b64:	dd 5d a0             	fstpl  -0x60(%rbp)
   28b67:	f6 45 f6 01          	testb  $0x1,-0xa(%rbp)
   28b6b:	74 0e                	je     28b7b <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x11b>
   28b6d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28b71:	e8 da 03 00 00       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   28b76:	89 45 94             	mov    %eax,-0x6c(%rbp)
   28b79:	eb 0a                	jmp    28b85 <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x125>
   28b7b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   28b80:	89 45 94             	mov    %eax,-0x6c(%rbp)
   28b83:	eb 00                	jmp    28b85 <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x125>
   28b85:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   28b89:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28b8d:	dd 45 a0             	fldl   -0x60(%rbp)
   28b90:	8b 55 94             	mov    -0x6c(%rbp),%edx
   28b93:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    return __formatter::__format_buffer_hexadecimal_lower_case(
   28b97:	48 89 e0             	mov    %rsp,%rax
   28b9a:	dd 18                	fstpl  (%rax)
   28b9c:	e8 6f 04 00 00       	call   29010 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   28ba1:	e9 a4 01 00 00       	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
        __buffer, __value, __has_precision ? __buffer.__precision() : -1, __first);
   28ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28baa:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   28bae:	dd 45 10             	fldl   0x10(%rbp)
   28bb1:	dd 5d 8c             	fstpl  -0x74(%rbp)
   28bb4:	f6 45 f6 01          	testb  $0x1,-0xa(%rbp)
   28bb8:	74 11                	je     28bcb <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x16b>
   28bba:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28bbe:	e8 8d 03 00 00       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   28bc3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
   28bc9:	eb 0d                	jmp    28bd8 <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x178>
   28bcb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   28bd0:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
   28bd6:	eb 00                	jmp    28bd8 <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x178>
   28bd8:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   28bdc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28be0:	dd 45 8c             	fldl   -0x74(%rbp)
   28be3:	8b 95 7c ff ff ff    	mov    -0x84(%rbp),%edx
   28be9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    return __formatter::__format_buffer_hexadecimal_upper_case(
   28bed:	48 89 e0             	mov    %rsp,%rax
   28bf0:	dd 18                	fstpl  (%rax)
   28bf2:	e8 39 05 00 00       	call   29130 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_upper_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   28bf7:	e9 4e 01 00 00       	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
    return __formatter::__format_buffer_scientific_lower_case(__buffer, __value, __buffer.__precision(), __first);
   28bfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28c00:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   28c07:	dd 45 10             	fldl   0x10(%rbp)
   28c0a:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
   28c10:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28c14:	e8 37 03 00 00       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   28c19:	dd 85 68 ff ff ff    	fldl   -0x98(%rbp)
   28c1f:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28c23:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
   28c2a:	89 c2                	mov    %eax,%edx
   28c2c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   28c30:	48 89 e0             	mov    %rsp,%rax
   28c33:	dd 18                	fstpl  (%rax)
   28c35:	e8 66 05 00 00       	call   291a0 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   28c3a:	e9 0b 01 00 00       	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
    return __formatter::__format_buffer_scientific_upper_case(__buffer, __value, __buffer.__precision(), __first);
   28c3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28c43:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   28c4a:	dd 45 10             	fldl   0x10(%rbp)
   28c4d:	dd 9d 58 ff ff ff    	fstpl  -0xa8(%rbp)
   28c53:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28c57:	e8 f4 02 00 00       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   28c5c:	dd 85 58 ff ff ff    	fldl   -0xa8(%rbp)
   28c62:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28c66:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   28c6d:	89 c2                	mov    %eax,%edx
   28c6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   28c73:	48 89 e0             	mov    %rsp,%rax
   28c76:	dd 18                	fstpl  (%rax)
   28c78:	e8 e3 05 00 00       	call   29260 <_ZNSt3__111__formatter37__format_buffer_scientific_upper_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   28c7d:	e9 c8 00 00 00       	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
    return __formatter::__format_buffer_fixed(__buffer, __value, __buffer.__precision(), __first);
   28c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28c86:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   28c8d:	dd 45 10             	fldl   0x10(%rbp)
   28c90:	dd 9d 48 ff ff ff    	fstpl  -0xb8(%rbp)
   28c96:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28c9a:	e8 b1 02 00 00       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   28c9f:	dd 85 48 ff ff ff    	fldl   -0xb8(%rbp)
   28ca5:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28ca9:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
   28cb0:	89 c2                	mov    %eax,%edx
   28cb2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   28cb6:	48 89 e0             	mov    %rsp,%rax
   28cb9:	dd 18                	fstpl  (%rax)
   28cbb:	e8 f0 05 00 00       	call   292b0 <_ZNSt3__111__formatter21__format_buffer_fixedB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   28cc0:	e9 85 00 00 00       	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
    return __formatter::__format_buffer_general_lower_case(__buffer, __value, __buffer.__precision(), __first);
   28cc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28cc9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   28cd0:	dd 45 10             	fldl   0x10(%rbp)
   28cd3:	dd 9d 38 ff ff ff    	fstpl  -0xc8(%rbp)
   28cd9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28cdd:	e8 6e 02 00 00       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   28ce2:	dd 85 38 ff ff ff    	fldl   -0xc8(%rbp)
   28ce8:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28cec:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
   28cf3:	89 c2                	mov    %eax,%edx
   28cf5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   28cf9:	48 89 e0             	mov    %rsp,%rax
   28cfc:	dd 18                	fstpl  (%rax)
   28cfe:	e8 2d 01 00 00       	call   28e30 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   28d03:	eb 45                	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
    return __formatter::__format_buffer_general_upper_case(__buffer, __value, __buffer.__precision(), __first);
   28d05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28d09:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   28d10:	dd 45 10             	fldl   0x10(%rbp)
   28d13:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%rbp)
   28d19:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28d1d:	e8 2e 02 00 00       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   28d22:	dd 85 28 ff ff ff    	fldl   -0xd8(%rbp)
   28d28:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28d2c:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
   28d33:	89 c2                	mov    %eax,%edx
   28d35:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   28d39:	48 89 e0             	mov    %rsp,%rax
   28d3c:	dd 18                	fstpl  (%rax)
   28d3e:	e8 0d 06 00 00       	call   29350 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   28d43:	eb 05                	jmp    28d4a <_ZNSt3__111__formatter15__format_bufferB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x2ea>
    __libcpp_unreachable();
   28d45:	e8 26 1a ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
   28d4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
   28d4e:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
   28d55:	5d                   	pop    %rbp
   28d56:	c3                   	ret
   28d57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   28d5e:	00 00 

0000000000028d60 <_ZNSt3__111__formatter14__float_bufferIdE20__add_trailing_zerosB8nn210000Ei>:
  _LIBCPP_HIDE_FROM_ABI void __add_trailing_zeros(int __zeros) { __num_trailing_zeros_ += __zeros; }
   28d60:	55                   	push   %rbp
   28d61:	48 89 e5             	mov    %rsp,%rbp
   28d64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   28d68:	89 75 f4             	mov    %esi,-0xc(%rbp)
   28d6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28d6f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   28d72:	03 48 04             	add    0x4(%rax),%ecx
   28d75:	89 48 04             	mov    %ecx,0x4(%rax)
   28d78:	5d                   	pop    %rbp
   28d79:	c3                   	ret
   28d7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000028d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI char* begin() const { return __begin_; }
   28d80:	55                   	push   %rbp
   28d81:	48 89 e5             	mov    %rsp,%rbp
   28d84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   28d88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28d8c:	48 8b 40 10          	mov    0x10(%rax),%rax
   28d90:	5d                   	pop    %rbp
   28d91:	c3                   	ret
   28d92:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   28d99:	00 00 00 
   28d9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000028da0 <_ZNKSt3__111__formatter14__float_bufferIdE20__num_trailing_zerosB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI int __num_trailing_zeros() const { return __num_trailing_zeros_; }
   28da0:	55                   	push   %rbp
   28da1:	48 89 e5             	mov    %rsp,%rbp
   28da4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   28da8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28dac:	8b 40 04             	mov    0x4(%rax),%eax
   28daf:	5d                   	pop    %rbp
   28db0:	c3                   	ret
   28db1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   28db8:	00 00 00 
   28dbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000028dc0 <_ZNSt3__111__formatter14__float_bufferIdED2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI ~__float_buffer() {
   28dc0:	55                   	push   %rbp
   28dc1:	48 89 e5             	mov    %rsp,%rbp
   28dc4:	48 83 ec 20          	sub    $0x20,%rsp
   28dc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   28dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28dd0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (__size_ > _Traits::__stack_buffer_size)
   28dd4:	48 81 78 08 00 04 00 	cmpq   $0x400,0x8(%rax)
   28ddb:	00 
   28ddc:	76 1e                	jbe    28dfc <_ZNSt3__111__formatter14__float_bufferIdED2B8nn210000Ev+0x3c>
   28dde:	48 8d 7d f7          	lea    -0x9(%rbp),%rdi
      allocator<char>{}.deallocate(__begin_, __size_);
   28de2:	e8 49 2c ff ff       	call   1ba30 <_ZNSt3__19allocatorIcEC2B8nn210000Ev>
   28de7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28deb:	48 8b 70 10          	mov    0x10(%rax),%rsi
   28def:	48 8b 50 08          	mov    0x8(%rax),%rdx
   28df3:	48 8d 7d f7          	lea    -0x9(%rbp),%rdi
   28df7:	e8 d4 fd fe ff       	call   18bd0 <_ZNSt3__19allocatorIcE10deallocateB8nn210000EPcm>
  }
   28dfc:	48 83 c4 20          	add    $0x20,%rsp
   28e00:	5d                   	pop    %rbp
   28e01:	c3                   	ret
   28e02:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   28e09:	00 00 00 
   28e0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000028e10 <_ZNSt3__111__formatter19__float_buffer_sizeB8nn210000ITkNS_14floating_pointEdEEmi>:
_LIBCPP_HIDE_FROM_ABI constexpr size_t __float_buffer_size(int __precision) {
   28e10:	55                   	push   %rbp
   28e11:	48 89 e5             	mov    %rsp,%rbp
   28e14:	89 7d fc             	mov    %edi,-0x4(%rbp)
  return 4 + _Traits::__max_integral + __precision + _Traits::__max_fractional_value;
   28e17:	8b 45 fc             	mov    -0x4(%rbp),%eax
   28e1a:	05 38 01 00 00       	add    $0x138,%eax
   28e1f:	83 c0 04             	add    $0x4,%eax
   28e22:	48 98                	cltq
   28e24:	5d                   	pop    %rbp
   28e25:	c3                   	ret
   28e26:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   28e2d:	00 00 00 

0000000000028e30 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_general_lower_case(__float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   28e30:	55                   	push   %rbp
   28e31:	48 89 e5             	mov    %rsp,%rbp
   28e34:	48 83 ec 50          	sub    $0x50,%rsp
   28e38:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   28e3c:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   28e40:	dd 45 10             	fldl   0x10(%rbp)
   28e43:	dd d8                	fstp   %st(0)
   28e45:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   28e49:	89 55 f4             	mov    %edx,-0xc(%rbp)
   28e4c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __buffer.__remove_trailing_zeros();
   28e50:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28e54:	e8 57 05 00 00       	call   293b0 <_ZNSt3__111__formatter14__float_bufferIdE23__remove_trailing_zerosB8nn210000Ev>
   28e59:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  __result.__integral = __integral;
   28e5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28e61:	48 89 07             	mov    %rax,(%rdi)
  __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::general, __precision);
   28e64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28e68:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   28e6c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28e70:	e8 ab 05 00 00       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   28e75:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   28e79:	48 89 c6             	mov    %rax,%rsi
   28e7c:	dd 45 10             	fldl   0x10(%rbp)
   28e7f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   28e82:	48 89 e0             	mov    %rsp,%rax
   28e85:	dd 18                	fstpl  (%rax)
   28e87:	ba 03 00 00 00       	mov    $0x3,%edx
   28e8c:	e8 3f 05 00 00       	call   293d0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_NS_12chars_formatEi>
   28e91:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   28e95:	48 89 47 18          	mov    %rax,0x18(%rdi)
  char* __first = __integral + 1;
   28e99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28e9d:	48 83 c0 01          	add    $0x1,%rax
   28ea1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (__first == __result.__last) {
   28ea5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   28ea9:	48 3b 47 18          	cmp    0x18(%rdi),%rax
   28ead:	75 16                	jne    28ec5 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x95>
   28eaf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    __result.__radix_point = __result.__last;
   28eb3:	48 8b 48 18          	mov    0x18(%rax),%rcx
   28eb7:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __result.__last;
   28ebb:	48 8b 48 18          	mov    0x18(%rax),%rcx
   28ebf:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   28ec3:	eb 79                	jmp    28f3e <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10e>
   28ec5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    __result.__exponent = __formatter::__find_exponent(__first, __result.__last);
   28ec9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   28ecd:	48 8b 70 18          	mov    0x18(%rax),%rsi
   28ed1:	e8 4a e1 ff ff       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   28ed6:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   28eda:	48 89 41 10          	mov    %rax,0x10(%rcx)
    if (__result.__exponent != __result.__last)
   28ede:	48 8b 41 10          	mov    0x10(%rcx),%rax
   28ee2:	48 3b 41 18          	cmp    0x18(%rcx),%rax
   28ee6:	74 30                	je     28f18 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xe8>
      __result.__radix_point = *__first == '.' ? __first : __result.__last;
   28ee8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   28eec:	0f be 00             	movsbl (%rax),%eax
   28eef:	83 f8 2e             	cmp    $0x2e,%eax
   28ef2:	75 0a                	jne    28efe <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xce>
   28ef4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   28ef8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   28efc:	eb 0c                	jmp    28f0a <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xda>
   28efe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   28f02:	48 8b 40 18          	mov    0x18(%rax),%rax
   28f06:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   28f0a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   28f0e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   28f12:	48 89 48 08          	mov    %rcx,0x8(%rax)
   28f16:	eb 24                	jmp    28f3c <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10c>
   28f18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
      __result.__radix_point = std::find(__first, __result.__last, '.');
   28f1c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   28f20:	48 8b 70 18          	mov    0x18(%rax),%rsi
   28f24:	c6 45 df 2e          	movb   $0x2e,-0x21(%rbp)
   28f28:	48 8d 55 df          	lea    -0x21(%rbp),%rdx
   28f2c:	e8 9f e1 ff ff       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   28f31:	48 89 c1             	mov    %rax,%rcx
   28f34:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   28f38:	48 89 48 08          	mov    %rcx,0x8(%rax)
   28f3c:	eb 00                	jmp    28f3e <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10e>
   28f3e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  return __result;
   28f42:	48 83 c4 50          	add    $0x50,%rsp
   28f46:	5d                   	pop    %rbp
   28f47:	c3                   	ret
   28f48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   28f4f:	00 

0000000000028f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI int __precision() const { return __precision_; }
   28f50:	55                   	push   %rbp
   28f51:	48 89 e5             	mov    %rsp,%rbp
   28f54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   28f58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28f5c:	8b 00                	mov    (%rax),%eax
   28f5e:	5d                   	pop    %rbp
   28f5f:	c3                   	ret

0000000000028f60 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc>:
__format_buffer_default(const __float_buffer<_Fp>& __buffer, _Tp __value, char* __integral) {
   28f60:	55                   	push   %rbp
   28f61:	48 89 e5             	mov    %rsp,%rbp
   28f64:	48 83 ec 40          	sub    $0x40,%rsp
   28f68:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   28f6c:	48 89 f8             	mov    %rdi,%rax
   28f6f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   28f73:	dd 45 10             	fldl   0x10(%rbp)
   28f76:	dd d8                	fstp   %st(0)
   28f78:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   28f7c:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  __result.__integral = __integral;
   28f80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   28f84:	48 89 07             	mov    %rax,(%rdi)
  __result.__last     = __formatter::__to_buffer(__integral, __buffer.end(), __value);
   28f87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   28f8b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   28f8f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   28f93:	e8 88 04 00 00       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   28f98:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   28f9c:	48 89 c6             	mov    %rax,%rsi
   28f9f:	dd 45 10             	fldl   0x10(%rbp)
   28fa2:	48 89 e0             	mov    %rsp,%rax
   28fa5:	dd 18                	fstpl  (%rax)
   28fa7:	e8 94 04 00 00       	call   29440 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_>
   28fac:	48 89 c1             	mov    %rax,%rcx
   28faf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   28fb3:	48 89 48 18          	mov    %rcx,0x18(%rax)
  __result.__exponent = __formatter::__find_exponent(__result.__integral, __result.__last);
   28fb7:	48 8b 38             	mov    (%rax),%rdi
   28fba:	48 8b 70 18          	mov    0x18(%rax),%rsi
   28fbe:	e8 5d e0 ff ff       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   28fc3:	48 89 c1             	mov    %rax,%rcx
   28fc6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   28fca:	48 89 48 10          	mov    %rcx,0x10(%rax)
  __result.__radix_point = std::find(__result.__integral + 1, __result.__exponent, '.');
   28fce:	48 8b 38             	mov    (%rax),%rdi
   28fd1:	48 83 c7 01          	add    $0x1,%rdi
   28fd5:	48 8b 70 10          	mov    0x10(%rax),%rsi
   28fd9:	c6 45 ef 2e          	movb   $0x2e,-0x11(%rbp)
   28fdd:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   28fe1:	e8 ea e0 ff ff       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   28fe6:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   28fea:	48 89 47 08          	mov    %rax,0x8(%rdi)
  if (__result.__radix_point == __result.__exponent)
   28fee:	48 8b 47 08          	mov    0x8(%rdi),%rax
   28ff2:	48 3b 47 10          	cmp    0x10(%rdi),%rax
   28ff6:	75 0c                	jne    29004 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc+0xa4>
   28ff8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    __result.__radix_point = __result.__last;
   28ffc:	48 8b 48 18          	mov    0x18(%rax),%rcx
   29000:	48 89 48 08          	mov    %rcx,0x8(%rax)
   29004:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  return __result;
   29008:	48 83 c4 40          	add    $0x40,%rsp
   2900c:	5d                   	pop    %rbp
   2900d:	c3                   	ret
   2900e:	66 90                	xchg   %ax,%ax

0000000000029010 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   29010:	55                   	push   %rbp
   29011:	48 89 e5             	mov    %rsp,%rbp
   29014:	48 83 ec 60          	sub    $0x60,%rsp
   29018:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   2901c:	48 89 f8             	mov    %rdi,%rax
   2901f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   29023:	dd 45 10             	fldl   0x10(%rbp)
   29026:	dd d8                	fstp   %st(0)
   29028:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2902c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   2902f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __result.__integral = __integral;
   29033:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   29037:	48 89 07             	mov    %rax,(%rdi)
  if (__precision == -1)
   2903a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%rbp)
   2903e:	75 37                	jne    29077 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x67>
    __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::hex);
   29040:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   29044:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   29048:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2904c:	e8 cf 03 00 00       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   29051:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29055:	48 89 c6             	mov    %rax,%rsi
   29058:	dd 45 10             	fldl   0x10(%rbp)
   2905b:	48 89 e0             	mov    %rsp,%rax
   2905e:	dd 18                	fstpl  (%rax)
   29060:	ba 04 00 00 00       	mov    $0x4,%edx
   29065:	e8 16 04 00 00       	call   29480 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_NS_12chars_formatE>
   2906a:	48 89 c1             	mov    %rax,%rcx
   2906d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29071:	48 89 48 18          	mov    %rcx,0x18(%rax)
   29075:	eb 38                	jmp    290af <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x9f>
    __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::hex, __precision);
   29077:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2907b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2907f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29083:	e8 98 03 00 00       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   29088:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   2908c:	48 89 c6             	mov    %rax,%rsi
   2908f:	dd 45 10             	fldl   0x10(%rbp)
   29092:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   29095:	48 89 e0             	mov    %rsp,%rax
   29098:	dd 18                	fstpl  (%rax)
   2909a:	ba 04 00 00 00       	mov    $0x4,%edx
   2909f:	e8 2c 03 00 00       	call   293d0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_NS_12chars_formatEi>
   290a4:	48 89 c1             	mov    %rax,%rcx
   290a7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   290ab:	48 89 48 18          	mov    %rcx,0x18(%rax)
  char* __first = __integral + 1;
   290af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   290b3:	48 83 c0 01          	add    $0x1,%rax
   290b7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (*__first == '.') {
   290bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   290bf:	0f be 00             	movsbl (%rax),%eax
   290c2:	83 f8 2e             	cmp    $0x2e,%eax
   290c5:	75 46                	jne    2910d <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xfd>
   290c7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    __result.__radix_point = __first;
   290cb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   290cf:	48 89 48 08          	mov    %rcx,0x8(%rax)
    char* __last        = __result.__last - 2;
   290d3:	48 8b 40 18          	mov    0x18(%rax),%rax
   290d7:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   290db:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    __first             = __last - __traits<_Fp>::__hex_precision_digits;
   290df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   290e3:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
   290e7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    __result.__exponent = std::find(__first, __last, 'p');
   290eb:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   290ef:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   290f3:	c6 45 d7 70          	movb   $0x70,-0x29(%rbp)
   290f7:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
   290fb:	e8 d0 df ff ff       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   29100:	48 89 c1             	mov    %rax,%rcx
   29103:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29107:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   2910b:	eb 14                	jmp    29121 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x111>
   2910d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    __result.__radix_point = __result.__last;
   29111:	48 8b 48 18          	mov    0x18(%rax),%rcx
   29115:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __first;
   29119:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2911d:	48 89 48 10          	mov    %rcx,0x10(%rax)
   29121:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  return __result;
   29125:	48 83 c4 60          	add    $0x60,%rsp
   29129:	5d                   	pop    %rbp
   2912a:	c3                   	ret
   2912b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000029130 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_upper_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   29130:	55                   	push   %rbp
   29131:	48 89 e5             	mov    %rsp,%rbp
   29134:	48 83 ec 30          	sub    $0x30,%rsp
   29138:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2913c:	48 89 f8             	mov    %rdi,%rax
   2913f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   29143:	dd 45 10             	fldl   0x10(%rbp)
   29146:	dd d8                	fstp   %st(0)
   29148:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2914c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   2914f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
      __formatter::__format_buffer_hexadecimal_lower_case(__buffer, __value, __precision, __integral);
   29153:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   29157:	dd 45 10             	fldl   0x10(%rbp)
   2915a:	8b 55 f4             	mov    -0xc(%rbp),%edx
   2915d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   29161:	48 89 e0             	mov    %rsp,%rax
   29164:	dd 18                	fstpl  (%rax)
   29166:	e8 a5 fe ff ff       	call   29010 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   2916b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  std::transform(__result.__integral, __result.__exponent, __result.__integral, __hex_to_upper);
   2916f:	48 8b 38             	mov    (%rax),%rdi
   29172:	48 8b 70 10          	mov    0x10(%rax),%rsi
   29176:	48 8b 10             	mov    (%rax),%rdx
   29179:	48 8d 0d c0 51 ff ff 	lea    -0xae40(%rip),%rcx        # 1e340 <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec>
   29180:	e8 9b 61 ff ff       	call   1f320 <_ZNSt3__19transformB8nn210000IPcS1_PFccEEET0_T_S5_S4_T1_>
   29185:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   29189:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  *__result.__exponent = 'P';
   2918d:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
   29191:	c6 01 50             	movb   $0x50,(%rcx)
  return __result;
   29194:	48 83 c4 30          	add    $0x30,%rsp
   29198:	5d                   	pop    %rbp
   29199:	c3                   	ret
   2919a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000291a0 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   291a0:	55                   	push   %rbp
   291a1:	48 89 e5             	mov    %rsp,%rbp
   291a4:	48 83 ec 40          	sub    $0x40,%rsp
   291a8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   291ac:	48 89 f8             	mov    %rdi,%rax
   291af:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   291b3:	dd 45 10             	fldl   0x10(%rbp)
   291b6:	dd d8                	fstp   %st(0)
   291b8:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   291bc:	89 55 f4             	mov    %edx,-0xc(%rbp)
   291bf:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __result.__integral = __integral;
   291c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   291c7:	48 89 07             	mov    %rax,(%rdi)
      __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::scientific, __precision);
   291ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   291ce:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   291d2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   291d6:	e8 45 02 00 00       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   291db:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   291df:	48 89 c6             	mov    %rax,%rsi
   291e2:	dd 45 10             	fldl   0x10(%rbp)
   291e5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   291e8:	48 89 e0             	mov    %rsp,%rax
   291eb:	dd 18                	fstpl  (%rax)
   291ed:	ba 01 00 00 00       	mov    $0x1,%edx
   291f2:	e8 d9 01 00 00       	call   293d0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_NS_12chars_formatEi>
   291f7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  __result.__last =
   291fb:	48 89 47 18          	mov    %rax,0x18(%rdi)
  char* __first = __integral + 1;
   291ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   29203:	48 83 c0 01          	add    $0x1,%rax
   29207:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  if (*__first == '.') {
   2920b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2920f:	0f be 00             	movsbl (%rax),%eax
   29212:	83 f8 2e             	cmp    $0x2e,%eax
   29215:	75 2a                	jne    29241 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xa1>
   29217:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    __result.__radix_point = __first;
   2921b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2921f:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __formatter::__find_exponent(__first + 1, __result.__last);
   29223:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   29227:	48 83 c7 01          	add    $0x1,%rdi
   2922b:	48 8b 70 18          	mov    0x18(%rax),%rsi
   2922f:	e8 ec dd ff ff       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   29234:	48 89 c1             	mov    %rax,%rcx
   29237:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2923b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   2923f:	eb 14                	jmp    29255 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xb5>
   29241:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    __result.__radix_point = __result.__last;
   29245:	48 8b 48 18          	mov    0x18(%rax),%rcx
   29249:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __first;
   2924d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   29251:	48 89 48 10          	mov    %rcx,0x10(%rax)
   29255:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  return __result;
   29259:	48 83 c4 40          	add    $0x40,%rsp
   2925d:	5d                   	pop    %rbp
   2925e:	c3                   	ret
   2925f:	90                   	nop

0000000000029260 <_ZNSt3__111__formatter37__format_buffer_scientific_upper_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   29260:	55                   	push   %rbp
   29261:	48 89 e5             	mov    %rsp,%rbp
   29264:	48 83 ec 30          	sub    $0x30,%rsp
   29268:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2926c:	48 89 f8             	mov    %rdi,%rax
   2926f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   29273:	dd 45 10             	fldl   0x10(%rbp)
   29276:	dd d8                	fstp   %st(0)
   29278:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2927c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   2927f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
      __formatter::__format_buffer_scientific_lower_case(__buffer, __value, __precision, __integral);
   29283:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   29287:	dd 45 10             	fldl   0x10(%rbp)
   2928a:	8b 55 f4             	mov    -0xc(%rbp),%edx
   2928d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   29291:	48 89 e0             	mov    %rsp,%rax
   29294:	dd 18                	fstpl  (%rax)
   29296:	e8 05 ff ff ff       	call   291a0 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   2929b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2929f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  *__result.__exponent = 'E';
   292a3:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
   292a7:	c6 01 45             	movb   $0x45,(%rcx)
  return __result;
   292aa:	48 83 c4 30          	add    $0x30,%rsp
   292ae:	5d                   	pop    %rbp
   292af:	c3                   	ret

00000000000292b0 <_ZNSt3__111__formatter21__format_buffer_fixedB8nn210000IddEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_fixed(const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   292b0:	55                   	push   %rbp
   292b1:	48 89 e5             	mov    %rsp,%rbp
   292b4:	48 83 ec 40          	sub    $0x40,%rsp
   292b8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   292bc:	48 89 f8             	mov    %rdi,%rax
   292bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   292c3:	dd 45 10             	fldl   0x10(%rbp)
   292c6:	dd d8                	fstp   %st(0)
   292c8:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   292cc:	89 55 f4             	mov    %edx,-0xc(%rbp)
   292cf:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __result.__integral = __integral;
   292d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   292d7:	48 89 07             	mov    %rax,(%rdi)
  __result.__last     = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::fixed, __precision);
   292da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   292de:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   292e2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   292e6:	e8 35 01 00 00       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   292eb:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   292ef:	48 89 c6             	mov    %rax,%rsi
   292f2:	dd 45 10             	fldl   0x10(%rbp)
   292f5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   292f8:	48 89 e0             	mov    %rsp,%rax
   292fb:	dd 18                	fstpl  (%rax)
   292fd:	ba 02 00 00 00       	mov    $0x2,%edx
   29302:	e8 c9 00 00 00       	call   293d0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_NS_12chars_formatEi>
   29307:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2930b:	48 89 c1             	mov    %rax,%rcx
   2930e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   29312:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
  __result.__radix_point = __result.__last - (__precision + bool(__precision));
   29316:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
   2931a:	8b 55 f4             	mov    -0xc(%rbp),%edx
   2931d:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   29321:	40 0f 95 c6          	setne  %sil
   29325:	40 80 e6 01          	and    $0x1,%sil
   29329:	40 0f b6 f6          	movzbl %sil,%esi
   2932d:	01 f2                	add    %esi,%edx
   2932f:	48 63 f2             	movslq %edx,%rsi
   29332:	31 d2                	xor    %edx,%edx
   29334:	48 29 f2             	sub    %rsi,%rdx
   29337:	48 01 d1             	add    %rdx,%rcx
   2933a:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  __result.__exponent    = __result.__last;
   2933e:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
   29342:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  return __result;
   29346:	48 83 c4 40          	add    $0x40,%rsp
   2934a:	5d                   	pop    %rbp
   2934b:	c3                   	ret
   2934c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000029350 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_general_upper_case(__float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   29350:	55                   	push   %rbp
   29351:	48 89 e5             	mov    %rsp,%rbp
   29354:	48 83 ec 30          	sub    $0x30,%rsp
   29358:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   2935c:	48 89 f8             	mov    %rdi,%rax
   2935f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   29363:	dd 45 10             	fldl   0x10(%rbp)
   29366:	dd d8                	fstp   %st(0)
   29368:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2936c:	89 55 f4             	mov    %edx,-0xc(%rbp)
   2936f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  __float_result __result = __formatter::__format_buffer_general_lower_case(__buffer, __value, __precision, __integral);
   29373:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   29377:	dd 45 10             	fldl   0x10(%rbp)
   2937a:	8b 55 f4             	mov    -0xc(%rbp),%edx
   2937d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   29381:	48 89 e0             	mov    %rsp,%rax
   29384:	dd 18                	fstpl  (%rax)
   29386:	e8 a5 fa ff ff       	call   28e30 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   2938b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  if (__result.__exponent != __result.__last)
   2938f:	48 8b 47 10          	mov    0x10(%rdi),%rax
   29393:	48 3b 47 18          	cmp    0x18(%rdi),%rax
   29397:	74 0b                	je     293a4 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IddEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x54>
   29399:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    *__result.__exponent = 'E';
   2939d:	48 8b 40 10          	mov    0x10(%rax),%rax
   293a1:	c6 00 45             	movb   $0x45,(%rax)
   293a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  return __result;
   293a8:	48 83 c4 30          	add    $0x30,%rsp
   293ac:	5d                   	pop    %rbp
   293ad:	c3                   	ret
   293ae:	66 90                	xchg   %ax,%ax

00000000000293b0 <_ZNSt3__111__formatter14__float_bufferIdE23__remove_trailing_zerosB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI void __remove_trailing_zeros() { __num_trailing_zeros_ = 0; }
   293b0:	55                   	push   %rbp
   293b1:	48 89 e5             	mov    %rsp,%rbp
   293b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   293b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   293bc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   293c3:	5d                   	pop    %rbp
   293c4:	c3                   	ret
   293c5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   293cc:	00 00 00 
   293cf:	90                   	nop

00000000000293d0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_NS_12chars_formatEi>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value, chars_format __fmt, int __precision) {
   293d0:	55                   	push   %rbp
   293d1:	48 89 e5             	mov    %rsp,%rbp
   293d4:	48 83 ec 30          	sub    $0x30,%rsp
   293d8:	dd 45 10             	fldl   0x10(%rbp)
   293db:	dd d8                	fstp   %st(0)
   293dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   293e1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   293e5:	89 55 ec             	mov    %edx,-0x14(%rbp)
   293e8:	89 4d e8             	mov    %ecx,-0x18(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value, __fmt, __precision);
   293eb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   293ef:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   293f3:	dd 45 10             	fldl   0x10(%rbp)
   293f6:	8b 55 ec             	mov    -0x14(%rbp),%edx
   293f9:	8b 4d e8             	mov    -0x18(%rbp),%ecx
   293fc:	48 89 e0             	mov    %rsp,%rax
   293ff:	dd 18                	fstpl  (%rax)
   29401:	e8 4a e7 fe ff       	call   17b50 <_ZNSt3__18to_charsEPcS0_dNS_12chars_formatEi>
   29406:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2940a:	89 55 e0             	mov    %edx,-0x20(%rbp)
  return __r.ptr;
   2940d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   29411:	48 83 c4 30          	add    $0x30,%rsp
   29415:	5d                   	pop    %rbp
   29416:	c3                   	ret
   29417:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2941e:	00 00 

0000000000029420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI char* end() const { return __begin_ + __size_; }
   29420:	55                   	push   %rbp
   29421:	48 89 e5             	mov    %rsp,%rbp
   29424:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   29428:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2942c:	48 8b 41 10          	mov    0x10(%rcx),%rax
   29430:	48 03 41 08          	add    0x8(%rcx),%rax
   29434:	5d                   	pop    %rbp
   29435:	c3                   	ret
   29436:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2943d:	00 00 00 

0000000000029440 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value) {
   29440:	55                   	push   %rbp
   29441:	48 89 e5             	mov    %rsp,%rbp
   29444:	48 83 ec 30          	sub    $0x30,%rsp
   29448:	dd 45 10             	fldl   0x10(%rbp)
   2944b:	dd d8                	fstp   %st(0)
   2944d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   29451:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value);
   29455:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29459:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2945d:	dd 45 10             	fldl   0x10(%rbp)
   29460:	48 89 e0             	mov    %rsp,%rax
   29463:	dd 18                	fstpl  (%rax)
   29465:	e8 66 e5 fe ff       	call   179d0 <_ZNSt3__18to_charsEPcS0_d>
   2946a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2946e:	89 55 e8             	mov    %edx,-0x18(%rbp)
  return __r.ptr;
   29471:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   29475:	48 83 c4 30          	add    $0x30,%rsp
   29479:	5d                   	pop    %rbp
   2947a:	c3                   	ret
   2947b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000029480 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEdEEPcS2_S2_T_NS_12chars_formatE>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value, chars_format __fmt) {
   29480:	55                   	push   %rbp
   29481:	48 89 e5             	mov    %rsp,%rbp
   29484:	48 83 ec 30          	sub    $0x30,%rsp
   29488:	dd 45 10             	fldl   0x10(%rbp)
   2948b:	dd d8                	fstp   %st(0)
   2948d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   29491:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   29495:	89 55 ec             	mov    %edx,-0x14(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value, __fmt);
   29498:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2949c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   294a0:	dd 45 10             	fldl   0x10(%rbp)
   294a3:	8b 55 ec             	mov    -0x14(%rbp),%edx
   294a6:	48 89 e0             	mov    %rsp,%rax
   294a9:	dd 18                	fstpl  (%rax)
   294ab:	e8 e0 e5 fe ff       	call   17a90 <_ZNSt3__18to_charsEPcS0_dNS_12chars_formatE>
   294b0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   294b4:	89 55 e0             	mov    %edx,-0x20(%rbp)
  return __r.ptr;
   294b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   294bb:	48 83 c4 30          	add    $0x30,%rsp
   294bf:	5d                   	pop    %rbp
   294c0:	c3                   	ret
   294c1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   294c8:	00 00 00 
   294cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000294d0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JReEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   294d0:	55                   	push   %rbp
   294d1:	48 89 e5             	mov    %rsp,%rbp
   294d4:	48 83 ec 20          	sub    $0x20,%rsp
   294d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   294dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   294e0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   294e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   294e8:	db 28                	fldt   (%rax)
   294ea:	48 89 e0             	mov    %rsp,%rax
   294ed:	db 38                	fstpt  (%rax)
   294ef:	e8 0c 00 00 00       	call   29500 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIeEEDaSC_>
   294f4:	48 83 c4 20          	add    $0x20,%rsp
   294f8:	5d                   	pop    %rbp
   294f9:	c3                   	ret
   294fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000029500 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIeEEDaSC_>:
        [&](auto __arg) {
   29500:	55                   	push   %rbp
   29501:	48 89 e5             	mov    %rsp,%rbp
   29504:	48 83 ec 60          	sub    $0x60,%rsp
   29508:	db 6d 10             	fldt   0x10(%rbp)
   2950b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2950f:	db 7d e0             	fstpt  -0x20(%rbp)
   29512:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29516:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2951a:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   2951e:	e8 6d 00 00 00       	call   29590 <_ZNSt3__19formatterIecEC2Ev>
   29523:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            if (__parse)
   29527:	48 8b 40 10          	mov    0x10(%rax),%rax
   2952b:	f6 00 01             	testb  $0x1,(%rax)
   2952e:	74 23                	je     29553 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIeEEDaSC_+0x53>
   29530:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   29534:	48 8b 08             	mov    (%rax),%rcx
   29537:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2953b:	48 8b 30             	mov    (%rax),%rsi
   2953e:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   29542:	e8 e9 c4 ff ff       	call   25a30 <_ZNSt3__126__formatter_floating_pointIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   29547:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   2954b:	48 89 c6             	mov    %rax,%rsi
   2954e:	e8 cd 08 ff ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   29553:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   29557:	48 8b 48 08          	mov    0x8(%rax),%rcx
   2955b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   2955f:	db 6d e0             	fldt   -0x20(%rbp)
   29562:	48 8b 70 08          	mov    0x8(%rax),%rsi
   29566:	48 89 e0             	mov    %rsp,%rax
   29569:	db 38                	fstpt  (%rax)
   2956b:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   2956f:	e8 3c 00 00 00       	call   295b0 <_ZNKSt3__126__formatter_floating_pointIcE6formatB8nn210000ITkNS_14floating_pointEeNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>
   29574:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   29578:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2957c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   29580:	e8 db 05 ff ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   29585:	48 83 c4 60          	add    $0x60,%rsp
   29589:	5d                   	pop    %rbp
   2958a:	c3                   	ret
   2958b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000029590 <_ZNSt3__19formatterIecEC2Ev>:
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<long double, _CharT> : public __formatter_floating_point<_CharT> {};
   29590:	55                   	push   %rbp
   29591:	48 89 e5             	mov    %rsp,%rbp
   29594:	48 83 ec 10          	sub    $0x10,%rsp
   29598:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2959c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   295a0:	e8 3b c5 ff ff       	call   25ae0 <_ZNSt3__126__formatter_floating_pointIcEC2Ev>
   295a5:	48 83 c4 10          	add    $0x10,%rsp
   295a9:	5d                   	pop    %rbp
   295aa:	c3                   	ret
   295ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000295b0 <_ZNKSt3__126__formatter_floating_pointIcE6formatB8nn210000ITkNS_14floating_pointEeNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT0_8iteratorET_RSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(_Tp __value, _FormatContext& __ctx) const {
   295b0:	55                   	push   %rbp
   295b1:	48 89 e5             	mov    %rsp,%rbp
   295b4:	48 83 ec 60          	sub    $0x60,%rsp
   295b8:	db 6d 10             	fldt   0x10(%rbp)
   295bb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   295bf:	db 7d e0             	fstpt  -0x20(%rbp)
   295c2:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
   295c6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    return __formatter::__format_floating_point(__value, __ctx, __parser_.__get_parsed_std_specifications(__ctx));
   295ca:	db 6d e0             	fldt   -0x20(%rbp)
   295cd:	db 7d b4             	fstpt  -0x4c(%rbp)
   295d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   295d4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   295d8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   295dc:	e8 2f 25 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   295e1:	db 6d b4             	fldt   -0x4c(%rbp)
   295e4:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   295e8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   295ec:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   295f0:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   295f4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   295f8:	48 89 e0             	mov    %rsp,%rax
   295fb:	db 38                	fstpt  (%rax)
   295fd:	e8 0e 00 00 00       	call   29610 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>
   29602:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   29606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2960a:	48 83 c4 60          	add    $0x60,%rsp
   2960e:	5d                   	pop    %rbp
   2960f:	c3                   	ret

0000000000029610 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE>:
__format_floating_point(_Tp __value, _FormatContext& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) {
   29610:	55                   	push   %rbp
   29611:	48 89 e5             	mov    %rsp,%rbp
   29614:	48 81 ec c0 05 00 00 	sub    $0x5c0,%rsp
   2961b:	db 6d 10             	fldt   0x10(%rbp)
   2961e:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   29622:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   29626:	db 7d d0             	fstpt  -0x30(%rbp)
   29629:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  bool __negative = std::signbit(__value);
   2962d:	db 6d d0             	fldt   -0x30(%rbp)
   29630:	48 89 e0             	mov    %rsp,%rax
   29633:	db 38                	fstpt  (%rax)
   29635:	e8 26 06 00 00       	call   29c60 <_ZNSt3__16__math7signbitB8nn210000IvEEbe>
   2963a:	88 45 c7             	mov    %al,-0x39(%rbp)
  if (!std::isfinite(__value)) [[unlikely]]
   2963d:	db 6d d0             	fldt   -0x30(%rbp)
   29640:	48 89 e0             	mov    %rsp,%rax
   29643:	db 38                	fstpt  (%rax)
   29645:	e8 36 06 00 00       	call   29c80 <_ZNSt3__16__math8isfiniteB8nn210000Ee>
   2964a:	a8 01                	test   $0x1,%al
   2964c:	75 61                	jne    296af <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x9f>
    return __formatter::__format_floating_point_non_finite(__ctx.out(), __specs, __negative, std::isnan(__value));
   2964e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   29652:	e8 b9 04 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   29657:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2965b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2965f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   29663:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   29667:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2966b:	8a 45 c7             	mov    -0x39(%rbp),%al
   2966e:	88 85 cf fa ff ff    	mov    %al,-0x531(%rbp)
   29674:	db 6d d0             	fldt   -0x30(%rbp)
   29677:	48 89 e0             	mov    %rsp,%rax
   2967a:	db 38                	fstpt  (%rax)
   2967c:	e8 4f 06 00 00       	call   29cd0 <_ZNSt3__16__math5isnanB8nn210000Ee>
   29681:	8a 8d cf fa ff ff    	mov    -0x531(%rbp),%cl
   29687:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   2968b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   2968f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   29693:	0f b6 c9             	movzbl %cl,%ecx
   29696:	83 e1 01             	and    $0x1,%ecx
   29699:	44 0f b6 c0          	movzbl %al,%r8d
   2969d:	41 83 e0 01          	and    $0x1,%r8d
   296a1:	e8 6a cb ff ff       	call   26210 <_ZNSt3__111__formatter34__format_floating_point_non_finiteB8nn210000INS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEET_S7_NS_13__format_spec23__parsed_specificationsIT0_EEbb>
   296a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   296aa:	e9 9f 05 00 00       	jmp    29c4e <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x63e>
  if (__negative)
   296af:	f6 45 c7 01          	testb  $0x1,-0x39(%rbp)
   296b3:	74 08                	je     296bd <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0xad>
    __value = -__value;
   296b5:	db 6d d0             	fldt   -0x30(%rbp)
   296b8:	d9 e0                	fchs
   296ba:	db 7d d0             	fstpt  -0x30(%rbp)
  __float_buffer<_Fp> __buffer(__specs.__precision_);
   296bd:	8b 75 f0             	mov    -0x10(%rbp),%esi
   296c0:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
   296c7:	e8 d4 f2 ff ff       	call   289a0 <_ZNSt3__111__formatter14__float_bufferIdEC2B8nn210000Ei>
      __buffer, __value, __negative, (__specs.__has_precision()), __specs.__std_.__sign_, __specs.__std_.__type_);
   296cc:	db 6d d0             	fldt   -0x30(%rbp)
   296cf:	db bd c4 fa ff ff    	fstpt  -0x53c(%rbp)
   296d5:	8a 45 c7             	mov    -0x39(%rbp),%al
   296d8:	88 85 ce fa ff ff    	mov    %al,-0x532(%rbp)
   296de:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   296e2:	e8 19 d0 ff ff       	call   26700 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE15__has_precisionB8nn210000Ev>
   296e7:	db ad c4 fa ff ff    	fldt   -0x53c(%rbp)
   296ed:	8a 8d ce fa ff ff    	mov    -0x532(%rbp),%cl
   296f3:	40 8a 75 e8          	mov    -0x18(%rbp),%sil
   296f7:	40 c0 ee 03          	shr    $0x3,%sil
   296fb:	40 80 e6 03          	and    $0x3,%sil
   296ff:	8a 55 e9             	mov    -0x17(%rbp),%dl
  __float_result __result = __formatter::__format_buffer(
   29702:	48 89 e7             	mov    %rsp,%rdi
   29705:	db 3f                	fstpt  (%rdi)
   29707:	44 0f b6 c6          	movzbl %sil,%r8d
   2970b:	44 0f b6 ca          	movzbl %dl,%r9d
   2970f:	0f b6 d1             	movzbl %cl,%edx
   29712:	83 e2 01             	and    $0x1,%edx
   29715:	0f b6 c8             	movzbl %al,%ecx
   29718:	83 e1 01             	and    $0x1,%ecx
   2971b:	48 8d bd 70 fb ff ff 	lea    -0x490(%rbp),%rdi
   29722:	48 8d b5 90 fb ff ff 	lea    -0x470(%rbp),%rsi
   29729:	e8 c2 05 00 00       	call   29cf0 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE>
  if (__specs.__std_.__alternate_form_) {
   2972e:	8a 45 e8             	mov    -0x18(%rbp),%al
   29731:	c0 e8 05             	shr    $0x5,%al
   29734:	24 01                	and    $0x1,%al
   29736:	a8 01                	test   $0x1,%al
   29738:	0f 84 85 01 00 00    	je     298c3 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b3>
    if (__result.__radix_point == __result.__last) {
   2973e:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
   29745:	48 3b 85 88 fb ff ff 	cmp    -0x478(%rbp),%rax
   2974c:	75 56                	jne    297a4 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x194>
      *__result.__last++ = '.';
   2974e:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
   29755:	48 89 c1             	mov    %rax,%rcx
   29758:	48 83 c1 01          	add    $0x1,%rcx
   2975c:	48 89 8d 88 fb ff ff 	mov    %rcx,-0x478(%rbp)
   29763:	c6 00 2e             	movb   $0x2e,(%rax)
      std::rotate(__result.__exponent, __result.__last - 1, __result.__last);
   29766:	48 8b bd 80 fb ff ff 	mov    -0x480(%rbp),%rdi
   2976d:	48 8b b5 88 fb ff ff 	mov    -0x478(%rbp),%rsi
   29774:	48 83 c6 ff          	add    $0xffffffffffffffff,%rsi
   29778:	48 8b 95 88 fb ff ff 	mov    -0x478(%rbp),%rdx
   2977f:	e8 9c cf ff ff       	call   26720 <_ZNSt3__16rotateB8nn210000IPcEET_S2_S2_S2_>
      __result.__radix_point = __result.__exponent;
   29784:	48 8b 85 80 fb ff ff 	mov    -0x480(%rbp),%rax
   2978b:	48 89 85 78 fb ff ff 	mov    %rax,-0x488(%rbp)
      ++__result.__exponent;
   29792:	48 8b 85 80 fb ff ff 	mov    -0x480(%rbp),%rax
   29799:	48 83 c0 01          	add    $0x1,%rax
   2979d:	48 89 85 80 fb ff ff 	mov    %rax,-0x480(%rbp)
    bool __is_general = __specs.__std_.__type_ == __format_spec::__type::__general_lower_case ||
   297a4:	b0 01                	mov    $0x1,%al
   297a6:	80 7d e9 11          	cmpb   $0x11,-0x17(%rbp)
   297aa:	88 85 c3 fa ff ff    	mov    %al,-0x53d(%rbp)
   297b0:	74 0d                	je     297bf <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1af>
                        __specs.__std_.__type_ == __format_spec::__type::__general_upper_case;
   297b2:	80 7d e9 12          	cmpb   $0x12,-0x17(%rbp)
   297b6:	0f 94 c0             	sete   %al
   297b9:	88 85 c3 fa ff ff    	mov    %al,-0x53d(%rbp)
   297bf:	8a 85 c3 fa ff ff    	mov    -0x53d(%rbp),%al
    bool __is_general = __specs.__std_.__type_ == __format_spec::__type::__general_lower_case ||
   297c5:	24 01                	and    $0x1,%al
   297c7:	88 85 6f fb ff ff    	mov    %al,-0x491(%rbp)
    if (__is_general) {
   297cd:	f6 85 6f fb ff ff 01 	testb  $0x1,-0x491(%rbp)
   297d4:	0f 84 e7 00 00 00    	je     298c1 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b1>
      int __p = std::max<int>(1, (__specs.__has_precision() ? __specs.__precision_ : 6));
   297da:	c7 85 64 fb ff ff 01 	movl   $0x1,-0x49c(%rbp)
   297e1:	00 00 00 
   297e4:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   297e8:	e8 13 cf ff ff       	call   26700 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE15__has_precisionB8nn210000Ev>
   297ed:	a8 01                	test   $0x1,%al
   297ef:	75 02                	jne    297f3 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1e3>
   297f1:	eb 0b                	jmp    297fe <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1ee>
   297f3:	8b 45 f0             	mov    -0x10(%rbp),%eax
   297f6:	89 85 bc fa ff ff    	mov    %eax,-0x544(%rbp)
   297fc:	eb 0d                	jmp    2980b <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1fb>
   297fe:	b8 06 00 00 00       	mov    $0x6,%eax
   29803:	89 85 bc fa ff ff    	mov    %eax,-0x544(%rbp)
   29809:	eb 00                	jmp    2980b <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x1fb>
   2980b:	8b 85 bc fa ff ff    	mov    -0x544(%rbp),%eax
   29811:	89 85 60 fb ff ff    	mov    %eax,-0x4a0(%rbp)
   29817:	48 8d bd 64 fb ff ff 	lea    -0x49c(%rbp),%rdi
   2981e:	48 8d b5 60 fb ff ff 	lea    -0x4a0(%rbp),%rsi
   29825:	e8 56 cf ff ff       	call   26780 <_ZNSt3__13maxB8nn210000IiEERKT_S3_S3_>
   2982a:	8b 00                	mov    (%rax),%eax
   2982c:	89 85 68 fb ff ff    	mov    %eax,-0x498(%rbp)
      if (__result.__exponent == __result.__last)
   29832:	48 8b 85 80 fb ff ff 	mov    -0x480(%rbp),%rax
   29839:	48 3b 85 88 fb ff ff 	cmp    -0x478(%rbp),%rax
   29840:	75 23                	jne    29865 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x255>
        __p -= __result.__radix_point - __result.__integral;
   29842:	48 8b 8d 78 fb ff ff 	mov    -0x488(%rbp),%rcx
   29849:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
   29850:	48 29 c1             	sub    %rax,%rcx
   29853:	48 63 85 68 fb ff ff 	movslq -0x498(%rbp),%rax
   2985a:	48 29 c8             	sub    %rcx,%rax
   2985d:	89 85 68 fb ff ff    	mov    %eax,-0x498(%rbp)
   29863:	eb 0f                	jmp    29874 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x264>
        --__p;
   29865:	8b 85 68 fb ff ff    	mov    -0x498(%rbp),%eax
   2986b:	83 c0 ff             	add    $0xffffffff,%eax
   2986e:	89 85 68 fb ff ff    	mov    %eax,-0x498(%rbp)
      ptrdiff_t __precision = (__result.__exponent - __result.__radix_point) - 1;
   29874:	48 8b 85 80 fb ff ff 	mov    -0x480(%rbp),%rax
   2987b:	48 8b 8d 78 fb ff ff 	mov    -0x488(%rbp),%rcx
   29882:	48 29 c8             	sub    %rcx,%rax
   29885:	48 83 e8 01          	sub    $0x1,%rax
   29889:	48 89 85 58 fb ff ff 	mov    %rax,-0x4a8(%rbp)
      if (__precision < __p)
   29890:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
   29897:	48 63 8d 68 fb ff ff 	movslq -0x498(%rbp),%rcx
   2989e:	48 39 c8             	cmp    %rcx,%rax
   298a1:	7d 1c                	jge    298bf <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2af>
        __buffer.__add_trailing_zeros(__p - __precision);
   298a3:	48 63 85 68 fb ff ff 	movslq -0x498(%rbp),%rax
   298aa:	48 2b 85 58 fb ff ff 	sub    -0x4a8(%rbp),%rax
   298b1:	89 c6                	mov    %eax,%esi
   298b3:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
   298ba:	e8 a1 f4 ff ff       	call   28d60 <_ZNSt3__111__formatter14__float_bufferIdE20__add_trailing_zerosB8nn210000Ei>
    }
   298bf:	eb 00                	jmp    298c1 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b1>
  }
   298c1:	eb 00                	jmp    298c3 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x2b3>
  ptrdiff_t __size         = __result.__last - __buffer.begin();
   298c3:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
   298ca:	48 89 85 b0 fa ff ff 	mov    %rax,-0x550(%rbp)
   298d1:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
   298d8:	e8 a3 f4 ff ff       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   298dd:	48 89 c1             	mov    %rax,%rcx
   298e0:	48 8b 85 b0 fa ff ff 	mov    -0x550(%rbp),%rax
   298e7:	48 29 c8             	sub    %rcx,%rax
   298ea:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
   298f1:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
  int __num_trailing_zeros = __buffer.__num_trailing_zeros();
   298f8:	e8 a3 f4 ff ff       	call   28da0 <_ZNKSt3__111__formatter14__float_bufferIdE20__num_trailing_zerosB8nn210000Ev>
   298fd:	89 85 4c fb ff ff    	mov    %eax,-0x4b4(%rbp)
  if (__size + __num_trailing_zeros >= __specs.__width_) {
   29903:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
   2990a:	48 63 8d 4c fb ff ff 	movslq -0x4b4(%rbp),%rcx
   29911:	48 01 c8             	add    %rcx,%rax
   29914:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
   29918:	48 39 c8             	cmp    %rcx,%rax
   2991b:	0f 8c 58 01 00 00    	jl     29a79 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x469>
    if (__num_trailing_zeros && __result.__exponent != __result.__last)
   29921:	83 bd 4c fb ff ff 00 	cmpl   $0x0,-0x4b4(%rbp)
   29928:	0f 84 ce 00 00 00    	je     299fc <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x3ec>
   2992e:	48 8b 85 80 fb ff ff 	mov    -0x480(%rbp),%rax
   29935:	48 3b 85 88 fb ff ff 	cmp    -0x478(%rbp),%rax
   2993c:	0f 84 ba 00 00 00    	je     299fc <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x3ec>
          __result.__exponent,
   29942:	48 8b 85 80 fb ff ff 	mov    -0x480(%rbp),%rax
   29949:	48 89 85 a0 fa ff ff 	mov    %rax,-0x560(%rbp)
          __result.__last,
   29950:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
   29957:	48 89 85 a8 fa ff ff 	mov    %rax,-0x558(%rbp)
   2995e:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
          __formatter::__fill(__formatter::__copy(__buffer.begin(), __result.__exponent, __ctx.out()),
   29965:	e8 16 f4 ff ff       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   2996a:	48 89 85 90 fa ff ff 	mov    %rax,-0x570(%rbp)
   29971:	48 8b 85 80 fb ff ff 	mov    -0x480(%rbp),%rax
   29978:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
   2997f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   29983:	e8 88 01 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   29988:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
   2998f:	48 8b b5 98 fa ff ff 	mov    -0x568(%rbp),%rsi
   29996:	48 89 85 30 fb ff ff 	mov    %rax,-0x4d0(%rbp)
   2999d:	48 8b 95 30 fb ff ff 	mov    -0x4d0(%rbp),%rdx
   299a4:	e8 17 47 ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   299a9:	48 89 85 38 fb ff ff 	mov    %rax,-0x4c8(%rbp)
                              __num_trailing_zeros,
   299b0:	48 63 b5 4c fb ff ff 	movslq -0x4b4(%rbp),%rsi
          __formatter::__fill(__formatter::__copy(__buffer.begin(), __result.__exponent, __ctx.out()),
   299b7:	48 8b bd 38 fb ff ff 	mov    -0x4c8(%rbp),%rdi
   299be:	ba 30 00 00 00       	mov    $0x30,%edx
   299c3:	e8 78 33 ff ff       	call   1cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>
   299c8:	48 8b bd a0 fa ff ff 	mov    -0x560(%rbp),%rdi
   299cf:	48 8b b5 a8 fa ff ff 	mov    -0x558(%rbp),%rsi
   299d6:	48 89 85 40 fb ff ff 	mov    %rax,-0x4c0(%rbp)
      return __formatter::__copy(
   299dd:	48 8b 95 40 fb ff ff 	mov    -0x4c0(%rbp),%rdx
   299e4:	e8 d7 46 ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   299e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   299ed:	c7 85 2c fb ff ff 01 	movl   $0x1,-0x4d4(%rbp)
   299f4:	00 00 00 
   299f7:	e9 46 02 00 00       	jmp    29c42 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x632>
   299fc:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
        __formatter::__copy(__buffer.begin(), __result.__last, __ctx.out()), __num_trailing_zeros, _CharT('0'));
   29a03:	e8 78 f3 ff ff       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   29a08:	48 89 85 80 fa ff ff 	mov    %rax,-0x580(%rbp)
   29a0f:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
   29a16:	48 89 85 88 fa ff ff 	mov    %rax,-0x578(%rbp)
   29a1d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   29a21:	e8 ea 00 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   29a26:	48 8b bd 80 fa ff ff 	mov    -0x580(%rbp),%rdi
   29a2d:	48 8b b5 88 fa ff ff 	mov    -0x578(%rbp),%rsi
   29a34:	48 89 85 18 fb ff ff 	mov    %rax,-0x4e8(%rbp)
   29a3b:	48 8b 95 18 fb ff ff 	mov    -0x4e8(%rbp),%rdx
   29a42:	e8 79 46 ff ff       	call   1e0c0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_19contiguous_iteratorEPcTkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT1_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ET_SD_T2_>
   29a47:	48 89 85 20 fb ff ff 	mov    %rax,-0x4e0(%rbp)
   29a4e:	48 63 b5 4c fb ff ff 	movslq -0x4b4(%rbp),%rsi
    return __formatter::__fill(
   29a55:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
   29a5c:	ba 30 00 00 00       	mov    $0x30,%edx
   29a61:	e8 da 32 ff ff       	call   1cd40 <_ZNSt3__111__formatter6__fillB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEET0_SB_mS3_>
   29a66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   29a6a:	c7 85 2c fb ff ff 01 	movl   $0x1,-0x4d4(%rbp)
   29a71:	00 00 00 
   29a74:	e9 c9 01 00 00       	jmp    29c42 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x632>
  auto __out_it = __ctx.out();
   29a79:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   29a7d:	e8 8e 00 ff ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   29a82:	48 89 85 10 fb ff ff 	mov    %rax,-0x4f0(%rbp)
   29a89:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
  char* __first = __buffer.begin();
   29a90:	e8 eb f2 ff ff       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   29a95:	48 89 85 08 fb ff ff 	mov    %rax,-0x4f8(%rbp)
  if (__specs.__alignment_ == __format_spec::__alignment ::__zero_padding) {
   29a9c:	8a 45 e8             	mov    -0x18(%rbp),%al
   29a9f:	24 07                	and    $0x7,%al
   29aa1:	3c 04                	cmp    $0x4,%al
   29aa3:	75 69                	jne    29b0e <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x4fe>
    if (__first != __result.__integral)
   29aa5:	48 8b 85 08 fb ff ff 	mov    -0x4f8(%rbp),%rax
   29aac:	48 3b 85 70 fb ff ff 	cmp    -0x490(%rbp),%rax
   29ab3:	74 4b                	je     29b00 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x4f0>
      *__out_it++ = *__first++;
   29ab5:	48 8b 85 08 fb ff ff 	mov    -0x4f8(%rbp),%rax
   29abc:	48 89 85 78 fa ff ff 	mov    %rax,-0x588(%rbp)
   29ac3:	48 83 c0 01          	add    $0x1,%rax
   29ac7:	48 89 85 08 fb ff ff 	mov    %rax,-0x4f8(%rbp)
   29ace:	31 c0                	xor    %eax,%eax
   29ad0:	48 8d bd 10 fb ff ff 	lea    -0x4f0(%rbp),%rdi
   29ad7:	31 f6                	xor    %esi,%esi
   29ad9:	e8 12 02 ff ff       	call   19cf0 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEppB8nn210000Ei>
   29ade:	48 89 85 00 fb ff ff 	mov    %rax,-0x500(%rbp)
   29ae5:	48 8d bd 00 fb ff ff 	lea    -0x500(%rbp),%rdi
   29aec:	e8 1f 02 ff ff       	call   19d10 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEdeB8nn210000Ev>
   29af1:	48 8b b5 78 fa ff ff 	mov    -0x588(%rbp),%rsi
   29af8:	48 89 c7             	mov    %rax,%rdi
   29afb:	e8 20 02 ff ff       	call   19d20 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEaSB8nn210000ERKc>
    __specs.__alignment_      = __format_spec::__alignment::__right;
   29b00:	8a 45 e8             	mov    -0x18(%rbp),%al
   29b03:	24 f8                	and    $0xf8,%al
   29b05:	0c 03                	or     $0x3,%al
   29b07:	88 45 e8             	mov    %al,-0x18(%rbp)
    __specs.__fill_.__data[0] = _CharT('0');
   29b0a:	c6 45 f4 30          	movb   $0x30,-0xc(%rbp)
  if (__num_trailing_zeros)
   29b0e:	83 bd 4c fb ff ff 00 	cmpl   $0x0,-0x4b4(%rbp)
   29b15:	0f 84 a2 00 00 00    	je     29bbd <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x5ad>
        __first, __result.__last, std::move(__out_it), __specs, __size, __result.__exponent, __num_trailing_zeros);
   29b1b:	48 8b 85 08 fb ff ff 	mov    -0x4f8(%rbp),%rax
   29b22:	48 89 85 68 fa ff ff 	mov    %rax,-0x598(%rbp)
   29b29:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
   29b30:	48 89 85 70 fa ff ff 	mov    %rax,-0x590(%rbp)
   29b37:	48 8d bd 10 fb ff ff 	lea    -0x4f0(%rbp),%rdi
   29b3e:	e8 5d 00 ff ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   29b43:	48 8b bd 68 fa ff ff 	mov    -0x598(%rbp),%rdi
   29b4a:	48 8b b5 70 fa ff ff 	mov    -0x590(%rbp),%rsi
   29b51:	48 8b 00             	mov    (%rax),%rax
   29b54:	48 89 85 f8 fa ff ff 	mov    %rax,-0x508(%rbp)
   29b5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   29b5f:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
   29b66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   29b6a:	48 89 85 f0 fa ff ff 	mov    %rax,-0x510(%rbp)
   29b71:	4c 8b 8d 50 fb ff ff 	mov    -0x4b0(%rbp),%r9
   29b78:	4c 8b 95 80 fb ff ff 	mov    -0x480(%rbp),%r10
   29b7f:	4c 63 9d 4c fb ff ff 	movslq -0x4b4(%rbp),%r11
    return __formatter::__write_using_trailing_zeros(
   29b86:	48 8b 95 f8 fa ff ff 	mov    -0x508(%rbp),%rdx
   29b8d:	48 8b 8d e8 fa ff ff 	mov    -0x518(%rbp),%rcx
   29b94:	4c 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%r8
   29b9b:	48 89 e0             	mov    %rsp,%rax
   29b9e:	4c 89 58 08          	mov    %r11,0x8(%rax)
   29ba2:	4c 89 10             	mov    %r10,(%rax)
   29ba5:	e8 66 cc ff ff       	call   26810 <_ZNSt3__111__formatter28__write_using_trailing_zerosB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_EPS4_SC_T1_NS_13__format_spec23__parsed_specificationsIT0_EEmSC_m>
   29baa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   29bae:	c7 85 2c fb ff ff 01 	movl   $0x1,-0x4d4(%rbp)
   29bb5:	00 00 00 
   29bb8:	e9 85 00 00 00       	jmp    29c42 <_ZNSt3__111__formatter23__format_floating_pointB8nn210000ITkNS_14floating_pointEecNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EE+0x632>
  return __formatter::__write(__first, __result.__last, std::move(__out_it), __specs, __size);
   29bbd:	48 8b 85 08 fb ff ff 	mov    -0x4f8(%rbp),%rax
   29bc4:	48 89 85 58 fa ff ff 	mov    %rax,-0x5a8(%rbp)
   29bcb:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
   29bd2:	48 89 85 60 fa ff ff 	mov    %rax,-0x5a0(%rbp)
   29bd9:	48 8d bd 10 fb ff ff 	lea    -0x4f0(%rbp),%rdi
   29be0:	e8 bb ff fe ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   29be5:	48 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%rdi
   29bec:	48 8b b5 60 fa ff ff 	mov    -0x5a0(%rbp),%rsi
   29bf3:	48 8b 00             	mov    (%rax),%rax
   29bf6:	48 89 85 e0 fa ff ff 	mov    %rax,-0x520(%rbp)
   29bfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   29c01:	48 89 85 d0 fa ff ff 	mov    %rax,-0x530(%rbp)
   29c08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   29c0c:	48 89 85 d8 fa ff ff 	mov    %rax,-0x528(%rbp)
   29c13:	4c 8b 8d 50 fb ff ff 	mov    -0x4b0(%rbp),%r9
   29c1a:	48 8b 95 e0 fa ff ff 	mov    -0x520(%rbp),%rdx
   29c21:	48 8b 8d d0 fa ff ff 	mov    -0x530(%rbp),%rcx
   29c28:	4c 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%r8
   29c2f:	e8 ec 54 ff ff       	call   1f120 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS7_EES8_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES6_S6_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   29c34:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   29c38:	c7 85 2c fb ff ff 01 	movl   $0x1,-0x4d4(%rbp)
   29c3f:	00 00 00 
   29c42:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
}
   29c49:	e8 72 f1 ff ff       	call   28dc0 <_ZNSt3__111__formatter14__float_bufferIdED2B8nn210000Ev>
   29c4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29c52:	48 81 c4 c0 05 00 00 	add    $0x5c0,%rsp
   29c59:	5d                   	pop    %rbp
   29c5a:	c3                   	ret
   29c5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000029c60 <_ZNSt3__16__math7signbitB8nn210000IvEEbe>:
[[__nodiscard__]] inline _LIBCPP_SIGNBIT_CONSTEXPR _LIBCPP_HIDE_FROM_ABI bool signbit(long double __x) _NOEXCEPT {
   29c60:	55                   	push   %rbp
   29c61:	48 89 e5             	mov    %rsp,%rbp
   29c64:	db 6d 10             	fldt   0x10(%rbp)
   29c67:	db 7d f0             	fstpt  -0x10(%rbp)
  return __builtin_signbit(__x);
   29c6a:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
   29c6e:	c1 e8 0f             	shr    $0xf,%eax
   29c71:	24 01                	and    $0x1,%al
   29c73:	5d                   	pop    %rbp
   29c74:	c3                   	ret
   29c75:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   29c7c:	00 00 00 
   29c7f:	90                   	nop

0000000000029c80 <_ZNSt3__16__math8isfiniteB8nn210000Ee>:
[[__nodiscard__]] inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI bool isfinite(long double __x) _NOEXCEPT {
   29c80:	55                   	push   %rbp
   29c81:	48 89 e5             	mov    %rsp,%rbp
   29c84:	db 6d 10             	fldt   0x10(%rbp)
   29c87:	db 7d f0             	fstpt  -0x10(%rbp)
  return __builtin_isfinite(__x);
   29c8a:	db 6d f0             	fldt   -0x10(%rbp)
   29c8d:	db 7d e0             	fstpt  -0x20(%rbp)
   29c90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   29c94:	48 c1 e8 3f          	shr    $0x3f,%rax
   29c98:	88 c2                	mov    %al,%dl
   29c9a:	0f b7 45 e8          	movzwl -0x18(%rbp),%eax
   29c9e:	25 ff 7f 00 00       	and    $0x7fff,%eax
   29ca3:	89 c1                	mov    %eax,%ecx
   29ca5:	ff c9                	dec    %ecx
   29ca7:	0f b7 c9             	movzwl %cx,%ecx
   29caa:	81 e9 fe 7f 00 00    	sub    $0x7ffe,%ecx
   29cb0:	0f 92 c1             	setb   %cl
   29cb3:	20 d1                	and    %dl,%cl
   29cb5:	48 85 c0             	test   %rax,%rax
   29cb8:	0f 94 c0             	sete   %al
   29cbb:	08 c8                	or     %cl,%al
   29cbd:	24 01                	and    $0x1,%al
   29cbf:	5d                   	pop    %rbp
   29cc0:	c3                   	ret
   29cc1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   29cc8:	00 00 00 
   29ccb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000029cd0 <_ZNSt3__16__math5isnanB8nn210000Ee>:
}

[[__nodiscard__]] inline _LIBCPP_CONSTEXPR_SINCE_CXX23 _LIBCPP_HIDE_FROM_ABI bool isnan(long double __x) _NOEXCEPT {
   29cd0:	55                   	push   %rbp
   29cd1:	48 89 e5             	mov    %rsp,%rbp
   29cd4:	db 6d 10             	fldt   0x10(%rbp)
   29cd7:	db 7d f0             	fstpt  -0x10(%rbp)
  return __builtin_isnan(__x);
   29cda:	db 6d f0             	fldt   -0x10(%rbp)
   29cdd:	df e8                	fucomip %st(0),%st
   29cdf:	0f 9a c0             	setp   %al
   29ce2:	24 01                	and    $0x1,%al
   29ce4:	5d                   	pop    %rbp
   29ce5:	c3                   	ret
   29ce6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   29ced:	00 00 00 

0000000000029cf0 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE>:
    __format_spec::__type __type) {
   29cf0:	55                   	push   %rbp
   29cf1:	48 89 e5             	mov    %rsp,%rbp
   29cf4:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
   29cfb:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
   29cff:	89 c8                	mov    %ecx,%eax
   29d01:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
   29d04:	89 45 a8             	mov    %eax,-0x58(%rbp)
   29d07:	89 d0                	mov    %edx,%eax
   29d09:	8b 55 a8             	mov    -0x58(%rbp),%edx
   29d0c:	89 45 ac             	mov    %eax,-0x54(%rbp)
   29d0f:	48 89 f0             	mov    %rsi,%rax
   29d12:	8b 75 ac             	mov    -0x54(%rbp),%esi
   29d15:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   29d19:	49 89 f8             	mov    %rdi,%r8
   29d1c:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   29d20:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
   29d24:	44 88 c8             	mov    %r9b,%al
   29d27:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
   29d2b:	db 6d 10             	fldt   0x10(%rbp)
   29d2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   29d32:	db 7d e0             	fstpt  -0x20(%rbp)
   29d35:	40 80 e6 01          	and    $0x1,%sil
   29d39:	40 88 75 df          	mov    %sil,-0x21(%rbp)
   29d3d:	80 e2 01             	and    $0x1,%dl
   29d40:	88 55 de             	mov    %dl,-0x22(%rbp)
   29d43:	88 4d dd             	mov    %cl,-0x23(%rbp)
   29d46:	88 45 dc             	mov    %al,-0x24(%rbp)
  char* __first = __formatter::__insert_sign(__buffer.begin(), __negative, __sign);
   29d49:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29d4d:	e8 2e f0 ff ff       	call   28d80 <_ZNKSt3__111__formatter14__float_bufferIdE5beginB8nn210000Ev>
   29d52:	48 89 c7             	mov    %rax,%rdi
   29d55:	0f b6 55 dd          	movzbl -0x23(%rbp),%edx
   29d59:	0f b6 75 df          	movzbl -0x21(%rbp),%esi
   29d5d:	83 e6 01             	and    $0x1,%esi
   29d60:	e8 5b 42 ff ff       	call   1dfc0 <_ZNSt3__111__formatter13__insert_signB8nn210000ITkNS_19contiguous_iteratorEPcQ7same_asIcNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS6_EES7_E4type10value_typeEEEES5_S5_bNS_13__format_spec6__signE>
   29d65:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  switch (__type) {
   29d69:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
   29d6d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   29d71:	48 83 e8 12          	sub    $0x12,%rax
   29d75:	0f 87 76 02 00 00    	ja     29ff1 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x301>
   29d7b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   29d7f:	48 8d 05 a6 4f 00 00 	lea    0x4fa6(%rip),%rax        # 2ed2c <_ZNSt3__16__itoa11__pow10_128E+0x54c>
   29d86:	48 63 0c 88          	movslq (%rax,%rcx,4),%rcx
   29d8a:	48 01 c8             	add    %rcx,%rax
   29d8d:	ff e0                	jmp    *%rax
    if (__has_precision)
   29d8f:	f6 45 de 01          	testb  $0x1,-0x22(%rbp)
   29d93:	74 37                	je     29dcc <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0xdc>
      return __formatter::__format_buffer_general_lower_case(__buffer, __value, __buffer.__precision(), __first);
   29d95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29d99:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   29d9d:	db 6d e0             	fldt   -0x20(%rbp)
   29da0:	db 7d 8c             	fstpt  -0x74(%rbp)
   29da3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29da7:	e8 a4 f1 ff ff       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   29dac:	db 6d 8c             	fldt   -0x74(%rbp)
   29daf:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29db3:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   29db7:	89 c2                	mov    %eax,%edx
   29db9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   29dbd:	48 89 e0             	mov    %rsp,%rax
   29dc0:	db 38                	fstpt  (%rax)
   29dc2:	e8 49 02 00 00       	call   2a010 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   29dc7:	e9 2a 02 00 00       	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
   29dcc:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
      return __formatter::__format_buffer_default(__buffer, __value, __first);
   29dd0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   29dd4:	db 6d e0             	fldt   -0x20(%rbp)
   29dd7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   29ddb:	48 89 e0             	mov    %rsp,%rax
   29dde:	db 38                	fstpt  (%rax)
   29de0:	e8 4b 03 00 00       	call   2a130 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc>
   29de5:	e9 0c 02 00 00       	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
        __buffer, __value, __has_precision ? __buffer.__precision() : -1, __first);
   29dea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29dee:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   29df5:	db 6d e0             	fldt   -0x20(%rbp)
   29df8:	db 7d 80             	fstpt  -0x80(%rbp)
   29dfb:	f6 45 de 01          	testb  $0x1,-0x22(%rbp)
   29dff:	74 11                	je     29e12 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x122>
   29e01:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29e05:	e8 46 f1 ff ff       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   29e0a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
   29e10:	eb 0d                	jmp    29e1f <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x12f>
   29e12:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   29e17:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
   29e1d:	eb 00                	jmp    29e1f <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x12f>
   29e1f:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
   29e26:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29e2a:	db 6d 80             	fldt   -0x80(%rbp)
   29e2d:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
   29e33:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    return __formatter::__format_buffer_hexadecimal_lower_case(
   29e37:	48 89 e0             	mov    %rsp,%rax
   29e3a:	db 38                	fstpt  (%rax)
   29e3c:	e8 9f 03 00 00       	call   2a1e0 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   29e41:	e9 b0 01 00 00       	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
        __buffer, __value, __has_precision ? __buffer.__precision() : -1, __first);
   29e46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29e4a:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   29e51:	db 6d e0             	fldt   -0x20(%rbp)
   29e54:	db bd 68 ff ff ff    	fstpt  -0x98(%rbp)
   29e5a:	f6 45 de 01          	testb  $0x1,-0x22(%rbp)
   29e5e:	74 11                	je     29e71 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x181>
   29e60:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29e64:	e8 e7 f0 ff ff       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   29e69:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
   29e6f:	eb 0d                	jmp    29e7e <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x18e>
   29e71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   29e76:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
   29e7c:	eb 00                	jmp    29e7e <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x18e>
   29e7e:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   29e85:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29e89:	db ad 68 ff ff ff    	fldt   -0x98(%rbp)
   29e8f:	8b 95 5c ff ff ff    	mov    -0xa4(%rbp),%edx
   29e95:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    return __formatter::__format_buffer_hexadecimal_upper_case(
   29e99:	48 89 e0             	mov    %rsp,%rax
   29e9c:	db 38                	fstpt  (%rax)
   29e9e:	e8 6d 04 00 00       	call   2a310 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_upper_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   29ea3:	e9 4e 01 00 00       	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
    return __formatter::__format_buffer_scientific_lower_case(__buffer, __value, __buffer.__precision(), __first);
   29ea8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29eac:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   29eb3:	db 6d e0             	fldt   -0x20(%rbp)
   29eb6:	db bd 44 ff ff ff    	fstpt  -0xbc(%rbp)
   29ebc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29ec0:	e8 8b f0 ff ff       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   29ec5:	db ad 44 ff ff ff    	fldt   -0xbc(%rbp)
   29ecb:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29ecf:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
   29ed6:	89 c2                	mov    %eax,%edx
   29ed8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   29edc:	48 89 e0             	mov    %rsp,%rax
   29edf:	db 38                	fstpt  (%rax)
   29ee1:	e8 9a 04 00 00       	call   2a380 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   29ee6:	e9 0b 01 00 00       	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
    return __formatter::__format_buffer_scientific_upper_case(__buffer, __value, __buffer.__precision(), __first);
   29eeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29eef:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   29ef6:	db 6d e0             	fldt   -0x20(%rbp)
   29ef9:	db bd 2c ff ff ff    	fstpt  -0xd4(%rbp)
   29eff:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29f03:	e8 48 f0 ff ff       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   29f08:	db ad 2c ff ff ff    	fldt   -0xd4(%rbp)
   29f0e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29f12:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
   29f19:	89 c2                	mov    %eax,%edx
   29f1b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   29f1f:	48 89 e0             	mov    %rsp,%rax
   29f22:	db 38                	fstpt  (%rax)
   29f24:	e8 17 05 00 00       	call   2a440 <_ZNSt3__111__formatter37__format_buffer_scientific_upper_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   29f29:	e9 c8 00 00 00       	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
    return __formatter::__format_buffer_fixed(__buffer, __value, __buffer.__precision(), __first);
   29f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29f32:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   29f39:	db 6d e0             	fldt   -0x20(%rbp)
   29f3c:	db bd 14 ff ff ff    	fstpt  -0xec(%rbp)
   29f42:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29f46:	e8 05 f0 ff ff       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   29f4b:	db ad 14 ff ff ff    	fldt   -0xec(%rbp)
   29f51:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29f55:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
   29f5c:	89 c2                	mov    %eax,%edx
   29f5e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   29f62:	48 89 e0             	mov    %rsp,%rax
   29f65:	db 38                	fstpt  (%rax)
   29f67:	e8 34 05 00 00       	call   2a4a0 <_ZNSt3__111__formatter21__format_buffer_fixedB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   29f6c:	e9 85 00 00 00       	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
    return __formatter::__format_buffer_general_lower_case(__buffer, __value, __buffer.__precision(), __first);
   29f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29f75:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   29f7c:	db 6d e0             	fldt   -0x20(%rbp)
   29f7f:	db bd fc fe ff ff    	fstpt  -0x104(%rbp)
   29f85:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29f89:	e8 c2 ef ff ff       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   29f8e:	db ad fc fe ff ff    	fldt   -0x104(%rbp)
   29f94:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29f98:	48 8b b5 08 ff ff ff 	mov    -0xf8(%rbp),%rsi
   29f9f:	89 c2                	mov    %eax,%edx
   29fa1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   29fa5:	48 89 e0             	mov    %rsp,%rax
   29fa8:	db 38                	fstpt  (%rax)
   29faa:	e8 61 00 00 00       	call   2a010 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   29faf:	eb 45                	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
    return __formatter::__format_buffer_general_upper_case(__buffer, __value, __buffer.__precision(), __first);
   29fb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   29fb5:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   29fbc:	db 6d e0             	fldt   -0x20(%rbp)
   29fbf:	db bd e4 fe ff ff    	fstpt  -0x11c(%rbp)
   29fc5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   29fc9:	e8 82 ef ff ff       	call   28f50 <_ZNKSt3__111__formatter14__float_bufferIdE11__precisionB8nn210000Ev>
   29fce:	db ad e4 fe ff ff    	fldt   -0x11c(%rbp)
   29fd4:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   29fd8:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
   29fdf:	89 c2                	mov    %eax,%edx
   29fe1:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   29fe5:	48 89 e0             	mov    %rsp,%rax
   29fe8:	db 38                	fstpt  (%rax)
   29fea:	e8 51 05 00 00       	call   2a540 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   29fef:	eb 05                	jmp    29ff6 <_ZNSt3__111__formatter15__format_bufferB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_bbNS_13__format_spec6__signENS8_6__typeE+0x306>
    __libcpp_unreachable();
   29ff1:	e8 7a 07 ff ff       	call   1a770 <_ZNSt3__120__libcpp_unreachableB8nn210000Ev>
   29ff6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
}
   29ffa:	48 81 c4 30 01 00 00 	add    $0x130,%rsp
   2a001:	5d                   	pop    %rbp
   2a002:	c3                   	ret
   2a003:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2a00a:	00 00 00 
   2a00d:	0f 1f 00             	nopl   (%rax)

000000000002a010 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_general_lower_case(__float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   2a010:	55                   	push   %rbp
   2a011:	48 89 e5             	mov    %rsp,%rbp
   2a014:	48 83 ec 70          	sub    $0x70,%rsp
   2a018:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   2a01c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   2a020:	db 6d 10             	fldt   0x10(%rbp)
   2a023:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2a027:	db 7d e0             	fstpt  -0x20(%rbp)
   2a02a:	89 55 dc             	mov    %edx,-0x24(%rbp)
   2a02d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  __buffer.__remove_trailing_zeros();
   2a031:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a035:	e8 76 f3 ff ff       	call   293b0 <_ZNSt3__111__formatter14__float_bufferIdE23__remove_trailing_zerosB8nn210000Ev>
   2a03a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  __result.__integral = __integral;
   2a03e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a042:	48 89 07             	mov    %rax,(%rdi)
  __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::general, __precision);
   2a045:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a049:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2a04d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a051:	e8 ca f3 ff ff       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   2a056:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   2a05a:	48 89 c6             	mov    %rax,%rsi
   2a05d:	db 6d e0             	fldt   -0x20(%rbp)
   2a060:	8b 4d dc             	mov    -0x24(%rbp),%ecx
   2a063:	48 89 e0             	mov    %rsp,%rax
   2a066:	db 38                	fstpt  (%rax)
   2a068:	ba 03 00 00 00       	mov    $0x3,%edx
   2a06d:	e8 2e 05 00 00       	call   2a5a0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_NS_12chars_formatEi>
   2a072:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   2a076:	48 89 47 18          	mov    %rax,0x18(%rdi)
  char* __first = __integral + 1;
   2a07a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a07e:	48 83 c0 01          	add    $0x1,%rax
   2a082:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (__first == __result.__last) {
   2a086:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a08a:	48 3b 47 18          	cmp    0x18(%rdi),%rax
   2a08e:	75 16                	jne    2a0a6 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x96>
   2a090:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    __result.__radix_point = __result.__last;
   2a094:	48 8b 48 18          	mov    0x18(%rax),%rcx
   2a098:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __result.__last;
   2a09c:	48 8b 48 18          	mov    0x18(%rax),%rcx
   2a0a0:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   2a0a4:	eb 79                	jmp    2a11f <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10f>
   2a0a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    __result.__exponent = __formatter::__find_exponent(__first, __result.__last);
   2a0aa:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2a0ae:	48 8b 70 18          	mov    0x18(%rax),%rsi
   2a0b2:	e8 69 cf ff ff       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   2a0b7:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   2a0bb:	48 89 41 10          	mov    %rax,0x10(%rcx)
    if (__result.__exponent != __result.__last)
   2a0bf:	48 8b 41 10          	mov    0x10(%rcx),%rax
   2a0c3:	48 3b 41 18          	cmp    0x18(%rcx),%rax
   2a0c7:	74 30                	je     2a0f9 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xe9>
      __result.__radix_point = *__first == '.' ? __first : __result.__last;
   2a0c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a0cd:	0f be 00             	movsbl (%rax),%eax
   2a0d0:	83 f8 2e             	cmp    $0x2e,%eax
   2a0d3:	75 0a                	jne    2a0df <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xcf>
   2a0d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a0d9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   2a0dd:	eb 0c                	jmp    2a0eb <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0xdb>
   2a0df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2a0e3:	48 8b 40 18          	mov    0x18(%rax),%rax
   2a0e7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   2a0eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2a0ef:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   2a0f3:	48 89 48 08          	mov    %rcx,0x8(%rax)
   2a0f7:	eb 24                	jmp    2a11d <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10d>
   2a0f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
      __result.__radix_point = std::find(__first, __result.__last, '.');
   2a0fd:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2a101:	48 8b 70 18          	mov    0x18(%rax),%rsi
   2a105:	c6 45 c7 2e          	movb   $0x2e,-0x39(%rbp)
   2a109:	48 8d 55 c7          	lea    -0x39(%rbp),%rdx
   2a10d:	e8 be cf ff ff       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   2a112:	48 89 c1             	mov    %rax,%rcx
   2a115:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2a119:	48 89 48 08          	mov    %rcx,0x8(%rax)
   2a11d:	eb 00                	jmp    2a11f <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x10f>
   2a11f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  return __result;
   2a123:	48 83 c4 70          	add    $0x70,%rsp
   2a127:	5d                   	pop    %rbp
   2a128:	c3                   	ret
   2a129:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000002a130 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc>:
__format_buffer_default(const __float_buffer<_Fp>& __buffer, _Tp __value, char* __integral) {
   2a130:	55                   	push   %rbp
   2a131:	48 89 e5             	mov    %rsp,%rbp
   2a134:	48 83 ec 60          	sub    $0x60,%rsp
   2a138:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   2a13c:	48 89 f8             	mov    %rdi,%rax
   2a13f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2a143:	db 6d 10             	fldt   0x10(%rbp)
   2a146:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2a14a:	db 7d e0             	fstpt  -0x20(%rbp)
   2a14d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  __result.__integral = __integral;
   2a151:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2a155:	48 89 07             	mov    %rax,(%rdi)
  __result.__last     = __formatter::__to_buffer(__integral, __buffer.end(), __value);
   2a158:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2a15c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2a160:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a164:	e8 b7 f2 ff ff       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   2a169:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2a16d:	48 89 c6             	mov    %rax,%rsi
   2a170:	db 6d e0             	fldt   -0x20(%rbp)
   2a173:	48 89 e0             	mov    %rsp,%rax
   2a176:	db 38                	fstpt  (%rax)
   2a178:	e8 73 04 00 00       	call   2a5f0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_>
   2a17d:	48 89 c1             	mov    %rax,%rcx
   2a180:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a184:	48 89 48 18          	mov    %rcx,0x18(%rax)
  __result.__exponent = __formatter::__find_exponent(__result.__integral, __result.__last);
   2a188:	48 8b 38             	mov    (%rax),%rdi
   2a18b:	48 8b 70 18          	mov    0x18(%rax),%rsi
   2a18f:	e8 8c ce ff ff       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   2a194:	48 89 c1             	mov    %rax,%rcx
   2a197:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a19b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  __result.__radix_point = std::find(__result.__integral + 1, __result.__exponent, '.');
   2a19f:	48 8b 38             	mov    (%rax),%rdi
   2a1a2:	48 83 c7 01          	add    $0x1,%rdi
   2a1a6:	48 8b 70 10          	mov    0x10(%rax),%rsi
   2a1aa:	c6 45 d7 2e          	movb   $0x2e,-0x29(%rbp)
   2a1ae:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
   2a1b2:	e8 19 cf ff ff       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   2a1b7:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2a1bb:	48 89 47 08          	mov    %rax,0x8(%rdi)
  if (__result.__radix_point == __result.__exponent)
   2a1bf:	48 8b 47 08          	mov    0x8(%rdi),%rax
   2a1c3:	48 3b 47 10          	cmp    0x10(%rdi),%rax
   2a1c7:	75 0c                	jne    2a1d5 <_ZNSt3__111__formatter23__format_buffer_defaultB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_Pc+0xa5>
   2a1c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    __result.__radix_point = __result.__last;
   2a1cd:	48 8b 48 18          	mov    0x18(%rax),%rcx
   2a1d1:	48 89 48 08          	mov    %rcx,0x8(%rax)
   2a1d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  return __result;
   2a1d9:	48 83 c4 60          	add    $0x60,%rsp
   2a1dd:	5d                   	pop    %rbp
   2a1de:	c3                   	ret
   2a1df:	90                   	nop

000000000002a1e0 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   2a1e0:	55                   	push   %rbp
   2a1e1:	48 89 e5             	mov    %rsp,%rbp
   2a1e4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   2a1eb:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   2a1ef:	48 89 f8             	mov    %rdi,%rax
   2a1f2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2a1f6:	db 6d 10             	fldt   0x10(%rbp)
   2a1f9:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2a1fd:	db 7d e0             	fstpt  -0x20(%rbp)
   2a200:	89 55 dc             	mov    %edx,-0x24(%rbp)
   2a203:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  __result.__integral = __integral;
   2a207:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a20b:	48 89 07             	mov    %rax,(%rdi)
  if (__precision == -1)
   2a20e:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
   2a212:	75 37                	jne    2a24b <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x6b>
    __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::hex);
   2a214:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a218:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   2a21c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a220:	e8 fb f1 ff ff       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   2a225:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   2a229:	48 89 c6             	mov    %rax,%rsi
   2a22c:	db 6d e0             	fldt   -0x20(%rbp)
   2a22f:	48 89 e0             	mov    %rsp,%rax
   2a232:	db 38                	fstpt  (%rax)
   2a234:	ba 04 00 00 00       	mov    $0x4,%edx
   2a239:	e8 f2 03 00 00       	call   2a630 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_NS_12chars_formatE>
   2a23e:	48 89 c1             	mov    %rax,%rcx
   2a241:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a245:	48 89 48 18          	mov    %rcx,0x18(%rax)
   2a249:	eb 38                	jmp    2a283 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xa3>
    __result.__last = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::hex, __precision);
   2a24b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a24f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   2a253:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a257:	e8 c4 f1 ff ff       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   2a25c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   2a260:	48 89 c6             	mov    %rax,%rsi
   2a263:	db 6d e0             	fldt   -0x20(%rbp)
   2a266:	8b 4d dc             	mov    -0x24(%rbp),%ecx
   2a269:	48 89 e0             	mov    %rsp,%rax
   2a26c:	db 38                	fstpt  (%rax)
   2a26e:	ba 04 00 00 00       	mov    $0x4,%edx
   2a273:	e8 28 03 00 00       	call   2a5a0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_NS_12chars_formatEi>
   2a278:	48 89 c1             	mov    %rax,%rcx
   2a27b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a27f:	48 89 48 18          	mov    %rcx,0x18(%rax)
  char* __first = __integral + 1;
   2a283:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a287:	48 83 c0 01          	add    $0x1,%rax
   2a28b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (*__first == '.') {
   2a28f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a293:	0f be 00             	movsbl (%rax),%eax
   2a296:	83 f8 2e             	cmp    $0x2e,%eax
   2a299:	75 46                	jne    2a2e1 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x101>
   2a29b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    __result.__radix_point = __first;
   2a29f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2a2a3:	48 89 48 08          	mov    %rcx,0x8(%rax)
    char* __last        = __result.__last - 2;
   2a2a7:	48 8b 40 18          	mov    0x18(%rax),%rax
   2a2ab:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
   2a2af:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    __first             = __last - __traits<_Fp>::__hex_precision_digits;
   2a2b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a2b7:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
   2a2bb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    __result.__exponent = std::find(__first, __last, 'p');
   2a2bf:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2a2c3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   2a2c7:	c6 45 bf 70          	movb   $0x70,-0x41(%rbp)
   2a2cb:	48 8d 55 bf          	lea    -0x41(%rbp),%rdx
   2a2cf:	e8 fc cd ff ff       	call   270d0 <_ZNSt3__14findB8nn210000IPccEET_S2_S2_RKT0_>
   2a2d4:	48 89 c1             	mov    %rax,%rcx
   2a2d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a2db:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   2a2df:	eb 14                	jmp    2a2f5 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0x115>
   2a2e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    __result.__radix_point = __result.__last;
   2a2e5:	48 8b 48 18          	mov    0x18(%rax),%rcx
   2a2e9:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __first;
   2a2ed:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2a2f1:	48 89 48 10          	mov    %rcx,0x10(%rax)
   2a2f5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  return __result;
   2a2f9:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   2a300:	5d                   	pop    %rbp
   2a301:	c3                   	ret
   2a302:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2a309:	00 00 00 
   2a30c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000002a310 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_upper_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   2a310:	55                   	push   %rbp
   2a311:	48 89 e5             	mov    %rsp,%rbp
   2a314:	48 83 ec 50          	sub    $0x50,%rsp
   2a318:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   2a31c:	48 89 f8             	mov    %rdi,%rax
   2a31f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2a323:	db 6d 10             	fldt   0x10(%rbp)
   2a326:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2a32a:	db 7d e0             	fstpt  -0x20(%rbp)
   2a32d:	89 55 dc             	mov    %edx,-0x24(%rbp)
   2a330:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      __formatter::__format_buffer_hexadecimal_lower_case(__buffer, __value, __precision, __integral);
   2a334:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   2a338:	db 6d e0             	fldt   -0x20(%rbp)
   2a33b:	8b 55 dc             	mov    -0x24(%rbp),%edx
   2a33e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2a342:	48 89 e0             	mov    %rsp,%rax
   2a345:	db 38                	fstpt  (%rax)
   2a347:	e8 94 fe ff ff       	call   2a1e0 <_ZNSt3__111__formatter38__format_buffer_hexadecimal_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   2a34c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  std::transform(__result.__integral, __result.__exponent, __result.__integral, __hex_to_upper);
   2a350:	48 8b 38             	mov    (%rax),%rdi
   2a353:	48 8b 70 10          	mov    0x10(%rax),%rsi
   2a357:	48 8b 10             	mov    (%rax),%rdx
   2a35a:	48 8d 0d df 3f ff ff 	lea    -0xc021(%rip),%rcx        # 1e340 <_ZNSt3__111__formatter14__hex_to_upperB8nn210000Ec>
   2a361:	e8 ba 4f ff ff       	call   1f320 <_ZNSt3__19transformB8nn210000IPcS1_PFccEEET0_T_S5_S4_T1_>
   2a366:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2a36a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  *__result.__exponent = 'P';
   2a36e:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
   2a372:	c6 01 50             	movb   $0x50,(%rcx)
  return __result;
   2a375:	48 83 c4 50          	add    $0x50,%rsp
   2a379:	5d                   	pop    %rbp
   2a37a:	c3                   	ret
   2a37b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002a380 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   2a380:	55                   	push   %rbp
   2a381:	48 89 e5             	mov    %rsp,%rbp
   2a384:	48 83 ec 60          	sub    $0x60,%rsp
   2a388:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   2a38c:	48 89 f8             	mov    %rdi,%rax
   2a38f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2a393:	db 6d 10             	fldt   0x10(%rbp)
   2a396:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2a39a:	db 7d e0             	fstpt  -0x20(%rbp)
   2a39d:	89 55 dc             	mov    %edx,-0x24(%rbp)
   2a3a0:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  __result.__integral = __integral;
   2a3a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a3a8:	48 89 07             	mov    %rax,(%rdi)
      __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::scientific, __precision);
   2a3ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a3af:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2a3b3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a3b7:	e8 64 f0 ff ff       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   2a3bc:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   2a3c0:	48 89 c6             	mov    %rax,%rsi
   2a3c3:	db 6d e0             	fldt   -0x20(%rbp)
   2a3c6:	8b 4d dc             	mov    -0x24(%rbp),%ecx
   2a3c9:	48 89 e0             	mov    %rsp,%rax
   2a3cc:	db 38                	fstpt  (%rax)
   2a3ce:	ba 01 00 00 00       	mov    $0x1,%edx
   2a3d3:	e8 c8 01 00 00       	call   2a5a0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_NS_12chars_formatEi>
   2a3d8:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  __result.__last =
   2a3dc:	48 89 47 18          	mov    %rax,0x18(%rdi)
  char* __first = __integral + 1;
   2a3e0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a3e4:	48 83 c0 01          	add    $0x1,%rax
   2a3e8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (*__first == '.') {
   2a3ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a3f0:	0f be 00             	movsbl (%rax),%eax
   2a3f3:	83 f8 2e             	cmp    $0x2e,%eax
   2a3f6:	75 2a                	jne    2a422 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xa2>
   2a3f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    __result.__radix_point = __first;
   2a3fc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2a400:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __formatter::__find_exponent(__first + 1, __result.__last);
   2a404:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2a408:	48 83 c7 01          	add    $0x1,%rdi
   2a40c:	48 8b 70 18          	mov    0x18(%rax),%rsi
   2a410:	e8 0b cc ff ff       	call   27020 <_ZNSt3__111__formatter15__find_exponentB8nn210000EPcS1_>
   2a415:	48 89 c1             	mov    %rax,%rcx
   2a418:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a41c:	48 89 48 10          	mov    %rcx,0x10(%rax)
  } else {
   2a420:	eb 14                	jmp    2a436 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc+0xb6>
   2a422:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    __result.__radix_point = __result.__last;
   2a426:	48 8b 48 18          	mov    0x18(%rax),%rcx
   2a42a:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __result.__exponent    = __first;
   2a42e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2a432:	48 89 48 10          	mov    %rcx,0x10(%rax)
   2a436:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  return __result;
   2a43a:	48 83 c4 60          	add    $0x60,%rsp
   2a43e:	5d                   	pop    %rbp
   2a43f:	c3                   	ret

000000000002a440 <_ZNSt3__111__formatter37__format_buffer_scientific_upper_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
    const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   2a440:	55                   	push   %rbp
   2a441:	48 89 e5             	mov    %rsp,%rbp
   2a444:	48 83 ec 50          	sub    $0x50,%rsp
   2a448:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   2a44c:	48 89 f8             	mov    %rdi,%rax
   2a44f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2a453:	db 6d 10             	fldt   0x10(%rbp)
   2a456:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2a45a:	db 7d e0             	fstpt  -0x20(%rbp)
   2a45d:	89 55 dc             	mov    %edx,-0x24(%rbp)
   2a460:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      __formatter::__format_buffer_scientific_lower_case(__buffer, __value, __precision, __integral);
   2a464:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   2a468:	db 6d e0             	fldt   -0x20(%rbp)
   2a46b:	8b 55 dc             	mov    -0x24(%rbp),%edx
   2a46e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2a472:	48 89 e0             	mov    %rsp,%rax
   2a475:	db 38                	fstpt  (%rax)
   2a477:	e8 04 ff ff ff       	call   2a380 <_ZNSt3__111__formatter37__format_buffer_scientific_lower_caseB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>
   2a47c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2a480:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  *__result.__exponent = 'E';
   2a484:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
   2a488:	c6 01 45             	movb   $0x45,(%rcx)
  return __result;
   2a48b:	48 83 c4 50          	add    $0x50,%rsp
   2a48f:	5d                   	pop    %rbp
   2a490:	c3                   	ret
   2a491:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2a498:	00 00 00 
   2a49b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002a4a0 <_ZNSt3__111__formatter21__format_buffer_fixedB8nn210000IdeEENS0_14__float_resultERKNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_fixed(const __float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   2a4a0:	55                   	push   %rbp
   2a4a1:	48 89 e5             	mov    %rsp,%rbp
   2a4a4:	48 83 ec 60          	sub    $0x60,%rsp
   2a4a8:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
   2a4ac:	48 89 f8             	mov    %rdi,%rax
   2a4af:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2a4b3:	db 6d 10             	fldt   0x10(%rbp)
   2a4b6:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2a4ba:	db 7d e0             	fstpt  -0x20(%rbp)
   2a4bd:	89 55 dc             	mov    %edx,-0x24(%rbp)
   2a4c0:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  __result.__integral = __integral;
   2a4c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a4c8:	48 89 07             	mov    %rax,(%rdi)
  __result.__last     = __formatter::__to_buffer(__integral, __buffer.end(), __value, chars_format::fixed, __precision);
   2a4cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a4cf:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2a4d3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a4d7:	e8 44 ef ff ff       	call   29420 <_ZNKSt3__111__formatter14__float_bufferIdE3endB8nn210000Ev>
   2a4dc:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   2a4e0:	48 89 c6             	mov    %rax,%rsi
   2a4e3:	db 6d e0             	fldt   -0x20(%rbp)
   2a4e6:	8b 4d dc             	mov    -0x24(%rbp),%ecx
   2a4e9:	48 89 e0             	mov    %rsp,%rax
   2a4ec:	db 38                	fstpt  (%rax)
   2a4ee:	ba 02 00 00 00       	mov    $0x2,%edx
   2a4f3:	e8 a8 00 00 00       	call   2a5a0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_NS_12chars_formatEi>
   2a4f8:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2a4fc:	48 89 c1             	mov    %rax,%rcx
   2a4ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a503:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
  __result.__radix_point = __result.__last - (__precision + bool(__precision));
   2a507:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
   2a50b:	8b 55 dc             	mov    -0x24(%rbp),%edx
   2a50e:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   2a512:	40 0f 95 c6          	setne  %sil
   2a516:	40 80 e6 01          	and    $0x1,%sil
   2a51a:	40 0f b6 f6          	movzbl %sil,%esi
   2a51e:	01 f2                	add    %esi,%edx
   2a520:	48 63 f2             	movslq %edx,%rsi
   2a523:	31 d2                	xor    %edx,%edx
   2a525:	48 29 f2             	sub    %rsi,%rdx
   2a528:	48 01 d1             	add    %rdx,%rcx
   2a52b:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  __result.__exponent    = __result.__last;
   2a52f:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
   2a533:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  return __result;
   2a537:	48 83 c4 60          	add    $0x60,%rsp
   2a53b:	5d                   	pop    %rbp
   2a53c:	c3                   	ret
   2a53d:	0f 1f 00             	nopl   (%rax)

000000000002a540 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>:
__format_buffer_general_upper_case(__float_buffer<_Fp>& __buffer, _Tp __value, int __precision, char* __integral) {
   2a540:	55                   	push   %rbp
   2a541:	48 89 e5             	mov    %rsp,%rbp
   2a544:	48 83 ec 50          	sub    $0x50,%rsp
   2a548:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   2a54c:	48 89 f8             	mov    %rdi,%rax
   2a54f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2a553:	db 6d 10             	fldt   0x10(%rbp)
   2a556:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2a55a:	db 7d e0             	fstpt  -0x20(%rbp)
   2a55d:	89 55 dc             	mov    %edx,-0x24(%rbp)
   2a560:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  __float_result __result = __formatter::__format_buffer_general_lower_case(__buffer, __value, __precision, __integral);
   2a564:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   2a568:	db 6d e0             	fldt   -0x20(%rbp)
   2a56b:	8b 55 dc             	mov    -0x24(%rbp),%edx
   2a56e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2a572:	48 89 e0             	mov    %rsp,%rax
   2a575:	db 38                	fstpt  (%rax)
   2a577:	e8 94 fa ff ff       	call   2a010 <_ZNSt3__111__formatter34__format_buffer_general_lower_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc>
   2a57c:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  if (__result.__exponent != __result.__last)
   2a580:	48 8b 47 10          	mov    0x10(%rdi),%rax
   2a584:	48 3b 47 18          	cmp    0x18(%rdi),%rax
   2a588:	74 0b                	je     2a595 <_ZNSt3__111__formatter34__format_buffer_general_upper_caseB8nn210000IdeEENS0_14__float_resultERNS0_14__float_bufferIT_EET0_iPc+0x55>
   2a58a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    *__result.__exponent = 'E';
   2a58e:	48 8b 40 10          	mov    0x10(%rax),%rax
   2a592:	c6 00 45             	movb   $0x45,(%rax)
   2a595:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  return __result;
   2a599:	48 83 c4 50          	add    $0x50,%rsp
   2a59d:	5d                   	pop    %rbp
   2a59e:	c3                   	ret
   2a59f:	90                   	nop

000000000002a5a0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_NS_12chars_formatEi>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value, chars_format __fmt, int __precision) {
   2a5a0:	55                   	push   %rbp
   2a5a1:	48 89 e5             	mov    %rsp,%rbp
   2a5a4:	48 83 ec 50          	sub    $0x50,%rsp
   2a5a8:	db 6d 10             	fldt   0x10(%rbp)
   2a5ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2a5af:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2a5b3:	db 7d e0             	fstpt  -0x20(%rbp)
   2a5b6:	89 55 dc             	mov    %edx,-0x24(%rbp)
   2a5b9:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value, __fmt, __precision);
   2a5bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a5c0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2a5c4:	db 6d e0             	fldt   -0x20(%rbp)
   2a5c7:	8b 55 dc             	mov    -0x24(%rbp),%edx
   2a5ca:	8b 4d d8             	mov    -0x28(%rbp),%ecx
   2a5cd:	48 89 e0             	mov    %rsp,%rax
   2a5d0:	db 38                	fstpt  (%rax)
   2a5d2:	e8 b9 d5 fe ff       	call   17b90 <_ZNSt3__18to_charsEPcS0_eNS_12chars_formatEi>
   2a5d7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2a5db:	89 55 d0             	mov    %edx,-0x30(%rbp)
  return __r.ptr;
   2a5de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a5e2:	48 83 c4 50          	add    $0x50,%rsp
   2a5e6:	5d                   	pop    %rbp
   2a5e7:	c3                   	ret
   2a5e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2a5ef:	00 

000000000002a5f0 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value) {
   2a5f0:	55                   	push   %rbp
   2a5f1:	48 89 e5             	mov    %rsp,%rbp
   2a5f4:	48 83 ec 40          	sub    $0x40,%rsp
   2a5f8:	db 6d 10             	fldt   0x10(%rbp)
   2a5fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2a5ff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2a603:	db 7d e0             	fstpt  -0x20(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value);
   2a606:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a60a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2a60e:	db 6d e0             	fldt   -0x20(%rbp)
   2a611:	48 89 e0             	mov    %rsp,%rax
   2a614:	db 38                	fstpt  (%rax)
   2a616:	e8 f5 d3 fe ff       	call   17a10 <_ZNSt3__18to_charsEPcS0_e>
   2a61b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2a61f:	89 55 d8             	mov    %edx,-0x28(%rbp)
  return __r.ptr;
   2a622:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2a626:	48 83 c4 40          	add    $0x40,%rsp
   2a62a:	5d                   	pop    %rbp
   2a62b:	c3                   	ret
   2a62c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000002a630 <_ZNSt3__111__formatter11__to_bufferB8nn210000ITkNS_14floating_pointEeEEPcS2_S2_T_NS_12chars_formatE>:
_LIBCPP_HIDE_FROM_ABI char* __to_buffer(char* __first, char* __last, _Tp __value, chars_format __fmt) {
   2a630:	55                   	push   %rbp
   2a631:	48 89 e5             	mov    %rsp,%rbp
   2a634:	48 83 ec 50          	sub    $0x50,%rsp
   2a638:	db 6d 10             	fldt   0x10(%rbp)
   2a63b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2a63f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2a643:	db 7d e0             	fstpt  -0x20(%rbp)
   2a646:	89 55 dc             	mov    %edx,-0x24(%rbp)
  to_chars_result __r = std::to_chars(__first, __last, __value, __fmt);
   2a649:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a64d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2a651:	db 6d e0             	fldt   -0x20(%rbp)
   2a654:	8b 55 dc             	mov    -0x24(%rbp),%edx
   2a657:	48 89 e0             	mov    %rsp,%rax
   2a65a:	db 38                	fstpt  (%rax)
   2a65c:	e8 6f d4 fe ff       	call   17ad0 <_ZNSt3__18to_charsEPcS0_eNS_12chars_formatE>
   2a661:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2a665:	89 55 d0             	mov    %edx,-0x30(%rbp)
  return __r.ptr;
   2a668:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2a66c:	48 83 c4 50          	add    $0x50,%rsp
   2a670:	5d                   	pop    %rbp
   2a671:	c3                   	ret
   2a672:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2a679:	00 00 00 
   2a67c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000002a680 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRS4_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSK_>:
   2a680:	55                   	push   %rbp
   2a681:	48 89 e5             	mov    %rsp,%rbp
   2a684:	48 83 ec 10          	sub    $0x10,%rsp
   2a688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2a68c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2a690:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a694:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2a698:	48 8b 30             	mov    (%rax),%rsi
   2a69b:	e8 10 00 00 00       	call   2a6b0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIS3_EEDaSC_>
   2a6a0:	48 83 c4 10          	add    $0x10,%rsp
   2a6a4:	5d                   	pop    %rbp
   2a6a5:	c3                   	ret
   2a6a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2a6ad:	00 00 00 

000000000002a6b0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIS3_EEDaSC_>:
        [&](auto __arg) {
   2a6b0:	55                   	push   %rbp
   2a6b1:	48 89 e5             	mov    %rsp,%rbp
   2a6b4:	48 83 ec 40          	sub    $0x40,%rsp
   2a6b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2a6bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2a6c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2a6c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2a6c8:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   2a6cc:	e8 6f 00 00 00       	call   2a740 <_ZNSt3__19formatterIPKccEC2Ev>
   2a6d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            if (__parse)
   2a6d5:	48 8b 40 10          	mov    0x10(%rax),%rax
   2a6d9:	f6 00 01             	testb  $0x1,(%rax)
   2a6dc:	74 23                	je     2a701 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIS3_EEDaSC_+0x51>
   2a6de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   2a6e2:	48 8b 08             	mov    (%rax),%rcx
   2a6e5:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   2a6e9:	48 8b 30             	mov    (%rax),%rsi
   2a6ec:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2a6f0:	e8 6b 00 00 00       	call   2a760 <_ZNSt3__118__formatter_stringIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   2a6f5:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2a6f9:	48 89 c6             	mov    %rax,%rsi
   2a6fc:	e8 1f f7 fe ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   2a701:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   2a705:	48 8b 48 08          	mov    0x8(%rax),%rcx
   2a709:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   2a70d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2a711:	48 8b 50 08          	mov    0x8(%rax),%rdx
   2a715:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2a719:	e8 92 00 00 00       	call   2a7b0 <_ZNKSt3__19formatterIPKccE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorES2_RSC_>
   2a71e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2a722:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2a726:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2a72a:	e8 31 f4 fe ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   2a72f:	48 83 c4 40          	add    $0x40,%rsp
   2a733:	5d                   	pop    %rbp
   2a734:	c3                   	ret
   2a735:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2a73c:	00 00 00 
   2a73f:	90                   	nop

000000000002a740 <_ZNSt3__19formatterIPKccEC2Ev>:
  __format_spec::__parser<_CharT> __parser_{.__alignment_ = __format_spec::__alignment::__left};
};

// Formatter const char*.
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<const _CharT*, _CharT> : public __formatter_string<_CharT> {
   2a740:	55                   	push   %rbp
   2a741:	48 89 e5             	mov    %rsp,%rbp
   2a744:	48 83 ec 10          	sub    $0x10,%rsp
   2a748:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2a74c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a750:	e8 ab 00 00 00       	call   2a800 <_ZNSt3__118__formatter_stringIcEC2Ev>
   2a755:	48 83 c4 10          	add    $0x10,%rsp
   2a759:	5d                   	pop    %rbp
   2a75a:	c3                   	ret
   2a75b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002a760 <_ZNSt3__118__formatter_stringIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>:
  _LIBCPP_HIDE_FROM_ABI constexpr typename _ParseContext::iterator parse(_ParseContext& __ctx) {
   2a760:	55                   	push   %rbp
   2a761:	48 89 e5             	mov    %rsp,%rbp
   2a764:	48 83 ec 30          	sub    $0x30,%rsp
   2a768:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2a76c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2a770:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2a774:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    typename _ParseContext::iterator __result = __parser_.__parse(__ctx, __format_spec::__fields_string);
   2a778:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2a77c:	66 c7 45 e6 28 01    	movw   $0x128,-0x1a(%rbp)
   2a782:	66 8b 45 e6          	mov    -0x1a(%rbp),%ax
   2a786:	66 89 c2             	mov    %ax,%dx
   2a789:	e8 92 03 ff ff       	call   1ab20 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E>
   2a78e:	48 89 c1             	mov    %rax,%rcx
   2a791:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2a795:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    __format_spec::__process_display_type_string(__parser_.__type_);
   2a799:	8a 40 01             	mov    0x1(%rax),%al
   2a79c:	0f b6 f8             	movzbl %al,%edi
   2a79f:	e8 8c 01 00 00       	call   2a930 <_ZNSt3__113__format_spec29__process_display_type_stringB8nn210000ENS0_6__typeE>
    return __result;
   2a7a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2a7a8:	48 83 c4 30          	add    $0x30,%rsp
   2a7ac:	5d                   	pop    %rbp
   2a7ad:	c3                   	ret
   2a7ae:	66 90                	xchg   %ax,%ax

000000000002a7b0 <_ZNKSt3__19formatterIPKccE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorES2_RSC_>:
  using _Base _LIBCPP_NODEBUG = __formatter_string<_CharT>;

  template <class _FormatContext>
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(const _CharT* __str, _FormatContext& __ctx) const {
   2a7b0:	55                   	push   %rbp
   2a7b1:	48 89 e5             	mov    %rsp,%rbp
   2a7b4:	48 83 ec 40          	sub    $0x40,%rsp
   2a7b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2a7bc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   2a7c0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2a7c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2a7c8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    // - once to process the data.
    //
    // This sounds slower than writing the output directly. However internally
    // the output algorithms have optimizations for "bulk" operations, which
    // makes this faster than a single-pass character-by-character output.
    return _Base::format(basic_string_view<_CharT>(__str), __ctx);
   2a7cc:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   2a7d0:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   2a7d4:	e8 a7 8a fd ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   2a7d9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2a7dd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2a7e1:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   2a7e5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2a7e9:	e8 82 01 00 00       	call   2a970 <_ZNKSt3__118__formatter_stringIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorENS_17basic_string_viewIcNS_11char_traitsIcEEEERSA_>
   2a7ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2a7f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2a7f6:	48 83 c4 40          	add    $0x40,%rsp
   2a7fa:	5d                   	pop    %rbp
   2a7fb:	c3                   	ret
   2a7fc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000002a800 <_ZNSt3__118__formatter_stringIcEC2Ev>:
struct _LIBCPP_TEMPLATE_VIS __formatter_string {
   2a800:	55                   	push   %rbp
   2a801:	48 89 e5             	mov    %rsp,%rbp
   2a804:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2a808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2a80c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  __format_spec::__parser<_CharT> __parser_{.__alignment_ = __format_spec::__alignment::__left};
   2a810:	8a 08                	mov    (%rax),%cl
   2a812:	80 e1 f8             	and    $0xf8,%cl
   2a815:	80 c9 01             	or     $0x1,%cl
   2a818:	88 08                	mov    %cl,(%rax)
   2a81a:	8a 08                	mov    (%rax),%cl
   2a81c:	80 e1 e7             	and    $0xe7,%cl
   2a81f:	80 c9 00             	or     $0x0,%cl
   2a822:	88 08                	mov    %cl,(%rax)
   2a824:	8a 08                	mov    (%rax),%cl
   2a826:	80 e1 df             	and    $0xdf,%cl
   2a829:	80 c9 00             	or     $0x0,%cl
   2a82c:	88 08                	mov    %cl,(%rax)
   2a82e:	8a 08                	mov    (%rax),%cl
   2a830:	80 e1 bf             	and    $0xbf,%cl
   2a833:	80 c9 00             	or     $0x0,%cl
   2a836:	88 08                	mov    %cl,(%rax)
   2a838:	8a 08                	mov    (%rax),%cl
   2a83a:	80 e1 7f             	and    $0x7f,%cl
   2a83d:	80 c9 00             	or     $0x0,%cl
   2a840:	88 08                	mov    %cl,(%rax)
   2a842:	c6 40 01 00          	movb   $0x0,0x1(%rax)
   2a846:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a84a:	66 83 e1 fe          	and    $0xfffe,%cx
   2a84e:	66 83 c9 00          	or     $0x0,%cx
   2a852:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a856:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a85a:	66 83 e1 fd          	and    $0xfffd,%cx
   2a85e:	66 83 c9 00          	or     $0x0,%cx
   2a862:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a866:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a86a:	66 83 e1 fb          	and    $0xfffb,%cx
   2a86e:	66 83 c9 00          	or     $0x0,%cx
   2a872:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a876:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a87a:	66 83 e1 f7          	and    $0xfff7,%cx
   2a87e:	66 83 c9 00          	or     $0x0,%cx
   2a882:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a886:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a88a:	66 83 e1 ef          	and    $0xffef,%cx
   2a88e:	66 83 c9 00          	or     $0x0,%cx
   2a892:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a896:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a89a:	66 83 e1 df          	and    $0xffdf,%cx
   2a89e:	66 83 c9 00          	or     $0x0,%cx
   2a8a2:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a8a6:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a8aa:	66 81 e1 3f ff       	and    $0xff3f,%cx
   2a8af:	66 83 c9 00          	or     $0x0,%cx
   2a8b3:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a8b7:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a8bb:	66 81 e1 ff c0       	and    $0xc0ff,%cx
   2a8c0:	66 83 c9 00          	or     $0x0,%cx
   2a8c4:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a8c8:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a8cc:	66 81 e1 ff bf       	and    $0xbfff,%cx
   2a8d1:	66 83 c9 00          	or     $0x0,%cx
   2a8d5:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a8d9:	66 8b 48 02          	mov    0x2(%rax),%cx
   2a8dd:	66 81 e1 ff 7f       	and    $0x7fff,%cx
   2a8e2:	66 83 c9 00          	or     $0x0,%cx
   2a8e6:	66 89 48 02          	mov    %cx,0x2(%rax)
   2a8ea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   2a8f1:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%rax)
   2a8f8:	48 89 c1             	mov    %rax,%rcx
   2a8fb:	48 83 c1 0c          	add    $0xc,%rcx
  char __data[4] = {' '};
   2a8ff:	c6 40 0c 20          	movb   $0x20,0xc(%rax)
   2a903:	48 89 c8             	mov    %rcx,%rax
   2a906:	48 83 c0 01          	add    $0x1,%rax
   2a90a:	48 83 c1 04          	add    $0x4,%rcx
   2a90e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   2a912:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2a916:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2a91a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2a91e:	c6 00 00             	movb   $0x0,(%rax)
   2a921:	48 83 c0 01          	add    $0x1,%rax
   2a925:	48 39 c8             	cmp    %rcx,%rax
   2a928:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2a92c:	75 e8                	jne    2a916 <_ZNSt3__118__formatter_stringIcEC2Ev+0x116>
struct _LIBCPP_TEMPLATE_VIS __formatter_string {
   2a92e:	5d                   	pop    %rbp
   2a92f:	c3                   	ret

000000000002a930 <_ZNSt3__113__format_spec29__process_display_type_stringB8nn210000ENS0_6__typeE>:
_LIBCPP_HIDE_FROM_ABI constexpr void __process_display_type_string(__format_spec::__type __type) {
   2a930:	55                   	push   %rbp
   2a931:	48 89 e5             	mov    %rsp,%rbp
   2a934:	48 83 ec 10          	sub    $0x10,%rsp
   2a938:	40 88 f8             	mov    %dil,%al
   2a93b:	88 45 ff             	mov    %al,-0x1(%rbp)
  switch (__type) {
   2a93e:	8a 45 ff             	mov    -0x1(%rbp),%al
   2a941:	88 45 fe             	mov    %al,-0x2(%rbp)
   2a944:	2c 02                	sub    $0x2,%al
   2a946:	72 0b                	jb     2a953 <_ZNSt3__113__format_spec29__process_display_type_stringB8nn210000ENS0_6__typeE+0x23>
   2a948:	eb 00                	jmp    2a94a <_ZNSt3__113__format_spec29__process_display_type_stringB8nn210000ENS0_6__typeE+0x1a>
   2a94a:	8a 45 fe             	mov    -0x2(%rbp),%al
   2a94d:	2c 13                	sub    $0x13,%al
   2a94f:	75 04                	jne    2a955 <_ZNSt3__113__format_spec29__process_display_type_stringB8nn210000ENS0_6__typeE+0x25>
   2a951:	eb 00                	jmp    2a953 <_ZNSt3__113__format_spec29__process_display_type_stringB8nn210000ENS0_6__typeE+0x23>
    break;
   2a953:	eb 0c                	jmp    2a961 <_ZNSt3__113__format_spec29__process_display_type_stringB8nn210000ENS0_6__typeE+0x31>
    std::__throw_format_error("The type option contains an invalid value for a string formatting argument");
   2a955:	48 8d 3d 01 4e 00 00 	lea    0x4e01(%rip),%rdi        # 2f75d <.L.str.77>
   2a95c:	e8 df f1 fe ff       	call   19b40 <_ZNSt3__120__throw_format_errorB8nn210000EPKc>
}
   2a961:	48 83 c4 10          	add    $0x10,%rsp
   2a965:	5d                   	pop    %rbp
   2a966:	c3                   	ret
   2a967:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2a96e:	00 00 

000000000002a970 <_ZNKSt3__118__formatter_stringIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorENS_17basic_string_viewIcNS_11char_traitsIcEEEERSA_>:
  format(basic_string_view<_CharT> __str, _FormatContext& __ctx) const {
   2a970:	55                   	push   %rbp
   2a971:	48 89 e5             	mov    %rsp,%rbp
   2a974:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   2a97b:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   2a97f:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   2a983:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   2a987:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   2a98b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2a98f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    if (__parser_.__type_ == __format_spec::__type::__debug)
   2a993:	80 78 01 13          	cmpb   $0x13,0x1(%rax)
   2a997:	75 51                	jne    2a9ea <_ZNKSt3__118__formatter_stringIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorENS_17basic_string_viewIcNS_11char_traitsIcEEEERSA_+0x7a>
      return __formatter::__format_escaped_string(__str, __ctx.out(), __parser_.__get_parsed_std_specifications(__ctx));
   2a999:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2a99d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2a9a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2a9a5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2a9a9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2a9ad:	e8 5e f1 fe ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   2a9b2:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   2a9b6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2a9ba:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2a9be:	e8 4d 11 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   2a9c3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2a9c7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2a9cb:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2a9cf:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   2a9d3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   2a9d7:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   2a9db:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
   2a9df:	e8 6c 00 00 00       	call   2aa50 <_ZNSt3__111__formatter23__format_escaped_stringB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE>
   2a9e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2a9e8:	eb 4f                	jmp    2aa39 <_ZNKSt3__118__formatter_stringIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorENS_17basic_string_viewIcNS_11char_traitsIcEEEERSA_+0xc9>
    return __formatter::__write_string(__str, __ctx.out(), __parser_.__get_parsed_std_specifications(__ctx));
   2a9ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2a9ee:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   2a9f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2a9f6:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2a9fa:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   2a9fe:	e8 0d f1 fe ff       	call   19b10 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE3outB8nn210000Ev>
   2aa03:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   2aa07:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   2aa0b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2aa0f:	e8 fc 10 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   2aa14:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   2aa18:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
   2aa1c:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   2aa20:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   2aa24:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   2aa28:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   2aa2c:	4c 8b 45 90          	mov    -0x70(%rbp),%r8
   2aa30:	e8 eb 00 00 00       	call   2ab20 <_ZNSt3__111__formatter14__write_stringB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE>
   2aa35:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  }
   2aa39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2aa3d:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   2aa44:	5d                   	pop    %rbp
   2aa45:	c3                   	ret
   2aa46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2aa4d:	00 00 00 

000000000002aa50 <_ZNSt3__111__formatter23__format_escaped_stringB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE>:

template <class _CharT>
_LIBCPP_HIDE_FROM_ABI auto
__format_escaped_string(basic_string_view<_CharT> __values,
                        output_iterator<const _CharT&> auto __out_it,
                        __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   2aa50:	55                   	push   %rbp
   2aa51:	48 89 e5             	mov    %rsp,%rbp
   2aa54:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   2aa5b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2aa5f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2aa63:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2aa67:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   2aa6b:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   2aa6f:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
  basic_string<_CharT> __str;
   2aa73:	e8 d8 4d ff ff       	call   1f850 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2B8nn210000Ev>
   2aa78:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   2aa7c:	be 22 00 00 00       	mov    $0x22,%esi
  __str += _CharT('"');
   2aa81:	e8 1a 4e ff ff       	call   1f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>
  __formatter::__escape(__str, __values, __escape_quotation_mark::__double_quote);
   2aa86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2aa8a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2aa8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2aa92:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2aa96:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   2aa9a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   2aa9e:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   2aaa2:	b9 01 00 00 00       	mov    $0x1,%ecx
   2aaa7:	e8 24 4e ff ff       	call   1f8d0 <_ZNSt3__111__formatter8__escapeB8nn210000IcEEvRNS_12basic_stringIT_NS_11char_traitsIS3_EENS_9allocatorIS3_EEEENS_17basic_string_viewIS3_S5_EENS0_23__escape_quotation_markE>
   2aaac:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   2aab0:	be 22 00 00 00       	mov    $0x22,%esi
  __str += _CharT('"');
   2aab5:	e8 e6 4d ff ff       	call   1f8a0 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEpLB8nn210000Ec>
   2aaba:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
  return __formatter::__write_string(basic_string_view{__str}, std::move(__out_it), __specs);
   2aabe:	e8 ad dd fe ff       	call   18870 <_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEcvNS_17basic_string_viewIcS2_EEB8nn210000Ev>
   2aac3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   2aac7:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
   2aacb:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2aacf:	e8 cc f0 fe ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   2aad4:	48 8b 00             	mov    (%rax),%rax
   2aad7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2aadb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2aadf:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   2aae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2aae7:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   2aaeb:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   2aaef:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   2aaf3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2aaf7:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   2aafb:	4c 8b 45 88          	mov    -0x78(%rbp),%r8
   2aaff:	e8 1c 00 00 00       	call   2ab20 <_ZNSt3__111__formatter14__write_stringB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE>
   2ab04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2ab08:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
}
   2ab0c:	e8 1f d3 fe ff       	call   17e30 <_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev>
   2ab11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ab15:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   2ab1c:	5d                   	pop    %rbp
   2ab1d:	c3                   	ret
   2ab1e:	66 90                	xchg   %ax,%ax

000000000002ab20 <_ZNSt3__111__formatter14__write_stringB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE>:
               __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   2ab20:	55                   	push   %rbp
   2ab21:	48 89 e5             	mov    %rsp,%rbp
   2ab24:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
   2ab2b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2ab2f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2ab33:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2ab37:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   2ab3b:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   2ab3f:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  if (!__specs.__has_precision())
   2ab43:	e8 b8 bb ff ff       	call   26700 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE15__has_precisionB8nn210000Ev>
   2ab48:	a8 01                	test   $0x1,%al
   2ab4a:	75 4f                	jne    2ab9b <_ZNSt3__111__formatter14__write_stringB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE+0x7b>
    return __formatter::__write_string_no_precision(__str, std::move(__out_it), __specs);
   2ab4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ab50:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2ab54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ab58:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2ab5c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2ab60:	e8 3b f0 fe ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   2ab65:	48 8b 00             	mov    (%rax),%rax
   2ab68:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2ab6c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ab70:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2ab74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ab78:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   2ab7c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2ab80:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   2ab84:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   2ab88:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   2ab8c:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
   2ab90:	e8 8b 00 00 00       	call   2ac20 <_ZNSt3__111__formatter27__write_string_no_precisionB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE>
   2ab95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2ab99:	eb 70                	jmp    2ac0b <_ZNSt3__111__formatter14__write_stringB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE+0xeb>
  int __size = __formatter::__truncate(__str, __specs.__precision_);
   2ab9b:	8b 75 d8             	mov    -0x28(%rbp),%esi
   2ab9e:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   2aba2:	e8 89 01 00 00       	call   2ad30 <_ZNSt3__111__formatter10__truncateB8nn210000IcEEiRNS_17basic_string_viewIT_NS_11char_traitsIS3_EEEEi>
   2aba7:	89 45 a4             	mov    %eax,-0x5c(%rbp)
   2abaa:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
  return __formatter::__write(__str.begin(), __str.end(), std::move(__out_it), __specs, __size);
   2abae:	e8 dd 14 ff ff       	call   1c090 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE5beginB8nn210000Ev>
   2abb3:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   2abba:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   2abbe:	e8 ed 14 ff ff       	call   1c0b0 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE3endB8nn210000Ev>
   2abc3:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   2abc7:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2abcb:	e8 d0 ef fe ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   2abd0:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
   2abd7:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   2abdb:	48 8b 00             	mov    (%rax),%rax
   2abde:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   2abe2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2abe6:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   2abea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2abee:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2abf2:	4c 63 4d a4          	movslq -0x5c(%rbp),%r9
   2abf6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   2abfa:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
   2abfe:	4c 8b 45 90          	mov    -0x70(%rbp),%r8
   2ac02:	e8 c9 14 ff ff       	call   1c0d0 <_ZNSt3__111__formatter7__writeB8nn210000ITkNS_19contiguous_iteratorEPKccTkNS_15output_iteratorIRKNS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIT_EEEEE5valueENS_26indirectly_readable_traitsIS8_EES9_E4type10value_typeEEENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp1_ES7_S7_T1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   2ac07:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   2ac0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ac0f:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
   2ac16:	5d                   	pop    %rbp
   2ac17:	c3                   	ret
   2ac18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2ac1f:	00 

000000000002ac20 <_ZNSt3__111__formatter27__write_string_no_precisionB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE>:
/// \note When \c _LIBCPP_HAS_UNICODE is false the function assumes the input is ASCII.
template <class _CharT>
_LIBCPP_HIDE_FROM_ABI auto __write_string_no_precision(
    basic_string_view<_CharT> __str,
    output_iterator<const _CharT&> auto __out_it,
    __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it) {
   2ac20:	55                   	push   %rbp
   2ac21:	48 89 e5             	mov    %rsp,%rbp
   2ac24:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   2ac2b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2ac2f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2ac33:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2ac37:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   2ac3b:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   2ac3f:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  _LIBCPP_ASSERT_INTERNAL(!__specs.__has_precision(), "use __write_string");

  // No padding -> copy the string
  if (!__specs.__has_width())
   2ac43:	e8 68 01 00 00       	call   2adb0 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE11__has_widthB8nn210000Ev>
   2ac48:	a8 01                	test   $0x1,%al
   2ac4a:	75 3a                	jne    2ac86 <_ZNSt3__111__formatter27__write_string_no_precisionB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE+0x66>
    return __formatter::__copy(__str, std::move(__out_it));
   2ac4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ac50:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2ac54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ac58:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2ac5c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2ac60:	e8 3b ef fe ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   2ac65:	48 8b 00             	mov    (%rax),%rax
   2ac68:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2ac6c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2ac70:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   2ac74:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   2ac78:	e8 73 16 ff ff       	call   1c2f0 <_ZNSt3__111__formatter6__copyB8nn210000ITkNS_15__fmt_char_typeEcTkNS_15__fmt_char_typeEcTkNS_15output_iteratorIRKT0_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIT_NS_11char_traitsISD_EEEET1_>
   2ac7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2ac81:	e9 99 00 00 00       	jmp    2ad1f <_ZNSt3__111__formatter27__write_string_no_precisionB8nn210000IcTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET0_NS_13__format_spec23__parsed_specificationsIS3_EE+0xff>

  // Note when the estimated width is larger than size there's no padding. So
  // there's no reason to get the real size when the estimate is larger than or
  // equal to the minimum field width.
  size_t __size =
      __format_spec::__estimate_column_width(__str, __specs.__width_, __format_spec::__column_width_rounding::__up)
   2ac86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ac8a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   2ac8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ac92:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   2ac96:	48 63 55 d4          	movslq -0x2c(%rbp),%rdx
   2ac9a:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
   2ac9e:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   2aca2:	b9 01 00 00 00       	mov    $0x1,%ecx
   2aca7:	e8 24 01 00 00       	call   2add0 <_ZNSt3__113__format_spec23__estimate_column_widthB8nn210000IcEENS0_21__column_width_resultINS_17basic_string_viewIT_NS_11char_traitsIS4_EEE14const_iteratorEEES7_mNS0_23__column_width_roundingE>
   2acac:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   2acb0:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
          .__width_;
   2acb4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  size_t __size =
   2acb8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  return __formatter::__write(__str, std::move(__out_it), __specs, __size);
   2acbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2acc0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   2acc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2acc8:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   2accc:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2acd0:	e8 cb ee fe ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   2acd5:	48 8b 00             	mov    (%rax),%rax
   2acd8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   2acdf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ace3:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   2acea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2acee:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   2acf5:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
   2acf9:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   2acfd:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
   2ad01:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   2ad08:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
   2ad0f:	4c 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8
   2ad16:	e8 35 14 ff ff       	call   1c150 <_ZNSt3__111__formatter7__writeB8nn210000IccTkNS_15output_iteratorIRKT_EENS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEDtfp0_ENS_17basic_string_viewIS3_NS_11char_traitsIS3_EEEET1_NS_13__format_spec23__parsed_specificationsIT0_EEl>
   2ad1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}
   2ad1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ad23:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   2ad2a:	5d                   	pop    %rbp
   2ad2b:	c3                   	ret
   2ad2c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000002ad30 <_ZNSt3__111__formatter10__truncateB8nn210000IcEEiRNS_17basic_string_viewIT_NS_11char_traitsIS3_EEEEi>:

template <class _CharT>
_LIBCPP_HIDE_FROM_ABI int __truncate(basic_string_view<_CharT>& __str, int __precision) {
   2ad30:	55                   	push   %rbp
   2ad31:	48 89 e5             	mov    %rsp,%rbp
   2ad34:	48 83 ec 40          	sub    $0x40,%rsp
   2ad38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2ad3c:	89 75 f4             	mov    %esi,-0xc(%rbp)
  __format_spec::__column_width_result __result =
      __format_spec::__estimate_column_width(__str, __precision, __format_spec::__column_width_rounding::__down);
   2ad3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ad43:	48 8b 08             	mov    (%rax),%rcx
   2ad46:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   2ad4a:	48 8b 40 08          	mov    0x8(%rax),%rax
   2ad4e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2ad52:	48 63 55 f4          	movslq -0xc(%rbp),%rdx
   2ad56:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   2ad5a:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2ad5e:	31 c0                	xor    %eax,%eax
   2ad60:	31 c9                	xor    %ecx,%ecx
   2ad62:	e8 69 00 00 00       	call   2add0 <_ZNSt3__113__format_spec23__estimate_column_widthB8nn210000IcEENS0_21__column_width_resultINS_17basic_string_viewIT_NS_11char_traitsIS4_EEE14const_iteratorEEES7_mNS0_23__column_width_roundingE>
   2ad67:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2ad6b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  __str = basic_string_view<_CharT>{__str.begin(), __result.__last_};
   2ad6f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2ad73:	e8 18 13 ff ff       	call   1c090 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE5beginB8nn210000Ev>
   2ad78:	48 89 c6             	mov    %rax,%rsi
   2ad7b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2ad7f:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   2ad83:	e8 18 15 ff ff       	call   1c2a0 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000ITkNS_19contiguous_iteratorEPKcTkNS_18sized_sentinel_forITL0__EES6_Qaa9is_same_vINS_11conditionalIXsr21__is_primary_templateINS_15iterator_traitsIu14__remove_cvrefIS8_EEEEE5valueENS_26indirectly_readable_traitsISB_EESC_E4type10value_typeET_Ent16is_convertible_vITL0_0_mEEESI_T0_>
   2ad88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ad8c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   2ad90:	48 89 08             	mov    %rcx,(%rax)
   2ad93:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2ad97:	48 89 48 08          	mov    %rcx,0x8(%rax)
  return __result.__width_;
   2ad9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2ad9f:	48 83 c4 40          	add    $0x40,%rsp
   2ada3:	5d                   	pop    %rbp
   2ada4:	c3                   	ret
   2ada5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2adac:	00 00 00 
   2adaf:	90                   	nop

000000000002adb0 <_ZNKSt3__113__format_spec23__parsed_specificationsIcE11__has_widthB8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI constexpr bool __has_width() const { return __width_ > 0; }
   2adb0:	55                   	push   %rbp
   2adb1:	48 89 e5             	mov    %rsp,%rbp
   2adb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2adb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2adbc:	83 78 04 00          	cmpl   $0x0,0x4(%rax)
   2adc0:	0f 9f c0             	setg   %al
   2adc3:	24 01                	and    $0x1,%al
   2adc5:	5d                   	pop    %rbp
   2adc6:	c3                   	ret
   2adc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2adce:	00 00 

000000000002add0 <_ZNSt3__113__format_spec23__estimate_column_widthB8nn210000IcEENS0_21__column_width_resultINS_17basic_string_viewIT_NS_11char_traitsIS4_EEE14const_iteratorEEES7_mNS0_23__column_width_roundingE>:
  return __result;
}
#  else // _LIBCPP_HAS_UNICODE
template <class _CharT>
_LIBCPP_HIDE_FROM_ABI constexpr __column_width_result<typename basic_string_view<_CharT>::const_iterator>
__estimate_column_width(basic_string_view<_CharT> __str, size_t __maximum, __column_width_rounding) noexcept {
   2add0:	55                   	push   %rbp
   2add1:	48 89 e5             	mov    %rsp,%rbp
   2add4:	48 83 ec 50          	sub    $0x50,%rsp
   2add8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   2addc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   2ade0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   2ade4:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
   2ade7:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2adeb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  // When Unicode isn't supported assume ASCII and every code unit is one code
  // point. In ASCII the estimated column width is always one. Thus there's no
  // need for rounding.
  size_t __width = std::min(__str.size(), __maximum);
   2adef:	e8 7c e1 fe ff       	call   18f70 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4sizeB8nn210000Ev>
   2adf4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2adf8:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   2adfc:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   2ae00:	e8 7b 19 fe ff       	call   c780 <_ZNSt3__13minB8nn210000ImEERKT_S3_S3_>
   2ae05:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   2ae09:	48 8b 00             	mov    (%rax),%rax
   2ae0c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  return {__width, __str.begin() + __width};
   2ae10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2ae14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2ae18:	e8 73 12 ff ff       	call   1c090 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE5beginB8nn210000Ev>
   2ae1d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2ae21:	48 01 c8             	add    %rcx,%rax
   2ae24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2ae28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ae2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2ae30:	48 83 c4 50          	add    $0x50,%rsp
   2ae34:	5d                   	pop    %rbp
   2ae35:	c3                   	ret
   2ae36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2ae3d:	00 00 00 

000000000002ae40 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRNS_17basic_string_viewIcNS_11char_traitsIcEEEEEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSO_>:
   2ae40:	55                   	push   %rbp
   2ae41:	48 89 e5             	mov    %rsp,%rbp
   2ae44:	48 83 ec 20          	sub    $0x20,%rsp
   2ae48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2ae4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2ae50:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2ae54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ae58:	48 8b 08             	mov    (%rax),%rcx
   2ae5b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   2ae5f:	48 8b 40 08          	mov    0x8(%rax),%rax
   2ae63:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2ae67:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2ae6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2ae6f:	e8 0c 00 00 00       	call   2ae80 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEDaSC_>
   2ae74:	48 83 c4 20          	add    $0x20,%rsp
   2ae78:	5d                   	pop    %rbp
   2ae79:	c3                   	ret
   2ae7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000002ae80 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEDaSC_>:
        [&](auto __arg) {
   2ae80:	55                   	push   %rbp
   2ae81:	48 89 e5             	mov    %rsp,%rbp
   2ae84:	48 83 ec 60          	sub    $0x60,%rsp
   2ae88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2ae8c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   2ae90:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2ae94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ae98:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2ae9c:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   2aea0:	e8 7b 00 00 00       	call   2af20 <_ZNSt3__19formatterINS_17basic_string_viewIcNS_11char_traitsIcEEEEcEC2Ev>
   2aea5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            if (__parse)
   2aea9:	48 8b 40 10          	mov    0x10(%rax),%rax
   2aead:	f6 00 01             	testb  $0x1,(%rax)
   2aeb0:	74 23                	je     2aed5 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clINS_17basic_string_viewIcNS_11char_traitsIcEEEEEEDaSC_+0x55>
   2aeb2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   2aeb6:	48 8b 08             	mov    (%rax),%rcx
   2aeb9:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   2aebd:	48 8b 30             	mov    (%rax),%rsi
   2aec0:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   2aec4:	e8 97 f8 ff ff       	call   2a760 <_ZNSt3__118__formatter_stringIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   2aec9:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
   2aecd:	48 89 c6             	mov    %rax,%rsi
   2aed0:	e8 4b ef fe ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   2aed5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   2aed9:	48 8b 48 08          	mov    0x8(%rax),%rcx
   2aedd:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   2aee1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   2aee5:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   2aee9:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2aeed:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   2aef1:	48 8b 48 08          	mov    0x8(%rax),%rcx
   2aef5:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   2aef9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   2aefd:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
   2af01:	e8 3a 00 00 00       	call   2af40 <_ZNKSt3__19formatterINS_17basic_string_viewIcNS_11char_traitsIcEEEEcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorES4_RSE_>
   2af06:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   2af0a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2af0e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   2af12:	e8 49 ec fe ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   2af17:	48 83 c4 60          	add    $0x60,%rsp
   2af1b:	5d                   	pop    %rbp
   2af1c:	c3                   	ret
   2af1d:	0f 1f 00             	nopl   (%rax)

000000000002af20 <_ZNSt3__19formatterINS_17basic_string_viewIcNS_11char_traitsIcEEEEcEC2Ev>:
  }
};

// Formatter std::string_view.
template <__fmt_char_type _CharT, class _Traits>
struct _LIBCPP_TEMPLATE_VIS formatter<basic_string_view<_CharT, _Traits>, _CharT> : public __formatter_string<_CharT> {
   2af20:	55                   	push   %rbp
   2af21:	48 89 e5             	mov    %rsp,%rbp
   2af24:	48 83 ec 10          	sub    $0x10,%rsp
   2af28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2af2c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2af30:	e8 cb f8 ff ff       	call   2a800 <_ZNSt3__118__formatter_stringIcEC2Ev>
   2af35:	48 83 c4 10          	add    $0x10,%rsp
   2af39:	5d                   	pop    %rbp
   2af3a:	c3                   	ret
   2af3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002af40 <_ZNKSt3__19formatterINS_17basic_string_viewIcNS_11char_traitsIcEEEEcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorES4_RSE_>:
  using _Base _LIBCPP_NODEBUG = __formatter_string<_CharT>;

  template <class _FormatContext>
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator
  format(basic_string_view<_CharT, _Traits> __str, _FormatContext& __ctx) const {
   2af40:	55                   	push   %rbp
   2af41:	48 89 e5             	mov    %rsp,%rbp
   2af44:	48 83 ec 50          	sub    $0x50,%rsp
   2af48:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   2af4c:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   2af50:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   2af54:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   2af58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2af5c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2af60:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    // Drop _Traits to have one std::basic_string_view formatter.
    return _Base::format(basic_string_view<_CharT>(__str.data(), __str.size()), __ctx);
   2af64:	e8 27 e0 fe ff       	call   18f90 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4dataB8nn210000Ev>
   2af69:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   2af6d:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   2af71:	e8 fa df fe ff       	call   18f70 <_ZNKSt3__117basic_string_viewIcNS_11char_traitsIcEEE4sizeB8nn210000Ev>
   2af76:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   2af7a:	48 89 c2             	mov    %rax,%rdx
   2af7d:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
   2af81:	e8 9a 4a ff ff       	call   1fa20 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKcm>
   2af86:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2af8a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   2af8e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   2af92:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   2af96:	e8 d5 f9 ff ff       	call   2a970 <_ZNKSt3__118__formatter_stringIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorENS_17basic_string_viewIcNS_11char_traitsIcEEEERSA_>
   2af9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2af9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2afa3:	48 83 c4 50          	add    $0x50,%rsp
   2afa7:	5d                   	pop    %rbp
   2afa8:	c3                   	ret
   2afa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000002afb0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JRPKvEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSM_>:
   2afb0:	55                   	push   %rbp
   2afb1:	48 89 e5             	mov    %rsp,%rbp
   2afb4:	48 83 ec 10          	sub    $0x10,%rsp
   2afb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2afbc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2afc0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2afc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2afc8:	48 8b 30             	mov    (%rax),%rsi
   2afcb:	e8 10 00 00 00       	call   2afe0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIPKvEEDaSC_>
   2afd0:	48 83 c4 10          	add    $0x10,%rsp
   2afd4:	5d                   	pop    %rbp
   2afd5:	c3                   	ret
   2afd6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2afdd:	00 00 00 

000000000002afe0 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIPKvEEDaSC_>:
        [&](auto __arg) {
   2afe0:	55                   	push   %rbp
   2afe1:	48 89 e5             	mov    %rsp,%rbp
   2afe4:	48 83 ec 40          	sub    $0x40,%rsp
   2afe8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2afec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2aff0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2aff4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2aff8:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
            formatter<decltype(__arg), _CharT> __formatter;
   2affc:	e8 6f 00 00 00       	call   2b070 <_ZNSt3__19formatterIPKvcEC2Ev>
   2b001:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            if (__parse)
   2b005:	48 8b 40 10          	mov    0x10(%rax),%rax
   2b009:	f6 00 01             	testb  $0x1,(%rax)
   2b00c:	74 23                	je     2b031 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clIPKvEEDaSC_+0x51>
   2b00e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
              __parse_ctx.advance_to(__formatter.parse(__parse_ctx));
   2b012:	48 8b 08             	mov    (%rax),%rcx
   2b015:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   2b019:	48 8b 30             	mov    (%rax),%rsi
   2b01c:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2b020:	e8 6b 00 00 00       	call   2b090 <_ZNSt3__119__formatter_pointerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>
   2b025:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2b029:	48 89 c6             	mov    %rax,%rsi
   2b02c:	e8 ef ed fe ff       	call   19e20 <_ZNSt3__126basic_format_parse_contextIcE10advance_toB8nn210000EPKc>
   2b031:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
            __ctx.advance_to(__formatter.format(__arg, __ctx));
   2b035:	48 8b 48 08          	mov    0x8(%rax),%rcx
   2b039:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   2b03d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2b041:	48 8b 50 08          	mov    0x8(%rax),%rdx
   2b045:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   2b049:	e8 a2 00 00 00       	call   2b0f0 <_ZNKSt3__119__formatter_pointerIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEPKvRSA_>
   2b04e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   2b052:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2b056:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   2b05a:	e8 01 eb fe ff       	call   19b60 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcE10advance_toB8nn210000ES5_>
        },
   2b05f:	48 83 c4 40          	add    $0x40,%rsp
   2b063:	5d                   	pop    %rbp
   2b064:	c3                   	ret
   2b065:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2b06c:	00 00 00 
   2b06f:	90                   	nop

000000000002b070 <_ZNSt3__19formatterIPKvcEC2Ev>:
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<nullptr_t, _CharT> : public __formatter_pointer<_CharT> {};
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<void*, _CharT> : public __formatter_pointer<_CharT> {};
template <__fmt_char_type _CharT>
struct _LIBCPP_TEMPLATE_VIS formatter<const void*, _CharT> : public __formatter_pointer<_CharT> {};
   2b070:	55                   	push   %rbp
   2b071:	48 89 e5             	mov    %rsp,%rbp
   2b074:	48 83 ec 10          	sub    $0x10,%rsp
   2b078:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b07c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2b080:	e8 fb 00 00 00       	call   2b180 <_ZNSt3__119__formatter_pointerIcEC2Ev>
   2b085:	48 83 c4 10          	add    $0x10,%rsp
   2b089:	5d                   	pop    %rbp
   2b08a:	c3                   	ret
   2b08b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002b090 <_ZNSt3__119__formatter_pointerIcE5parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS5_>:
  _LIBCPP_HIDE_FROM_ABI constexpr typename _ParseContext::iterator parse(_ParseContext& __ctx) {
   2b090:	55                   	push   %rbp
   2b091:	48 89 e5             	mov    %rsp,%rbp
   2b094:	48 83 ec 30          	sub    $0x30,%rsp
   2b098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b09c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2b0a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2b0a4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    typename _ParseContext::iterator __result = __parser_.__parse(__ctx, __format_spec::__fields_pointer);
   2b0a8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2b0ac:	66 c7 45 e6 24 01    	movw   $0x124,-0x1a(%rbp)
   2b0b2:	66 8b 45 e6          	mov    -0x1a(%rbp),%ax
   2b0b6:	66 89 c2             	mov    %ax,%dx
   2b0b9:	e8 62 fa fe ff       	call   1ab20 <_ZNSt3__113__format_spec8__parserIcE7__parseB8nn210000INS_26basic_format_parse_contextIcEEEENT_8iteratorERS6_NS0_8__fieldsB8nn210000E>
   2b0be:	48 89 c1             	mov    %rax,%rcx
   2b0c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2b0c5:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    __format_spec::__process_display_type_pointer(__parser_.__type_, "a pointer");
   2b0c9:	8a 40 01             	mov    0x1(%rax),%al
   2b0cc:	0f b6 f8             	movzbl %al,%edi
   2b0cf:	48 8d 35 27 3d 00 00 	lea    0x3d27(%rip),%rsi        # 2edfd <.L.str.78>
   2b0d6:	e8 c5 00 00 00       	call   2b1a0 <_ZNSt3__113__format_spec30__process_display_type_pointerB8nn210000ENS0_6__typeEPKc>
    return __result;
   2b0db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b0df:	48 83 c4 30          	add    $0x30,%rsp
   2b0e3:	5d                   	pop    %rbp
   2b0e4:	c3                   	ret
   2b0e5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2b0ec:	00 00 00 
   2b0ef:	90                   	nop

000000000002b0f0 <_ZNKSt3__119__formatter_pointerIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEPKvRSA_>:
  _LIBCPP_HIDE_FROM_ABI typename _FormatContext::iterator format(const void* __ptr, _FormatContext& __ctx) const {
   2b0f0:	55                   	push   %rbp
   2b0f1:	48 89 e5             	mov    %rsp,%rbp
   2b0f4:	48 83 ec 50          	sub    $0x50,%rsp
   2b0f8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2b0fc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   2b100:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2b104:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    __format_spec::__parsed_specifications<_CharT> __specs = __parser_.__get_parsed_std_specifications(__ctx);
   2b108:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2b10c:	e8 ff 09 ff ff       	call   1bb10 <_ZNKSt3__113__format_spec8__parserIcE31__get_parsed_std_specificationsB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENS0_23__parsed_specificationsIcEERT_>
   2b111:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2b115:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    __specs.__std_.__alternate_form_                       = true;
   2b119:	8a 45 d0             	mov    -0x30(%rbp),%al
   2b11c:	24 df                	and    $0xdf,%al
   2b11e:	0c 20                	or     $0x20,%al
   2b120:	88 45 d0             	mov    %al,-0x30(%rbp)
        __specs.__std_.__type_ == __format_spec::__type::__pointer_upper_case
   2b123:	8a 4d d1             	mov    -0x2f(%rbp),%cl
   2b126:	b0 07                	mov    $0x7,%al
   2b128:	b2 06                	mov    $0x6,%dl
   2b12a:	88 55 be             	mov    %dl,-0x42(%rbp)
   2b12d:	80 f9 09             	cmp    $0x9,%cl
   2b130:	88 45 bf             	mov    %al,-0x41(%rbp)
   2b133:	74 06                	je     2b13b <_ZNKSt3__119__formatter_pointerIcE6formatB8nn210000INS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT_8iteratorEPKvRSA_+0x4b>
   2b135:	8a 45 be             	mov    -0x42(%rbp),%al
   2b138:	88 45 bf             	mov    %al,-0x41(%rbp)
   2b13b:	8a 45 bf             	mov    -0x41(%rbp),%al
    __specs.__std_.__type_ =
   2b13e:	88 45 d1             	mov    %al,-0x2f(%rbp)
    return __formatter::__format_integer(reinterpret_cast<uintptr_t>(__ptr), __ctx, __specs);
   2b141:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   2b145:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   2b149:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2b14d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2b151:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2b155:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   2b159:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   2b15d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2b161:	31 c0                	xor    %eax,%eax
   2b163:	45 31 c0             	xor    %r8d,%r8d
   2b166:	e8 85 6d ff ff       	call   21ef0 <_ZNSt3__111__formatter16__format_integerB8nn210000ITkNS_17unsigned_integralEmcNS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEENT1_8iteratorET_RS9_NS_13__format_spec23__parsed_specificationsIT0_EEb>
   2b16b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2b16f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b173:	48 83 c4 50          	add    $0x50,%rsp
   2b177:	5d                   	pop    %rbp
   2b178:	c3                   	ret
   2b179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000002b180 <_ZNSt3__119__formatter_pointerIcEC2Ev>:
struct _LIBCPP_TEMPLATE_VIS __formatter_pointer {
   2b180:	55                   	push   %rbp
   2b181:	48 89 e5             	mov    %rsp,%rbp
   2b184:	48 83 ec 10          	sub    $0x10,%rsp
   2b188:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b18c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2b190:	e8 5b f8 fe ff       	call   1a9f0 <_ZNSt3__113__format_spec8__parserIcEC2Ev>
   2b195:	48 83 c4 10          	add    $0x10,%rsp
   2b199:	5d                   	pop    %rbp
   2b19a:	c3                   	ret
   2b19b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002b1a0 <_ZNSt3__113__format_spec30__process_display_type_pointerB8nn210000ENS0_6__typeEPKc>:
_LIBCPP_HIDE_FROM_ABI constexpr void __process_display_type_pointer(__format_spec::__type __type, const char* __id) {
   2b1a0:	55                   	push   %rbp
   2b1a1:	48 89 e5             	mov    %rsp,%rbp
   2b1a4:	48 83 ec 20          	sub    $0x20,%rsp
   2b1a8:	40 88 f8             	mov    %dil,%al
   2b1ab:	88 45 ff             	mov    %al,-0x1(%rbp)
   2b1ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  switch (__type) {
   2b1b2:	8a 45 ff             	mov    -0x1(%rbp),%al
   2b1b5:	88 45 ef             	mov    %al,-0x11(%rbp)
   2b1b8:	84 c0                	test   %al,%al
   2b1ba:	74 0d                	je     2b1c9 <_ZNSt3__113__format_spec30__process_display_type_pointerB8nn210000ENS0_6__typeEPKc+0x29>
   2b1bc:	eb 00                	jmp    2b1be <_ZNSt3__113__format_spec30__process_display_type_pointerB8nn210000ENS0_6__typeEPKc+0x1e>
   2b1be:	8a 45 ef             	mov    -0x11(%rbp),%al
   2b1c1:	04 f8                	add    $0xf8,%al
   2b1c3:	2c 01                	sub    $0x1,%al
   2b1c5:	77 04                	ja     2b1cb <_ZNSt3__113__format_spec30__process_display_type_pointerB8nn210000ENS0_6__typeEPKc+0x2b>
   2b1c7:	eb 00                	jmp    2b1c9 <_ZNSt3__113__format_spec30__process_display_type_pointerB8nn210000ENS0_6__typeEPKc+0x29>
    break;
   2b1c9:	eb 09                	jmp    2b1d4 <_ZNSt3__113__format_spec30__process_display_type_pointerB8nn210000ENS0_6__typeEPKc+0x34>
    __format_spec::__throw_invalid_type_format_error(__id);
   2b1cb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   2b1cf:	e8 fc 03 ff ff       	call   1b5d0 <_ZNSt3__113__format_spec33__throw_invalid_type_format_errorB8nn210000EPKc>
}
   2b1d4:	48 83 c4 20          	add    $0x20,%rsp
   2b1d8:	5d                   	pop    %rbp
   2b1d9:	c3                   	ret
   2b1da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000002b1e0 <_ZNSt3__18__invokeB8nn210000IZNS_8__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS1_15__output_bufferIcEEEEcEEEET_SD_SD_RT0_RT1_EUlSD_E_JNS_16basic_format_argISC_E6handleEEEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEEOSD_DpOSM_>:
   2b1e0:	55                   	push   %rbp
   2b1e1:	48 89 e5             	mov    %rsp,%rbp
   2b1e4:	48 83 ec 20          	sub    $0x20,%rsp
   2b1e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b1ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2b1f0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2b1f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b1f8:	48 8b 00             	mov    (%rax),%rax
   2b1fb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2b1ff:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   2b203:	e8 08 00 00 00       	call   2b210 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clINS_16basic_format_argISB_E6handleEEEDaSC_>
   2b208:	48 83 c4 20          	add    $0x20,%rsp
   2b20c:	5d                   	pop    %rbp
   2b20d:	c3                   	ret
   2b20e:	66 90                	xchg   %ax,%ax

000000000002b210 <_ZZNSt3__18__format26__handle_replacement_fieldB8nn210000ITkNS_19contiguous_iteratorEPKcNS_26basic_format_parse_contextIcEENS_20basic_format_contextINS_20back_insert_iteratorINS0_15__output_bufferIcEEEEcEEEET_SC_SC_RT0_RT1_ENKUlSC_E_clINS_16basic_format_argISB_E6handleEEEDaSC_>:
        [&](auto __arg) {
   2b210:	55                   	push   %rbp
   2b211:	48 89 e5             	mov    %rsp,%rbp
   2b214:	48 83 ec 10          	sub    $0x10,%rsp
   2b218:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2b21c:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2b220:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
            __arg.format(__parse_ctx, __ctx);
   2b224:	48 8b 30             	mov    (%rax),%rsi
   2b227:	48 8b 50 08          	mov    0x8(%rax),%rdx
   2b22b:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   2b22f:	e8 0c 00 00 00       	call   2b240 <_ZNKSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6handle6formatB8nn210000ERNS_26basic_format_parse_contextIcEERS7_>
        },
   2b234:	48 83 c4 10          	add    $0x10,%rsp
   2b238:	5d                   	pop    %rbp
   2b239:	c3                   	ret
   2b23a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000002b240 <_ZNKSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE6handle6formatB8nn210000ERNS_26basic_format_parse_contextIcEERS7_>:
  _LIBCPP_HIDE_FROM_ABI void format(basic_format_parse_context<char_type>& __parse_ctx, _Context& __ctx) const {
   2b240:	55                   	push   %rbp
   2b241:	48 89 e5             	mov    %rsp,%rbp
   2b244:	48 83 ec 20          	sub    $0x20,%rsp
   2b248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b24c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2b250:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2b254:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    __handle_.__format_(__parse_ctx, __ctx, __handle_.__ptr_);
   2b258:	48 8b 01             	mov    (%rcx),%rax
   2b25b:	48 8b 40 08          	mov    0x8(%rax),%rax
   2b25f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   2b263:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   2b267:	48 8b 09             	mov    (%rcx),%rcx
   2b26a:	48 8b 11             	mov    (%rcx),%rdx
   2b26d:	ff d0                	call   *%rax
  }
   2b26f:	48 83 c4 20          	add    $0x20,%rsp
   2b273:	5d                   	pop    %rbp
   2b274:	c3                   	ret
   2b275:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2b27c:	00 00 00 
   2b27f:	90                   	nop

000000000002b280 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE3getB8nn210000Em>:
  _LIBCPP_HIDE_FROM_ABI basic_format_arg<_Context> get(size_t __id) const noexcept {
   2b280:	55                   	push   %rbp
   2b281:	48 89 e5             	mov    %rsp,%rbp
   2b284:	48 83 ec 40          	sub    $0x40,%rsp
   2b288:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   2b28c:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   2b290:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2b294:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   2b298:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2b29c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    if (__id >= __size_)
   2b2a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b2a4:	48 3b 01             	cmp    (%rcx),%rax
   2b2a7:	72 0e                	jb     2b2b7 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE3getB8nn210000Em+0x37>
   2b2a9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
      return basic_format_arg<_Context>{};
   2b2ad:	e8 ae 00 00 00       	call   2b360 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ev>
   2b2b2:	e9 90 00 00 00       	jmp    2b347 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE3getB8nn210000Em+0xc7>
   2b2b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    if (__format::__use_packed_format_arg_store(__size_))
   2b2bb:	48 8b 38             	mov    (%rax),%rdi
   2b2be:	e8 cd 00 00 00       	call   2b390 <_ZNSt3__18__format29__use_packed_format_arg_storeB8nn210000Em>
   2b2c3:	a8 01                	test   $0x1,%al
   2b2c5:	75 02                	jne    2b2c9 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE3getB8nn210000Em+0x49>
   2b2c7:	eb 49                	jmp    2b312 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE3getB8nn210000Em+0x92>
   2b2c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      return basic_format_arg<_Context>{__format::__get_packed_type(__types_, __id), __values_[__id]};
   2b2cd:	48 8b 78 10          	mov    0x10(%rax),%rdi
   2b2d1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2b2d5:	e8 d6 00 00 00       	call   2b3b0 <_ZNSt3__18__format17__get_packed_typeB8nn210000Emm>
   2b2da:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   2b2de:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   2b2e2:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   2b2e6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2b2ea:	48 c1 e2 04          	shl    $0x4,%rdx
   2b2ee:	48 01 d1             	add    %rdx,%rcx
   2b2f1:	48 8b 11             	mov    (%rcx),%rdx
   2b2f4:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2b2f8:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   2b2fc:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   2b300:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2b304:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   2b308:	0f b6 f0             	movzbl %al,%esi
   2b30b:	e8 b0 fc fd ff       	call   afc0 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000ENS3_7__arg_tENS_24__basic_format_arg_valueIS7_EE>
   2b310:	eb 35                	jmp    2b347 <_ZNKSt3__117basic_format_argsINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEE3getB8nn210000Em+0xc7>
   2b312:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b316:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    return __args_[__id];
   2b31a:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   2b31e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2b322:	48 c1 e2 05          	shl    $0x5,%rdx
   2b326:	48 01 d1             	add    %rdx,%rcx
   2b329:	48 8b 11             	mov    (%rcx),%rdx
   2b32c:	48 89 10             	mov    %rdx,(%rax)
   2b32f:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   2b333:	48 89 50 08          	mov    %rdx,0x8(%rax)
   2b337:	48 8b 51 10          	mov    0x10(%rcx),%rdx
   2b33b:	48 89 50 10          	mov    %rdx,0x10(%rax)
   2b33f:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   2b343:	48 89 48 18          	mov    %rcx,0x18(%rax)
   2b347:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  }
   2b34b:	48 83 c4 40          	add    $0x40,%rsp
   2b34f:	5d                   	pop    %rbp
   2b350:	c3                   	ret
   2b351:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2b358:	00 00 00 
   2b35b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002b360 <_ZNSt3__116basic_format_argINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ev>:
  _LIBCPP_HIDE_FROM_ABI basic_format_arg() noexcept : __type_{__format::__arg_t::__none} {}
   2b360:	55                   	push   %rbp
   2b361:	48 89 e5             	mov    %rsp,%rbp
   2b364:	48 83 ec 10          	sub    $0x10,%rsp
   2b368:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b36c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   2b370:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2b374:	e8 27 fb fd ff       	call   aea0 <_ZNSt3__124__basic_format_arg_valueINS_20basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEEEC2B8nn210000Ev>
   2b379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b37d:	c6 40 10 00          	movb   $0x0,0x10(%rax)
   2b381:	48 83 c4 10          	add    $0x10,%rsp
   2b385:	5d                   	pop    %rbp
   2b386:	c3                   	ret
   2b387:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2b38e:	00 00 

000000000002b390 <_ZNSt3__18__format29__use_packed_format_arg_storeB8nn210000Em>:
_LIBCPP_HIDE_FROM_ABI constexpr bool __use_packed_format_arg_store(size_t __size) {
   2b390:	55                   	push   %rbp
   2b391:	48 89 e5             	mov    %rsp,%rbp
   2b394:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __size <= __packed_types_max;
   2b398:	48 83 7d f8 0c       	cmpq   $0xc,-0x8(%rbp)
   2b39d:	0f 96 c0             	setbe  %al
   2b3a0:	24 01                	and    $0x1,%al
   2b3a2:	5d                   	pop    %rbp
   2b3a3:	c3                   	ret
   2b3a4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2b3ab:	00 00 00 
   2b3ae:	66 90                	xchg   %ax,%ax

000000000002b3b0 <_ZNSt3__18__format17__get_packed_typeB8nn210000Emm>:
_LIBCPP_HIDE_FROM_ABI constexpr __arg_t __get_packed_type(uint64_t __types, size_t __id) {
   2b3b0:	55                   	push   %rbp
   2b3b1:	48 89 e5             	mov    %rsp,%rbp
   2b3b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b3b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  if (__id > 0)
   2b3bc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   2b3c1:	76 10                	jbe    2b3d3 <_ZNSt3__18__format17__get_packed_typeB8nn210000Emm+0x23>
    __types >>= __id * __packed_arg_t_bits;
   2b3c3:	48 6b 4d f0 05       	imul   $0x5,-0x10(%rbp),%rcx
   2b3c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b3cc:	48 d3 e8             	shr    %cl,%rax
   2b3cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  return static_cast<__format::__arg_t>(__types & __packed_arg_t_mask);
   2b3d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b3d7:	48 83 e0 1f          	and    $0x1f,%rax
   2b3db:	5d                   	pop    %rbp
   2b3dc:	c3                   	ret
   2b3dd:	0f 1f 00             	nopl   (%rax)

000000000002b3e0 <_ZNSt3__18__format15__output_bufferIcE9push_backB8nn210000Ec>:
  _LIBCPP_HIDE_FROM_ABI void push_back(_CharT __c) {
   2b3e0:	55                   	push   %rbp
   2b3e1:	48 89 e5             	mov    %rsp,%rbp
   2b3e4:	48 83 ec 20          	sub    $0x20,%rsp
   2b3e8:	40 88 f0             	mov    %sil,%al
   2b3eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b3ef:	88 45 f7             	mov    %al,-0x9(%rbp)
   2b3f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b3f6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (__max_output_size_ && __max_output_size_->__write_request(1) == 0)
   2b3fa:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
   2b3ff:	74 1a                	je     2b41b <_ZNSt3__18__format15__output_bufferIcE9push_backB8nn210000Ec+0x3b>
   2b401:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b405:	48 8b 78 20          	mov    0x20(%rax),%rdi
   2b409:	be 01 00 00 00       	mov    $0x1,%esi
   2b40e:	e8 5d 11 ff ff       	call   1c570 <_ZNSt3__18__format17__max_output_sizeB8nn21000015__write_requestB8nn210000Em>
   2b413:	48 83 f8 00          	cmp    $0x0,%rax
   2b417:	75 02                	jne    2b41b <_ZNSt3__18__format15__output_bufferIcE9push_backB8nn210000Ec+0x3b>
      return;
   2b419:	eb 37                	jmp    2b452 <_ZNSt3__18__format15__output_bufferIcE9push_backB8nn210000Ec+0x72>
   2b41b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    __ptr_[__size_++] = __c;
   2b41f:	40 8a 75 f7          	mov    -0x9(%rbp),%sil
   2b423:	48 8b 01             	mov    (%rcx),%rax
   2b426:	48 8b 51 10          	mov    0x10(%rcx),%rdx
   2b42a:	48 89 d7             	mov    %rdx,%rdi
   2b42d:	48 83 c7 01          	add    $0x1,%rdi
   2b431:	48 89 79 10          	mov    %rdi,0x10(%rcx)
   2b435:	40 88 34 10          	mov    %sil,(%rax,%rdx,1)
    if (__size_ == __capacity_)
   2b439:	48 8b 41 10          	mov    0x10(%rcx),%rax
   2b43d:	48 3b 41 08          	cmp    0x8(%rcx),%rax
   2b441:	75 0f                	jne    2b452 <_ZNSt3__18__format15__output_bufferIcE9push_backB8nn210000Ec+0x72>
   2b443:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
      __prepare_write(0);
   2b447:	31 c0                	xor    %eax,%eax
   2b449:	31 c0                	xor    %eax,%eax
   2b44b:	89 c6                	mov    %eax,%esi
   2b44d:	e8 8e 11 ff ff       	call   1c5e0 <_ZNSt3__18__format15__output_bufferIcE15__prepare_writeB8nn210000Em>
  }
   2b452:	48 83 c4 20          	add    $0x20,%rsp
   2b456:	5d                   	pop    %rbp
   2b457:	c3                   	ret
   2b458:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2b45f:	00 

000000000002b460 <_ZNSt3__120basic_format_contextINS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEcEC2B8nn210000ES5_NS_17basic_format_argsIS6_EE>:
  template <class _OtherOutIt, class _OtherCharT>
  friend _LIBCPP_HIDE_FROM_ABI basic_format_context<_OtherOutIt, _OtherCharT>
      __format_context_create(_OtherOutIt, basic_format_args<basic_format_context<_OtherOutIt, _OtherCharT>>);

  _LIBCPP_HIDE_FROM_ABI explicit basic_format_context(_OutIt __out_it, basic_format_args<basic_format_context> __args)
      : __out_it_(std::move(__out_it)), __args_(__args) {}
   2b460:	55                   	push   %rbp
   2b461:	48 89 e5             	mov    %rsp,%rbp
   2b464:	48 83 ec 20          	sub    $0x20,%rsp
   2b468:	48 8d 45 10          	lea    0x10(%rbp),%rax
   2b46c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2b470:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
   2b474:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   2b478:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b47c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2b480:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   2b484:	e8 17 e7 fe ff       	call   19ba0 <_ZNSt3__14moveB8nn210000IRNS_20back_insert_iteratorINS_8__format15__output_bufferIcEEEEEEOu20__remove_reference_tIT_EOS7_>
   2b489:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2b48d:	48 89 c2             	mov    %rax,%rdx
   2b490:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b494:	48 8b 12             	mov    (%rdx),%rdx
   2b497:	48 89 10             	mov    %rdx,(%rax)
   2b49a:	48 8b 11             	mov    (%rcx),%rdx
   2b49d:	48 89 50 08          	mov    %rdx,0x8(%rax)
   2b4a1:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   2b4a5:	48 89 50 10          	mov    %rdx,0x10(%rax)
   2b4a9:	48 8b 49 10          	mov    0x10(%rcx),%rcx
   2b4ad:	48 89 48 18          	mov    %rcx,0x18(%rax)
   2b4b1:	48 83 c4 20          	add    $0x20,%rsp
   2b4b5:	5d                   	pop    %rbp
   2b4b6:	c3                   	ret
   2b4b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2b4be:	00 00 

000000000002b4c0 <_ZNSt3__120back_insert_iteratorINS_8__format15__output_bufferIcEEEC2B8nn210000ERS3_>:
      : container(std::addressof(__x)) {}
   2b4c0:	55                   	push   %rbp
   2b4c1:	48 89 e5             	mov    %rsp,%rbp
   2b4c4:	48 83 ec 20          	sub    $0x20,%rsp
   2b4c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b4cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2b4d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b4d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2b4d8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   2b4dc:	e8 1f 00 00 00       	call   2b500 <_ZNSt3__19addressofB8nn210000INS_8__format15__output_bufferIcEEEEPT_RS4_>
   2b4e1:	48 89 c1             	mov    %rax,%rcx
   2b4e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b4e8:	48 89 08             	mov    %rcx,(%rax)
   2b4eb:	48 83 c4 20          	add    $0x20,%rsp
   2b4ef:	5d                   	pop    %rbp
   2b4f0:	c3                   	ret
   2b4f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2b4f8:	00 00 00 
   2b4fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000002b500 <_ZNSt3__19addressofB8nn210000INS_8__format15__output_bufferIcEEEEPT_RS4_>:
inline _LIBCPP_CONSTEXPR_SINCE_CXX17 _LIBCPP_NO_CFI _LIBCPP_HIDE_FROM_ABI _Tp* addressof(_Tp& __x) _NOEXCEPT {
   2b500:	55                   	push   %rbp
   2b501:	48 89 e5             	mov    %rsp,%rbp
   2b504:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return __builtin_addressof(__x);
   2b508:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b50c:	5d                   	pop    %rbp
   2b50d:	c3                   	ret
   2b50e:	66 90                	xchg   %ax,%ax

000000000002b510 <_ZNKSt3__18__format15__output_bufferIcE6__sizeB8nn210000Ev>:
  [[nodiscard]] _LIBCPP_HIDE_FROM_ABI size_t __size() const { return __size_; }
   2b510:	55                   	push   %rbp
   2b511:	48 89 e5             	mov    %rsp,%rbp
   2b514:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b51c:	48 8b 40 10          	mov    0x10(%rax),%rax
   2b520:	5d                   	pop    %rbp
   2b521:	c3                   	ret
   2b522:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   2b529:	00 00 00 
   2b52c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000002b530 <_ZN5logz44initEPNS_6LoggerE>:

namespace logz4 {
    static Logger *GLOBAL_LOGGER;

    auto init(Logger *logger) -> void
    {}
   2b530:	55                   	push   %rbp
   2b531:	48 89 e5             	mov    %rsp,%rbp
   2b534:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2b538:	5d                   	pop    %rbp
   2b539:	c3                   	ret
   2b53a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000002b540 <_ZN5logz417set_global_loggerERNS_6LoggerE>:

    auto set_global_logger(Logger &logger) -> void
    {
   2b540:	55                   	push   %rbp
   2b541:	48 89 e5             	mov    %rsp,%rbp
   2b544:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        GLOBAL_LOGGER = &logger;
   2b548:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b54c:	48 89 05 85 d5 00 00 	mov    %rax,0xd585(%rip)        # 38ad8 <_ZN5logz4L13GLOBAL_LOGGERE>
    }
   2b553:	5d                   	pop    %rbp
   2b554:	c3                   	ret
   2b555:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   2b55c:	00 00 00 00 

000000000002b560 <_ZN5logz417get_global_loggerEv>:

    auto get_global_logger() -> Logger &
    {
   2b560:	55                   	push   %rbp
   2b561:	48 89 e5             	mov    %rsp,%rbp
        return *GLOBAL_LOGGER;
   2b564:	48 8b 05 6d d5 00 00 	mov    0xd56d(%rip),%rax        # 38ad8 <_ZN5logz4L13GLOBAL_LOGGERE>
   2b56b:	5d                   	pop    %rbp
   2b56c:	c3                   	ret
   2b56d:	0f 1f 00             	nopl   (%rax)

000000000002b570 <__udivti3>:
   2b570:	f3 0f 1e fa          	endbr64
   2b574:	48 89 c8             	mov    %rcx,%rax
   2b577:	49 89 d0             	mov    %rdx,%r8
   2b57a:	48 89 d1             	mov    %rdx,%rcx
   2b57d:	48 85 c0             	test   %rax,%rax
   2b580:	75 16                	jne    2b598 <__udivti3+0x28>
   2b582:	48 39 d6             	cmp    %rdx,%rsi
   2b585:	73 49                	jae    2b5d0 <__udivti3+0x60>
   2b587:	48 89 f8             	mov    %rdi,%rax
   2b58a:	48 89 f2             	mov    %rsi,%rdx
   2b58d:	49 f7 f0             	div    %r8
   2b590:	31 d2                	xor    %edx,%edx
   2b592:	c3                   	ret
   2b593:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   2b598:	48 39 c6             	cmp    %rax,%rsi
   2b59b:	73 0b                	jae    2b5a8 <__udivti3+0x38>
   2b59d:	31 d2                	xor    %edx,%edx
   2b59f:	31 c0                	xor    %eax,%eax
   2b5a1:	c3                   	ret
   2b5a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   2b5a8:	4c 0f bd c8          	bsr    %rax,%r9
   2b5ac:	49 83 f1 3f          	xor    $0x3f,%r9
   2b5b0:	45 85 c9             	test   %r9d,%r9d
   2b5b3:	75 4b                	jne    2b600 <__udivti3+0x90>
   2b5b5:	48 39 f0             	cmp    %rsi,%rax
   2b5b8:	72 09                	jb     2b5c3 <__udivti3+0x53>
   2b5ba:	31 d2                	xor    %edx,%edx
   2b5bc:	31 c0                	xor    %eax,%eax
   2b5be:	4c 39 c7             	cmp    %r8,%rdi
   2b5c1:	72 cf                	jb     2b592 <__udivti3+0x22>
   2b5c3:	31 d2                	xor    %edx,%edx
   2b5c5:	b8 01 00 00 00       	mov    $0x1,%eax
   2b5ca:	c3                   	ret
   2b5cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   2b5d0:	48 85 d2             	test   %rdx,%rdx
   2b5d3:	75 0d                	jne    2b5e2 <__udivti3+0x72>
   2b5d5:	b8 01 00 00 00       	mov    $0x1,%eax
   2b5da:	31 d2                	xor    %edx,%edx
   2b5dc:	49 f7 f0             	div    %r8
   2b5df:	48 89 c1             	mov    %rax,%rcx
   2b5e2:	31 d2                	xor    %edx,%edx
   2b5e4:	48 89 f0             	mov    %rsi,%rax
   2b5e7:	48 f7 f1             	div    %rcx
   2b5ea:	48 89 c6             	mov    %rax,%rsi
   2b5ed:	48 89 f8             	mov    %rdi,%rax
   2b5f0:	48 f7 f1             	div    %rcx
   2b5f3:	48 89 f2             	mov    %rsi,%rdx
   2b5f6:	c3                   	ret
   2b5f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2b5fe:	00 00 
   2b600:	44 89 c9             	mov    %r9d,%ecx
   2b603:	ba 40 00 00 00       	mov    $0x40,%edx
   2b608:	4d 89 c3             	mov    %r8,%r11
   2b60b:	49 89 f2             	mov    %rsi,%r10
   2b60e:	48 d3 e0             	shl    %cl,%rax
   2b611:	49 63 c9             	movslq %r9d,%rcx
   2b614:	48 29 ca             	sub    %rcx,%rdx
   2b617:	89 d1                	mov    %edx,%ecx
   2b619:	49 d3 eb             	shr    %cl,%r11
   2b61c:	44 89 c9             	mov    %r9d,%ecx
   2b61f:	49 d3 e0             	shl    %cl,%r8
   2b622:	89 d1                	mov    %edx,%ecx
   2b624:	49 09 c3             	or     %rax,%r11
   2b627:	48 89 f8             	mov    %rdi,%rax
   2b62a:	49 d3 ea             	shr    %cl,%r10
   2b62d:	44 89 c9             	mov    %r9d,%ecx
   2b630:	48 d3 e6             	shl    %cl,%rsi
   2b633:	89 d1                	mov    %edx,%ecx
   2b635:	4c 89 d2             	mov    %r10,%rdx
   2b638:	48 d3 e8             	shr    %cl,%rax
   2b63b:	48 09 f0             	or     %rsi,%rax
   2b63e:	49 f7 f3             	div    %r11
   2b641:	49 89 d2             	mov    %rdx,%r10
   2b644:	48 89 c6             	mov    %rax,%rsi
   2b647:	49 f7 e0             	mul    %r8
   2b64a:	49 39 d2             	cmp    %rdx,%r10
   2b64d:	72 19                	jb     2b668 <__udivti3+0xf8>
   2b64f:	44 89 c9             	mov    %r9d,%ecx
   2b652:	48 d3 e7             	shl    %cl,%rdi
   2b655:	48 39 c7             	cmp    %rax,%rdi
   2b658:	73 05                	jae    2b65f <__udivti3+0xef>
   2b65a:	49 39 d2             	cmp    %rdx,%r10
   2b65d:	74 09                	je     2b668 <__udivti3+0xf8>
   2b65f:	48 89 f0             	mov    %rsi,%rax
   2b662:	31 d2                	xor    %edx,%edx
   2b664:	c3                   	ret
   2b665:	0f 1f 00             	nopl   (%rax)
   2b668:	48 8d 46 ff          	lea    -0x1(%rsi),%rax
   2b66c:	31 d2                	xor    %edx,%edx
   2b66e:	c3                   	ret
   2b66f:	90                   	nop

000000000002b670 <__umodti3>:
   2b670:	f3 0f 1e fa          	endbr64
   2b674:	55                   	push   %rbp
   2b675:	49 89 d0             	mov    %rdx,%r8
   2b678:	48 89 e5             	mov    %rsp,%rbp
   2b67b:	53                   	push   %rbx
   2b67c:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
   2b680:	48 89 cf             	mov    %rcx,%rdi
   2b683:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   2b687:	4c 8b 4d e0          	mov    -0x20(%rbp),%r9
   2b68b:	48 85 c9             	test   %rcx,%rcx
   2b68e:	75 20                	jne    2b6b0 <__umodti3+0x40>
   2b690:	48 39 d6             	cmp    %rdx,%rsi
   2b693:	73 63                	jae    2b6f8 <__umodti3+0x88>
   2b695:	4c 89 c8             	mov    %r9,%rax
   2b698:	48 89 f2             	mov    %rsi,%rdx
   2b69b:	49 f7 f0             	div    %r8
   2b69e:	48 89 d0             	mov    %rdx,%rax
   2b6a1:	31 d2                	xor    %edx,%edx
   2b6a3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2b6a7:	c9                   	leave
   2b6a8:	c3                   	ret
   2b6a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   2b6b0:	48 39 ce             	cmp    %rcx,%rsi
   2b6b3:	73 13                	jae    2b6c8 <__umodti3+0x58>
   2b6b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2b6b9:	48 89 f2             	mov    %rsi,%rdx
   2b6bc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2b6c0:	c9                   	leave
   2b6c1:	c3                   	ret
   2b6c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   2b6c8:	4c 0f bd d1          	bsr    %rcx,%r10
   2b6cc:	49 83 f2 3f          	xor    $0x3f,%r10
   2b6d0:	45 85 d2             	test   %r10d,%r10d
   2b6d3:	75 4b                	jne    2b720 <__umodti3+0xb0>
   2b6d5:	48 39 f1             	cmp    %rsi,%rcx
   2b6d8:	0f 82 da 00 00 00    	jb     2b7b8 <__umodti3+0x148>
   2b6de:	49 39 d1             	cmp    %rdx,%r9
   2b6e1:	0f 83 d1 00 00 00    	jae    2b7b8 <__umodti3+0x148>
   2b6e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2b6eb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2b6ef:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2b6f3:	c9                   	leave
   2b6f4:	c3                   	ret
   2b6f5:	0f 1f 00             	nopl   (%rax)
   2b6f8:	48 89 d1             	mov    %rdx,%rcx
   2b6fb:	48 85 d2             	test   %rdx,%rdx
   2b6fe:	75 0d                	jne    2b70d <__umodti3+0x9d>
   2b700:	b8 01 00 00 00       	mov    $0x1,%eax
   2b705:	31 d2                	xor    %edx,%edx
   2b707:	49 f7 f0             	div    %r8
   2b70a:	48 89 c1             	mov    %rax,%rcx
   2b70d:	48 89 f0             	mov    %rsi,%rax
   2b710:	31 d2                	xor    %edx,%edx
   2b712:	48 f7 f1             	div    %rcx
   2b715:	4c 89 c8             	mov    %r9,%rax
   2b718:	48 f7 f1             	div    %rcx
   2b71b:	eb 81                	jmp    2b69e <__umodti3+0x2e>
   2b71d:	0f 1f 00             	nopl   (%rax)
   2b720:	49 63 c2             	movslq %r10d,%rax
   2b723:	41 bb 40 00 00 00    	mov    $0x40,%r11d
   2b729:	44 89 d1             	mov    %r10d,%ecx
   2b72c:	48 89 f3             	mov    %rsi,%rbx
   2b72f:	49 29 c3             	sub    %rax,%r11
   2b732:	48 d3 e7             	shl    %cl,%rdi
   2b735:	48 89 d0             	mov    %rdx,%rax
   2b738:	44 89 d9             	mov    %r11d,%ecx
   2b73b:	48 d3 e8             	shr    %cl,%rax
   2b73e:	44 89 d1             	mov    %r10d,%ecx
   2b741:	49 d3 e0             	shl    %cl,%r8
   2b744:	44 89 d9             	mov    %r11d,%ecx
   2b747:	48 09 c7             	or     %rax,%rdi
   2b74a:	4c 89 c8             	mov    %r9,%rax
   2b74d:	48 d3 eb             	shr    %cl,%rbx
   2b750:	44 89 d1             	mov    %r10d,%ecx
   2b753:	48 d3 e6             	shl    %cl,%rsi
   2b756:	44 89 d9             	mov    %r11d,%ecx
   2b759:	48 89 da             	mov    %rbx,%rdx
   2b75c:	48 d3 e8             	shr    %cl,%rax
   2b75f:	44 89 d1             	mov    %r10d,%ecx
   2b762:	48 09 f0             	or     %rsi,%rax
   2b765:	49 d3 e1             	shl    %cl,%r9
   2b768:	48 f7 f7             	div    %rdi
   2b76b:	48 89 d6             	mov    %rdx,%rsi
   2b76e:	49 f7 e0             	mul    %r8
   2b771:	48 89 c3             	mov    %rax,%rbx
   2b774:	48 89 d1             	mov    %rdx,%rcx
   2b777:	48 39 d6             	cmp    %rdx,%rsi
   2b77a:	72 07                	jb     2b783 <__umodti3+0x113>
   2b77c:	75 11                	jne    2b78f <__umodti3+0x11f>
   2b77e:	49 39 c1             	cmp    %rax,%r9
   2b781:	73 0c                	jae    2b78f <__umodti3+0x11f>
   2b783:	4c 29 c0             	sub    %r8,%rax
   2b786:	48 19 fa             	sbb    %rdi,%rdx
   2b789:	48 89 d1             	mov    %rdx,%rcx
   2b78c:	48 89 c3             	mov    %rax,%rbx
   2b78f:	49 29 d9             	sub    %rbx,%r9
   2b792:	48 19 ce             	sbb    %rcx,%rsi
   2b795:	44 89 d9             	mov    %r11d,%ecx
   2b798:	48 89 f0             	mov    %rsi,%rax
   2b79b:	48 d3 e0             	shl    %cl,%rax
   2b79e:	44 89 d1             	mov    %r10d,%ecx
   2b7a1:	49 d3 e9             	shr    %cl,%r9
   2b7a4:	48 d3 ee             	shr    %cl,%rsi
   2b7a7:	4c 09 c8             	or     %r9,%rax
   2b7aa:	48 89 f2             	mov    %rsi,%rdx
   2b7ad:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   2b7b1:	c9                   	leave
   2b7b2:	c3                   	ret
   2b7b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   2b7b8:	4d 29 c1             	sub    %r8,%r9
   2b7bb:	48 19 fe             	sbb    %rdi,%rsi
   2b7be:	66 49 0f 6e c1       	movq   %r9,%xmm0
   2b7c3:	66 48 0f 6e d6       	movq   %rsi,%xmm2
   2b7c8:	66 0f 6c c2          	punpcklqdq %xmm2,%xmm0
   2b7cc:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
   2b7d0:	e9 12 ff ff ff       	jmp    2b6e7 <__umodti3+0x77>

000000000002b7d5 <MAIN_ENTRY>:
/// auto _start(PhysAddr handoff) -> void
/// %rdi: relocated_base
.align 8
.function _start, global
    // Disable interrupts
    cli
   2b7d5:	fa                   	cli

    // Save handoff
    mov %rdi, %r15
   2b7d6:	49 89 ff             	mov    %rdi,%r15

    // Reload kernel stack and clear %rbp
    lea g_kernel_stack_end(%rip), %rsp
   2b7d9:	48 8d 25 00 d0 00 00 	lea    0xd000(%rip),%rsp        # 387e0 <_ZN4ours9CpuStates12s_cpu_statesE>
    xor %rbp, %rbp
   2b7e0:	48 31 ed             	xor    %rbp,%rbp

    mov %rsp, g_kernel_stack_bottom(%rip)
   2b7e3:	48 89 25 2e d1 00 00 	mov    %rsp,0xd12e(%rip)        # 38918 <g_kernel_stack_bottom>
    mov %cr3, %rax
   2b7ea:	0f 20 d8             	mov    %cr3,%rax
    mov %rax, g_pgd(%rip)
   2b7ed:	48 89 05 0c d0 00 00 	mov    %rax,0xd00c(%rip)        # 38800 <g_pgd>

    lgdt g_temp_gdtr(%rip)
   2b7f4:	0f 01 15 1b 58 00 00 	lgdt   0x581b(%rip)        # 31016 <g_temp_gdtr>

    // Zero our kernel segment data registers
    xor %eax, %eax
   2b7fb:	31 c0                	xor    %eax,%eax
    mov %eax, %ds
   2b7fd:	8e d8                	mov    %eax,%ds
    mov %eax, %es
   2b7ff:	8e c0                	mov    %eax,%es
    mov %eax, %fs
   2b801:	8e e0                	mov    %eax,%fs
    mov %eax, %gs
   2b803:	8e e8                	mov    %eax,%gs
    mov %eax, %ss
   2b805:	8e d0                	mov    %eax,%ss

    // Call our main module
    mov %r15, %rdi  // Pass handoff
   2b807:	4c 89 ff             	mov    %r15,%rdi
    call start_kernel
   2b80a:	e8 f1 67 00 00       	call   32000 <start_kernel>

000000000002b80f <idle>:

idle:
    hlt
   2b80f:	f4                   	hlt
    pause
   2b810:	f3 90                	pause
    jmp idle
   2b812:	eb fb                	jmp    2b80f <idle>

Disassembly of section .init.text:

0000000000032000 <start_kernel>:
    /// Called from arch-code.
    /// Note: Invoke it after finishing the collection to early architecture specific information.
    /// Assumptions:
    ///     1). The early memory allocator has been initialized.
    NO_MANGLE INIT_CODE
    auto start_kernel(PhysAddr handoff) -> void {
   32000:	55                   	push   %rbp
   32001:	48 89 e5             	mov    %rsp,%rbp
   32004:	48 83 ec 20          	sub    $0x20,%rsp
   32008:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        gktl::init_static_objects();
   3200c:	e8 ff 14 00 00       	call   33510 <_ZN4gktl19init_static_objectsEv>

namespace ours {
    FORCE_INLINE CXX11_CONSTEXPR
    auto get_acpi_parser() -> acpi::IAcpiParser * {
        extern acpi::IAcpiParser *g_acpi_parser;
        return g_acpi_parser;
   32011:	48 8d 05 80 6a 00 00 	lea    0x6a80(%rip),%rax        # 38a98 <_ZN4ours13g_acpi_parserE>
   32018:	48 8b 00             	mov    (%rax),%rax
        DEBUG_ASSERT(!get_acpi_parser());
   3201b:	48 83 f8 00          	cmp    $0x0,%rax
   3201f:	74 05                	je     32026 <start_kernel+0x26>
   32021:	e8 da 10 fd ff       	call   3100 <_ZN4ours5panicEv>

        // Install early cpu local data.
        CpuLocal::init_early();
   32026:	e8 37 15 00 00       	call   33562 <_ZN4ours8CpuLocal10init_earlyEv>

        setup_handoff(handoff);
   3202b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   3202f:	e8 cc 01 00 00       	call   32200 <_ZN4ours13setup_handoffEm>

        // Start from here, memory allocator is alive.
        // First thing we should do is to initialize our system logger.
        log::init(0);
   32034:	31 c0                	xor    %eax,%eax
   32036:	31 c0                	xor    %eax,%eax
   32038:	89 c7                	mov    %eax,%edi
   3203a:	e8 f1 94 ff ff       	call   2b530 <_ZN5logz44initEPNS_6LoggerE>

        init_arch_early();
   3203f:	e8 6c 02 00 00       	call   322b0 <init_arch_early>
   32044:	bf 00 00 01 00       	mov    $0x10000,%edi
        set_init_level(gktl::InitLevel::ArchEarly);
   32049:	e8 62 3c fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>

        init_platform_early();
   3204e:	e8 5d 14 00 00       	call   334b0 <init_platform_early>
   32053:	bf 00 00 02 00       	mov    $0x20000,%edi
        set_init_level(gktl::InitLevel::PlatformEarly);
   32058:	e8 53 3c fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>

        // At this point, `PMM` must be initialized.
        CpuLocal::init(arch_current_cpu());
   3205d:	e8 4e 25 fd ff       	call   45b0 <_ZN4ours16arch_current_cpuEv>
   32062:	89 c0                	mov    %eax,%eax
   32064:	89 c6                	mov    %eax,%esi
   32066:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   3206a:	e8 c1 10 fd ff       	call   3130 <_ZN4ours7CpuMaskCI2NSt3__16bitsetILm32EEEEy>
   3206f:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
   32073:	e8 7c 15 00 00       	call   335f4 <_ZN4ours8CpuLocal4initERKNS_7CpuMaskE>

        mem::init_vmm();
   32078:	e8 83 0b 00 00       	call   32c00 <_ZN4ours3mem8init_vmmEv>
   3207d:	bf 00 00 03 00       	mov    $0x30000,%edi
        set_init_level(gktl::InitLevel::VmmInitialized);
   32082:	e8 29 3c fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>

        irq::init_irq();
   32087:	e8 34 81 fd ff       	call   a1c0 <_ZN4ours3irq8init_irqEv>
   3208c:	bf 00 00 04 00       	mov    $0x40000,%edi
        set_init_level(gktl::InitLevel::IrqInitialized);
   32091:	e8 1a 3c fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>

        auto const laborer = task::Thread::spawn("laborer", labour_routine);
   32096:	48 8d 3d 43 cd ff ff 	lea    -0x32bd(%rip),%rdi        # 2ede0 <.L.str>
   3209d:	48 8d 35 2c 00 00 00 	lea    0x2c(%rip),%rsi        # 320d0 <_ZN4oursL14labour_routineEv>
   320a4:	e8 57 18 fe ff       	call   13900 <_ZN4ours4task6Thread5spawnEPKcPFvvE>
   320a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        laborer->detach();
   320ad:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   320b1:	e8 6a 18 fe ff       	call   13920 <_ZN4ours4task6Thread6detachEv>
        laborer->resume();
   320b6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   320ba:	e8 51 18 fe ff       	call   13910 <_ZN4ours4task6Thread6resumeEv>

        // Let the main thread become the idle thread. 
        task::Thread::Current::idle();
   320bf:	e8 9c 10 fd ff       	call   3160 <_ZN4ours4task6Thread7Current4idleEv>
    }
   320c4:	48 83 c4 20          	add    $0x20,%rsp
   320c8:	5d                   	pop    %rbp
   320c9:	c3                   	ret
   320ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000320d0 <_ZN4oursL14labour_routineEv>:
    static auto labour_routine() -> void {
   320d0:	55                   	push   %rbp
   320d1:	48 89 e5             	mov    %rsp,%rbp
        init_arch();
   320d4:	e8 67 02 00 00       	call   32340 <init_arch>
   320d9:	bf 00 00 05 00       	mov    $0x50000,%edi
        set_init_level(gktl::InitLevel::Arch);
   320de:	e8 cd 3b fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>
        init_platform();
   320e3:	e8 18 14 00 00       	call   33500 <init_platform>
   320e8:	bf 00 00 06 00       	mov    $0x60000,%edi
        set_init_level(gktl::InitLevel::Platform);
   320ed:	e8 be 3b fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>
    }
   320f2:	5d                   	pop    %rbp
   320f3:	c3                   	ret
   320f4:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
   320fb:	00 00 00 00 00 

0000000000032100 <start_nonboot_cpu>:

    NO_MANGLE
    auto start_nonboot_cpu() -> Status {
   32100:	55                   	push   %rbp
   32101:	48 89 e5             	mov    %rsp,%rbp
   32104:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
            auto const thiscpu = arch_current_cpu();
   3210b:	e8 a0 24 fd ff       	call   45b0 <_ZN4ours16arch_current_cpuEv>
   32110:	89 45 8c             	mov    %eax,-0x74(%rbp)
            arch_install(s_cpu_offset[thiscpu]);
   32113:	8b 45 8c             	mov    -0x74(%rbp),%eax
   32116:	89 c6                	mov    %eax,%esi
   32118:	48 8d 3d c1 24 00 00 	lea    0x24c1(%rip),%rdi        # 345e0 <_ZN4ours8CpuLocal12s_cpu_offsetE>
   3211f:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
   32126:	e8 a5 10 fd ff       	call   31d0 <_ZNSt3__15arrayIlLm32EEixB8nn210000Em>
   3212b:	48 8b 00             	mov    (%rax),%rax
   3212e:	48 89 45 90          	mov    %rax,-0x70(%rbp)
            });
        }
    private:
        FORCE_INLINE
        static auto arch_install(usize offset) -> void {
            arch_cpu_local_install(offset);
   32132:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   32136:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        MsrIo::write(MsrRegAddr::IA32KernelGsBase, offset);
   3213a:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   3213e:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
   32143:	e8 a8 10 fd ff       	call   31f0 <_ZN4arch5MsrIo5writeImEEvNS_10MsrRegAddrET_>
   32148:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
            *access(&s_current_cpu_offset) = s_cpu_offset[thiscpu];
   3214f:	8b 45 8c             	mov    -0x74(%rbp),%eax
   32152:	89 c6                	mov    %eax,%esi
   32154:	e8 77 10 fd ff       	call   31d0 <_ZNSt3__15arrayIlLm32EEixB8nn210000Em>
   32159:	48 8b 00             	mov    (%rax),%rax
   3215c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   32160:	48 8d 0d 19 17 00 00 	lea    0x1719(%rip),%rcx        # 33880 <_ZN4ours8CpuLocal20s_current_cpu_offsetE>
   32167:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
                reinterpret_cast<u8 *>(object) + read(s_current_cpu_offset)
   3216b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   3216f:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
            return arch_cpu_local_read<Integral>(reinterpret_cast<usize>(&integer));
   32173:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   32177:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
        return arch::read_gs_offset<Integer>(offset);
   3217b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   3217f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
        asm volatile("mov %%gs:%1, %0" : "=r"(ret) : "m"(*(Integer *)offset) : "memory");
   32183:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   32187:	65 48 8b 09          	mov    %gs:(%rcx),%rcx
   3218b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
                reinterpret_cast<u8 *>(object) + read(s_current_cpu_offset)
   3218f:	48 03 45 e0          	add    -0x20(%rbp),%rax
            auto const ptr = reinterpret_cast<T *>(
   32193:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
            DEBUG_ASSERT(ustl::mem::is_aligned(ptr, alignof(T)), "Invalid cpu local data pointer");
   32197:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   3219b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   3219f:	48 c7 45 c8 08 00 00 	movq   $0x8,-0x38(%rbp)
   321a6:	00 
    {  return is_aligned(usize(n), a);}
   321a7:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   321ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   321af:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   321b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    { return (n & (a - 1)) == 0; }
   321b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   321bb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   321bf:	48 83 e9 01          	sub    $0x1,%rcx
   321c3:	48 21 c8             	and    %rcx,%rax
   321c6:	48 83 f8 00          	cmp    $0x0,%rax
   321ca:	74 1d                	je     321e9 <start_nonboot_cpu+0xe9>
   321cc:	48 8d 35 15 cc ff ff 	lea    -0x33eb(%rip),%rsi        # 2ede8 <.L.str>
   321d3:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
   321d7:	e8 a4 10 fd ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   321dc:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
   321e0:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   321e4:	e8 47 10 fd ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   321e9:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
            return ptr;
   321ed:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
            *access(&s_current_cpu_offset) = s_cpu_offset[thiscpu];
   321f1:	48 89 08             	mov    %rcx,(%rax)
        CpuLocal::init_percpu();
        return Status::Ok;
   321f4:	31 c0                	xor    %eax,%eax
   321f6:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
   321fd:	5d                   	pop    %rbp
   321fe:	c3                   	ret
   321ff:	90                   	nop

0000000000032200 <_ZN4ours13setup_handoffEm>:
    INIT_DATA
    phys::Handoff *g_phys_handoff = 0;

    INIT_CODE
    auto setup_handoff(PhysAddr phys_addr) -> void
    {
   32200:	55                   	push   %rbp
   32201:	48 89 e5             	mov    %rsp,%rbp
   32204:	48 83 ec 50          	sub    $0x50,%rsp
   32208:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
        auto const handoff = PhysMap::phys_to_virt<Handoff>(phys_addr);
   3220c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   32210:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            return reinterpret_cast<U *>(PhysMap::phys_to_virt(phys_addr));
   32214:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   32218:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
   3221c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   32220:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   32224:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
   3222b:	00 00 00 
                   reinterpret_cast<PhysAddr>(phys_addr) - kPhysBase < kSize;
   3222e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
   32232:	73 14                	jae    32248 <_ZN4ours13setup_handoffEm+0x48>
                return VirtAddr(kVirtBase + (phys_addr - kPhysBase));
   32234:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
   3223b:	ff ff ff 
   3223e:	48 03 45 e8          	add    -0x18(%rbp),%rax
   32242:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   32246:	eb 08                	jmp    32250 <_ZN4ours13setup_handoffEm+0x50>
            return VirtAddr();
   32248:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   3224f:	00 
        }
   32250:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   32254:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        DEBUG_ASSERT(handoff->verify(), "Pass a error handoff");
   32258:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   3225c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   32260:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        CXX11_CONSTEXPR
        static u32 const kMagic = 0xA1B2C3D4;

        FORCE_INLINE
        auto verify() const -> bool {
            return magic == kMagic;
   32264:	81 38 d4 c3 b2 a1    	cmpl   $0xa1b2c3d4,(%rax)
   3226a:	74 1d                	je     32289 <_ZN4ours13setup_handoffEm+0x89>
   3226c:	48 8d 35 94 cb ff ff 	lea    -0x346c(%rip),%rsi        # 2ee07 <.L.str>
   32273:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
   32277:	e8 04 10 fd ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   3227c:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   32280:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   32284:	e8 a7 0f fd ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>

        g_phys_handoff = handoff;
   32289:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   3228d:	48 89 05 1c 18 00 00 	mov    %rax,0x181c(%rip)        # 33ab0 <_ZN4ours14g_phys_handoffE>
        mem::handoff_early_pmm(g_phys_handoff->mem);
   32294:	48 8b 3d 15 18 00 00 	mov    0x1815(%rip),%rdi        # 33ab0 <_ZN4ours14g_phys_handoffE>
   3229b:	48 83 c7 20          	add    $0x20,%rdi
   3229f:	e8 9c 03 00 00       	call   32640 <_ZN4ours3mem17handoff_early_pmmERNS_4phys13MemoryHandoffE>
    }
   322a4:	48 83 c4 50          	add    $0x50,%rsp
   322a8:	5d                   	pop    %rbp
   322a9:	c3                   	ret
   322aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000322b0 <init_arch_early>:
    int x;
}

namespace ours {
    NO_MANGLE INIT_CODE 
    auto init_arch_early() -> void {
   322b0:	55                   	push   %rbp
   322b1:	48 89 e5             	mov    %rsp,%rbp
   322b4:	48 83 ec 30          	sub    $0x30,%rsp
        x86_init_feature_early();
   322b8:	e8 43 20 fd ff       	call   4300 <_ZN4ours22x86_init_feature_earlyEv>

        x86_setup_idt_early();
   322bd:	e8 7e 1d fd ff       	call   4040 <_ZN4ours19x86_setup_idt_earlyEv>

        x86_setup_mmu_early();
   322c2:	e8 09 2b fd ff       	call   4dd0 <_ZN4ours19x86_setup_mmu_earlyEv>
   322c7:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
        return for_each_cpu(cpu_states().active_cpus, functor);  
    }

    FORCE_INLINE
    static auto set_current_cpu_online(bool online) -> void {
        cpu_states().set_online(arch_current_cpu(), online);
   322cb:	e8 e0 22 fd ff       	call   45b0 <_ZN4ours16arch_current_cpuEv>
   322d0:	89 c1                	mov    %eax,%ecx
   322d2:	8a 45 df             	mov    -0x21(%rbp),%al
   322d5:	48 8d 15 04 65 00 00 	lea    0x6504(%rip),%rdx        # 387e0 <_ZN4ours9CpuStates12s_cpu_statesE>
   322dc:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   322e0:	89 4d f4             	mov    %ecx,-0xc(%rbp)
   322e3:	24 01                	and    $0x1,%al
   322e5:	88 45 f3             	mov    %al,-0xd(%rbp)
   322e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   322ec:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            DEBUG_ASSERT(cpunum < MAX_CPU_NUM, "");
   322f0:	83 7d f4 20          	cmpl   $0x20,-0xc(%rbp)
   322f4:	72 1d                	jb     32313 <init_arch_early+0x63>
   322f6:	48 8d 35 4e ce ff ff 	lea    -0x31b2(%rip),%rsi        # 2f14b <.L.str>
   322fd:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   32301:	e8 7a 0f fd ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   32306:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   3230a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   3230e:	e8 1d 0f fd ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   32313:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
            online_cpus.set(cpunum, online);
   32317:	48 83 c7 08          	add    $0x8,%rdi
   3231b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   3231e:	89 c6                	mov    %eax,%esi
   32320:	8a 45 f3             	mov    -0xd(%rbp),%al
   32323:	0f b6 d0             	movzbl %al,%edx
   32326:	83 e2 01             	and    $0x1,%edx
   32329:	e8 c2 22 fd ff       	call   45f0 <_ZNSt3__16bitsetILm32EE3setB8nn210000Emb>

        set_current_cpu_online(true);
    }
   3232e:	48 83 c4 30          	add    $0x30,%rsp
   32332:	5d                   	pop    %rbp
   32333:	c3                   	ret
   32334:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
   3233b:	00 00 00 00 00 

0000000000032340 <init_arch>:

    NO_MANGLE INIT_CODE 
    auto init_arch() -> void {
   32340:	55                   	push   %rbp
   32341:	48 89 e5             	mov    %rsp,%rbp
        x86_setup_idt();
   32344:	e8 77 1d fd ff       	call   40c0 <_ZN4ours13x86_setup_idtEv>
        x86_setup_mmu();
   32349:	e8 42 2b fd ff       	call   4e90 <_ZN4ours13x86_setup_mmuEv>
    }
   3234e:	5d                   	pop    %rbp
   3234f:	c3                   	ret

0000000000032350 <_ZN4ours3mem8init_pmmEN4ustl5views4SpanImLm18446744073709551615EEE>:
        }
    }

    INIT_CODE
    auto init_pmm(ustl::views::Span<Pfn> max_zone_pfn) -> void
    {
   32350:	55                   	push   %rbp
   32351:	48 89 e5             	mov    %rsp,%rbp
   32354:	48 83 ec 20          	sub    $0x20,%rsp
   32358:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   3235c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
        MemoryModel::init();
   32360:	e8 1b 9d fd ff       	call   c080 <_ZN4ours3mem11MemoryModel4initEv>

        mark_memory_present();
   32365:	e8 36 00 00 00       	call   323a0 <_ZN4ours3memL19mark_memory_presentEv>

        set_zone_pfn_range(max_zone_pfn);
   3236a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   3236e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   32372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   32376:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   3237a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   3237e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   32382:	e8 29 01 00 00       	call   324b0 <_ZN4ours3memL18set_zone_pfn_rangeEN4ustl5views4SpanImLm18446744073709551615EEE>

        setup_possible_nodes();
   32387:	e8 c4 01 00 00       	call   32550 <_ZN4ours3memL20setup_possible_nodesEv>

        hand_off_unused_area();
   3238c:	e8 0f 02 00 00       	call   325a0 <_ZN4ours3memL20hand_off_unused_areaEv>
    }
   32391:	48 83 c4 20          	add    $0x20,%rsp
   32395:	5d                   	pop    %rbp
   32396:	c3                   	ret
   32397:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3239e:	00 00 

00000000000323a0 <_ZN4ours3memL19mark_memory_presentEv>:
    {
   323a0:	55                   	push   %rbp
   323a1:	48 89 e5             	mov    %rsp,%rbp
   323a4:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   323ab:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   323af:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   323b3:	66 c7 45 d6 00 00    	movw   $0x0,-0x2a(%rbp)
   323b9:	48 c7 45 c8 20 00 00 	movq   $0x20,-0x38(%rbp)
   323c0:	00 
   323c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   323c5:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
                : memblock(0), start(0), end(ustl::NumericLimits<PhysAddr>::max()), type(type), nid(nid)
   323cc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   323d3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   323da:	00 
   323db:	e8 70 85 fd ff       	call   a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>
   323e0:	48 89 c1             	mov    %rax,%rcx
   323e3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   323ea:	48 89 48 10          	mov    %rcx,0x10(%rax)
   323ee:	66 8b 4d d6          	mov    -0x2a(%rbp),%cx
   323f2:	66 89 48 18          	mov    %cx,0x18(%rax)
   323f6:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   323fa:	48 89 48 20          	mov    %rcx,0x20(%rax)
   323fe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   32402:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   32406:	48 8b 35 ab 16 00 00 	mov    0x16ab(%rip),%rsi        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
   3240d:	48 81 c6 c0 00 00 00 	add    $0xc0,%rsi
   32414:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   32418:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
   3241f:	e8 4c 85 fd ff       	call   a970 <_ZNKSt3__18functionIFN4ustl6OptionIN7bootmem6RegionEEERNS3_8MemBlockINS3_12RegionVectorEE16IterationContextEEEclESA_>
   32424:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
        while (auto region = EarlyMem::iterate(context)) {
   3242b:	e8 d0 84 fd ff       	call   a900 <_ZNKSt3__18optionalIN7bootmem6RegionEEcvbB8nn210000Ev>
   32430:	a8 01                	test   $0x1,%al
   32432:	75 02                	jne    32436 <_ZN4ours3memL19mark_memory_presentEv+0x96>
   32434:	eb 68                	jmp    3249e <_ZN4ours3memL19mark_memory_presentEv+0xfe>
   32436:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
            auto const start_pfn = phys_to_pfn(region->base);
   3243d:	e8 de 84 fd ff       	call   a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>
   32442:	48 8b 00             	mov    (%rax),%rax
   32445:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   32449:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   3244d:	48 c1 e8 0c          	shr    $0xc,%rax
   32451:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   32458:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
            auto const end_pfn = phys_to_pfn(region->end());
   3245f:	e8 bc 84 fd ff       	call   a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>
   32464:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   32468:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   3246c:	48 8b 01             	mov    (%rcx),%rax
   3246f:	48 03 41 08          	add    0x8(%rcx),%rax
   32473:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   32477:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   3247b:	48 c1 e8 0c          	shr    $0xc,%rax
   3247f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
            MemoryModel::mark_present(start_pfn, end_pfn);
   32486:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
   3248d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
   32494:	e8 37 9c fd ff       	call   c0d0 <_ZN4ours3mem11MemoryModel12mark_presentEmm>
        while (auto region = EarlyMem::iterate(context)) {
   32499:	e9 60 ff ff ff       	jmp    323fe <_ZN4ours3memL19mark_memory_presentEv+0x5e>
    }
   3249e:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   324a5:	5d                   	pop    %rbp
   324a6:	c3                   	ret
   324a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   324ae:	00 00 

00000000000324b0 <_ZN4ours3memL18set_zone_pfn_rangeEN4ustl5views4SpanImLm18446744073709551615EEE>:
    {
   324b0:	55                   	push   %rbp
   324b1:	48 89 e5             	mov    %rsp,%rbp
   324b4:	48 83 ec 30          	sub    $0x30,%rsp
   324b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   324bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
            return s_bootmem->min_address;
   324c0:	48 8b 05 f1 15 00 00 	mov    0x15f1(%rip),%rax        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
   324c7:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
   324ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   324d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   324d6:	48 c1 e8 0c          	shr    $0xc,%rax
        auto start_pfn = phys_to_pfn(EarlyMem::min_address());
   324da:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    for (auto i = 0; i < MAX_ZONES; i++) {
   324de:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
   324e5:	81 7d dc 80 00 00 00 	cmpl   $0x80,-0x24(%rbp)
   324ec:	7d 5c                	jge    3254a <_ZN4ours3memL18set_zone_pfn_rangeEN4ustl5views4SpanImLm18446744073709551615EEE+0x9a>
	    	auto end_pfn = ustl::algorithms::max(max_zone_pfn[i], start_pfn);
   324ee:	48 63 75 dc          	movslq -0x24(%rbp),%rsi
   324f2:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
   324f6:	e8 c5 85 fd ff       	call   aac0 <_ZNK5boost4spanImLm18446744073709551615EEixEm>
   324fb:	48 89 c7             	mov    %rax,%rdi
   324fe:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
   32502:	e8 89 85 fd ff       	call   aa90 <_ZNSt3__13maxB8nn210000ImEERKT_S3_S3_>
   32507:	48 8b 00             	mov    (%rax),%rax
   3250a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	    	ZONE_LOWEST_PFN[i] = start_pfn;
   3250e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   32512:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   32516:	48 8d 05 d3 13 00 00 	lea    0x13d3(%rip),%rax        # 338f0 <_ZN4ours3memL15ZONE_LOWEST_PFNE>
   3251d:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
	    	ZONE_HIGHEST_PFN[i] = end_pfn;
   32521:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   32525:	48 63 55 dc          	movslq -0x24(%rbp),%rdx
   32529:	48 8d 05 e0 13 00 00 	lea    0x13e0(%rip),%rax        # 33910 <_ZN4ours3memL16ZONE_HIGHEST_PFNE>
   32530:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
   32534:	48 89 08             	mov    %rcx,(%rax)
	    	start_pfn = end_pfn;
   32537:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   3253b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	    for (auto i = 0; i < MAX_ZONES; i++) {
   3253f:	8b 45 dc             	mov    -0x24(%rbp),%eax
   32542:	83 c0 01             	add    $0x1,%eax
   32545:	89 45 dc             	mov    %eax,-0x24(%rbp)
   32548:	eb 9b                	jmp    324e5 <_ZN4ours3memL18set_zone_pfn_rangeEN4ustl5views4SpanImLm18446744073709551615EEE+0x35>
    }
   3254a:	48 83 c4 30          	add    $0x30,%rsp
   3254e:	5d                   	pop    %rbp
   3254f:	c3                   	ret

0000000000032550 <_ZN4ours3memL20setup_possible_nodesEv>:
    {
   32550:	55                   	push   %rbp
   32551:	48 89 e5             	mov    %rsp,%rbp
   32554:	48 83 ec 10          	sub    $0x10,%rsp
   32558:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
        NodeMask nodemask;
   3255c:	e8 af 10 fd ff       	call   3610 <_ZN4ours3mem8NodeMaskC2Ev>
   32561:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
        init_node_mask(nodemask);
   32565:	e8 06 01 00 00       	call   32670 <_ZN4ours3memL14init_node_maskERNS0_8NodeMaskE>
   3256a:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
        create_nodes(nodemask);
   3256e:	e8 2d 02 00 00       	call   327a0 <_ZN4ours3memL12create_nodesERKNS0_8NodeMaskE>
   32573:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
        init_nodes(nodemask);
   32577:	e8 44 02 00 00       	call   327c0 <_ZN4ours3memL10init_nodesERKNS0_8NodeMaskE>
        connect_nodes(nodemask);
   3257c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   32580:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   32584:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   32588:	e8 53 02 00 00       	call   327e0 <_ZN4ours3memL13connect_nodesENS0_8NodeMaskE>
    }
   3258d:	48 83 c4 10          	add    $0x10,%rsp
   32591:	5d                   	pop    %rbp
   32592:	c3                   	ret
   32593:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   3259a:	84 00 00 00 00 00 

00000000000325a0 <_ZN4ours3memL20hand_off_unused_areaEv>:
    {
   325a0:	55                   	push   %rbp
   325a1:	48 89 e5             	mov    %rsp,%rbp
   325a4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   325ab:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   325af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   325b3:	66 c7 45 ee 01 00    	movw   $0x1,-0x12(%rbp)
   325b9:	48 c7 45 e0 20 00 00 	movq   $0x20,-0x20(%rbp)
   325c0:	00 
   325c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   325c5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   325c9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   325d0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   325d7:	00 
   325d8:	e8 73 83 fd ff       	call   a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>
   325dd:	48 89 c1             	mov    %rax,%rcx
   325e0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   325e4:	48 89 48 10          	mov    %rcx,0x10(%rax)
   325e8:	66 8b 4d ee          	mov    -0x12(%rbp),%cx
   325ec:	66 89 48 18          	mov    %cx,0x18(%rax)
   325f0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   325f4:	48 89 48 20          	mov    %rcx,0x20(%rax)
   325f8:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   325fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            return s_bootmem->iterate(context);  
   32600:	48 8b 35 b1 14 00 00 	mov    0x14b1(%rip),%rsi        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
   32607:	48 81 c6 c0 00 00 00 	add    $0xc0,%rsi
   3260e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   32612:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
   32616:	e8 55 83 fd ff       	call   a970 <_ZNKSt3__18functionIFN4ustl6OptionIN7bootmem6RegionEEERNS3_8MemBlockINS3_12RegionVectorEE16IterationContextEEEclESA_>
   3261b:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
        while (auto region = EarlyMem::iterate(context)) {
   3261f:	e8 dc 82 fd ff       	call   a900 <_ZNKSt3__18optionalIN7bootmem6RegionEEcvbB8nn210000Ev>
   32624:	a8 01                	test   $0x1,%al
   32626:	75 02                	jne    3262a <_ZN4ours3memL20hand_off_unused_areaEv+0x8a>
   32628:	eb 02                	jmp    3262c <_ZN4ours3memL20hand_off_unused_areaEv+0x8c>
   3262a:	eb cc                	jmp    325f8 <_ZN4ours3memL20hand_off_unused_areaEv+0x58>
    }
   3262c:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   32633:	5d                   	pop    %rbp
   32634:	c3                   	ret
   32635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   3263c:	00 00 00 00 

0000000000032640 <_ZN4ours3mem17handoff_early_pmmERNS_4phys13MemoryHandoffE>:

    INIT_CODE
    auto handoff_early_pmm(phys::MemoryHandoff &mh) -> Status
    {  
   32640:	55                   	push   %rbp
   32641:	48 89 e5             	mov    %rsp,%rbp
   32644:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        EarlyMem::s_bootmem = &mh.bootmem;
   32648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   3264c:	48 89 05 65 14 00 00 	mov    %rax,0x1465(%rip)        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
        mem::g_kernel_phys_base = mh.kernel_load_addr;
   32653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   32657:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
   3265e:	48 8d 05 a3 62 00 00 	lea    0x62a3(%rip),%rax        # 38908 <g_kernel_phys_base>
   32665:	48 89 08             	mov    %rcx,(%rax)

        // Verifies the signature of bootmem
        return Status::Ok; 
   32668:	31 c0                	xor    %eax,%eax
   3266a:	5d                   	pop    %rbp
   3266b:	c3                   	ret
   3266c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000032670 <_ZN4ours3memL14init_node_maskERNS0_8NodeMaskE>:
    {
   32670:	55                   	push   %rbp
   32671:	48 89 e5             	mov    %rsp,%rbp
   32674:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   3267b:	48 89 7d a0          	mov    %rdi,-0x60(%rbp)
   3267f:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   32686:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   3268a:	66 c7 45 b6 00 00    	movw   $0x0,-0x4a(%rbp)
   32690:	48 c7 45 a8 20 00 00 	movq   $0x20,-0x58(%rbp)
   32697:	00 
   32698:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   3269c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   326a3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   326aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   326b1:	00 
   326b2:	e8 99 82 fd ff       	call   a950 <_ZNSt3__114numeric_limitsImE3maxB8nn210000Ev>
   326b7:	48 89 c1             	mov    %rax,%rcx
   326ba:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   326c1:	48 89 48 10          	mov    %rcx,0x10(%rax)
   326c5:	66 8b 4d b6          	mov    -0x4a(%rbp),%cx
   326c9:	66 89 48 18          	mov    %cx,0x18(%rax)
   326cd:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   326d1:	48 89 48 20          	mov    %rcx,0x20(%rax)
   326d5:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
   326dc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   326e0:	48 8b 35 d1 13 00 00 	mov    0x13d1(%rip),%rsi        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
   326e7:	48 81 c6 c0 00 00 00 	add    $0xc0,%rsi
   326ee:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   326f2:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
   326f9:	e8 72 82 fd ff       	call   a970 <_ZNKSt3__18functionIFN4ustl6OptionIN7bootmem6RegionEEERNS3_8MemBlockINS3_12RegionVectorEE16IterationContextEEEclESA_>
   326fe:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
        while (auto region = EarlyMem::iterate(context)) {
   32705:	e8 f6 81 fd ff       	call   a900 <_ZNKSt3__18optionalIN7bootmem6RegionEEcvbB8nn210000Ev>
   3270a:	a8 01                	test   $0x1,%al
   3270c:	75 02                	jne    32710 <_ZN4ours3memL14init_node_maskERNS0_8NodeMaskE+0xa0>
   3270e:	eb 79                	jmp    32789 <_ZN4ours3memL14init_node_maskERNS0_8NodeMaskE+0x119>
            nodemask.set(region->nid());
   32710:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   32714:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   3271b:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
   32722:	e8 f9 81 fd ff       	call   a920 <_ZNSt3__18optionalIN7bootmem6RegionEEptB8nn210000Ev>
   32727:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
   3272e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   32732:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
            return flags.nid();
   32736:	48 83 c0 10          	add    $0x10,%rax
   3273a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   3273e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   32742:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   32746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   3274a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   3274e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            USTL_CONSTEXPR usize const idx = GetFieldT<FieldList, Id>::UNIT;
   32752:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   32759:	00 
            USTL_CONSTEXPR usize const mask = GetFieldT<FieldList, Id>::MASK;
   3275a:	48 c7 45 e8 f8 01 00 	movq   $0x1f8,-0x18(%rbp)
   32761:	00 
            USTL_CONSTEXPR usize const shift = GetFieldT<FieldList, Id>::SHIFT;
   32762:	48 c7 45 e0 03 00 00 	movq   $0x3,-0x20(%rbp)
   32769:	00 
            return Result((values[idx] & mask) >> shift);
   3276a:	0f b7 00             	movzwl (%rax),%eax
   3276d:	89 c6                	mov    %eax,%esi
   3276f:	48 81 e6 f8 01 00 00 	and    $0x1f8,%rsi
   32776:	48 c1 ee 03          	shr    $0x3,%rsi
   3277a:	ba 01 00 00 00       	mov    $0x1,%edx
   3277f:	e8 6c 1e fd ff       	call   45f0 <_ZNSt3__16bitsetILm32EE3setB8nn210000Emb>
        while (auto region = EarlyMem::iterate(context)) {
   32784:	e9 4c ff ff ff       	jmp    326d5 <_ZN4ours3memL14init_node_maskERNS0_8NodeMaskE+0x65>
    }
   32789:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
   32790:	5d                   	pop    %rbp
   32791:	c3                   	ret
   32792:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
   32799:	1f 84 00 00 00 00 00 

00000000000327a0 <_ZN4ours3memL12create_nodesERKNS0_8NodeMaskE>:
    {
   327a0:	55                   	push   %rbp
   327a1:	48 89 e5             	mov    %rsp,%rbp
   327a4:	48 83 ec 10          	sub    $0x10,%rsp
   327a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        nodes.for_each([] (NodeId nid) {
   327ac:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   327b0:	48 8d 75 f7          	lea    -0x9(%rbp),%rsi
   327b4:	e8 d7 7b fd ff       	call   a390 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L12create_nodesERKS1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS6_>
    }
   327b9:	48 83 c4 10          	add    $0x10,%rsp
   327bd:	5d                   	pop    %rbp
   327be:	c3                   	ret
   327bf:	90                   	nop

00000000000327c0 <_ZN4ours3memL10init_nodesERKNS0_8NodeMaskE>:
    {
   327c0:	55                   	push   %rbp
   327c1:	48 89 e5             	mov    %rsp,%rbp
   327c4:	48 83 ec 10          	sub    $0x10,%rsp
   327c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        nodes.for_each([] (NodeId nid) {
   327cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   327d0:	48 8d 75 f7          	lea    -0x9(%rbp),%rsi
   327d4:	e8 d7 7d fd ff       	call   a5b0 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L10init_nodesERKS1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS6_>
    }
   327d9:	48 83 c4 10          	add    $0x10,%rsp
   327dd:	5d                   	pop    %rbp
   327de:	c3                   	ret
   327df:	90                   	nop

00000000000327e0 <_ZN4ours3memL13connect_nodesENS0_8NodeMaskE>:
    {
   327e0:	55                   	push   %rbp
   327e1:	48 89 e5             	mov    %rsp,%rbp
   327e4:	48 83 ec 10          	sub    $0x10,%rsp
   327e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        nodes.for_each([&] (NodeId this_nid) {
   327ec:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   327f0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   327f4:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
   327f8:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
   327fc:	e8 cf 7e fd ff       	call   a6d0 <_ZNK4ours3mem8NodeMask8for_eachIZNS0_L13connect_nodesES1_E3$_0Qsr4ustl6traitsE9InvocableIT_lEEEvOS4_>
    }
   32801:	48 83 c4 10          	add    $0x10,%rsp
   32805:	5d                   	pop    %rbp
   32806:	c3                   	ret
   32807:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   3280e:	00 00 

0000000000032810 <_ZN4ours3memL9init_nodeEl>:
    {
   32810:	55                   	push   %rbp
   32811:	48 89 e5             	mov    %rsp,%rbp
   32814:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
   3281b:	48 89 bd 30 ff ff ff 	mov    %rdi,-0xd0(%rbp)
        auto node = PmNode::node(nid);
   32822:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   32829:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
        {  return s_node_list[nid];  }
   32830:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
   32837:	48 8d 3d ca 5f 00 00 	lea    0x5fca(%rip),%rdi        # 38808 <_ZN4ours3mem6PmNode11s_node_listE>
   3283e:	e8 2d 7b fd ff       	call   a370 <_ZNSt3__15arrayIPN4ours3mem6PmNodeELm32EEixB8nn210000Em>
   32843:	48 8b 00             	mov    (%rax),%rax
   32846:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
        auto const [node_start_pfn, node_end_pfn] = EarlyMem::get_node_pfn_range(nid);
   3284d:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
   32854:	e8 37 9c fd ff       	call   c490 <_ZN4ours3mem8EarlyMem18get_node_pfn_rangeEl>
   32859:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   32860:	48 89 95 20 ff ff ff 	mov    %rdx,-0xe0(%rbp)
        node->init(node_start_pfn, node_end_pfn);
   32867:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
   3286e:	48 8b b5 18 ff ff ff 	mov    -0xe8(%rbp),%rsi
   32875:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
   3287c:	e8 1f c4 fd ff       	call   eca0 <_ZN4ours3mem6PmNode4initEmm>
        auto zone_queues = node->zone_queues();
   32881:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   32888:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   3288f:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
        {  return &zone_queues_;  }
   32896:	48 83 c0 38          	add    $0x38,%rax
   3289a:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
        auto nr_zones = 0;
   328a1:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
   328a8:	00 00 00 
        for (auto i = 0; i < NR_ZONES_PER_NODE; ++i) {
   328ab:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
   328b2:	00 00 00 
   328b5:	83 bd 08 ff ff ff 04 	cmpl   $0x4,-0xf8(%rbp)
   328bc:	0f 8d 22 03 00 00    	jge    32be4 <_ZN4ours3memL9init_nodeEl+0x3d4>
            auto const ztype = ZoneType(i);
   328c2:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
   328c8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%rbp)
            auto zone_start_pfn = clamp_pfn_to_zone(node_start_pfn, ztype);
   328ce:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
   328d5:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
   328db:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
   328e2:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
    {  return clamp(pfn, ZONE_LOWEST_PFN[ztype], ZONE_HIGHEST_PFN[ztype]);  }
   328e8:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   328ee:	89 c1                	mov    %eax,%ecx
   328f0:	48 8d 05 f9 0f 00 00 	lea    0xff9(%rip),%rax        # 338f0 <_ZN4ours3memL15ZONE_LOWEST_PFNE>
   328f7:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
   328fe:	48 8d 34 c8          	lea    (%rax,%rcx,8),%rsi
   32902:	48 8d 05 07 10 00 00 	lea    0x1007(%rip),%rax        # 33910 <_ZN4ours3memL16ZONE_HIGHEST_PFNE>
   32909:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
   32910:	48 8d 14 c8          	lea    (%rax,%rcx,8),%rdx
   32914:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
   3291b:	e8 a0 87 fd ff       	call   b0c0 <_ZNSt3__15clampB8nn210000ImEERKT_S3_S3_S3_>
   32920:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
   32927:	48 89 c1             	mov    %rax,%rcx
   3292a:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
   32931:	48 8b 09             	mov    (%rcx),%rcx
            auto zone_start_pfn = clamp_pfn_to_zone(node_start_pfn, ztype);
   32934:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
            auto zone_end_pfn = clamp_pfn_to_zone(node_end_pfn, ztype);
   3293b:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
   32942:	8b 8d 04 ff ff ff    	mov    -0xfc(%rbp),%ecx
   32948:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
   3294f:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%rbp)
    {  return clamp(pfn, ZONE_LOWEST_PFN[ztype], ZONE_HIGHEST_PFN[ztype]);  }
   32955:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
   3295b:	48 8d 34 ca          	lea    (%rdx,%rcx,8),%rsi
   3295f:	48 8d 14 c8          	lea    (%rax,%rcx,8),%rdx
   32963:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
   3296a:	e8 51 87 fd ff       	call   b0c0 <_ZNSt3__15clampB8nn210000ImEERKT_S3_S3_S3_>
   3296f:	48 8b 00             	mov    (%rax),%rax
            auto zone_end_pfn = clamp_pfn_to_zone(node_end_pfn, ztype);
   32972:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
            if (zone_start_pfn < node_start_pfn || zone_end_pfn > node_end_pfn) {
   32979:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   32980:	48 3b 85 18 ff ff ff 	cmp    -0xe8(%rbp),%rax
   32987:	72 10                	jb     32999 <_ZN4ours3memL9init_nodeEl+0x189>
   32989:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
   32990:	48 3b 85 20 ff ff ff 	cmp    -0xe0(%rbp),%rax
   32997:	76 05                	jbe    3299e <_ZN4ours3memL9init_nodeEl+0x18e>
                continue;
   32999:	e9 32 02 00 00       	jmp    32bd0 <_ZN4ours3memL9init_nodeEl+0x3c0>
            auto zone = EarlyMem::allocate<PmZone>(1, nid);
   3299e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   329a5:	48 c7 85 70 ff ff ff 	movq   $0x1,-0x90(%rbp)
   329ac:	01 00 00 00 
   329b0:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
            return allocate<T>(n, alignof(T), nid);
   329b7:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
   329be:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   329c5:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   329c9:	48 c7 45 a0 08 00 00 	movq   $0x8,-0x60(%rbp)
   329d0:	00 
   329d1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
            return allocate<T>(n, align, min_address(), max_address(), nid);
   329d5:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   329d9:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
            return s_bootmem->min_address;
   329dd:	48 8b 05 d4 10 00 00 	mov    0x10d4(%rip),%rax        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
   329e4:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
            return s_bootmem->max_address;
   329eb:	48 8b 88 f8 00 00 00 	mov    0xf8(%rax),%rcx
            return allocate<T>(n, align, min_address(), max_address(), nid);
   329f2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   329f6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   329fa:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   329fe:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   32a02:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   32a06:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
            DEBUG_ASSERT(s_bootmem);
   32a0a:	48 8b 05 a7 10 00 00 	mov    0x10a7(%rip),%rax        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
   32a11:	48 83 f8 00          	cmp    $0x0,%rax
   32a15:	75 05                	jne    32a1c <_ZN4ours3memL9init_nodeEl+0x20c>
   32a17:	e8 e4 06 fd ff       	call   3100 <_ZN4ours5panicEv>
            PhysAddr phys_addr = s_bootmem->allocate(sizeof(T) * n, align, start, end, nid);
   32a1c:	48 8b 3d 95 10 00 00 	mov    0x1095(%rip),%rdi        # 33ab8 <_ZN4ours3mem8EarlyMem9s_bootmemE>
   32a23:	48 83 c7 60          	add    $0x60,%rdi
   32a27:	48 69 75 d8 48 01 00 	imul   $0x148,-0x28(%rbp),%rsi
   32a2e:	00 
   32a2f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   32a33:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   32a37:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
   32a3b:	4c 8b 4d b8          	mov    -0x48(%rbp),%r9
   32a3f:	e8 bc 81 fd ff       	call   ac00 <_ZNKSt3__18functionIFmmmmmlEEclEmmmml>
   32a44:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
            return PhysMap::phys_to_virt<T>(phys_addr);
   32a48:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   32a4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            return reinterpret_cast<U *>(PhysMap::phys_to_virt(phys_addr));
   32a50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   32a54:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
   32a58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   32a5c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   32a60:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
   32a67:	00 00 00 
                   reinterpret_cast<PhysAddr>(phys_addr) - kPhysBase < kSize;
   32a6a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
            if (PhysMap::is_valid_phys_addr(phys_addr)) {
   32a6e:	73 14                	jae    32a84 <_ZN4ours3memL9init_nodeEl+0x274>
                return VirtAddr(kVirtBase + (phys_addr - kPhysBase));
   32a70:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
   32a77:	ff ff ff 
   32a7a:	48 03 45 e8          	add    -0x18(%rbp),%rax
   32a7e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   32a82:	eb 08                	jmp    32a8c <_ZN4ours3memL9init_nodeEl+0x27c>
            return VirtAddr();
   32a84:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   32a8b:	00 
        }
   32a8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   32a90:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
            if (!zone) {
   32a97:	48 83 bd e8 fe ff ff 	cmpq   $0x0,-0x118(%rbp)
   32a9e:	00 
   32a9f:	0f 85 bb 00 00 00    	jne    32b60 <_ZN4ours3memL9init_nodeEl+0x350>
                panic("No enough memory to place node[{}].zone[{}]", nid, to_string(ztype));
   32aa5:	48 8d 35 ae c4 ff ff 	lea    -0x3b52(%rip),%rsi        # 2ef5a <.L.str.5>
   32aac:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
   32ab3:	e8 c8 07 fd ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   32ab8:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
   32abe:	89 45 8c             	mov    %eax,-0x74(%rbp)
        switch (type) {
   32ac1:	8b 45 8c             	mov    -0x74(%rbp),%eax
   32ac4:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%rbp)
   32aca:	85 c0                	test   %eax,%eax
   32acc:	74 1c                	je     32aea <_ZN4ours3memL9init_nodeEl+0x2da>
   32ace:	eb 00                	jmp    32ad0 <_ZN4ours3memL9init_nodeEl+0x2c0>
   32ad0:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
   32ad6:	83 e8 01             	sub    $0x1,%eax
   32ad9:	74 1c                	je     32af7 <_ZN4ours3memL9init_nodeEl+0x2e7>
   32adb:	eb 00                	jmp    32add <_ZN4ours3memL9init_nodeEl+0x2cd>
   32add:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
   32ae3:	83 e8 02             	sub    $0x2,%eax
   32ae6:	74 1c                	je     32b04 <_ZN4ours3memL9init_nodeEl+0x2f4>
   32ae8:	eb 27                	jmp    32b11 <_ZN4ours3memL9init_nodeEl+0x301>
            case ZoneType::Dma:     return "Dma";
   32aea:	48 8d 05 95 c4 ff ff 	lea    -0x3b6b(%rip),%rax        # 2ef86 <.L.str>
   32af1:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   32af5:	eb 3d                	jmp    32b34 <_ZN4ours3memL9init_nodeEl+0x324>
            case ZoneType::Dma32:   return "Dma32";
   32af7:	48 8d 05 8c c4 ff ff 	lea    -0x3b74(%rip),%rax        # 2ef8a <.L.str.1>
   32afe:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   32b02:	eb 30                	jmp    32b34 <_ZN4ours3memL9init_nodeEl+0x324>
            case ZoneType::Normal:  return "Normal";
   32b04:	48 8d 05 85 c4 ff ff 	lea    -0x3b7b(%rip),%rax        # 2ef90 <.L.str.2>
   32b0b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   32b0f:	eb 23                	jmp    32b34 <_ZN4ours3memL9init_nodeEl+0x324>
        OX_PANIC("Anonymous zone type is not allowed.");
   32b11:	48 8d 35 7f c4 ff ff 	lea    -0x3b81(%rip),%rsi        # 2ef97 <.L.str.3>
   32b18:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
   32b1f:	e8 5c 07 fd ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   32b24:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
   32b2b:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
   32b2f:	e8 fc 06 fd ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
    }
   32b34:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   32b38:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
   32b3f:	48 8b bd d8 fe ff ff 	mov    -0x128(%rbp),%rdi
   32b46:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
   32b4d:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
   32b54:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
   32b5b:	e8 00 85 fd ff       	call   b060 <_ZN4ours5panicIJRlPKcEEEvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEDpOT_>
            nr_zones += 1;
   32b60:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
   32b66:	83 c0 01             	add    $0x1,%eax
   32b69:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
            auto nr_presents = EarlyMem::count_present_frames(zone_start_pfn, zone_end_pfn);
   32b6f:	48 8b bd f8 fe ff ff 	mov    -0x108(%rbp),%rdi
   32b76:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
   32b7d:	e8 6e 9a fd ff       	call   c5f0 <_ZN4ours3mem8EarlyMem20count_present_framesEmm>
   32b82:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
            zone->init(nid, ztype, zone_start_pfn, zone_end_pfn, nr_presents);
   32b89:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
   32b90:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
   32b97:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
   32b9d:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
   32ba4:	4c 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%r8
   32bab:	4c 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%r9
   32bb2:	e8 6d 0b 00 00       	call   33724 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm>
            zone_queues->emplace(zone, ztype);
   32bb7:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
   32bbe:	48 8b b5 e8 fe ff ff 	mov    -0x118(%rbp),%rsi
   32bc5:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
   32bcb:	e8 10 b3 fd ff       	call   dee0 <_ZN4ours3mem10ZoneQueues7emplaceEPNS0_6PmZoneENS0_8ZoneTypeE>
        for (auto i = 0; i < NR_ZONES_PER_NODE; ++i) {
   32bd0:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
   32bd6:	83 c0 01             	add    $0x1,%eax
   32bd9:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%rbp)
   32bdf:	e9 d1 fc ff ff       	jmp    328b5 <_ZN4ours3memL9init_nodeEl+0xa5>
        return nr_zones;
   32be4:	48 63 85 0c ff ff ff 	movslq -0xf4(%rbp),%rax
   32beb:	48 81 c4 50 01 00 00 	add    $0x150,%rsp
   32bf2:	5d                   	pop    %rbp
   32bf3:	c3                   	ret
   32bf4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   32bfb:	00 00 00 
   32bfe:	66 90                	xchg   %ax,%ax

0000000000032c00 <_ZN4ours3mem8init_vmmEv>:

    /// Requires:
    ///     1). 
    INIT_CODE 
    auto init_vmm() -> void 
    {  
   32c00:	55                   	push   %rbp
   32c01:	48 89 e5             	mov    %rsp,%rbp
        init_vmm_preheap();
   32c04:	e8 17 00 00 00       	call   32c20 <_ZN4ours3memL16init_vmm_preheapEv>

        init_heap();
   32c09:	e8 82 05 00 00       	call   33190 <_ZN4ours3memL9init_heapEv>
        // Here `Scope<T>` is available

        init_vmm_postheap();
   32c0e:	e8 8d 05 00 00       	call   331a0 <_ZN4ours3memL17init_vmm_postheapEv>
    }
   32c13:	5d                   	pop    %rbp
   32c14:	c3                   	ret
   32c15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
   32c1c:	00 00 00 00 

0000000000032c20 <_ZN4ours3memL16init_vmm_preheapEv>:
    {
   32c20:	55                   	push   %rbp
   32c21:	48 89 e5             	mov    %rsp,%rbp
   32c24:	48 81 ec c0 01 00 00 	sub    $0x1c0,%rsp
        VmAspace::init_kernel_aspace();
   32c2b:	e8 e6 0b 00 00       	call   33816 <_ZN4ours3mem8VmAspace18init_kernel_aspaceEv>
   32c30:	48 8d bd b0 fe ff ff 	lea    -0x150(%rbp),%rdi
        auto kaspace = VmAspace::kernel_aspace();
   32c37:	e8 54 3b fd ff       	call   6790 <_ZN4ours3mem8VmAspace13kernel_aspaceEv>
            VirtAddr const link_load_addr = VirtAddr(kImageStart);
   32c3c:	48 8d 0d bd d3 fc ff 	lea    -0x32c43(%rip),%rcx        # 0 <_DYNAMIC>
   32c43:	48 89 8d a8 fe ff ff 	mov    %rcx,-0x158(%rbp)
        return g_kernel_phys_base;  
    }

    FORCE_INLINE
    auto get_kernel_virt_base() -> VirtAddr { 
        return g_kernel_virt_base;  
   32c4a:	48 8d 05 bf 5c 00 00 	lea    0x5cbf(%rip),%rax        # 38910 <g_kernel_virt_base>
   32c51:	48 8b 00             	mov    (%rax),%rax
            VirtAddr const real_load_addr = get_kernel_virt_base();
   32c54:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
            isize const delta = real_load_addr - link_load_addr;
   32c5b:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   32c62:	48 29 c8             	sub    %rcx,%rax
   32c65:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
            for (auto i = 0; i < MaxNumPresetVmas; ++i) {
   32c6c:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
   32c73:	00 00 00 
   32c76:	83 bd 94 fe ff ff 04 	cmpl   $0x4,-0x16c(%rbp)
   32c7d:	7d 39                	jge    32cb8 <_ZN4ours3memL16init_vmm_preheapEv+0x98>
                NAMED_PRESET_VMAS[i].base += delta;
   32c7f:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
   32c86:	48 63 85 94 fe ff ff 	movslq -0x16c(%rbp),%rax
   32c8d:	48 8d 14 40          	lea    (%rax,%rax,2),%rdx
   32c91:	48 c1 e2 04          	shl    $0x4,%rdx
   32c95:	48 8d 05 94 0c 00 00 	lea    0xc94(%rip),%rax        # 33930 <_ZN4ours3memL17NAMED_PRESET_VMASE>
   32c9c:	48 01 d0             	add    %rdx,%rax
   32c9f:	48 03 48 08          	add    0x8(%rax),%rcx
   32ca3:	48 89 48 08          	mov    %rcx,0x8(%rax)
            for (auto i = 0; i < MaxNumPresetVmas; ++i) {
   32ca7:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
   32cad:	83 c0 01             	add    $0x1,%eax
   32cb0:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%rbp)
   32cb6:	eb be                	jmp    32c76 <_ZN4ours3memL16init_vmm_preheapEv+0x56>
        for (auto i = 0; i < MaxNumPresetVmas; ++i) {
   32cb8:	c7 85 90 fe ff ff 00 	movl   $0x0,-0x170(%rbp)
   32cbf:	00 00 00 
   32cc2:	83 bd 90 fe ff ff 04 	cmpl   $0x4,-0x170(%rbp)
   32cc9:	0f 8d fd 02 00 00    	jge    32fcc <_ZN4ours3memL16init_vmm_preheapEv+0x3ac>
            auto const &region = NAMED_PRESET_VMAS[i];
   32ccf:	48 63 85 90 fe ff ff 	movslq -0x170(%rbp),%rax
   32cd6:	48 8d 0c 40          	lea    (%rax,%rax,2),%rcx
   32cda:	48 c1 e1 04          	shl    $0x4,%rcx
   32cde:	48 8d 05 4b 0c 00 00 	lea    0xc4b(%rip),%rax        # 33930 <_ZN4ours3memL17NAMED_PRESET_VMASE>
   32ce5:	48 01 c8             	add    %rcx,%rax
   32ce8:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
                construct_at(region.altvma, kaspace, region.base, region.size, region.rights, region.flags, region.name)
   32cef:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
   32cf6:	48 8b 78 28          	mov    0x28(%rax),%rdi
   32cfa:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
   32d01:	48 83 c2 08          	add    $0x8,%rdx
   32d05:	48 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%rcx
   32d0c:	48 83 c1 10          	add    $0x10,%rcx
   32d10:	4c 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8
   32d17:	49 83 c0 18          	add    $0x18,%r8
   32d1b:	4c 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%r9
   32d22:	49 83 c1 20          	add    $0x20,%r9
   32d26:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
   32d2d:	48 89 e0             	mov    %rsp,%rax
   32d30:	48 89 30             	mov    %rsi,(%rax)
   32d33:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
   32d3a:	e8 51 8e fd ff       	call   bb90 <_ZNSt3__112construct_atB8nn210000IN4ours3mem6VmAreaEJRN4ustl2RcINS2_8VmAspaceENS4_12NullDisposerENS4_3mem9AllocatorIS6_EEmEERKmSE_RKN4arch6paging8MmuFlagsERKNS2_8VmaFlagsERKPKcEPS3_EEPT_ST_DpOT0_>
   32d3f:	48 8d 8d 78 fe ff ff 	lea    -0x188(%rbp),%rcx
   32d46:	48 89 8d c8 fe ff ff 	mov    %rcx,-0x138(%rbp)
   32d4d:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
        return Rc<Base, Args...>(object, object);
   32d54:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
   32d5b:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
   32d62:	48 8d 95 78 fe ff ff 	lea    -0x188(%rbp),%rdx
   32d69:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
   32d70:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
   32d77:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   32d7e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
            : pointer_(ptr),
   32d85:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
   32d8c:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   32d8f:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
   32d96:	48 89 48 08          	mov    %rcx,0x8(%rax)
   32d9a:	48 8d 85 78 fe ff ff 	lea    -0x188(%rbp),%rax
   32da1:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
   32da8:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
        {  return pointer_;  }
   32daf:	48 8b 38             	mov    (%rax),%rdi
            vma->activate();
   32db2:	e8 39 df fd ff       	call   10cf0 <_ZN4ours3mem6VmArea8activateEv>
   32db7:	48 8d 85 78 fe ff ff 	lea    -0x188(%rbp),%rax
   32dbe:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   32dc5:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   32dcc:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
            if (counter_) {
   32dd3:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   32dd8:	0f 84 d8 01 00 00    	je     32fb6 <_ZN4ours3memL16init_vmm_preheapEv+0x396>
   32dde:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
                if (counter_->strong_count() == 1) {
   32de5:	48 8b 40 08          	mov    0x8(%rax),%rax
   32de9:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   32df0:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
        {  return strong_counter_;  }
   32df7:	48 83 c7 18          	add    $0x18,%rdi
   32dfb:	e8 f0 6f fd ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   32e00:	48 83 f8 01          	cmp    $0x1,%rax
   32e04:	0f 85 83 01 00 00    	jne    32f8d <_ZN4ours3memL16init_vmm_preheapEv+0x36d>
   32e0a:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
   32e11:	48 8b 08             	mov    (%rax),%rcx
   32e14:	48 8b 40 08          	mov    0x8(%rax),%rax
   32e18:	48 8d 95 d8 fe ff ff 	lea    -0x128(%rbp),%rdx
   32e1f:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
   32e26:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
   32e2d:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   32e34:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   32e3b:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
            : pointer_(ptr),
   32e42:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
   32e49:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   32e4c:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
   32e53:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   32e57:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   32e5c:	74 27                	je     32e85 <_ZN4ours3memL16init_vmm_preheapEv+0x265>
   32e5e:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
                counter_->enable_weak();
   32e65:	48 8b 40 08          	mov    0x8(%rax),%rax
   32e69:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   32e70:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
        {  weak_counter_  = 1;  }
   32e77:	48 83 c7 10          	add    $0x10,%rdi
   32e7b:	be 01 00 00 00       	mov    $0x1,%esi
   32e80:	e8 4b 70 fd ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   32e85:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
                    counter_->disposer()(pointer_);
   32e8c:	48 8b 40 08          	mov    0x8(%rax),%rax
   32e90:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   32e97:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
        {  return this->Base1::as_ref();  }
   32e9e:	48 83 c7 08          	add    $0x8,%rdi
   32ea2:	e8 19 71 fd ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
   32ea7:	48 89 c7             	mov    %rax,%rdi
   32eaa:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
   32eb1:	48 8b 30             	mov    (%rax),%rsi
   32eb4:	31 c0                	xor    %eax,%eax
   32eb6:	e8 25 6f fd ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
   32ebb:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
   32ec2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   32ec9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   32ed0:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
            if (counter_) {
   32ed7:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   32edc:	0f 84 a9 00 00 00    	je     32f8b <_ZN4ours3memL16init_vmm_preheapEv+0x36b>
   32ee2:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
                if (counter_->weak_count() == 1) {
   32ee9:	48 8b 40 08          	mov    0x8(%rax),%rax
   32eed:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   32ef4:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
        {  return weak_counter_;  }
   32efb:	48 83 c7 10          	add    $0x10,%rdi
   32eff:	e8 ec 6e fd ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   32f04:	48 83 f8 01          	cmp    $0x1,%rax
   32f08:	75 5e                	jne    32f68 <_ZN4ours3memL16init_vmm_preheapEv+0x348>
   32f0a:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
   32f11:	48 8b 40 08          	mov    0x8(%rax),%rax
   32f15:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   32f19:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
        {  return this->Base2::as_ref();  }
   32f1d:	48 83 c7 09          	add    $0x9,%rdi
   32f21:	e8 2a 91 fd ff       	call   c050 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem6VmAreaEEELb0EE6as_refEv>
   32f26:	48 89 c1             	mov    %rax,%rcx
   32f29:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
   32f30:	48 8b 00             	mov    (%rax),%rax
   32f33:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
   32f3a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   32f41:	48 c7 85 68 ff ff ff 	movq   $0x1,-0x98(%rbp)
   32f48:	01 00 00 00 
   32f4c:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
   32f53:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
   32f5a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
   32f61:	e8 ba 90 fd ff       	call   c020 <_ZN4ustl3mem9AllocatorIN4ours3mem6VmAreaEE10deallocateEPS4_m>
                } else {
   32f66:	eb 21                	jmp    32f89 <_ZN4ours3memL16init_vmm_preheapEv+0x369>
   32f68:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
                    counter_->dec_weak_ref();
   32f6f:	48 8b 40 08          	mov    0x8(%rax),%rax
   32f73:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   32f77:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
        {  weak_counter_ -= 1;  }
   32f7b:	48 83 c7 10          	add    $0x10,%rdi
   32f7f:	be 01 00 00 00       	mov    $0x1,%esi
   32f84:	e8 87 70 fd ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   32f89:	eb 00                	jmp    32f8b <_ZN4ours3memL16init_vmm_preheapEv+0x36b>
                } else {
   32f8b:	eb 27                	jmp    32fb4 <_ZN4ours3memL16init_vmm_preheapEv+0x394>
   32f8d:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
                    counter_->dec_strong_ref();
   32f94:	48 8b 40 08          	mov    0x8(%rax),%rax
   32f98:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   32f9f:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
        {  strong_counter_  -= 1;  }
   32fa6:	48 83 c7 18          	add    $0x18,%rdi
   32faa:	be 01 00 00 00       	mov    $0x1,%esi
   32faf:	e8 5c 70 fd ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   32fb4:	eb 00                	jmp    32fb6 <_ZN4ours3memL16init_vmm_preheapEv+0x396>
        }
   32fb6:	eb 00                	jmp    32fb8 <_ZN4ours3memL16init_vmm_preheapEv+0x398>
        for (auto i = 0; i < MaxNumPresetVmas; ++i) {
   32fb8:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
   32fbe:	83 c0 01             	add    $0x1,%eax
   32fc1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%rbp)
   32fc7:	e9 f6 fc ff ff       	jmp    32cc2 <_ZN4ours3memL16init_vmm_preheapEv+0xa2>
   32fcc:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   32fd3:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   32fda:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   32fe1:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
            if (counter_) {
   32fe8:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   32fed:	0f 84 90 01 00 00    	je     33183 <_ZN4ours3memL16init_vmm_preheapEv+0x563>
   32ff3:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
                if (counter_->strong_count() == 1) {
   32ffa:	48 8b 40 08          	mov    0x8(%rax),%rax
   32ffe:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   33002:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
        {  return strong_counter_;  }
   33006:	48 83 c7 18          	add    $0x18,%rdi
   3300a:	e8 e1 6d fd ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   3300f:	48 83 f8 01          	cmp    $0x1,%rax
   33013:	0f 85 47 01 00 00    	jne    33160 <_ZN4ours3memL16init_vmm_preheapEv+0x540>
   33019:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
   33020:	48 8b 08             	mov    (%rax),%rcx
   33023:	48 8b 40 08          	mov    0x8(%rax),%rax
   33027:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
   3302e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   33032:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   33036:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   3303a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   3303e:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
            : pointer_(ptr),
   33045:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   33049:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   3304c:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   33050:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   33054:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   33059:	74 21                	je     3307c <_ZN4ours3memL16init_vmm_preheapEv+0x45c>
   3305b:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
                counter_->enable_weak();
   33062:	48 8b 40 08          	mov    0x8(%rax),%rax
   33066:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   3306a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
        {  weak_counter_  = 1;  }
   3306e:	48 83 c7 10          	add    $0x10,%rdi
   33072:	be 01 00 00 00       	mov    $0x1,%esi
   33077:	e8 54 6e fd ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   3307c:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
                    counter_->disposer()(pointer_);
   33083:	48 8b 40 08          	mov    0x8(%rax),%rax
   33087:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   3308b:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
        {  return this->Base1::as_ref();  }
   3308f:	48 83 c7 08          	add    $0x8,%rdi
   33093:	e8 28 6f fd ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
   33098:	48 89 c7             	mov    %rax,%rdi
   3309b:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
   330a2:	48 8b 30             	mov    (%rax),%rsi
   330a5:	31 c0                	xor    %eax,%eax
   330a7:	e8 34 6d fd ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
   330ac:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   330b3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   330b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   330bb:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
            if (counter_) {
   330c2:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   330c7:	0f 84 91 00 00 00    	je     3315e <_ZN4ours3memL16init_vmm_preheapEv+0x53e>
   330cd:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
                if (counter_->weak_count() == 1) {
   330d4:	48 8b 40 08          	mov    0x8(%rax),%rax
   330d8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   330dc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
        {  return weak_counter_;  }
   330e0:	48 83 c7 10          	add    $0x10,%rdi
   330e4:	e8 07 6d fd ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   330e9:	48 83 f8 01          	cmp    $0x1,%rax
   330ed:	75 4c                	jne    3313b <_ZN4ours3memL16init_vmm_preheapEv+0x51b>
   330ef:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
   330f6:	48 8b 40 08          	mov    0x8(%rax),%rax
   330fa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   330fe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
        {  return this->Base2::as_ref();  }
   33102:	48 83 c7 09          	add    $0x9,%rdi
   33106:	e8 f5 6e fd ff       	call   a000 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EE6as_refEv>
   3310b:	48 89 c1             	mov    %rax,%rcx
   3310e:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
   33115:	48 8b 00             	mov    (%rax),%rax
   33118:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   3311c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   33120:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
   33127:	00 
   33128:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   3312c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   33130:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   33134:	e8 97 6e fd ff       	call   9fd0 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmAspaceEE10deallocateEPS4_m>
                } else {
   33139:	eb 21                	jmp    3315c <_ZN4ours3memL16init_vmm_preheapEv+0x53c>
   3313b:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
                    counter_->dec_weak_ref();
   33142:	48 8b 40 08          	mov    0x8(%rax),%rax
   33146:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   3314a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
        {  weak_counter_ -= 1;  }
   3314e:	48 83 c7 10          	add    $0x10,%rdi
   33152:	be 01 00 00 00       	mov    $0x1,%esi
   33157:	e8 b4 6e fd ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   3315c:	eb 00                	jmp    3315e <_ZN4ours3memL16init_vmm_preheapEv+0x53e>
                } else {
   3315e:	eb 21                	jmp    33181 <_ZN4ours3memL16init_vmm_preheapEv+0x561>
   33160:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
                    counter_->dec_strong_ref();
   33167:	48 8b 40 08          	mov    0x8(%rax),%rax
   3316b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   3316f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        {  strong_counter_  -= 1;  }
   33173:	48 83 c7 18          	add    $0x18,%rdi
   33177:	be 01 00 00 00       	mov    $0x1,%esi
   3317c:	e8 8f 6e fd ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   33181:	eb 00                	jmp    33183 <_ZN4ours3memL16init_vmm_preheapEv+0x563>
    }
   33183:	48 81 c4 c0 01 00 00 	add    $0x1c0,%rsp
   3318a:	5d                   	pop    %rbp
   3318b:	c3                   	ret
   3318c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000033190 <_ZN4ours3memL9init_heapEv>:
    {
   33190:	55                   	push   %rbp
   33191:	48 89 e5             	mov    %rsp,%rbp
    }
   33194:	5d                   	pop    %rbp
   33195:	c3                   	ret
   33196:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   3319d:	00 00 00 

00000000000331a0 <_ZN4ours3memL17init_vmm_postheapEv>:
    {
   331a0:	55                   	push   %rbp
   331a1:	48 89 e5             	mov    %rsp,%rbp
   331a4:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
   331ab:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
        auto kaspace = VmAspace::kernel_aspace();
   331b2:	e8 d9 35 fd ff       	call   6790 <_ZN4ours3mem8VmAspace13kernel_aspaceEv>
            VirtAddr const link_load_addr = VirtAddr(kImageStart);
   331b7:	48 8d 0d 42 ce fc ff 	lea    -0x331be(%rip),%rcx        # 0 <_DYNAMIC>
   331be:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
   331c5:	48 8d 05 44 57 00 00 	lea    0x5744(%rip),%rax        # 38910 <g_kernel_virt_base>
   331cc:	48 8b 00             	mov    (%rax),%rax
            VirtAddr const real_load_addr = get_kernel_virt_base();
   331cf:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
            isize const delta = real_load_addr - link_load_addr;
   331d6:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   331dd:	48 29 c8             	sub    %rcx,%rax
   331e0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
            for (auto i = 0; i < MaxNumPresetVmas; ++i) {
   331e7:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
   331ee:	00 00 00 
   331f1:	83 bd 44 ff ff ff 04 	cmpl   $0x4,-0xbc(%rbp)
   331f8:	7d 39                	jge    33233 <_ZN4ours3memL17init_vmm_postheapEv+0x93>
                kKernelVmas[i].base += delta;
   331fa:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
   33201:	48 63 85 44 ff ff ff 	movslq -0xbc(%rbp),%rax
   33208:	48 8d 14 40          	lea    (%rax,%rax,2),%rdx
   3320c:	48 c1 e2 04          	shl    $0x4,%rdx
   33210:	48 8d 05 a9 07 00 00 	lea    0x7a9(%rip),%rax        # 339c0 <_ZN4ours3memL11kKernelVmasE>
   33217:	48 01 d0             	add    %rdx,%rax
   3321a:	48 03 48 08          	add    0x8(%rax),%rcx
   3321e:	48 89 48 08          	mov    %rcx,0x8(%rax)
            for (auto i = 0; i < MaxNumPresetVmas; ++i) {
   33222:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
   33228:	83 c0 01             	add    $0x1,%eax
   3322b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
   33231:	eb be                	jmp    331f1 <_ZN4ours3memL17init_vmm_postheapEv+0x51>
        for (auto &region: kKernelVmas) {
   33233:	48 8d 05 86 07 00 00 	lea    0x786(%rip),%rax        # 339c0 <_ZN4ours3memL11kKernelVmasE>
   3323a:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   33241:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   33248:	48 8d 05 61 08 00 00 	lea    0x861(%rip),%rax        # 33ab0 <_ZN4ours14g_phys_handoffE>
   3324f:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   33256:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   3325d:	48 3b 85 28 ff ff ff 	cmp    -0xd8(%rbp),%rax
   33264:	74 6c                	je     332d2 <_ZN4ours3memL17init_vmm_postheapEv+0x132>
   33266:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   3326d:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   33274:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   3327b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   3327f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        {  return pointer_;  }
   33283:	48 8b 38             	mov    (%rax),%rdi
            kaspace->root_area().reserve_subvma(region.name, region.base, region.size, region.rights);
   33286:	e8 d5 8d fd ff       	call   c060 <_ZN4ours3mem8VmAspace9root_areaEv>
   3328b:	48 89 c7             	mov    %rax,%rdi
   3328e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   33295:	48 8b 30             	mov    (%rax),%rsi
   33298:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   3329f:	48 8b 50 08          	mov    0x8(%rax),%rdx
   332a3:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   332aa:	48 8b 48 10          	mov    0x10(%rax),%rcx
   332ae:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   332b5:	4c 8b 40 18          	mov    0x18(%rax),%r8
   332b9:	e8 92 fe fd ff       	call   13150 <_ZN4ours3mem10VmRootArea14reserve_subvmaEPKcmmN4arch6paging8MmuFlagsE>
        for (auto &region: kKernelVmas) {
   332be:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   332c5:	48 83 c0 30          	add    $0x30,%rax
   332c9:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   332d0:	eb 84                	jmp    33256 <_ZN4ours3memL17init_vmm_postheapEv+0xb6>
   332d2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   332d9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   332dd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   332e1:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
            if (counter_) {
   332e8:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   332ed:	0f 84 90 01 00 00    	je     33483 <_ZN4ours3memL17init_vmm_postheapEv+0x2e3>
   332f3:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
                if (counter_->strong_count() == 1) {
   332fa:	48 8b 40 08          	mov    0x8(%rax),%rax
   332fe:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   33302:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
        {  return strong_counter_;  }
   33306:	48 83 c7 18          	add    $0x18,%rdi
   3330a:	e8 e1 6a fd ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   3330f:	48 83 f8 01          	cmp    $0x1,%rax
   33313:	0f 85 47 01 00 00    	jne    33460 <_ZN4ours3memL17init_vmm_postheapEv+0x2c0>
   33319:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
                    ThisWeak weak(pointer_, counter_);
   33320:	48 8b 08             	mov    (%rax),%rcx
   33323:	48 8b 40 08          	mov    0x8(%rax),%rax
   33327:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
   3332e:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
   33332:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   33336:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   3333a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   3333e:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
            : pointer_(ptr),
   33345:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   33349:	48 89 08             	mov    %rcx,(%rax)
              counter_(counter)
   3334c:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   33350:	48 89 48 08          	mov    %rcx,0x8(%rax)
            if (counter_) {
   33354:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   33359:	74 21                	je     3337c <_ZN4ours3memL17init_vmm_postheapEv+0x1dc>
   3335b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
                counter_->enable_weak();
   33362:	48 8b 40 08          	mov    0x8(%rax),%rax
   33366:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   3336a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
        {  weak_counter_  = 1;  }
   3336e:	48 83 c7 10          	add    $0x10,%rdi
   33372:	be 01 00 00 00       	mov    $0x1,%esi
   33377:	e8 54 6b fd ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   3337c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
                    counter_->disposer()(pointer_);
   33383:	48 8b 40 08          	mov    0x8(%rax),%rax
   33387:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   3338b:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
        {  return this->Base1::as_ref();  }
   3338f:	48 83 c7 08          	add    $0x8,%rdi
   33393:	e8 28 6c fd ff       	call   9fc0 <_ZN4ustl12EboOptimizerINS_12NullDisposerELb0EE6as_refEv>
   33398:	48 89 c7             	mov    %rax,%rdi
   3339b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   333a2:	48 8b 30             	mov    (%rax),%rsi
   333a5:	31 c0                	xor    %eax,%eax
   333a7:	e8 34 6a fd ff       	call   9de0 <_ZN4ustl12NullDisposerclEz>
   333ac:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   333b3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   333b7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   333bb:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
            if (counter_) {
   333c2:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   333c7:	0f 84 91 00 00 00    	je     3345e <_ZN4ours3memL17init_vmm_postheapEv+0x2be>
   333cd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
                if (counter_->weak_count() == 1) {
   333d4:	48 8b 40 08          	mov    0x8(%rax),%rax
   333d8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   333dc:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
        {  return weak_counter_;  }
   333e0:	48 83 c7 10          	add    $0x10,%rdi
   333e4:	e8 07 6a fd ff       	call   9df0 <_ZNKSt3__113__atomic_baseImLb0EEcvmB8nn210000Ev>
   333e9:	48 83 f8 01          	cmp    $0x1,%rax
   333ed:	75 4c                	jne    3343b <_ZN4ours3memL17init_vmm_postheapEv+0x29b>
   333ef:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
                    AllocatorTraits::deallocate(counter_->allocator(), pointer_);
   333f6:	48 8b 40 08          	mov    0x8(%rax),%rax
   333fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   333fe:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
        {  return this->Base2::as_ref();  }
   33402:	48 83 c7 09          	add    $0x9,%rdi
   33406:	e8 f5 6b fd ff       	call   a000 <_ZN4ustl12EboOptimizerINS_3mem9AllocatorIN4ours3mem8VmAspaceEEELb0EE6as_refEv>
   3340b:	48 89 c1             	mov    %rax,%rcx
   3340e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   33415:	48 8b 00             	mov    (%rax),%rax
   33418:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   3341c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   33420:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
   33427:	00 
   33428:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   3342c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   33430:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   33434:	e8 97 6b fd ff       	call   9fd0 <_ZN4ustl3mem9AllocatorIN4ours3mem8VmAspaceEE10deallocateEPS4_m>
                } else {
   33439:	eb 21                	jmp    3345c <_ZN4ours3memL17init_vmm_postheapEv+0x2bc>
   3343b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
                    counter_->dec_weak_ref();
   33442:	48 8b 40 08          	mov    0x8(%rax),%rax
   33446:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   3344a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
        {  weak_counter_ -= 1;  }
   3344e:	48 83 c7 10          	add    $0x10,%rdi
   33452:	be 01 00 00 00       	mov    $0x1,%esi
   33457:	e8 b4 6b fd ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   3345c:	eb 00                	jmp    3345e <_ZN4ours3memL17init_vmm_postheapEv+0x2be>
                } else {
   3345e:	eb 21                	jmp    33481 <_ZN4ours3memL17init_vmm_postheapEv+0x2e1>
   33460:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
                    counter_->dec_strong_ref();
   33467:	48 8b 40 08          	mov    0x8(%rax),%rax
   3346b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   3346f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
        {  strong_counter_  -= 1;  }
   33473:	48 83 c7 18          	add    $0x18,%rdi
   33477:	be 01 00 00 00       	mov    $0x1,%esi
   3347c:	e8 8f 6b fd ff       	call   a010 <_ZNSt3__113__atomic_baseImLb1EEmIB8nn210000Em>
            }
   33481:	eb 00                	jmp    33483 <_ZN4ours3memL17init_vmm_postheapEv+0x2e3>
    }
   33483:	48 81 c4 00 01 00 00 	add    $0x100,%rsp
   3348a:	5d                   	pop    %rbp
   3348b:	c3                   	ret
   3348c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000033490 <_ZN4ours17platform_init_pmmEv>:

    INIT_CODE
    auto platform_init_pmm() -> void {
   33490:	55                   	push   %rbp
   33491:	48 89 e5             	mov    %rsp,%rbp
   33494:	48 83 ec 10          	sub    $0x10,%rsp
        platform_init_pmm_with_config(ArchPmmZoneConfig());
   33498:	e8 63 26 fe ff       	call   15b00 <_ZN4oursL29platform_init_pmm_with_configIJN4ustl5EntryINS1_10KeyValPairINS_3mem15ZoneTypeMatcherILNS4_8ZoneTypeE0EEENS1_6traits16IntegralConstantImLm4096EEEEEEENS2_INS3_INS5_ILS6_1EEENS9_ImLm8388608EEEEEEENS2_INS3_INS5_ILS6_2EEENS9_ImLm16777216EEEEEEEEEEvNS1_8TypeListIJDpT_EEE>
    }
   3349d:	48 83 c4 10          	add    $0x10,%rsp
   334a1:	5d                   	pop    %rbp
   334a2:	c3                   	ret
   334a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   334aa:	00 00 00 
   334ad:	0f 1f 00             	nopl   (%rax)

00000000000334b0 <init_platform_early>:

#include <arch/x86/pic.hpp>

namespace ours {
    NO_MANGLE INIT_CODE
    auto init_platform_early() -> void {
   334b0:	55                   	push   %rbp
   334b1:	48 89 e5             	mov    %rsp,%rbp
   334b4:	48 83 ec 10          	sub    $0x10,%rsp
   334b8:	c7 45 fc 00 01 01 00 	movl   $0x10100,-0x4(%rbp)
   334bf:	bf 00 02 01 00       	mov    $0x10200,%edi
        return PlatformInitLevel(ustl::traits::UnderlyingTypeT<PlatformInitLevel>(level) - offset);
    }

    INIT_CODE FORCE_INLINE CXX11_CONSTEXPR
    static auto set_platform_init_level(PlatformInitLevel level) -> void {
        gktl::set_init_level(gktl::InitLevel(PlatformInitLevel::PrePmm));
   334c4:	e8 e7 27 fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>
   334c9:	c7 45 f8 00 02 01 00 	movl   $0x10200,-0x8(%rbp)
   334d0:	bf 00 02 01 00       	mov    $0x10200,%edi
   334d5:	e8 d6 27 fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>
        set_platform_init_level(PlatformInitLevel::StartUp);

        set_platform_init_level(PlatformInitLevel::PrePmm);
        platform_init_pmm();
   334da:	e8 b1 ff ff ff       	call   33490 <_ZN4ours17platform_init_pmmEv>
   334df:	c7 45 f4 00 03 01 00 	movl   $0x10300,-0xc(%rbp)
   334e6:	bf 00 02 01 00       	mov    $0x10200,%edi
   334eb:	e8 c0 27 fe ff       	call   15cb0 <_ZN4gktl14set_init_levelENS_9InitLevelE>
        set_platform_init_level(PlatformInitLevel::Pmm);
    }
   334f0:	48 83 c4 10          	add    $0x10,%rsp
   334f4:	5d                   	pop    %rbp
   334f5:	c3                   	ret
   334f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   334fd:	00 00 00 

0000000000033500 <init_platform>:

    NO_MANGLE INIT_CODE
    auto init_platform() -> void
    {}
   33500:	55                   	push   %rbp
   33501:	48 89 e5             	mov    %rsp,%rbp
   33504:	5d                   	pop    %rbp
   33505:	c3                   	ret
   33506:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   3350d:	00 00 00 

0000000000033510 <_ZN4gktl19init_static_objectsEv>:
    typedef void (*Ctor)();
    extern Ctor const CTORS_START[] LINK_NAME("__ctors_start");
    extern Ctor const CTORS_END[] LINK_NAME("__ctors_end");

    INIT_CODE
    auto init_static_objects() -> void {
   33510:	55                   	push   %rbp
   33511:	48 89 e5             	mov    %rsp,%rbp
   33514:	48 83 ec 10          	sub    $0x10,%rsp
        auto const n = CTORS_END - CTORS_START;
   33518:	48 8d 05 d1 05 00 00 	lea    0x5d1(%rip),%rax        # 33af0 <__ctors_start>
   3351f:	48 8d 0d f2 05 00 00 	lea    0x5f2(%rip),%rcx        # 33b18 <__ctors_end>
   33526:	48 29 c1             	sub    %rax,%rcx
   33529:	48 c1 f9 03          	sar    $0x3,%rcx
   3352d:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
        for (auto ctor = CTORS_START; ctor != CTORS_END; ++ctor) {
   33531:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   33535:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   33539:	48 8d 0d d8 05 00 00 	lea    0x5d8(%rip),%rcx        # 33b18 <__ctors_end>
   33540:	48 29 c8             	sub    %rcx,%rax
   33543:	74 16                	je     3355b <_ZN4gktl19init_static_objectsEv+0x4b>
   33545:	eb 00                	jmp    33547 <_ZN4gktl19init_static_objectsEv+0x37>
            (*ctor)();
   33547:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   3354b:	ff 10                	call   *(%rax)
        for (auto ctor = CTORS_START; ctor != CTORS_END; ++ctor) {
   3354d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   33551:	48 83 c0 08          	add    $0x8,%rax
   33555:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   33559:	eb da                	jmp    33535 <_ZN4gktl19init_static_objectsEv+0x25>
        }
    }
   3355b:	48 83 c4 10          	add    $0x10,%rsp
   3355f:	5d                   	pop    %rbp
   33560:	c3                   	ret
   33561:	90                   	nop

0000000000033562 <_ZN4ours8CpuLocal10init_earlyEv>:
    auto CpuLocal::init_early() -> void {
   33562:	55                   	push   %rbp
   33563:	48 89 e5             	mov    %rsp,%rbp
   33566:	48 83 ec 30          	sub    $0x30,%rsp
   3356a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   33571:	00 
            arch_cpu_local_install(offset);
   33572:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   33576:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        MsrIo::write(MsrRegAddr::IA32KernelGsBase, offset);
   3357a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   3357e:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
   33583:	e8 68 fc fc ff       	call   31f0 <_ZN4arch5MsrIo5writeImEEvNS_10MsrRegAddrET_>
        ustl::algorithms::fill(s_cpu_offset.begin(), s_cpu_offset.end(), 0);
   33588:	48 8d 3d 51 10 00 00 	lea    0x1051(%rip),%rdi        # 345e0 <_ZN4ours8CpuLocal12s_cpu_offsetE>
   3358f:	e8 2c 00 fd ff       	call   35c0 <_ZNSt3__15arrayIlLm32EE5beginB8nn210000Ev>
   33594:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   33598:	48 8d 3d 41 10 00 00 	lea    0x1041(%rip),%rdi        # 345e0 <_ZN4ours8CpuLocal12s_cpu_offsetE>
   3359f:	e8 3c 00 fd ff       	call   35e0 <_ZNSt3__15arrayIlLm32EE3endB8nn210000Ev>
   335a4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   335a8:	48 89 c6             	mov    %rax,%rsi
   335ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   335b2:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
   335b6:	e8 d5 ff fc ff       	call   3590 <_ZNSt3__14fillB8nn210000IPliEEvT_S2_RKT0_>
        ustl::algorithms::fill(s_group_offset.begin(), s_group_offset.end(), 0);
   335bb:	48 8d 3d 1e 11 00 00 	lea    0x111e(%rip),%rdi        # 346e0 <_ZN4ours8CpuLocal14s_group_offsetE>
   335c2:	e8 f9 ff fc ff       	call   35c0 <_ZNSt3__15arrayIlLm32EE5beginB8nn210000Ev>
   335c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   335cb:	48 8d 3d 0e 11 00 00 	lea    0x110e(%rip),%rdi        # 346e0 <_ZN4ours8CpuLocal14s_group_offsetE>
   335d2:	e8 09 00 fd ff       	call   35e0 <_ZNSt3__15arrayIlLm32EE3endB8nn210000Ev>
   335d7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   335db:	48 89 c6             	mov    %rax,%rsi
   335de:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
   335e5:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   335e9:	e8 a2 ff fc ff       	call   3590 <_ZNSt3__14fillB8nn210000IPliEEvT_S2_RKT0_>
    }
   335ee:	48 83 c4 30          	add    $0x30,%rsp
   335f2:	5d                   	pop    %rbp
   335f3:	c3                   	ret

00000000000335f4 <_ZN4ours8CpuLocal4initERKNS_7CpuMaskE>:
    auto CpuLocal::init(CpuMask const &cpus) -> Status {
   335f4:	55                   	push   %rbp
   335f5:	48 89 e5             	mov    %rsp,%rbp
   335f8:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   335ff:	48 89 7d 80          	mov    %rdi,-0x80(%rbp)
   33603:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
        mem::NodeMask groups;
   3360a:	e8 01 00 fd ff       	call   3610 <_ZN4ours3mem8NodeMaskC2Ev>
        for_each_cpu(cpus, [] (CpuNum cpunum) {
   3360f:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
   33613:	48 8d b5 77 ff ff ff 	lea    -0x89(%rbp),%rsi
   3361a:	e8 81 fd fc ff       	call   33a0 <_ZN4ours12for_each_cpuIZNS_8CpuLocal4initERKNS_7CpuMaskEE3$_0Qsr4ustl6traitsE9InvocableIT_jEEEvS4_OS6_>
            auto const thiscpu = arch_current_cpu();
   3361f:	e8 8c 0f fd ff       	call   45b0 <_ZN4ours16arch_current_cpuEv>
   33624:	89 45 8c             	mov    %eax,-0x74(%rbp)
            arch_install(s_cpu_offset[thiscpu]);
   33627:	8b 45 8c             	mov    -0x74(%rbp),%eax
   3362a:	89 c6                	mov    %eax,%esi
   3362c:	48 8d 3d ad 0f 00 00 	lea    0xfad(%rip),%rdi        # 345e0 <_ZN4ours8CpuLocal12s_cpu_offsetE>
   33633:	48 89 bd 60 ff ff ff 	mov    %rdi,-0xa0(%rbp)
   3363a:	e8 91 fb fc ff       	call   31d0 <_ZNSt3__15arrayIlLm32EEixB8nn210000Em>
   3363f:	48 8b 00             	mov    (%rax),%rax
   33642:	48 89 45 90          	mov    %rax,-0x70(%rbp)
            arch_cpu_local_install(offset);
   33646:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   3364a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   3364e:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
   33652:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
   33657:	e8 94 fb fc ff       	call   31f0 <_ZN4arch5MsrIo5writeImEEvNS_10MsrRegAddrET_>
   3365c:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
            *access(&s_current_cpu_offset) = s_cpu_offset[thiscpu];
   33663:	8b 45 8c             	mov    -0x74(%rbp),%eax
   33666:	89 c6                	mov    %eax,%esi
   33668:	e8 63 fb fc ff       	call   31d0 <_ZNSt3__15arrayIlLm32EEixB8nn210000Em>
   3366d:	48 8b 00             	mov    (%rax),%rax
   33670:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   33677:	48 8d 0d 02 02 00 00 	lea    0x202(%rip),%rcx        # 33880 <_ZN4ours8CpuLocal20s_current_cpu_offsetE>
   3367e:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
                reinterpret_cast<u8 *>(object) + read(s_current_cpu_offset)
   33682:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   33686:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
            return arch_cpu_local_read<Integral>(reinterpret_cast<usize>(&integer));
   3368a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   3368e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
        return arch::read_gs_offset<Integer>(offset);
   33692:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   33696:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   3369a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   3369e:	65 48 8b 09          	mov    %gs:(%rcx),%rcx
   336a2:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
                reinterpret_cast<u8 *>(object) + read(s_current_cpu_offset)
   336a6:	48 03 45 e0          	add    -0x20(%rbp),%rax
            auto const ptr = reinterpret_cast<T *>(
   336aa:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
            DEBUG_ASSERT(ustl::mem::is_aligned(ptr, alignof(T)), "Invalid cpu local data pointer");
   336ae:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   336b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   336b6:	48 c7 45 c8 08 00 00 	movq   $0x8,-0x38(%rbp)
   336bd:	00 
    {  return is_aligned(usize(n), a);}
   336be:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   336c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   336c6:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   336ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    { return (n & (a - 1)) == 0; }
   336ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   336d2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   336d6:	48 83 e9 01          	sub    $0x1,%rcx
   336da:	48 21 c8             	and    %rcx,%rax
   336dd:	48 83 f8 00          	cmp    $0x0,%rax
   336e1:	74 1d                	je     33700 <_ZN4ours8CpuLocal4initERKNS_7CpuMaskE+0x10c>
   336e3:	48 8d 35 fe b6 ff ff 	lea    -0x4902(%rip),%rsi        # 2ede8 <.L.str>
   336ea:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
   336ee:	e8 8d fb fc ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   336f3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   336f7:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   336fb:	e8 30 fb fc ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   33700:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
            return ptr;
   33707:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            *access(&s_current_cpu_offset) = s_cpu_offset[thiscpu];
   3370b:	48 89 08             	mov    %rcx,(%rax)

        init_percpu();
        return Status::Ok;
   3370e:	31 c0                	xor    %eax,%eax
   33710:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
   33717:	5d                   	pop    %rbp
   33718:	c3                   	ret
   33719:	90                   	nop

000000000003371a <_ZN4ours3mem6PmZone16init_frame_cacheEv>:
    {}
   3371a:	55                   	push   %rbp
   3371b:	48 89 e5             	mov    %rsp,%rbp
   3371e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   33722:	5d                   	pop    %rbp
   33723:	c3                   	ret

0000000000033724 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm>:
    {
   33724:	55                   	push   %rbp
   33725:	48 89 e5             	mov    %rsp,%rbp
   33728:	48 83 ec 60          	sub    $0x60,%rsp
   3372c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   33730:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   33734:	89 55 cc             	mov    %edx,-0x34(%rbp)
   33737:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   3373b:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
   3373f:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
   33743:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   33747:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        DEBUG_ASSERT(type < ZoneType::MaxNumZoneType);
   3374b:	83 7d cc 03          	cmpl   $0x3,-0x34(%rbp)
   3374f:	7c 05                	jl     33756 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0x32>
   33751:	e8 aa f9 fc ff       	call   3100 <_ZN4ours5panicEv>
   33756:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
        canary_.verify();
   3375a:	e8 41 a0 fd ff       	call   d7a0 <_ZNK4gktl6CanaryILj1517252197EE6verifyEv>
        name_ = to_string(type);
   3375f:	8b 45 cc             	mov    -0x34(%rbp),%eax
   33762:	89 45 f4             	mov    %eax,-0xc(%rbp)
        switch (type) {
   33765:	8b 45 f4             	mov    -0xc(%rbp),%eax
   33768:	89 45 a4             	mov    %eax,-0x5c(%rbp)
   3376b:	85 c0                	test   %eax,%eax
   3376d:	74 16                	je     33785 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0x61>
   3376f:	eb 00                	jmp    33771 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0x4d>
   33771:	8b 45 a4             	mov    -0x5c(%rbp),%eax
   33774:	83 e8 01             	sub    $0x1,%eax
   33777:	74 19                	je     33792 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0x6e>
   33779:	eb 00                	jmp    3377b <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0x57>
   3377b:	8b 45 a4             	mov    -0x5c(%rbp),%eax
   3377e:	83 e8 02             	sub    $0x2,%eax
   33781:	74 1c                	je     3379f <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0x7b>
   33783:	eb 27                	jmp    337ac <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0x88>
            case ZoneType::Dma:     return "Dma";
   33785:	48 8d 05 fa b7 ff ff 	lea    -0x4806(%rip),%rax        # 2ef86 <.L.str>
   3378c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   33790:	eb 37                	jmp    337c9 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0xa5>
            case ZoneType::Dma32:   return "Dma32";
   33792:	48 8d 05 f1 b7 ff ff 	lea    -0x480f(%rip),%rax        # 2ef8a <.L.str.1>
   33799:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   3379d:	eb 2a                	jmp    337c9 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0xa5>
            case ZoneType::Normal:  return "Normal";
   3379f:	48 8d 05 ea b7 ff ff 	lea    -0x4816(%rip),%rax        # 2ef90 <.L.str.2>
   337a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   337aa:	eb 1d                	jmp    337c9 <_ZN4ours3mem6PmZone4initElNS0_8ZoneTypeEmmm+0xa5>
        OX_PANIC("Anonymous zone type is not allowed.");
   337ac:	48 8d 35 e4 b7 ff ff 	lea    -0x481c(%rip),%rsi        # 2ef97 <.L.str.3>
   337b3:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   337b7:	e8 c4 fa fc ff       	call   3280 <_ZNSt3__117basic_string_viewIcNS_11char_traitsIcEEEC2B8nn210000EPKc>
   337bc:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   337c0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   337c4:	e8 67 fa fc ff       	call   3230 <_ZN4ours5panicIJEEEvNSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEDpOT_>
   337c9:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    }
   337cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   337d1:	48 89 47 08          	mov    %rax,0x8(%rdi)
        nid_ = nid;
   337d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   337d9:	48 89 47 10          	mov    %rax,0x10(%rdi)
        start_pfn_ = start_pfn;
   337dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   337e1:	48 89 47 18          	mov    %rax,0x18(%rdi)
        spanned_frames_ = end_pfn - start_pfn;
   337e5:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   337e9:	48 2b 75 c0          	sub    -0x40(%rbp),%rsi
   337ed:	48 83 c7 30          	add    $0x30,%rdi
   337f1:	e8 da 66 fd ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   337f6:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
        present_frames_ = present_frames;
   337fa:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
   337fe:	48 83 c7 20          	add    $0x20,%rdi
   33802:	e8 c9 66 fd ff       	call   9ed0 <_ZNSt3__16atomicImEaSB8nn210000Em>
   33807:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
        init_frame_cache();
   3380b:	e8 0a ff ff ff       	call   3371a <_ZN4ours3mem6PmZone16init_frame_cacheEv>
    }
   33810:	48 83 c4 60          	add    $0x60,%rsp
   33814:	5d                   	pop    %rbp
   33815:	c3                   	ret

0000000000033816 <_ZN4ours3mem8VmAspace18init_kernel_aspaceEv>:
    {
   33816:	55                   	push   %rbp
   33817:	48 89 e5             	mov    %rsp,%rbp
   3381a:	48 83 ec 20          	sub    $0x20,%rsp
        auto const flags = VmasFlags::Kernel;
   3381e:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   33825:	00 
   33826:	48 8d 05 4c 51 00 00 	lea    0x514c(%rip),%rax        # 38979 <_ZN4ours3memL15S_KERNEL_ASPACEE>
   3382d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   33831:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        auto kernel_aspace = S_KERNEL_ASPACE.data();
   33835:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        new (kernel_aspace) Self(KERNEL_ASPACE_BASE, KERNEL_ASPACE_SIZE, flags, "Kernel Aspace");
   33839:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   3383d:	4c 8d 05 c0 b7 ff ff 	lea    -0x4840(%rip),%r8        # 2f004 <.L.str>
   33844:	48 be 00 00 00 00 80 	movabs $0xffffff8000000000,%rsi
   3384b:	ff ff ff 
   3384e:	48 ba 00 00 00 00 80 	movabs $0x8000000000,%rdx
   33855:	00 00 00 
   33858:	b9 01 00 00 00       	mov    $0x1,%ecx
   3385d:	e8 4e e0 fd ff       	call   118b0 <_ZN4ours3mem8VmAspaceC1EmmNS0_9VmasFlagsEPKc>
        kernel_aspace->init();
   33862:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   33866:	e8 65 de fd ff       	call   116d0 <_ZN4ours3mem8VmAspace4initEv>
        Self::KERNEL_ASPACE_ = kernel_aspace;
   3386b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   3386f:	48 89 05 e2 50 00 00 	mov    %rax,0x50e2(%rip)        # 38958 <_ZN4ours3mem8VmAspace14KERNEL_ASPACE_E>
    }
   33876:	48 83 c4 20          	add    $0x20,%rsp
   3387a:	5d                   	pop    %rbp
   3387b:	c3                   	ret
